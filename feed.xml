<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary's blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>https://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="https://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="https://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>Slides Available: Code PaLOUsa 2018</title>
        <description>&lt;p&gt;I have &lt;a href=&quot;https://github.com/StephenCleary/Presentations/tree/0959859f132483d293bc35e1ad7284d18084f632/Understanding%20Ethereum%20Application%20Development&quot;&gt;uploaded the slides&lt;/a&gt; for the &lt;a href=&quot;http://www.codepalousa.com/Sessions/1115&quot;&gt;talk I gave a couple weeks ago at Code PaLOUsa 2018, entitled “Understanding Ethereum Application Development”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk is more of a conceptual overview of Ethereum application development, covering questions like “what does it mean to &lt;em&gt;run&lt;/em&gt; on the blockchain?” and “what’s the point of an oracle?” It does not cover the details of the Solidity language.&lt;/p&gt;

&lt;p&gt;(Thanks to &lt;a href=&quot;https://twitter.com/carlowahlstedt&quot;&gt;@carlowahlstedt&lt;/a&gt; for reminding me to put this up!)&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Apr 2018 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2018/04/slides-available-codepalousa-2018.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/04/slides-available-codepalousa-2018.html</guid>
      </item>
    
      <item>
        <title>Happy Birthday Async</title>
        <description>&lt;p&gt;Today I’d like to say happy birthday to the C# &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords! They officially turn five years old today! C# and VB both officially adopted them on September 12, 2012.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords themselves have a slightly longer history; they were originally introduced in F# on April 12th, 2010. &lt;code&gt;async&lt;/code&gt; slowly moved into C#/VB, and from there they spread to Python, TypeScript, Hack, Dart, and (recently) JavaScript. Python was a huge win for &lt;code&gt;async&lt;/code&gt;; the Python community is quick to pick up (or invent) the best language features, and they have one of the best language-improvement processes out there. Also, I find the Hack adoption particularly amusing - I mean, even &lt;em&gt;PHP&lt;/em&gt; has &lt;code&gt;async&lt;/code&gt; these days!&lt;/p&gt;

&lt;p&gt;The jury is still out on whether C++ will pick up &lt;code&gt;async&lt;/code&gt;, and Java just seems to move at a snail’s pace these days.&lt;/p&gt;

&lt;h2 id=&quot;remembering-ye-olde-async-days&quot;&gt;Remembering Ye Olde Async Days&lt;/h2&gt;

&lt;p&gt;My original &lt;a href=&quot;/2012/02/async-and-await.html&quot;&gt;intro to &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; post&lt;/a&gt; went live on my blog about five and a half years ago! It’s still fully relevant, which is unusual for a five-year-old blog post. And even today, it brings more traffic to my blog than any other post (about 15% of all my blog traffic is just for that one post).&lt;/p&gt;

&lt;p&gt;My, how much has changed since that blog post was published! At that time, &lt;code&gt;async&lt;/code&gt; was an experimental language modification that required you to install a Community Technology Preview (read: unsupported) package that changed the compilers and language features used by Visual Studio 2010. That is, unless you already installed updates to VS2010, in which case the Async CTP installation would just not work. Until they fixed it, and then it worked. Until the next VS2010 update, when it broke again. No, seriously, it was that bad! :)&lt;/p&gt;

&lt;p&gt;Oh, and once (if) you managed to get the Async CTP &lt;em&gt;installed&lt;/em&gt;, there were still &lt;a href=&quot;https://blogs.msdn.microsoft.com/lucian/2011/04/17/async-ctp-refresh-what-bugs-remain-in-it/&quot;&gt;a number of bugs&lt;/a&gt;. And if you encountered them, there wasn’t much you could do about it: the resolution was essentially “don’t do that.” Of particular note was &lt;em&gt;using multiple &lt;code&gt;await&lt;/code&gt;s in expressions&lt;/em&gt;, like Lucian’s example &lt;code&gt;var x = await f() + await g();&lt;/code&gt; Yeah, that didn’t even work. Your rule-of-thumb was one &lt;code&gt;await&lt;/code&gt; per statement, and it was best if that statement did nothing else. &lt;code&gt;var fx = await f(); var gx = await g(); var x = fx + gx;&lt;/code&gt; FTW!&lt;/p&gt;

&lt;p&gt;Also, overload resolution wasn’t quite right, especially for asynchronous delegate types. But there were no &lt;code&gt;async&lt;/code&gt; lambdas anyway. And there was no &lt;code&gt;dynamic&lt;/code&gt; compatibility with &lt;code&gt;await&lt;/code&gt; at all. And a lot of compiler safeguards were missing (e.g., &lt;code&gt;async void Main&lt;/code&gt; was allowed). And the debugger support was &lt;em&gt;horrible&lt;/em&gt; - really, there was no debugging support &lt;em&gt;at all&lt;/em&gt; back then.&lt;/p&gt;

&lt;p&gt;Today, &lt;code&gt;async&lt;/code&gt; is truly a first-class citizen of C# and VB. With every release of Visual Studio, the debugger support for &lt;code&gt;async&lt;/code&gt; code gets better and better. Tracing systems like Application Insights “just work” coordinating traces across asynchronous code. We recently got &lt;a href=&quot;https://github.com/ljw1004/roslyn/blob/features/async-return/docs/specs/feature%20-%20arbitrary%20async%20returns.md&quot;&gt;value-type &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; equivalents&lt;/a&gt;, and new enhancements are on the horizon: better code generation around the &lt;code&gt;async&lt;/code&gt; state machine, &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/261&quot;&gt;&lt;code&gt;async&lt;/code&gt; enumerators&lt;/a&gt;, … the future is bright!&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Sep 2017 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2017/09/happy-birthday-async.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/09/happy-birthday-async.html</guid>
      </item>
    
      <item>
        <title>Azure Functions SPA</title>
        <description>&lt;p&gt;It seems to me that Azure Functions are a perfect match for single-page applications. I believe SPAs are going to be a natural and common use case for Azure Functions in the near future.&lt;/p&gt;

&lt;p&gt;I had to set up a SPA with an API running on Azure Functions recently, and it took me a bit to figure out all the pieces. Without further ado…&lt;/p&gt;

&lt;h2 id=&quot;host-the-api&quot;&gt;Host the API&lt;/h2&gt;

&lt;p&gt;The first step is to define your API and host it in Azure Functions. &lt;a href=&quot;https://blogs.msdn.microsoft.com/appserviceteam/2017/08/14/azure-functions-tools-released-for-visual-studio-2017-update-3/&quot;&gt;The Visual Studio tooling is out of preview now&lt;/a&gt;, and setting up a C# API is straightforward. Personally, I set up automated deployment from GitHub to my Azure Functions app.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Tip: If you want to deploy from a &lt;em&gt;subdirectory&lt;/em&gt; of a GitHub repository, &lt;a href=&quot;/2017/08/azure-functions-github-subfolder.html&quot;&gt;see this post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;host-the-spa&quot;&gt;Host the SPA&lt;/h2&gt;

&lt;p&gt;The second step is to host the SPA. I’m hosting mine on a static file server, which is easily done for free. With static file hosting, I can keep assets in external files without having to handle all of that in my Azure Functions. Or you can use Azure Blob Storage / Amazon S3 for a really cheap hosting solution, too.&lt;/p&gt;

&lt;h2 id=&quot;serve-through-azure-functions-proxies&quot;&gt;Serve through Azure Functions Proxies&lt;/h2&gt;

&lt;p&gt;The final step is to set up proxies that will forward API calls to the actual Azure Functions API or to the SPA. In your Azure Functions App, turn on Proxies (currently in preview). Then, in your Functions App project in Visual Studio, make a copy of the &lt;code&gt;host.json&lt;/code&gt; file, rename it to &lt;code&gt;proxies.json&lt;/code&gt;, and replace its contents with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://json.schemastore.org/proxies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;proxies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;matchCondition&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;route&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/api/{*url}&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;backendUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://%WEBSITE_HOSTNAME%/api/{url}&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;matchCondition&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;route&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{*url}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;methods&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OPTIONS&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;backendUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://%SPA_HOST%/&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;appResources&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;matchCondition&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;route&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/static/{*url}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;methods&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OPTIONS&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;backendUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://%SPA_HOST%/static/{url}&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only part you need to change is &lt;code&gt;%SPA_HOST%&lt;/code&gt; - you can change this to where your SPA is hosted, or just keep the file as-is and add an application setting &lt;code&gt;SPA_HOST&lt;/code&gt; that points to your SPA.&lt;/p&gt;

&lt;p&gt;This will set up three proxies: one for your API calls, one to serve up the SPA HTML, and one to serve up SPA static resources (JavaScript bundle, images, etc).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;api&lt;/code&gt; proxy will forward all requests starting with &lt;code&gt;/api&lt;/code&gt; to the actual Azure Function implementations (using &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/Azure-runtime-environment&quot;&gt;the predefined &lt;code&gt;WEBSITE_HOSTNAME&lt;/code&gt; setting&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;appResources&lt;/code&gt; proxy will forward all requests starting with &lt;code&gt;/static&lt;/code&gt; to your SPA host, preserving the remainder of your url.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; proxy will forward all remaining requests to the SPA.&lt;/p&gt;

&lt;p&gt;A brief note on priorities: Azure Functions Proxies use the same &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2#route-order&quot;&gt;route ordering rules as WebAPI 2 attribute routing&lt;/a&gt;. So the &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;appResources&lt;/code&gt; proxies are always evaluated before the &lt;code&gt;app&lt;/code&gt; proxy because they start with constant path segment prefixes (the &lt;code&gt;api&lt;/code&gt; proxy starts with an &lt;code&gt;/api/&lt;/code&gt; path segment, and the &lt;code&gt;appResources&lt;/code&gt; proxy starts with a &lt;code&gt;/static/&lt;/code&gt; path segment). This way, the &lt;code&gt;app&lt;/code&gt; proxy doesn’t intercept &lt;code&gt;/api&lt;/code&gt; and &lt;code&gt;/static&lt;/code&gt; requests.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you have a single Azure Functions App instance that serves both a SPA and its API! Since both your SPA app and your Azure Functions API exist on the same domain, you don’t need to open up CORS for your API.&lt;/p&gt;

&lt;p&gt;Requests such as &lt;code&gt;/api/bob&lt;/code&gt; will be forwarded to your Azure Function &lt;code&gt;bob&lt;/code&gt;, and requests such as &lt;code&gt;/&lt;/code&gt; will be forwarded to your main SPA HTML page. Requests such as &lt;code&gt;/some/long/path&lt;/code&gt; will &lt;em&gt;also&lt;/em&gt; be forwarded to your SPA HTML page, so you can easily use HTML5 history routing instead of hash routing in your SPA, and your app will be served properly when users refresh the page.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Aug 2017 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2017/08/azure-functions-spa.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/08/azure-functions-spa.html</guid>
      </item>
    
      <item>
        <title>Continuously Deploy Azure Functions from a GitHub Subfolder</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-continuous-deployment&quot;&gt;You can set up continuous deployment for Azure Functions from any branch of a GitHub repository&lt;/a&gt;. Unfortunately, the deployment system will either just deploy your files (&lt;code&gt;Found solution 'D:\home\site\repository\src\Sample.sln' with no deployable projects. Deploying files instead.&lt;/code&gt;) or may try to deploy the wrong project (e.g., if you have a console app in your solution).&lt;/p&gt;

&lt;p&gt;You can use a different branch in GitHub for the output of your solution, but this is awkward. The solution I chose is to deploy the Azure Functions App from a &lt;em&gt;specific subfolder&lt;/em&gt; of a GitHub repository. You can do this by &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/Customizing-deployments&quot;&gt;adding a &lt;code&gt;.deployment&lt;/code&gt; file in the root of your repository that tells the deployment system where your Azure Functions App is&lt;/a&gt;. E.g.:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;[config]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/FunctionApp1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you run into deployment errors like &lt;code&gt;The &quot;Move&quot; task failed unexpectedly. (System.Runtime.InteropServices.COMException (0x800700A1): The specified path is invalid.)&lt;/code&gt; when the &lt;code&gt;_GenerateFunctionsPostBuild&lt;/code&gt; target tries to copy your project output, then &lt;a href=&quot;https://stackoverflow.com/questions/45743877/azure-function-ci-build-error-cannot-create-a-file-when-that-file-already-exis&quot;&gt;ensure you’re using v1.0.1 or later of &lt;code&gt;Microsoft.NET.Sdk.Functions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Aug 2017 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2017/08/azure-functions-github-subfolder.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/08/azure-functions-github-subfolder.html</guid>
      </item>
    
      <item>
        <title>Announcing AsyncTime</title>
        <description>&lt;p&gt;A short post today just to announce a new project of mine: &lt;a href=&quot;https://vimeo.com/ondemand/asynctime&quot;&gt;AsyncTime!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/ondemand/asynctime&quot;&gt;AsyncTime&lt;/a&gt; is a series of short videos covering subjects that work better in a video format rather than a blog post format. Some of the videos will be only for subscribers, but I’m kicking off the channel with several big-picture videos that are free for everyone!&lt;/p&gt;

&lt;p&gt;I hope this is a benefit for you; I’m certainly looking forward to it!&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2017/07/announcing-asynctime.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/07/announcing-asynctime.html</guid>
      </item>
    
      <item>
        <title>Happy birthday, iPhone!</title>
        <description>&lt;p&gt;Today marks the 10th birthday of the iPhone! My, how much has changed in a single decade… This blog deals with all things &lt;code&gt;async&lt;/code&gt;, and the iPhone has been an important part of &lt;code&gt;async&lt;/code&gt; adoption.&lt;/p&gt;

&lt;h2 id=&quot;what-does-the-iphone-have-to-do-with-async&quot;&gt;What does the iPhone have to do with async?&lt;/h2&gt;

&lt;p&gt;Glad you asked!&lt;/p&gt;

&lt;p&gt;The adoption of &lt;code&gt;async&lt;/code&gt; has accelerated considerably over the last few years, with no seeming end in sight. I’ve discussed this phenomenon several times in a couple of my talks, and I’m recording a more permanent discussion of it that will be released shortly.&lt;/p&gt;

&lt;p&gt;To put it simply, &lt;code&gt;async&lt;/code&gt; is all about freeing up threads. This results in two major benefits: on the server side, &lt;code&gt;async&lt;/code&gt; frees up request threads so that the server can scale further (and faster) while requiring fewer resources; on the client side, &lt;code&gt;async&lt;/code&gt; frees up the UI thread so that it can remain responsive to the user.&lt;/p&gt;

&lt;p&gt;Finally, there have been two broad changes in the types of software being written. The first is cloud computing, which gives direct financial benefits to servers that require fewer resources - an ideal scenario for &lt;code&gt;async&lt;/code&gt; adoption.&lt;/p&gt;

&lt;p&gt;The second is mobile applications. Unlike traditional desktop apps, mobile apps &lt;em&gt;must&lt;/em&gt; be responsive to the user - an ideal scenario for &lt;code&gt;async&lt;/code&gt; adoption.&lt;/p&gt;

&lt;p&gt;These two movements - cloud computing and mobile - have encouraged &lt;code&gt;async&lt;/code&gt; adoption to move at a faster rate than it could have otherwise.&lt;/p&gt;

&lt;p&gt;So, happy birthday, iPhone, and thanks for all you’ve done!&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jun 2017 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2017/06/happy-birthday-iphone.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/06/happy-birthday-iphone.html</guid>
      </item>
    
      <item>
        <title>Async JavaScript</title>
        <description>&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords first hit the scene way back in 2010, when it was introduced in F#. C# and VB followed fairly quickly in 2012, with Python and TypeScript adopting them in 2015.&lt;/p&gt;

&lt;p&gt;Tuesday or Wednesday next week (the 27th and 28th of June), &lt;code&gt;async&lt;/code&gt; should officially become a part of JavaScript!&lt;/p&gt;

&lt;p&gt;That is, the &lt;a href=&quot;https://github.com/tc39/ecmascript-asyncawait&quot;&gt;&lt;code&gt;async&lt;/code&gt; proposal&lt;/a&gt; &lt;a href=&quot;https://github.com/tc39/proposals/blob/master/finished-proposals.md&quot;&gt;has reached&lt;/a&gt; &lt;a href=&quot;https://tc39.github.io/process-document/&quot;&gt;Stage 4&lt;/a&gt;, is included in the &lt;a href=&quot;https://tc39.github.io/ecma262/2017/&quot;&gt;ES2017 language specification&lt;/a&gt;, and is expected to be ratified &lt;a href=&quot;https://www.ecma-international.org/memento/Ecma_meeting_calendar.htm&quot;&gt;next week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, JavaScript being what it is, lots of people have been &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-async-to-generator/&quot;&gt;using it for some time already&lt;/a&gt;. Chrome even has &lt;a href=&quot;https://developers.google.com/web/fundamentals/getting-started/primers/async-functions&quot;&gt;native support&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;JavaScript is perhaps the most widely-used language today, and this marks a big step forward in the &lt;code&gt;async&lt;/code&gt; invasion. Stay tuned on this blog for JavaScript-related &lt;code&gt;async&lt;/code&gt; tips in addition to the regular .NET ones! :)&lt;/p&gt;

&lt;p&gt;Way to go, &lt;code&gt;async&lt;/code&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2017/06/async-javascript.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/06/async-javascript.html</guid>
      </item>
    
      <item>
        <title>ASP.NET Core SynchronizationContext</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://davidpine.net/&quot;&gt;David Pine&lt;/a&gt; pinged me on Slack the other day, suggesting that I write a blog post about the &lt;code&gt;SynchronizationContext&lt;/code&gt; in ASP.NET Core. So, here it is!&lt;/p&gt;

&lt;h2 id=&quot;there-isnt-one&quot;&gt;There Isn’t One&lt;/h2&gt;

&lt;p&gt;My inital reply was just “well, that would be a short post!” Because there &lt;em&gt;isn’t&lt;/em&gt; a &lt;code&gt;SynchronizationContext&lt;/code&gt; in ASP.NET Core.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/NoAspNetCoreSyncCtx.png&quot;&gt;&lt;img src=&quot;/assets/NoAspNetCoreSyncCtx.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-no-synchronizationcontext&quot;&gt;Why No SynchronizationContext?&lt;/h2&gt;

&lt;p&gt;Stepping back a moment, a good question to ask is &lt;em&gt;why&lt;/em&gt; the &lt;code&gt;AspNetSynchronizationContext&lt;/code&gt; was removed in ASP.NET Core. While I’m not privy to the team’s internal discussions on the subject, I assume it is for two reasons: performance and simplicity. Consider the performance aspect first.&lt;/p&gt;

&lt;p&gt;When an asynchronous handler resumes execution on legacy ASP.NET, the continuation is &lt;em&gt;queued&lt;/em&gt; to the request context. The continuation must wait for any other continuations that have already been queued (only one may run at a time). When it is ready to run, a thread is taken from the thread pool, &lt;em&gt;enters&lt;/em&gt; the request context, and then resumes executing the handler. That “re-entering” the request context involves a number of housekeeping tasks, such as setting &lt;code&gt;HttpContext.Current&lt;/code&gt; and the current thread’s identity and culture.&lt;/p&gt;

&lt;p&gt;With the contextless ASP.NET Core approach, when an asynchronous handler resumes execution, a thread is taken from the thread pool and executes the continuation. The context queue is avoided, and there is no “entering” of the request context necessary. In addition, the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; mechanism is highly optimized for the contextless scenario. There’s simply less work to do for asynchronous requests.&lt;/p&gt;

&lt;p&gt;Simplicity is another aspect of this decision. &lt;code&gt;AspNetSynchronizationContext&lt;/code&gt; worked well, but it had some tricky parts, &lt;a href=&quot;http://www.hanselman.com/blog/SystemThreadingThreadCurrentPrincipalVsSystemWebHttpContextCurrentUserOrWhyFormsAuthenticationCanBeSubtle.aspx&quot;&gt;particularly around identity management&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OK, so there’s no &lt;code&gt;SynchronizationContext&lt;/code&gt;. What does that mean for developers?&lt;/p&gt;

&lt;h2 id=&quot;you-can-block-on-async-code---but-you-shouldnt&quot;&gt;You Can Block on Async Code - But You Shouldn’t&lt;/h2&gt;

&lt;p&gt;The first and most obvious consequence is that there’s no context captured by &lt;code&gt;await&lt;/code&gt;. This means that &lt;a href=&quot;/2012/07/dont-block-on-async-code.html&quot;&gt;blocking on asynchronous code won’t cause a deadlock.&lt;/a&gt; You can use &lt;code&gt;Task.GetAwaiter().GetResult()&lt;/code&gt; (or &lt;code&gt;Task.Wait&lt;/code&gt; or &lt;code&gt;Task&amp;lt;T&amp;gt;.Result&lt;/code&gt;) without fear of deadlock.&lt;/p&gt;

&lt;p&gt;However, you &lt;em&gt;shouldn’t&lt;/em&gt;. Because the moment you block on asynchronous code, you’re giving up every benefit of asynchronous code in the first place. The enhanced scalability of asynchronous handlers is nullified as soon as you block a thread.&lt;/p&gt;

&lt;p&gt;There were a couple of scenarios in (legacy) ASP.NET where blocking was unfortunately necessary: ASP.NET MVC filters and child actions. However, in ASP.NET Core, the entire pipeline is fully asynchronous; both filters and view components execute asynchronously.&lt;/p&gt;

&lt;p&gt;In conclusion, &lt;em&gt;ideally&lt;/em&gt; you should strive to use &lt;code&gt;async&lt;/code&gt; all the way; but if your code needs to, it &lt;em&gt;can&lt;/em&gt; block without danger.&lt;/p&gt;

&lt;h2 id=&quot;you-dont-need-configureawaitfalse-but-still-use-it-in-libraries&quot;&gt;You Don’t Need ConfigureAwait(false), But Still Use It in Libraries&lt;/h2&gt;

&lt;p&gt;Since there is no context anymore, there’s no need for &lt;code&gt;ConfigureAwait(false)&lt;/code&gt;. Any code that &lt;em&gt;knows&lt;/em&gt; it’s running under ASP.NET Core does not need to explicitly avoid its context. In fact, the ASP.NET Core team themselves have dropped the use of &lt;code&gt;ConfigureAwait(false)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, I still recommend that you use it in your core libraries - anything that may be reused in other applications. If you have code in a library that may also run in a UI app, or legacy ASP.NET app, or anywhere else there may be a context, then you should still use &lt;code&gt;ConfigureAwait(false)&lt;/code&gt; in that library.&lt;/p&gt;

&lt;h2 id=&quot;beware-implicit-parallelism&quot;&gt;Beware Implicit Parallelism&lt;/h2&gt;

&lt;p&gt;There is one more major concern when moving from a synchronizing context to a thread pool context (i.e., from legacy ASP.NET to ASP.NET Core).&lt;/p&gt;

&lt;p&gt;The legacy ASP.NET &lt;code&gt;SynchronizationContext&lt;/code&gt; is an actual &lt;em&gt;synchronizing context&lt;/em&gt;, meaning that within a request context, only one thread can actually &lt;em&gt;execute code&lt;/em&gt; at a time. That is, asynchronous continuations may run on any thread, but &lt;em&gt;only one at a time&lt;/em&gt;. ASP.NET Core does not have a &lt;code&gt;SynchronizationContext&lt;/code&gt;, so &lt;code&gt;await&lt;/code&gt; defaults to the thread pool context. So, in the ASP.NET Core world, asynchronous continuations may run on any thread, and they may all run in &lt;em&gt;parallel&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a contrived example, consider this code, which downloads two strings and places them into a list. This code works fine in legacy ASP.NET because the request context only permits one continuation at a time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBothAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetOneAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetOneAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WhenAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetOneAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;result.Add(data)&lt;/code&gt; line can only be executed by one thread at a time because it executes in the request context.&lt;/p&gt;

&lt;p&gt;However, this same code is unsafe on ASP.NET Core; specifically, the &lt;code&gt;result.Add(data)&lt;/code&gt; line may be executed by two threads &lt;em&gt;at the same time,&lt;/em&gt; without protecting the shared &lt;code&gt;List&amp;lt;string&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Code such as this is rare; asynchronous code is by its nature functional, so it’s far more &lt;em&gt;natural&lt;/em&gt; to return results from asynchronous methods rather than modifying shared state. However, the quality of asynchronous code does vary, and there is doubtless some code out there that is not adequately shielded against parallel execution.&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Mar 2017 00:00:00 -0400</pubDate>
        <link>https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html</guid>
      </item>
    
      <item>
        <title>Eliding Async and Await</title>
        <description>&lt;p&gt;Once one has learned the basics of &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; and has gotten fairly comfortable with it, a common design question often comes up: If I can remove &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, should I? There are a number of situations where you can elide the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords and just return the task directly.&lt;/p&gt;

&lt;p&gt;This is a surprisingly nuanced question, and in fact I now hold to a different answer than the position I originally took on this issue.&lt;/p&gt;

&lt;p&gt;First, let’s check out the argument in favor of eliding the keywords.&lt;/p&gt;

&lt;h2 id=&quot;efficiency&quot;&gt;Efficiency&lt;/h2&gt;

&lt;p&gt;It’s more efficient to elide &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;. By not including these keywords, the compiler can skip generating the &lt;code&gt;async&lt;/code&gt; state machine. This means that there are fewer compiler-generated types in your assembly, less pressure on the garbage collector, and fewer CPU instructions to execute.&lt;/p&gt;

&lt;p&gt;However, it’s important to point out that each of these gains are absolutely minimal. There’s one fewer type, a handful of small objects saved from GC, and only a few CPU instructions skipped. The vast majority of the time, &lt;code&gt;async&lt;/code&gt; is dealing with I/O, which completely dwarfs any performance gains. In almost every scenario, eliding &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; doesn’t make any difference to the running time of your application.&lt;/p&gt;

&lt;p&gt;For a thorough overview of the efficiency benefits of eliding &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, see Stephen Toub’s classic video &lt;a href=&quot;https://channel9.msdn.com/Events/Build/BUILD2011/TOOL-829T&quot;&gt;The Zen of Async&lt;/a&gt; or &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/hh456402.aspx&quot;&gt;his MSDN article on the subject&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I started writing about &lt;code&gt;async&lt;/code&gt;, I would always recommend eliding &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, but I’ve modified that stand in recent years. There are just too many pitfalls to recommend eliding as a default decision. These days I recommend keeping the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords around except for a few scenarios, because of the drawbacks described in the rest of this blog post.&lt;/p&gt;

&lt;h2 id=&quot;pitfalls&quot;&gt;Pitfalls&lt;/h2&gt;

&lt;p&gt;By eliding &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, you can avoid the compiler modifications to your method. Unfortunately, this also means that all the compiler modifications to your method must now be done by hand if you desire the same semantics.&lt;/p&gt;

&lt;h3 id=&quot;using&quot;&gt;Using&lt;/h3&gt;

&lt;p&gt;One of the most common mistakes in eliding &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; is that developers forget that there is code at the end of their method that needs to run at the appropriate time. In particular, when using a &lt;code&gt;using&lt;/code&gt; statement:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetWithKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetElidingKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, eliding the keywords will abort the download.&lt;/p&gt;

&lt;p&gt;It’s easier to understand if you walk through how the code progresses (if you need a review, my &lt;a href=&quot;/2012/02/async-and-await.html&quot;&gt;intro to &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; post&lt;/a&gt; is still perfectly relevant today). For simplicity, I’ll assume that &lt;code&gt;HttpClient.GetStringAsync&lt;/code&gt; never completes synchronously.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;GetWithKeywordsAsync&lt;/code&gt;, the code does this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the &lt;code&gt;HttpClient&lt;/code&gt; object.&lt;/li&gt;
  &lt;li&gt;Invoke &lt;code&gt;GetStringAsync&lt;/code&gt;, which returns an incomplete task.&lt;/li&gt;
  &lt;li&gt;Pauses the method until the task returned from &lt;code&gt;GetStringAsync&lt;/code&gt; completes, returning an incomplete task.&lt;/li&gt;
  &lt;li&gt;When the task returned from &lt;code&gt;GetStringAsync&lt;/code&gt; completes, it resumes executing the method.&lt;/li&gt;
  &lt;li&gt;Disposes the &lt;code&gt;HttpClient&lt;/code&gt; object.&lt;/li&gt;
  &lt;li&gt;Completes the task previously returned from &lt;code&gt;GetWithKeywordsAsync&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With &lt;code&gt;GetElidingKeywordsAsync&lt;/code&gt;, the code does this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the &lt;code&gt;HttpClient&lt;/code&gt; object.&lt;/li&gt;
  &lt;li&gt;Invoke &lt;code&gt;GetStringAsync&lt;/code&gt;, which returns an incomplete task.&lt;/li&gt;
  &lt;li&gt;Disposes the &lt;code&gt;HttpClient&lt;/code&gt; object.&lt;/li&gt;
  &lt;li&gt;Returns the task that was returned from &lt;code&gt;GetStringAsync&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Clearly, the &lt;code&gt;HttpClient&lt;/code&gt; is disposed before the &lt;code&gt;GET&lt;/code&gt; task completes, and this causes that request to be cancelled. The appropriate fix is to (asynchronously) wait until the &lt;code&gt;GET&lt;/code&gt; operation is complete, and only then dispose the &lt;code&gt;HttpClient&lt;/code&gt;, which is exactly what happens if you use &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;Another easily-overlooked pitfall is that of exceptions. The state machine for &lt;code&gt;async&lt;/code&gt; methods will capture exceptions from your code and place them on the returned task. Without the &lt;code&gt;async&lt;/code&gt; keyword, the exception is raised directly rather than going on the task:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetWithKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Something that can throw an exception */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DownloadStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetElidingKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Something that can throw an exception */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DownloadStringAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These methods work exactly the same as long as the calling method does something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetWithKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// works fine&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetElidingKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// works fine&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, if the &lt;em&gt;method call&lt;/em&gt; is separated from the &lt;code&gt;await&lt;/code&gt;, then the semantics are different:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetWithKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Exception thrown here&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetElidingKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Exception thrown here&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;The invocation of the method can be separated from the &lt;code&gt;await&lt;/code&gt; in a variety of cases. For example, the calling method may have other work to do concurrently with the asynchronous work done by our method. This is most common in code that uses &lt;code&gt;Task.WhenAll&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The expected asynchronous semantics are that exceptions are placed on the returned task. Since the returned task represents the execution of the method, if that execution of that method is terminated by an exception, then the natural representation of that scenario is a faulted task.&lt;/p&gt;

&lt;p&gt;So, eliding the keywords in this case causes different (and unexpected) exception behavior.&lt;/p&gt;

&lt;!--
This pitfall is especially notable when writing synchronous implementations of asynchronous APIs; for proper exception handling, catch any exceptions from the synchronous implementation and return a faulted task:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetElidingKeywordsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Synchronous implementation */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

--&gt;

&lt;h3 id=&quot;asynclocal&quot;&gt;AsyncLocal&lt;/h3&gt;

&lt;p&gt;This pitfall is a bit harder to reason about.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AsyncLocal&amp;lt;T&amp;gt;&lt;/code&gt; (and the lower-level &lt;code&gt;LogicalCallContext&lt;/code&gt;) allow asynchronous code to use a kind of &lt;code&gt;async&lt;/code&gt;-compatible almost-equivalent of thread local storage. The &lt;a href=&quot;/2013/04/implicit-async-context-asynclocal.html&quot;&gt;way that this actually works&lt;/a&gt; is that as part of the &lt;code&gt;async&lt;/code&gt; compiler transformation, the compiler-generated code will notify the logical call context that it needs to establish a copy-on-write scope.&lt;/p&gt;

&lt;p&gt;This provides a way for contextual information to flow “down” asynchronous calls. Note that the value does &lt;em&gt;not&lt;/em&gt; flow “up”.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 2: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 2: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the example above, the context value is set in the “child” &lt;code&gt;Async&lt;/code&gt; method, but when &lt;code&gt;Async&lt;/code&gt; completes and the control flow moves back to &lt;code&gt;MainAsync&lt;/code&gt;, the code executes in the “parent” context. So the “parent” value flows to the “child”, but the “child” value does not flow to the “parent”.&lt;/p&gt;

&lt;p&gt;The pitfall is that synchronous methods do not notify the logical call context that anything is different. For normal (non-task-returning) synchronous methods, this works out fine; from the logical call context’s perspective, all synchronous invocations are “collapsed” - they’re actually part of the context of the closest &lt;code&gt;async&lt;/code&gt; method further up the call stack. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 2: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 2: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 2: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, &lt;code&gt;Async&lt;/code&gt; does see the modification from its child &lt;code&gt;Sync&lt;/code&gt; method. As I mentioned above, I prefer to think of this as the &lt;em&gt;synchronous&lt;/em&gt; methods really being a part of the closest &lt;code&gt;async&lt;/code&gt; context further up the stack. From the context’s perspective, &lt;code&gt;Sync&lt;/code&gt; is just a part of &lt;code&gt;Async&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When eliding &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;, you do need to be aware that the task-returning non-&lt;code&gt;async&lt;/code&gt; method is seen by the context as though it were a regular synchronous method. So, if it does any modification of the logical call context, it will actually affect its &lt;em&gt;parent&lt;/em&gt; context:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Is actually &amp;quot;2&amp;quot; - unexpected!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 1: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Should be 2: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompletedTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a rare scenario, but it is one of the pitfalls of eliding &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;recommended-guidelines&quot;&gt;Recommended Guidelines&lt;/h2&gt;

&lt;p&gt;I suggest following these guidelines:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do &lt;strong&gt;not&lt;/strong&gt; elide by default. Use the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; for natural, easy-to-read code.&lt;/li&gt;
  &lt;li&gt;Do &lt;em&gt;consider&lt;/em&gt; eliding when the method is &lt;strong&gt;just&lt;/strong&gt; a passthrough or overload.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Simple passthrough to next layer: elide.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PassthroughAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PassthroughAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Simple overloads for a method: elide.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OverloadsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Core implementation, using await.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OverloadsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OverloadsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Non-trivial passthrough: use keywords.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PassthroughAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Reasoning: GetFirstArgument can throw.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  Even if it doesn&amp;#39;t throw today, some yahoo can change it tomorrow, and it&amp;#39;s not possible for them to know to change *this* method, too.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PassthroughAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetFirstArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Non-trivial overloads for a method: use keywords.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OverloadsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Same reasoning as above; GetDefaultCancellationTokenForThisScope can throw.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OverloadsAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDefaultCancellationTokenForThisScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 01 Dec 2016 00:00:00 -0500</pubDate>
        <link>https://blog.stephencleary.com/2016/12/eliding-async-await.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2016/12/eliding-async-await.html</guid>
      </item>
    
      <item>
        <title>Azure Functions</title>
        <description>&lt;p&gt;This past week was &lt;a href=&quot;https://connectevent.microsoft.com/&quot;&gt;Microsoft’s Connect 2016 conference&lt;/a&gt;. There were a lot of announcements, but IMO the one that most stands out is that Azure Functions have been officially released.&lt;/p&gt;

&lt;p&gt;I’ve been following the development of Azure Functions with quite a bit of interest recently. I think they’ll have a &lt;em&gt;huge&lt;/em&gt; long-term impact on the cloud ecosystem.&lt;/p&gt;

&lt;p&gt;Azure Functions (on the surface) are roughly equivalent to Amazon’s Lambdas, or Google’s Cloud Functions, with the notable exception that only Azure Functions work with .NET natively. All three of these (in conjunction with other cloud services such as queues and distributed data stores) provide the backbone of what is commonly called “serverless computing”. “Serverless computing” is a bit of a misnomer, since there &lt;em&gt;are&lt;/em&gt; servers involved in running code (of course), but the idea is that those servers are only &lt;em&gt;borrowed&lt;/em&gt; at a very abstract level. The idea is that you only pay for when your code is actually &lt;em&gt;running&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Azure Functions have a ways to go before they’re fully ready for adoption by most organizations (more detail below), but with this week’s announcement, you can start using them today if you are determined enough. :)&lt;/p&gt;

&lt;p&gt;In my opinion, Azure Functions will essentially replace WebJobs. Functions give you the most abstract (read: most productive and cheapest) option for writing backend code:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/Abstractions.png&quot;&gt;&lt;img src=&quot;/assets/Abstractions.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To summarize: Azure Functions are awesome!&lt;/p&gt;

&lt;h2 id=&quot;my-own-adventure&quot;&gt;My Own Adventure&lt;/h2&gt;

&lt;p&gt;I’ve been playing with Azure Functions for a while on an &lt;a href=&quot;https://github.com/StephenClearyApps/NetStandardTypes&quot;&gt;open-source project&lt;/a&gt; that will (eventually) provide a website for searching for netstandard-compatible .NET types across all of NuGet.&lt;/p&gt;

&lt;p&gt;There are two Azure Functions in that system: one that periodically checks for new NuGet packages, and one that loads those packages into memory, extracts their types, and updates the search index.&lt;/p&gt;

&lt;p&gt;This has been a fun and instructive project so far, because I’m using Azure Functions &lt;em&gt;and&lt;/em&gt; Azure Search for the first time.&lt;/p&gt;

&lt;p&gt;Azure Functions today are geared more towards simple implementations. Image resizing is the standard demo. Azure Functions work great when all the logic can fit into a single file. In my application, though, I have more advanced needs. I depend heavily on various NuGet packages (about 80 total), and I split up my own logic into several dlls. This is far beyond a “Hello, World” demo.&lt;/p&gt;

&lt;h2 id=&quot;rough-spots&quot;&gt;Rough Spots&lt;/h2&gt;

&lt;p&gt;One of the main problems with .NET Azure Functions is the lack of tooling. .NET Azure Functions have a &lt;code&gt;csx&lt;/code&gt; file as an entry point; this is a &lt;a href=&quot;http://scriptcs.net/&quot;&gt;C# script file&lt;/a&gt;, which have been around for a while but haven’t received any official support from Visual Studio or Visual Studio Code. Supposedly, there’s some way to get IntelliSense working with VSCode, but I was unable to get it set up properly.&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;csx&lt;/code&gt; file ends up with a very limited IntelliSense. This isn’t the end of the world; the common workaround is to have all your actual logic in a separate dll, and your &lt;code&gt;csx&lt;/code&gt; file literally just forwards to an entry point in that dll. Within the normal C# dll, you get full tooling support.&lt;/p&gt;

&lt;p&gt;I am confident that this will be addressed in the near future, and Visual Studio (or at least Code) will fully understand &lt;code&gt;csx&lt;/code&gt; files for Azure Functions.&lt;/p&gt;

&lt;p&gt;The other main problem I’ve run into is deployment. Currently, Azure Functions has a very script-centered mentality, so their continuous deployment assumes that the source &lt;em&gt;is&lt;/em&gt; what is deployed. It &lt;em&gt;will&lt;/em&gt; build solutions/projects that it finds, but what ends up in your repository has to follow a very particular folder structure. I’ve created a &lt;a href=&quot;https://github.com/StephenClearyApps/NetStandardTypes/tree/functions&quot;&gt;separate branch&lt;/a&gt; in my repo that contains the build outputs, and this is what is actually hooked up to the Azure Functions continuous deployment system. Fow now, I’m just copying the outputs by hand into the separate branch (yeah, bad, I know…).&lt;/p&gt;

&lt;p&gt;I am hopeful that this will be addressed in the near future, with some kind of output folder working for the continuous deployment process rather than assuming the code &lt;em&gt;is&lt;/em&gt; the deployment.&lt;/p&gt;

&lt;p&gt;Finally, I wasn’t able to get references working to &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-csharp#package-management&quot;&gt;NuGet packages installed by the Azure Functions continuous deployment system&lt;/a&gt;. As a workaround, I just copy all the dlls from my project’s output directory (except the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-csharp#referencing-external-assemblies&quot;&gt;ones already preloaded by the Azure Functions runtime&lt;/a&gt;) into the &lt;code&gt;bin&lt;/code&gt; folder of my function.&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;p&gt;There’s a few tips that I’ve picked up when getting started with Azure Functions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure your &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference#folder-structure&quot;&gt;folder structure&lt;/a&gt; is correct, and don’t forget your hosts.json file.&lt;/li&gt;
  &lt;li&gt;The Azure Functions portal has some awesome shortcuts (that really should be in other portals too, I’m looking at you, App Services!). The dev console and Kudu are particularly useful when setting up deployment.&lt;/li&gt;
  &lt;li&gt;There are a few situations where restarting the Azure Functions host is necessary. For example, if you update a dll but do &lt;em&gt;not&lt;/em&gt; update its version, then your Function won’t “see” the updated dll. To force it to update, you can select “App Service Settings” from the Azure Functions portal and from there Restart your Azure Functions service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;The future is bright for Azure Functions! This is one of the most important improvements to Azure, and really sets up Microsoft for domination in the cloud space. Once the tooling and deployment are ironed out a bit, Azure Functions will become the default go-to choice for backend work in the cloud.&lt;/p&gt;

&lt;p&gt;I’m still learning Azure Functions myself, and you’re welcome to join me - or just watch me struggle - &lt;a href=&quot;https://github.com/StephenClearyApps/NetStandardTypes&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Nov 2016 00:00:00 -0500</pubDate>
        <link>https://blog.stephencleary.com/2016/11/azure-functions.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2016/11/azure-functions.html</guid>
      </item>
    
  </channel>
</rss>
