<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary's blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>https://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="https://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="https://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>A New Pattern for Exception Logging</title>
        <description>&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Your code should log exceptions from within an exception filter, not a &lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt;

&lt;h3 id=&quot;quick-examples&quot;&gt;Quick Examples&lt;/h3&gt;

&lt;p&gt;The old pattern of “log-and-propagate” looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-propagate, old pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logging should be moved into an exception filter like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-propagate, new pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, the old pattern of “log-and-handle” looks something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-handle, old pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or some other handling code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logging should be moved into an exception filter like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-handle, old pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or some other handling code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these examples assume the presence of a couple simple utility methods:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Use when you want to handle the exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Use when you want to propagate the exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;

&lt;p&gt;The remainder of this blog post goes into the “why” behind the new pattern.&lt;/p&gt;

&lt;h2 id=&quot;semantic-logging--structured-logging&quot;&gt;Semantic Logging / Structured Logging&lt;/h2&gt;

&lt;p&gt;Long gone are the days of text file logging; modern logging systems support rich, contextual logs. This means you can add data fields to your log messages, and then use those additional pieces of data when debugging an issue. It’s very satisfying to be able to filter by an HTTP status code range, or take the top three servers where user &lt;code&gt;Steve&lt;/code&gt; had a &lt;code&gt;FileNotFound&lt;/code&gt; exception.&lt;/p&gt;

&lt;p&gt;Structured logging is so important that every modern logging system supports it. For example, .NET Core style logging uses &lt;a href=&quot;https://messagetemplates.org/&quot;&gt;message templates&lt;/a&gt;, which looks something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Result: {result}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above will create a log message like &lt;code&gt;&quot;Result: 4&quot;&lt;/code&gt;. What’s not immediately obvious is that the log message &lt;em&gt;also&lt;/em&gt; has structured data attached to it: a data field called &lt;code&gt;result&lt;/code&gt; has the (integer) value &lt;code&gt;4&lt;/code&gt;. When this is consumed by a logging provider that understands structured data, the &lt;code&gt;result&lt;/code&gt; field is stored &lt;em&gt;along with&lt;/em&gt; the log message, and can be used for searching or filtering.&lt;/p&gt;

&lt;p&gt;If you would like to follow along at home, create an ASP.NET Worker Service (which is really just a Console app with ASP.NET-style logging and dependency injection all set up for you). Then replace &lt;code&gt;Worker.ExecuteAsync&lt;/code&gt; with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you run it, you should see this in the output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;info: MyApp.Worker[0]
      Result: 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;logging-scopes&quot;&gt;Logging Scopes&lt;/h3&gt;

&lt;p&gt;So far, so good, and hopefully that’s nothing new.&lt;/p&gt;

&lt;p&gt;In addition to adding structured data to a single log message, most modern logging frameworks also support logging &lt;em&gt;scopes&lt;/em&gt; of structured data. So you can create a logging scope that attaches structured data to &lt;em&gt;every&lt;/em&gt; log message within that scope:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeginScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dividing {numerator} by {denominator}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Result: {result}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when the &lt;code&gt;Result: 4&lt;/code&gt; message is logged, it will capture additional structured data items: &lt;code&gt;result&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;numerator&lt;/code&gt; is &lt;code&gt;13&lt;/code&gt;, and &lt;code&gt;denominator&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;. It should be clear that strategically placing data items in logging scopes can greatly assist debugging. Any time you’ve stared at an error message or unexpected result and wondered “what was the input that caused this?”, that’s the perfect place to add a logging scope.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Tip: The Console logger ignores logging scopes by default; they have to be manually enabled.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you’re following along at home, enable logging scopes for the Console logger by updating &lt;code&gt;CreateHostBuilder&lt;/code&gt; in your &lt;code&gt;Program.cs&lt;/code&gt;, adding a call to &lt;code&gt;ConfigureLogging&lt;/code&gt; that removes the existing Console logger and adds a new one that sets &lt;code&gt;IncludeScopes&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (begin code changes)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClearProviders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IncludeScopes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (end code changes)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddHostedService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when you run the code, you’ll see the logging scope written to the Console as a part of the information message:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;info: MyApp.Worker[0]
      =&amp;gt; Dividing 13 by 3
      Result: 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the logs have a clear context.&lt;/p&gt;

&lt;h2 id=&quot;exception-logging&quot;&gt;Exception Logging&lt;/h2&gt;

&lt;p&gt;So, let’s talk about logging exceptions. Most methods do not log their own exceptions; any exceptions are propagated out of the method, possibly through many other methods, and eventually logged at a much higher level in the code.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that the logging scope is lost once the stack is unwound.&lt;/p&gt;

&lt;p&gt;Here’s the kind of situation that causes this problem. &lt;code&gt;Worker.ExecuteAsync&lt;/code&gt; is going to wrap its call in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; and log the exception. This is a very common pattern in most code bases today:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem, as stated above, is that the logging scope is already gone by the time &lt;code&gt;LogError&lt;/code&gt; is called. So our logging output looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;fail: MyApp.Worker[0]
      Unexpected error.
System.DivideByZeroException: Attempted to divide by zero.
   at MyApp.Worker.Divide(Int32 numerator, Int32 denominator) in ...
   at MyApp.Worker.&amp;lt;ExecuteAsync&amp;gt;b__2_0() in ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logs have the exception details, including the stack trace, but they do not have the structured data from the logging scope. When sent to a logging backend, there is no &lt;code&gt;numerator&lt;/code&gt; or &lt;code&gt;denominator&lt;/code&gt; data that is attached to this log message. Losing that logging scope data is a problem.&lt;/p&gt;

&lt;p&gt;To fix this, we first need a minor segue into how exceptions work.&lt;/p&gt;

&lt;h2 id=&quot;how-exceptions-work&quot;&gt;How Exceptions Work&lt;/h2&gt;

&lt;p&gt;When an exception is thrown, the runtime will search the stack for a matching handler. So the runtime walks up the stack looking at each &lt;code&gt;catch&lt;/code&gt; block and evaluating whether it matches the exception (e.g., the exception type matches). When a matching handler is found, then the stack is unwound to that point and the &lt;code&gt;catch&lt;/code&gt; block is executed.&lt;/p&gt;

&lt;p&gt;The important part of this behavior is that there are two distinct steps: &lt;em&gt;find, then unwind&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exception-filters&quot;&gt;Exception Filters&lt;/h2&gt;

&lt;p&gt;Exception filters have been around for a very long time; .NET 1.0 (2002) supported them, and &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/debug/structured-exception-handling&quot;&gt;Structured Exception Handling&lt;/a&gt; existed even way before that. C# only got exception filter capabilities in C# 6.0 (2015), and so far they haven’t really become common in most codebases. That may change now, though.&lt;/p&gt;

&lt;p&gt;Exception filters allow you to hook into the “find” part of “find, then unwind”. By providing an exception filter, you can control whether a specific &lt;code&gt;catch&lt;/code&gt; block matches the exception.&lt;/p&gt;

&lt;p&gt;The key thing to keep in mind about exception filters is that because they hook into the “find” part of the process, this means &lt;em&gt;they run where the exception is thrown, not where the exception is caught&lt;/em&gt;. This is a little mind-bendy at first, but it makes sense: exception filters are run &lt;em&gt;before&lt;/em&gt; the stack is unwound.&lt;/p&gt;

&lt;h2 id=&quot;solution-move-exception-logging-into-an-exception-filter&quot;&gt;Solution: Move Exception Logging into an Exception Filter&lt;/h2&gt;

&lt;p&gt;So, now we have the pieces necessary for fixing the problem. We just need to log exceptions from within an exception filter. Since the exception filter runs where there exception was thrown, the logging data scope is still present. The stack hasn’t been unwound yet, so all that rich semantic data is still available.&lt;/p&gt;

&lt;p&gt;There’s just one quirk: the exception filter must return a boolean value, indicating whether or not the &lt;code&gt;catch&lt;/code&gt; block matches. In our case, the logging is just a side effect; logging the exception has no effect on whether the &lt;code&gt;catch&lt;/code&gt; block matches. So, I use a type like this that just provides methods to “execute this side effect and then return a boolean”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExceptionFilterUtility&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you do a &lt;code&gt;using static ExceptionFilterUtility;&lt;/code&gt;, you can use it like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And there you go! Our error log message now has the full data context of where the exception was &lt;em&gt;thrown&lt;/em&gt;, instead of where it was &lt;em&gt;caught&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;fail: MyApp.Worker[0]
      =&amp;gt; Dividing 13 by 0
      Unexpected error.
System.DivideByZeroException: Attempted to divide by zero.
   at MyApp.Worker.Divide(Int32 numerator, Int32 denominator) in ...
   at MyApp.Worker.&amp;lt;ExecuteAsync&amp;gt;b__2_0() in ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The full data logging scope is now preserved.&lt;/p&gt;

&lt;h2 id=&quot;true-or-false&quot;&gt;True or False?&lt;/h2&gt;

&lt;p&gt;I’ve defined two helper methods - &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; - to apply side effects and then return a boolean. I recommend using &lt;code&gt;False&lt;/code&gt; if the body of your &lt;code&gt;catch&lt;/code&gt; is nothing more than &lt;code&gt;throw;&lt;/code&gt;. When an exception is thrown, the exception filter is run and the exception is logged, and then the &lt;code&gt;false&lt;/code&gt; result means that the exception filter does not match the exception, and the runtime continues searching for a matching handler.&lt;/p&gt;

&lt;p&gt;Another scenario is if the &lt;code&gt;catch&lt;/code&gt; block actually handles the exception. Say, if we know there is an exception that is safe to ignore. In that case, use the &lt;code&gt;True&lt;/code&gt; helper method so that the exception matches the &lt;code&gt;catch&lt;/code&gt; block and the stack is unwound and the exception is handled there.&lt;/p&gt;

&lt;p&gt;Both helpers are useful in different scenarios.&lt;/p&gt;

&lt;h2 id=&quot;caveat&quot;&gt;Caveat&lt;/h2&gt;

&lt;p&gt;The solution here unfortunately does not work well with &lt;code&gt;async&lt;/code&gt; code. This is because &lt;code&gt;async&lt;/code&gt; will cause exceptions to be caught and then re-thrown at the point of the &lt;code&gt;await&lt;/code&gt;. So, the exception filter runs at the point of the &lt;code&gt;await&lt;/code&gt; instead of where the exception was &lt;em&gt;originally&lt;/em&gt; thrown.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Modern exception-logging code should do its logging from within an exception filter. As logging data scopes become more and more common, this pattern will enable much more helpful logs for your system.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html</guid>
      </item>
    
      <item>
        <title>BackgroundService Gotcha: Application Lifetime</title>
        <description>&lt;h2 id=&quot;backgroundservice-gotcha-service-lifetime-is-independent-from-application-lifetime&quot;&gt;BackgroundService Gotcha: Service Lifetime is Independent from Application Lifetime&lt;/h2&gt;

&lt;p&gt;OK, I guess I &lt;em&gt;do&lt;/em&gt; have a series on my hands.&lt;/p&gt;

&lt;p&gt;This one isn’t so much a “gotcha” as it is a common mistake. Hosted services (including &lt;code&gt;BackgroundService&lt;/code&gt;s) have a lifetime that is &lt;em&gt;independent&lt;/em&gt; from their host. This means that if a &lt;code&gt;BackgroundService&lt;/code&gt; exits, its host will not exit. And a host will happily continue running even if &lt;em&gt;all&lt;/em&gt; its services have exited.&lt;/p&gt;

&lt;p&gt;This mistake is most common when writing a kind of “subscriber” or “backend processor” application - something that listens to a queue and processes messages on that queue. For these kinds of applications, it’s common to have a .NET Core host with only a single hosted service, and the service has a loop which processes messages from the queue. This is essentially the “ASP.NET Core Worker Process” template project in Visual Studio. When writing this kind of application, it’s easy to forget about the host, and treat the hosted service &lt;em&gt;as&lt;/em&gt; the application. But when there are no more messages (or some other shutdown signal is delivered to the hosted service) and the service exits, then the host application stays around.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;This behavior is by design. If a &lt;code&gt;BackgroundService&lt;/code&gt; implementation wants the application to exit when it stops (or &lt;a href=&quot;/2020/05/backgroundservice-gotcha-silent-failure.html&quot;&gt;has a fatal error&lt;/a&gt;), it needs to do that itself by injecting an &lt;code&gt;IHostApplicationLifetime&lt;/code&gt; and calling &lt;code&gt;StopApplication&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StopApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I recommend also &lt;a href=&quot;/2020/05/backgroundservice-gotcha-startup.html&quot;&gt;using &lt;code&gt;Task.Run&lt;/code&gt; to avoid startup problems&lt;/a&gt; and &lt;a href=&quot;/2020/05/backgroundservice-gotcha-silent-failure.html&quot;&gt;logging all exceptions in this top-level loop&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fatal error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StopApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, this is a fair amount of boilerplate code to go into each background service. Production code bases should probably define a “critical background service” base type that handles all the wrapper code so background services only need to define the &lt;code&gt;// Implementation&lt;/code&gt; part.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html</guid>
      </item>
    
      <item>
        <title>BackgroundService Gotcha: Silent Failures</title>
        <description>&lt;h2 id=&quot;backgroundservice-gotcha-silent-failures&quot;&gt;BackgroundService Gotcha: Silent Failures&lt;/h2&gt;

&lt;p&gt;I know &lt;a href=&quot;/2020/05/backgroundservice-gotcha-startup.html&quot;&gt;last time&lt;/a&gt; I talked about &lt;code&gt;BackgroundService&lt;/code&gt;… I don’t want to make this a series or anything, but there is another common “gotcha” when it comes to &lt;code&gt;BackgroundService&lt;/code&gt;: exceptions are silently ignored.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;ExecuteAsync&lt;/code&gt; implementation throws an exception, that exception is silently swallowed and ignored. This is because &lt;code&gt;BackgroundService&lt;/code&gt; captures the task from &lt;code&gt;ExecuteAsync&lt;/code&gt; but never &lt;code&gt;await&lt;/code&gt;s it - i.e., &lt;a href=&quot;https://github.com/dotnet/runtime/blob/e3ffd343ad5bd3a999cb9515f59e6e7a777b2c34/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/BackgroundService.cs&quot;&gt;&lt;code&gt;BackgroundService&lt;/code&gt; uses fire-and-forget&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h2&gt;

&lt;p&gt;This problem will surface as &lt;code&gt;BackgroundService&lt;/code&gt; instances just stopping, without any indication of a problem. What actually happens if &lt;code&gt;ExecuteAsync&lt;/code&gt; throws an exception is that the exception is captured and placed on the &lt;code&gt;Task&lt;/code&gt; that was returned from &lt;code&gt;ExecuteAsync&lt;/code&gt;. The problem is that &lt;code&gt;BackgroundService&lt;/code&gt; doesn’t observe that task, so there’s no logging and no process crash - the &lt;code&gt;BackgroundService&lt;/code&gt; has completed executing but it just sits there doing nothing.&lt;/p&gt;

&lt;p&gt;This is not &lt;em&gt;necessarily&lt;/em&gt; a problem with &lt;code&gt;BackgroundService&lt;/code&gt;; fire-and-forget can be appropriate for “top-level” loops such as a background worker task. However, it would be nice to have logging at least, so this “gotcha” is detectable.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;All top-level loops should have a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; with some kind of reporting if something goes wrong. &lt;code&gt;ExecuteAsync&lt;/code&gt; implementations are top-level loops, so they should have a top-level &lt;code&gt;try&lt;/code&gt; that catches all exceptions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fatal error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I recommend you combine this solution with the solution from last time that &lt;a href=&quot;/2020/05/backgroundservice-gotcha-startup.html&quot;&gt;uses &lt;code&gt;Task.Run&lt;/code&gt; to avoid startup problems&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fatal error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-silent-failure.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-silent-failure.html</guid>
      </item>
    
      <item>
        <title>BackgroundService Gotcha: Startup</title>
        <description>&lt;h2 id=&quot;backgroundservice-gotcha-synchronous-starts&quot;&gt;BackgroundService Gotcha: Synchronous Starts&lt;/h2&gt;

&lt;p&gt;This is some behavior that I’ve found surprising (and others have as well): ASP.NET Core background services are started with a synchronous call.&lt;/p&gt;

&lt;p&gt;Specifically, the host will invoke &lt;code&gt;IHostedService.StartAsync&lt;/code&gt; for all its hosted services, and &lt;code&gt;BackgroundService&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/runtime/blob/e3ffd343ad5bd3a999cb9515f59e6e7a777b2c34/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/BackgroundService.cs#L37&quot;&gt;directly invokes &lt;code&gt;ExecuteAsync&lt;/code&gt; before returning from &lt;code&gt;StartAsync&lt;/code&gt;&lt;/a&gt;. So &lt;code&gt;BackgroundService&lt;/code&gt; &lt;em&gt;assumes&lt;/em&gt; that its derived classes will have an asynchronous &lt;code&gt;ExecuteAsync&lt;/code&gt;. If the &lt;code&gt;ExecuteAsync&lt;/code&gt; implementation is synchronous (or starts executing with a blocking call), then problems will ensue.&lt;/p&gt;

&lt;h2 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h2&gt;

&lt;p&gt;The resulting behavior is that the background service will start executing, but the host will be unable to finish starting up. This will block other background services from starting.&lt;/p&gt;

&lt;p&gt;Depending on the background service implementation, this may manifest as a delay of startup or a complete block of startup. If &lt;code&gt;ExecuteAsync&lt;/code&gt; is synchronous, then the host cannot continue starting up until that background service has &lt;em&gt;completed&lt;/em&gt;. If &lt;code&gt;ExecuteAsync&lt;/code&gt; is asynchronous but takes a long time before it yields, then the host has its startup delayed.&lt;/p&gt;

&lt;h2 id=&quot;common-scenarios&quot;&gt;Common Scenarios&lt;/h2&gt;

&lt;p&gt;This problem is common in any of these conditions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The hosted service has a synchronous &lt;code&gt;ExecuteAsync&lt;/code&gt;. In this case, the host is prevented from starting until &lt;code&gt;ExecuteAsync&lt;/code&gt; completes.&lt;/li&gt;
  &lt;li&gt;The hosted service reads from a queue to process messages, but the queue reading is blocking. Even if the processing is asynchronous, the host startup is blocked until the first message arrives for this service and is (asynchronously) processed.&lt;/li&gt;
  &lt;li&gt;The hosted service is properly asynchronous, but the asynchrony is completing immediately. E.g., if it is asynchronously reading from a queue but there are many messages immediately received, then the host startup is blocked until the background service actually yields.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Since the problem is synchronous &lt;code&gt;ExecuteAsync&lt;/code&gt; methods (or at least &lt;code&gt;ExecuteAsync&lt;/code&gt; methods that do non-trivial work before they become asynchronous), the simplest solution is to ensure &lt;code&gt;ExecuteAsync&lt;/code&gt; is asynchronous.&lt;/p&gt;

&lt;p&gt;I’m &lt;a href=&quot;/2013/11/taskrun-etiquette-examples-dont-use.html&quot;&gt;not a fan of using &lt;code&gt;Task.Run&lt;/code&gt; to wrap the body of a method&lt;/a&gt; (i.e., “fake asynchrony”), but since the caller &lt;em&gt;requires&lt;/em&gt; an asynchronous implementation, I think that’s an acceptable approach in this case:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way, any slow or blocking code early in &lt;code&gt;ExecuteAsync&lt;/code&gt; will not prevent the host from starting up.&lt;/p&gt;

&lt;h2 id=&quot;update-2020-05-22&quot;&gt;Update (2020-05-22)&lt;/h2&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Update (2020-05-22):&lt;/strong&gt; I’ve &lt;a href=&quot;https://twitter.com/klettier/status/1263727450502152194&quot; class=&quot;alert-link&quot;&gt;been informed&lt;/a&gt; that the .NET Core team is &lt;a href=&quot;https://github.com/dotnet/runtime/issues/36063#issuecomment-518913079&quot; class=&quot;alert-link&quot;&gt;considering changing this behavior&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 4: Automated Deploy and Teardown</title>
        <description>&lt;h2 id=&quot;automating-deploy&quot;&gt;Automating Deploy&lt;/h2&gt;

&lt;p&gt;We currently have slash commands &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; that are converted into &lt;code&gt;repository_dispatch&lt;/code&gt; (&lt;code&gt;deploy-command&lt;/code&gt; / &lt;code&gt;teardown-command&lt;/code&gt;) events, and those &lt;code&gt;repository_dispatch&lt;/code&gt; events deploy or tear down a staging environment specific to a pull request. That’s pretty cool.&lt;/p&gt;

&lt;p&gt;But what I’d &lt;em&gt;really&lt;/em&gt; like is to deploy a PR’s staging environment as soon as the PR is created, and automatically tear it down when the PR is closed. That would be &lt;em&gt;really&lt;/em&gt; cool.&lt;/p&gt;

&lt;h2 id=&quot;security-again&quot;&gt;Security (Again)&lt;/h2&gt;

&lt;p&gt;First, though, I do have to talk about security. Yes, again.&lt;/p&gt;

&lt;p&gt;For security reasons, &lt;em&gt;all secrets are unavailable&lt;/em&gt; when automating a pull request from a &lt;em&gt;fork&lt;/em&gt; of a repository. This makes sense; you don’t want someone to create a fork, change the actions, and be able to retrieve your secrets by opening a PR against your repository.&lt;/p&gt;

&lt;p&gt;Currently, this is a hard and fast rule. But there are discussions about loosening up these rules a bit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.community/t5/GitHub-Actions/Make-secrets-available-to-builds-of-forks/td-p/30678&quot;&gt;Opt-in to secret sharing to forks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.community/t5/GitHub-Actions/Allow-secrets-to-be-shared-with-trusted-Actions/td-p/34278&quot;&gt;Mark certain actions as “trusted”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I think it makes sense to always have pull request events run using the actions of the &lt;em&gt;base&lt;/em&gt; branch, not the &lt;em&gt;head&lt;/em&gt; branch. So cross-repository pull requests will always run the actions in the origin repository, not the fork repository.&lt;/p&gt;

&lt;p&gt;However, for now, the result of this security restriction is that we can only automate &lt;em&gt;local&lt;/em&gt; pull requests (from one branch to another in the same repository). The solution we’re using here will not work for cross-repository PRs (i.e., a PR from a forked repository).&lt;/p&gt;

&lt;h2 id=&quot;dispatch-when-a-pull-request-is-opened&quot;&gt;Dispatch when a Pull Request is Opened&lt;/h2&gt;

&lt;p&gt;We already have an action that handles &lt;code&gt;repository_dispatch&lt;/code&gt; events of type &lt;code&gt;deploy-command&lt;/code&gt;, so we can just use a pull request event as a “trigger”, dispatching the same kind of command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Queues a deploy command for every local PR.

name: Local PR Opened/Updated

# By default, this is run when a PR is opened or synchronized.
on:
  pull_request:

jobs:
  dispatch-deploy-command:
    if: github.repository == github.event.pull_request.head.repo.full_name # Only try to deploy local PRs
    runs-on: ubuntu-latest
    steps:
    - name: Dispatch /deploy Command
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.DISPATCH_TOKEN }} # Same security issues as before, unfortunately
        event-type: deploy-command # Send the deploy-command type for the repository_dispatch event
        client-payload: '{&quot;pull_request&quot;: ${{ toJson(github.event.pull_request) }}}' # Pass along the pull request details
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only tricky part here is the last line: our &lt;code&gt;deploy-command.yml&lt;/code&gt; handler expects to be able to use &lt;code&gt;client_payload.pull_request.number&lt;/code&gt; and &lt;code&gt;client_payload.pull_request.head.sha&lt;/code&gt;. &lt;code&gt;client_payload.pull_request&lt;/code&gt; is populated automatically by &lt;code&gt;slash-command-dispatch&lt;/code&gt;, but here we need to fill it out ourselves. Fortunately, the &lt;code&gt;pull_request&lt;/code&gt; data is already provided to us as part of the &lt;code&gt;pull_request&lt;/code&gt; event, so we just need to copy it over.&lt;/p&gt;

&lt;h2 id=&quot;dispatch-when-a-pull-request-is-closed&quot;&gt;Dispatch when a Pull Request is Closed&lt;/h2&gt;

&lt;p&gt;Similarly, we have an action that handles &lt;code&gt;repository_dispatch&lt;/code&gt; events of type &lt;code&gt;teardown-command&lt;/code&gt;, so we can use a pull request close event to dispatch the same command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Queues a teardown command for every local PR closed.

name: Local PR Closed

# Only listen for close events.
on:
  pull_request:
    types: [ closed ]

jobs:
  dispatch-teardown-command:
    if: github.repository == github.event.pull_request.head.repo.full_name # Only try to tear down local PRs
    runs-on: ubuntu-latest
    steps:
    - name: Dispatch /teardown Command
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.DISPATCH_TOKEN }} # Same security issues as before, unfortunately
        event-type: teardown-command # Send the deploy-command type for the repository_dispatch event
        client-payload: '{&quot;pull_request&quot;: ${{ toJson(github.event.pull_request) }}}' # Pass along the pull request details
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;done&quot;&gt;Done&lt;/h2&gt;

&lt;p&gt;At this point, we’re as automated as we can be (safely). All PRs support &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; commands, managing a per-PR staging environment. In addition, local PRs get their environments deployed and torn down automatically.&lt;/p&gt;

&lt;p&gt;Hopefully in the future, we can fully automate PRs from forks. That would be especially helpful for open-source projects. In the meantime, &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; are still pretty cool.&lt;/p&gt;

&lt;p&gt;As a final reminder, the staging environments in this example were deliberately simple: building a static site and deploying that static site. This simple example is fine for a lot of front-end projects. But staging environments can also include back-end code. There’s no reason you can’t define “deploy” to mean “deploy the front end to Surge &lt;em&gt;and&lt;/em&gt; deploy the backend to a new Azure resource group” or something like that. So dream big!&lt;/p&gt;

&lt;p&gt;Enjoy GitHub Actions!&lt;/p&gt;
</description>
        <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/05/github-actions-pull-request-staging-environments-part-4-automated-deploy-and-teardown.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/05/github-actions-pull-request-staging-environments-part-4-automated-deploy-and-teardown.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 3: Implementing Deploy and Teardown</title>
        <description>&lt;h2 id=&quot;implementing-deploy&quot;&gt;Implementing Deploy&lt;/h2&gt;

&lt;p&gt;So far, we have a &lt;code&gt;slash-commands&lt;/code&gt; GitHub Action that translates &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; ChatOps commands into &lt;code&gt;repository_dispatch&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;To handle the &lt;code&gt;/deploy&lt;/code&gt; slash command, we’ll need to handle a &lt;code&gt;repository_dispatch&lt;/code&gt; event of type &lt;code&gt;deploy-command&lt;/code&gt;. In your GitHub repository, open up the Actions tab and choose “New workflow” and then “Set up a workflow yourself”. Name the file &lt;code&gt;deploy-command.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Inputs:
#  client_payload.pull_request.number - PR number
#  client_payload.pull_request.head.sha - PR SHA

name: Create PR Staging Environment

on:
  repository_dispatch:
    types: [deploy-command]

# Set environment variables available to all action steps.
env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      - name: Install dependencies
        run: npm ci

      - name: Build static site
        run: npx gatsby build

      - name: Publish to surge.sh
        run: npx surge ./public ${{ env.DOMAIN }}
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ format('Published to [staging environment](https://{0})', env.DOMAIN) }}

            To teardown, comment with the `/teardown` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one’s a bit longer, so let’s walk through the steps.&lt;/p&gt;

&lt;p&gt;The first step checks out the repository. Note that it specifically checks out the SHA of the pull request (&lt;code&gt;client_payload.pull_request&lt;/code&gt; is provided by &lt;code&gt;slash-command-dispatch&lt;/code&gt;). So we’re checking out the code &lt;em&gt;for that PR&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next couple steps build the site by running &lt;code&gt;npm ci&lt;/code&gt; and &lt;code&gt;npx gatsby build&lt;/code&gt;. Just like building locally, the output is placed in the &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The publish step runs &lt;code&gt;npx surge ./public ${{ env.DOMAIN }}&lt;/code&gt;. This time we’re running &lt;code&gt;surge&lt;/code&gt; and giving it the name of the domain we want to publish to. The &lt;code&gt;DOMAIN&lt;/code&gt; environment variable was defined earlier in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s really nice about this setup is that every pull request gets a different domain - and thus a different staging environment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SURGE_LOGIN&lt;/code&gt; and &lt;code&gt;SURGE_TOKEN&lt;/code&gt; are additional environment variables used by the &lt;code&gt;surge&lt;/code&gt; command line so it authenticates under your account while deploying.&lt;/p&gt;

&lt;p&gt;The last step adds a comment to the pull request with a clickable link for the deployed staging environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ format('Published to [staging environment](https://{0})', env.DOMAIN) }}

            To teardown, comment with the `/teardown` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ends up looking like this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/github-actions-deploy.png&quot;&gt;&lt;img src=&quot;/assets/github-actions-deploy.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-up-surge-secrets&quot;&gt;Set Up Surge Secrets&lt;/h3&gt;

&lt;p&gt;There are a couple of new secrets used by the deploy action: &lt;code&gt;SURGE_LOGIN&lt;/code&gt; and &lt;code&gt;SURGE_TOKEN&lt;/code&gt;. These can be added as &lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets&quot;&gt;repository secrets&lt;/a&gt; just like last time.&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;SURGE_LOGIN&lt;/code&gt; to the email address &lt;a href=&quot;2020-04-02-github-actions-pull-request-staging-environments-part-1&quot;&gt;you used to sign up with Surge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get &lt;code&gt;SURGE_TOKEN&lt;/code&gt;, run &lt;code&gt;surge token&lt;/code&gt; from your own computer. This will give you a token that you can save in the &lt;code&gt;SURGE_TOKEN&lt;/code&gt; secret, so your deployments are associated with your Surge account.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try It Out!&lt;/h2&gt;

&lt;p&gt;At this point, you should be able to create a pull request and then add a &lt;code&gt;/deploy&lt;/code&gt; comment on it. Check out the Actions tab of the repository to watch your actions run or see the logs for old action runs.&lt;/p&gt;

&lt;h2 id=&quot;implementing-teardown&quot;&gt;Implementing Teardown&lt;/h2&gt;

&lt;p&gt;The next step is to implement teardown. In your GitHub repository, open up the Actions tab and choose “New workflow” and then “Set up a workflow yourself”. Name the file &lt;code&gt;teardown-command.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Inputs:
#  client_payload.pull_request.number - PR number

name: Delete PR Staging Environment

on:
  repository_dispatch:
    types: [teardown-command]

env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Teardown surge.sh
        run: npx surge teardown ${{ env.DOMAIN }}
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: ${{ format('Tore down {0}', env.DOMAIN) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one is pretty simple; we use a similar pattern to &lt;code&gt;/deploy&lt;/code&gt; but there are fewer steps since there’s no build (or even a checkout). We use the same pattern for defining &lt;code&gt;DOMAIN&lt;/code&gt; and the Surge secrets, and then we run &lt;code&gt;npx surge teardown ${{ env.DOMAIN }}&lt;/code&gt; to tear down the environment for this pull request. The last step adds a comment to the PR indicating that its staging environment has been torn down.&lt;/p&gt;

&lt;h2 id=&quot;who-can-issue-commands&quot;&gt;Who Can Issue Commands?&lt;/h2&gt;

&lt;p&gt;By default, only developers with write access to your repository can issue slash commands. This is the default behavior of &lt;code&gt;slash-command-dispatch&lt;/code&gt;. So if this is just your project, then only you can create or tear down staging environments. If you have an open-source project - and if creating staging environments is cheap for you - you can edit the &lt;code&gt;slash-commands.yml&lt;/code&gt; file and add a &lt;code&gt;permission&lt;/code&gt; argument to &lt;code&gt;slash-command-dispatch&lt;/code&gt; with the value &lt;code&gt;none&lt;/code&gt;. That way, &lt;em&gt;anyone&lt;/em&gt; would be able to create and tear down staging environments.&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next Time&lt;/h2&gt;

&lt;p&gt;ChatOps are cool. But can we automate this further?&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-3-implementing-deploy-and-teardown.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-3-implementing-deploy-and-teardown.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 2: Slash Commands</title>
        <description>&lt;h2 id=&quot;slash-commands&quot;&gt;Slash Commands&lt;/h2&gt;

&lt;p&gt;I’m not very familiar with the &lt;em&gt;term&lt;/em&gt; “ChatOps”, but I’ve seen ChatOps actually &lt;em&gt;used&lt;/em&gt; a lot. The idea is that you can set up chat bots to listen to your team’s chat and take actions based on commands you can type in the chat.&lt;/p&gt;

&lt;p&gt;What we’ll be setting up here is pretty close to that; we want to be able to add a comment to a PR with a “slash command” that will do our deploy (or teardown) for us. Specifically, we’ll be using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/deploy&lt;/code&gt; to deploy a PR to its staging environment.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/teardown&lt;/code&gt; to tear down a PR staging environment when we’re done with the PR.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dispatching-slash-commands&quot;&gt;Dispatching Slash Commands&lt;/h2&gt;

&lt;p&gt;The way we’ll be setting this up is to have one GitHub Action that listens for PR comments and decides if they have any slash commands. For any slash commands, we want to dispatch an event to our repository.&lt;/p&gt;

&lt;p&gt;In your GitHub repository, open up the Actions tab and choose “Set up a workflow yourself”. Name the file &lt;code&gt;slash-commands.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Translates slash-commands in issue comments to repository-dispatch events.

# Name of the action (displayed in the Actions tab)
name: Slash command dispatch

# Triggers for this action.
#  This one only runs when a comment is added to an issue.
#  (on GitHub, pull requests are one kind of &quot;issue&quot;)
on:
  issue_comment:
    types: [ created ]

# When the trigger fires, we run these jobs.
jobs:
  dispatch: #  We just have one job, called &quot;dispatch&quot;
    runs-on: ubuntu-latest # The OS we run on. Doesn't really matter for this simple action.
    steps: # This job only has one step, called &quot;Dispatch slash command&quot;
      - name: Dispatch slash command
        uses: peter-evans/slash-command-dispatch@v1 # Uses a pre-built action from the Marketplace
        with: # These are the parameters passed to the action
          token: ${{ secrets.DISPATCH_TOKEN }} # This action needs a personal access token in order to dispatch
          reactions: false # By default, this action will add reactions to the slash command comment; this turns those off
          issue-type: pull-request # We only want to look for slash commands in pull requests, not other issues
          commands: deploy, teardown # The slash commands we look for: /deploy and /teardown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, our GitHub Action is simple; &lt;a href=&quot;https://github.com/marketplace/actions/slash-command-dispatch&quot;&gt;&lt;code&gt;slash-command-dispatch&lt;/code&gt;&lt;/a&gt; is specifically designed for matching slash commands in issue and/or PR comments, and dispatching a command to the repository.&lt;/p&gt;

&lt;p&gt;Note that we’re passing a &lt;code&gt;token&lt;/code&gt; to this GitHub Action, and we’re taking the value from &lt;code&gt;secrets.DISPATCH_TOKEN&lt;/code&gt;. We don’t have that secret yet, so let’s set that up now. In order to dispatch, &lt;code&gt;slash-command-dispatch&lt;/code&gt; needs a token with write access to the repository. You can get one by &lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line&quot;&gt;following the GitHub directions&lt;/a&gt;; when creating your token, you’ll want &lt;code&gt;public_repo&lt;/code&gt; scope if your repository is public - otherwise, you’ll want &lt;code&gt;repo&lt;/code&gt; scope. Copy that access token value once it’s created.&lt;/p&gt;

&lt;p&gt;Next, create a &lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets&quot;&gt;repository secret&lt;/a&gt; named &lt;code&gt;DISPATCH_TOKEN&lt;/code&gt; and paste that value in… and if you did that without doing any verification, then you just failed Security 101.&lt;/p&gt;

&lt;p&gt;On a more serious note, right now the world of GitHub Actions (and its Marketplace) are in the “just trying to get it to work” stage. And in that stage of technology adoption, security is often overlooked. So when you’re reading some blog on the Internet and it tells you to make a personal access token and paste it somewhere, you should take a step back and really think about what’s going on.&lt;/p&gt;

&lt;h2 id=&quot;security-concerns&quot;&gt;Security Concerns&lt;/h2&gt;

&lt;p&gt;At the very least, take a look at the code that’s receiving the token. I’m using &lt;a href=&quot;https://github.com/marketplace/actions/slash-command-dispatch&quot;&gt;&lt;code&gt;peter-evans/slash-command-dispatch&lt;/code&gt;&lt;/a&gt; in the example above. Does it look like an upstanding project? Good documentation? High(ish) number of stars? Not forked from a different project? Who is this “Peter Evans” and does he seem like a trustworthy person? Go ahead and open the action’s repository; does the code look OK?&lt;/p&gt;

&lt;p&gt;Any time you’re passing a token to an action, you should do this kind of research, if not more. If you’re not comfortable with pasting a personal access token, there are a few alternative approaches.&lt;/p&gt;

&lt;h3 id=&quot;alternative-approaches&quot;&gt;Alternative Approaches&lt;/h3&gt;

&lt;p&gt;The security concerns above are due to the choice to &lt;em&gt;dispatch&lt;/em&gt; the repository events rather than handling them directly, so we end up handing a token to a third-party GitHub Action.&lt;/p&gt;

&lt;p&gt;Alternative approaches include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Performing a security audit of the GitHub Action and then SHA-locking to that specific version. I.e., instead of &lt;code&gt;peter-evans/slash-command-dispatch@v1&lt;/code&gt;, use &lt;code&gt;peter-evans/slash-command-dispatch@8a61cc727ff2d87afea4c46b11145543bef0c02f&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Performing a security audit of the GitHub Action, cloning it to your own personal GitHub Action, and using that one instead.&lt;/li&gt;
  &lt;li&gt;Writing your own GitHub Action that does essentially the same thing.&lt;/li&gt;
  &lt;li&gt;Creating a separate GitHub account, inviting that account to your repository (in a &lt;code&gt;write&lt;/code&gt; role), accepting that invitation, and using a &lt;code&gt;public_repo&lt;/code&gt;/&lt;code&gt;repo&lt;/code&gt; token from &lt;em&gt;that&lt;/em&gt; account instead of your personal account.
    &lt;ul&gt;
      &lt;li&gt;This ensures that the token can only be used to disrupt this &lt;em&gt;one&lt;/em&gt; repository, instead of &lt;em&gt;all&lt;/em&gt; your repositories.&lt;/li&gt;
      &lt;li&gt;It does still allow write access to this repository, though.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Handling all slash commands directly instead of dispatching.
    &lt;ul&gt;
      &lt;li&gt;You have to either combine all slash command handling into a single file (which makes your workflow file messy), or have multiple slash command handler actions (which makes your PR “checks” section messy).&lt;/li&gt;
      &lt;li&gt;At the time of this writing, there isn’t a great GitHub Action for parsing multiple slash commands and setting &lt;a href=&quot;https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#steps-context&quot;&gt;step outputs&lt;/a&gt; that can be used by future steps.&lt;/li&gt;
      &lt;li&gt;Even if such an action did exist, the resulting &lt;code&gt;slash-command.yml&lt;/code&gt; file would get rather long and ugly with &lt;code&gt;if:&lt;/code&gt; conditionals throughout.&lt;/li&gt;
      &lt;li&gt;However, this is the only alternative that is fully safe, since you would no longer require a personal access token &lt;em&gt;at all&lt;/em&gt;. Because it doesn’t do dispatching.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve tried out a few alternatives, and I tend to prefer either just doing it the easy way (as done in this post), or creating a separate GitHub account (to limit the scope of a breached token to this single repository). I don’t like handling all slash commands directly instead of dispatching, for reasons that will become more clear when we extend this solution to automate deploy and teardown commands (in a future post).&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-goal&quot;&gt;Back to The Goal&lt;/h2&gt;

&lt;p&gt;The rest of this blog series assumes that you have done a sufficient security check and have stored a token in the repository secrets, named &lt;code&gt;DISPATCH_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dispatch&quot;&gt;Dispatch&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;slash-command-dispatch&lt;/code&gt; action recognizes slash commands and then sends a &lt;a href=&quot;https://help.github.com/en/actions/reference/events-that-trigger-workflows#external-events-repository_dispatch&quot;&gt;repository dispatch event&lt;/a&gt; to the repository. &lt;code&gt;repository_dispatch&lt;/code&gt; is a special event that you can listen for (with another GitHub Action) and respond to.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;slash-command-dispatch&lt;/code&gt; follows a convention where the commands it listens to (&lt;code&gt;deploy&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; in our case) are sent with the &lt;code&gt;repository_dispatch&lt;/code&gt; event, with a &lt;code&gt;-command&lt;/code&gt; suffix. So, just like today’s GitHub Action listened for an &lt;code&gt;issue_comment&lt;/code&gt; event of type &lt;code&gt;created&lt;/code&gt;, next time we’ll write GitHub Actions that listen for a &lt;code&gt;repository_dispatch&lt;/code&gt; event of type &lt;code&gt;deploy-command&lt;/code&gt; or &lt;code&gt;teardown-command&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;At this point, you should have a “ChatOps bot” of sorts that listens for &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; comments on your pull requests, and then translates those into &lt;code&gt;repository_dispatch&lt;/code&gt; events. Next time we’ll add handlers for those events.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-2-slash-commands.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-2-slash-commands.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 1: Introduction</title>
        <description>&lt;h2 id=&quot;the-goal&quot;&gt;The Goal&lt;/h2&gt;

&lt;p&gt;This is a short series of posts on how to use GitHub Actions to deploy and teardown staging environments for your pull requests.&lt;/p&gt;

&lt;p&gt;The idea is that each pull request on GitHub represents some change (feature, bug fix, etc) that you want to test out before merging it into master. This series looks at using GitHub Actions to deploy the PR code into an isolated staging environment, and then tearing down that environment when you’re done testing.&lt;/p&gt;

&lt;h2 id=&quot;example-services&quot;&gt;Example Services&lt;/h2&gt;

&lt;p&gt;Since this series is focusing on using GitHub Actions, our environments will be deliberately simple.&lt;/p&gt;

&lt;p&gt;I’ll be using &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; as the framework for the example project. I have not used Gatsby yet, but I’m considering moving this blog to it. Gatsby is a React-based front-end development system that produces static files as its output.&lt;/p&gt;

&lt;p&gt;I’ll be using &lt;a href=&quot;https://surge.sh/&quot;&gt;Surge&lt;/a&gt; as a deployment engine. I never heard of Surge until I was reading the docs for Gatsby, but I must say I’m impressed with it! Surge allows you to quickly publish any folder to a domain name, and just as quickly tear it down again.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;It’s best if you follow along right on GitHub.&lt;/p&gt;

&lt;p&gt;First, create a test repository (mine is &lt;a href=&quot;https://github.com/StephenClearyExamples/PullRequestStaging&quot;&gt;here&lt;/a&gt;); the following steps give you a repository with a tiny Gatsby site on it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a new repository on GitHub and clone it to your local machine.&lt;/li&gt;
  &lt;li&gt;Create a new “hello, world” Gatsby project in the &lt;code&gt;my-hello-world&lt;/code&gt; folder by running &lt;code&gt;npx gatsby new my-hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy the files in the &lt;code&gt;my-hello-world&lt;/code&gt; folder to the root of your repository.&lt;/li&gt;
  &lt;li&gt;Commit and push.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, sign up for a Surge account:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install Surge by running &lt;code&gt;npm install --global surge&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sign up for a Surge account by running &lt;code&gt;surge login&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optionally, you can deploy what’s currently on your master branch:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build the Gatsby site by running &lt;code&gt;npx gatsby build&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Gatsby output is placed in the &lt;code&gt;public&lt;/code&gt; folder.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Choose a domain name that should be unique.&lt;/li&gt;
  &lt;li&gt;Deploy the Gatsby output to your domain name by running &lt;code&gt;surge ./public MY-UNIQUE-DOMAIN.surge.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quick-surge-primer&quot;&gt;Quick Surge Primer&lt;/h2&gt;

&lt;p&gt;Be aware that running Surge without any arguments will attempt to deploy the current folder. If you need help, you have to pass a &lt;code&gt;--help&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;At any time, you can check the status of your Surge deployments by running &lt;code&gt;surge list&lt;/code&gt;, and you can tear down any Surge deployment by running &lt;code&gt;surge teardown&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;That’s it for the command line; the rest of the repository updates can be done entirely on GitHub.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-1.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-1.html</guid>
      </item>
    
      <item>
        <title>ValueTask Restrictions</title>
        <description>&lt;h2 id=&quot;valuetask-restrictions&quot;&gt;ValueTask Restrictions&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt; is a type that was introduced waaaay back in .NET Core 1.0, almost four years ago (which is pretty much forever in Internet time). However, value tasks are just now becoming more commonly used. Language features including asynchronous disposal and asynchronous enumerables (a.k.a. asynchronous streams) are thrusting value tasks in front of many more developers.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-a-simple-description&quot;&gt;ValueTask: A Simple Description&lt;/h2&gt;

&lt;p&gt;Here’s value tasks in a single sentence: a value task (&lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt;) is a more efficient task than a reference task (&lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As the name implies, a &lt;em&gt;value&lt;/em&gt; task is a value type rather than a reference type (like ordinary tasks). When using the reference type of task (e.g., &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;), even if the value is known synchronously (e.g., using &lt;code&gt;Task.FromResult&lt;/code&gt;), the &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; wrapper object still needs to be allocated. Value tasks avoid this allocation because they are value types; when a value is known synchronously, code can create and return a value task without having to do any allocation. In addition to a clear performance win in the synchronous case, value tasks often produce more efficient code even in many common asynchronous cases.&lt;/p&gt;

&lt;p&gt;However, value tasks come with two important restrictions. Before adopting value tasks everywhere as a replacement for reference tasks, your team needs to understand these restrictions - and if you’re writing a library, you should make sure your consumers understand these restrictions, too.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-restriction-1-only-consume-once-or-yoco-you-only-consume-once&quot;&gt;ValueTask Restriction #1: Only Consume Once (or “YOCO: You Only Consume Once”)&lt;/h2&gt;

&lt;p&gt;Each value task can only be consumed once. This is because value tasks can be reused, so once a value task is consumed, that value task can then &lt;em&gt;change what it represents&lt;/em&gt; so it now represents some other, unrelated operation. This is unusual for value types, so it can be surprising.&lt;/p&gt;

&lt;p&gt;To clarify, by “consume”, I mean use &lt;code&gt;await&lt;/code&gt; to asynchronously wait for the value task to compete, &lt;em&gt;or&lt;/em&gt; use &lt;code&gt;AsTask&lt;/code&gt; to convert the value task into a regular task.&lt;/p&gt;

&lt;p&gt;Most of the time, the calling code just calls &lt;code&gt;await&lt;/code&gt; immediately after calling the function (like &lt;code&gt;await FuncAsync();&lt;/code&gt;), and value tasks work perfectly fine with code like this. But if your code does an &lt;code&gt;await&lt;/code&gt; more than once, or wants to use &lt;code&gt;Task.WhenAll&lt;/code&gt; or &lt;code&gt;Task.WhenAny&lt;/code&gt;, then it should &lt;em&gt;not&lt;/em&gt; &lt;code&gt;await&lt;/code&gt; the value task - it should convert the value task to a reference task (by calling &lt;code&gt;AsTask&lt;/code&gt;) exactly once, and then only use that reference task from then on. Reference tasks may be safely &lt;code&gt;await&lt;/code&gt;ed multiple times; a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; never changes what it represents.&lt;/p&gt;

&lt;p&gt;Code consuming a &lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt; should only consume it once, and after that the &lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt; should be completely ignored.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-restriction-2-only-consume-asynchronously-or-no-more-blocking-now-i-mean-it&quot;&gt;ValueTask Restriction #2: Only Consume Asynchronously (or “No More Blocking Now, I Mean It!”)&lt;/h2&gt;

&lt;p&gt;Blocking on asynchronous code has &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&quot;&gt;never been the ideal solution&lt;/a&gt;, but in some cases it is necessary. It is &lt;em&gt;possible&lt;/em&gt; to block on reference tasks using &lt;code&gt;GetAwaiter().GetResult()&lt;/code&gt; (or &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Wait()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;However, this will not work for value tasks. You simply &lt;strong&gt;cannot&lt;/strong&gt; block on value tasks. If you &lt;em&gt;must&lt;/em&gt; block (again, this is never ideal), then you’ll need to convert the value task to a reference task by calling &lt;code&gt;AsTask&lt;/code&gt;, and then block on that reference task.&lt;/p&gt;

&lt;p&gt;Unfortunately, value task does contain a &lt;code&gt;Result&lt;/code&gt; property, and the code &lt;code&gt;GetAwaiter().GetResult()&lt;/code&gt; will compile. So code that &lt;em&gt;attempts&lt;/em&gt; to block on a value task will compile just fine. The problem is that these code patterns &lt;em&gt;do not always block&lt;/em&gt; when used on a value task. The resulting code has undefined behavior. Just don’t go there.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-restrictions-and-the-pitfall-of-library-upgrades&quot;&gt;ValueTask Restrictions and the Pitfall of Library Upgrades&lt;/h2&gt;

&lt;p&gt;With &lt;em&gt;both&lt;/em&gt; of the restrictions mentioned above, there is an additional value task pitfall when it comes to library upgrades. To understand why, you need to understand a bit more about how value tasks are implemented.&lt;/p&gt;

&lt;p&gt;There are actually three different kinds of value tasks (as of this writing): result value wrappers, reference task wrappers, and the more complex (and more efficient) value task source wrappers. If consuming code violates either of the restrictions above, it will have undefined behavior that can be different depending on what kind of value task is returned.&lt;/p&gt;

&lt;p&gt;So one problem is this: consider a library that returns value tasks. For version 1.0.0, this library just uses simple reference task wrappers for its value tasks. If users of the library write code that consumes the value tasks multiple times &lt;em&gt;or&lt;/em&gt; blocks on the value tasks, then (as of this writing) that code will just happen to work as the consumers expect it to. The undefined behavior &lt;em&gt;just happens&lt;/em&gt; to be the desired behavior. However, if version 1.0.1 of that library switches to the more efficient value task source wrappers, then those consumers would suddenly break. Not at compile time, mind you - because the compiler will still happily compile this code - but at runtime. If the user code blocks, that could throw exceptions where there were none before. If the user code consumes the value task multiple times, that could cause very strange behavior that can be extremely difficult to debug (since it could be &lt;code&gt;await&lt;/code&gt;ing operations it didn’t even start).&lt;/p&gt;

&lt;p&gt;I say all that to say this: before adopting value tasks, you need to be sure your consumers internalize these restrictions! Once value task restrictions are widely understood, then we can start to use value tasks as a more general and widespread replacement for reference tasks.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR:&lt;/h2&gt;

&lt;p&gt;When adopting value tasks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Only Consume Once (or “YOCO: You Only Consume Once”)&lt;/li&gt;
  &lt;li&gt;Only Consume Asynchronously (or &lt;a href=&quot;https://www.youtube.com/watch?v=ury9eoLnb-0&quot;&gt;“No More Blocking Now, I Mean It!”&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/03/valuetask.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/03/valuetask.html</guid>
      </item>
    
      <item>
        <title>Microsoft.Extensions.Logging, Part 2: Types</title>
        <description>&lt;h2 id=&quot;factory-provider-repository-builders&quot;&gt;Factory Provider Repository Builders&lt;/h2&gt;

&lt;p&gt;Yeah, naming is hard.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;, there are two types in particular that I kept conflating: &lt;code&gt;ILoggerProvider&lt;/code&gt; and &lt;code&gt;ILoggerFactory&lt;/code&gt;. Even though they both can create instances of &lt;code&gt;ILogger&lt;/code&gt;, they are actually completely different!&lt;/p&gt;

&lt;p&gt;In this post, I’m going to cover the main types of &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; and describe their intended use.&lt;/p&gt;

&lt;h2 id=&quot;loglevel&quot;&gt;LogLevel&lt;/h2&gt;

&lt;p&gt;Like all other logging frameworks, &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; defines a sequence of levels for its logs. In increasing order of severity, they are &lt;code&gt;Trace&lt;/code&gt;, &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Information&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, and &lt;code&gt;Critical&lt;/code&gt;. The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel&quot;&gt;meanings of these values&lt;/a&gt; are well documented, along with &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/#log-level&quot;&gt;advice on when to use each&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is another “log level” which is not really a log level: &lt;code&gt;None&lt;/code&gt;. This is technically part of the enumeration, but is used during &lt;em&gt;configuration&lt;/em&gt; to indicate that no logs for that part of the system should be logged. The &lt;code&gt;None&lt;/code&gt; value is not used during logging.&lt;/p&gt;

&lt;h2 id=&quot;ilogger&quot;&gt;ILogger&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ILogger&lt;/code&gt; is a logger that your code can use to write log messages to. There are three core methods: &lt;code&gt;IsEnabled&lt;/code&gt; tests whether a log level is enabled on that logger; &lt;code&gt;Log&lt;/code&gt; is the core logging method that is used to write log messages; and &lt;code&gt;BeginScope&lt;/code&gt; defines a logging scope.&lt;/p&gt;

&lt;p&gt;We’ll cover logging scopes later in this series. That leaves &lt;code&gt;IsEnabled&lt;/code&gt; and &lt;code&gt;Log&lt;/code&gt;, which are the core logging methods. There’s a bunch of logging extension methods that build on that core; the common methods like &lt;code&gt;LogInformation&lt;/code&gt; are just wrappers around &lt;code&gt;Log&lt;/code&gt;, with the appropriate arguments.&lt;/p&gt;

&lt;p&gt;Internally, an &lt;code&gt;ILogger&lt;/code&gt; has a “name” (also called a “category”). The idea is that each &lt;code&gt;ILogger&lt;/code&gt; instance is used by a different component of the application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILogger&lt;/code&gt; is a base interface that provides the core logging functionality, but it is seldom used directly. There are some exceptions (e.g., Azure Functions will pass you an &lt;code&gt;ILogger&lt;/code&gt;), but most of the time your code will log to an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;iloggerlttgt&quot;&gt;ILogger&amp;lt;T&amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; is a logger that is named after a type &lt;code&gt;T&lt;/code&gt;. All logs sent to an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; (with the default implementation) will have a logger name/category of &lt;code&gt;typeof(T).FullName&lt;/code&gt;. &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; is derived from &lt;code&gt;ILogger&lt;/code&gt; and adds no new functionality.&lt;/p&gt;

&lt;p&gt;If you’re using dependency injection, an instance of &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; is usually injected into your type &lt;code&gt;T&lt;/code&gt;. So, each time you have a constructor that takes an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;, you are defining a “component” for your application.&lt;/p&gt;

&lt;p&gt;Personally, I’m not a &lt;em&gt;huge&lt;/em&gt; fan of this style of getting a logger, but it works. In my applications, the concept of a “component” seldomly has a 1:1 relationship with “types that log”. It tends to work out best for ASP.NET Controllers, but less so for utility types used by services (where I usually want the utility type to use the service’s component name). Of course, you can just pass an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; (or &lt;code&gt;ILogger&lt;/code&gt;) to the utility type, and that’s the way this is generally resolved.&lt;/p&gt;

&lt;p&gt;So, here’s a question that you may have: if &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; provides no benefit over &lt;code&gt;ILogger&lt;/code&gt; (other than being named after a type &lt;code&gt;T&lt;/code&gt;), why does this type exist at all? The answer is logging extension methods, which we’ll look at in more detail further in this series.&lt;/p&gt;

&lt;h2 id=&quot;iloggerprovider&quot;&gt;ILoggerProvider&lt;/h2&gt;

&lt;p&gt;The logger provider is a type that (drum roll…) provides &lt;code&gt;ILogger&lt;/code&gt; instances. But not just that; it provides &lt;code&gt;ILogger&lt;/code&gt; instances &lt;em&gt;for a specific logging system&lt;/em&gt;. Microsoft publishes &lt;a href=&quot;https://github.com/aspnet/Logging/tree/dev/src&quot;&gt;a few logger providers&lt;/a&gt; that support writing to &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.Debug/&quot;&gt;debugger output&lt;/a&gt;, the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.Console/&quot;&gt;Console&lt;/a&gt;, the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.EventLog/&quot;&gt;Windows Event Log&lt;/a&gt;, &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.EventSource/&quot;&gt;Event Tracing for Windows (ETW)&lt;/a&gt;, and others.&lt;/p&gt;

&lt;p&gt;There are plenty of third-party logging providers, too. The primary purpose of a logging provider is to take log events and forward them to some logging backend. So there are logging providers for all kinds of logging backends: Serilog, Seq, log4net, etc. This allows you to write code that is independent of a logging framework (logging to an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;), and the implementation at runtime hits a specific backend (or multiple ones!).&lt;/p&gt;

&lt;p&gt;You can also create your own implementations of &lt;code&gt;ILoggerProvider&lt;/code&gt;. In my &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis&quot;&gt;DotNetApis project&lt;/a&gt;, I have one provider that &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis/blob/796f146e3027a0c470717befe33457c3dfeab50c/service/DotNetApis.Common/InMemoryLoggerProvider.cs&quot;&gt;stores logs in memory&lt;/a&gt; so they can be returned to the frontend as part of the HTTP response, another provider that &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis/blob/796f146e3027a0c470717befe33457c3dfeab50c/service/DotNetApis.Common/JsonLoggerProvider.cs&quot;&gt;streams JSON logs to a GZIP-compressed Azure blob&lt;/a&gt;, and several others.&lt;/p&gt;

&lt;p&gt;Creating reusable implementations of &lt;code&gt;ILoggerProvider&lt;/code&gt; is perhaps the most underdocumented part of &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;. The providers in my DotNetApis project at this point are incomplete; there is no way I would put them in a NuGet package or anything. A proper, reusable &lt;code&gt;ILoggerProvider&lt;/code&gt; is more involved; later in this series I’ll look specifically at implementing &lt;code&gt;ILoggerProvider&lt;/code&gt; properly, and cover all the necessary details.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILoggerProvider&lt;/code&gt; is a way to extend &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; by &lt;em&gt;implementation&lt;/em&gt;. However, you don’t ever want to &lt;em&gt;consume&lt;/em&gt; a logger provider directly. Even though &lt;code&gt;ILoggerProvider.CreateLogger&lt;/code&gt; creates &lt;code&gt;ILogger&lt;/code&gt; instances, you never actually want to call that method to &lt;em&gt;get&lt;/em&gt; a logger. To get loggers, you want to use dependency injection or &lt;code&gt;ILoggerFactory&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;iloggerfactory&quot;&gt;ILoggerFactory&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ILoggerFactory&lt;/code&gt; is the mastermind that brings together all the types above. Conceptually, an &lt;code&gt;ILoggerFactory&lt;/code&gt; has a collection of &lt;code&gt;ILoggerProvider&lt;/code&gt;s, and the &lt;code&gt;ILoggerFactory&lt;/code&gt; creates &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; instances for the application.&lt;/p&gt;

&lt;h3 id=&quot;registering-iloggerproviders-with-iloggerfactory&quot;&gt;Registering ILoggerProviders with ILoggerFactory&lt;/h3&gt;

&lt;p&gt;This is where the official documentation starts to fall short. In the ASP.NET Core world, ASP.NET Core itself takes care of creating an &lt;code&gt;ILoggerFactory&lt;/code&gt; instance, which it then passes to your application to configure. Your application can then call &lt;code&gt;AddProvider&lt;/code&gt; or a higher-level provider-specific method such as &lt;code&gt;AddDebug&lt;/code&gt;, &lt;code&gt;AddConsole&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Fortunately, even without ASP.NET Core, it’s not too difficult to do this yourself using the &lt;code&gt;LoggerFactory&lt;/code&gt; type in &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddDebug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;getting-iloggerlttgt-instances-from-iloggerfactory&quot;&gt;Getting ILogger&amp;lt;T&amp;gt; Instances from ILoggerFactory&lt;/h3&gt;

&lt;p&gt;In the ASP.NET Core world, the &lt;code&gt;ILoggerFactory&lt;/code&gt; is included in your Dependency Injection container, and it already knows how to get &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; values out of it, and everything is magical rainbows.&lt;/p&gt;

&lt;p&gt;When you’re outside of the ASP.NET Core world, you can still use &lt;code&gt;ILoggerFactory&lt;/code&gt; in this way. You just have to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Provide the &lt;code&gt;ILoggerFactory&lt;/code&gt; instance to your DI container.&lt;/li&gt;
  &lt;li&gt;Configure your DI container to resolve &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; instances by calling &lt;code&gt;ILoggerFactory.GetLogger&amp;lt;T&amp;gt;()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The exact instructions on how to do this depends on your DI container of choice.&lt;/p&gt;

&lt;p&gt;Of course, there’s another option, too. You can just provide the &lt;code&gt;ILoggerFactory&lt;/code&gt; instance, and your consuming types can take the &lt;code&gt;ILoggerFactory&lt;/code&gt; and create their own &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-iloggerfactorys-iloggers&quot;&gt;What Are the ILoggerFactory’s ILoggers?&lt;/h2&gt;

&lt;p&gt;Before closing out this post, I just want to point out that the &lt;code&gt;ILogger&lt;/code&gt; instances provided by &lt;code&gt;ILoggerFactory&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; the same as the &lt;code&gt;ILogger&lt;/code&gt; instances provided by &lt;code&gt;ILoggerProvider&lt;/code&gt;. An &lt;code&gt;ILoggerProvider&lt;/code&gt; &lt;code&gt;ILogger&lt;/code&gt; is a logger that logs &lt;em&gt;to that specific provider&lt;/em&gt;. An &lt;code&gt;ILoggerFactory&lt;/code&gt; &lt;code&gt;ILogger&lt;/code&gt; is a logger that logs &lt;em&gt;to all registered providers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In other words, the &lt;code&gt;ILoggerFactory&lt;/code&gt; &lt;code&gt;ILogger&lt;/code&gt;/&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; loggers are &lt;em&gt;composite&lt;/em&gt; loggers; they forward log messages to each provider’s &lt;code&gt;ILogger&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;review&quot;&gt;Review&lt;/h1&gt;

&lt;p&gt;This post has described the various logging types from the component’s perspective (&lt;code&gt;ILogger&lt;/code&gt;) and working out towards the application’s perspective (&lt;code&gt;ILoggerFactory&lt;/code&gt;). Let’s briefly review, going the other way this time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILoggerFactory&lt;/code&gt; is a collection of &lt;code&gt;ILoggerProvider&lt;/code&gt;s that creates composite &lt;code&gt;ILogger&lt;/code&gt;/&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; loggers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILoggerProvider&lt;/code&gt; ia a provider for a &lt;em&gt;specific&lt;/em&gt; logging system. It provides &lt;code&gt;ILogger&lt;/code&gt; loggers to the &lt;code&gt;ILoggerFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each component gets an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; (or &lt;code&gt;ILogger&lt;/code&gt;) from the &lt;code&gt;ILoggerFactory&lt;/code&gt; that it should use for logging.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/06/microsoft-extensions-logging-part-2-types.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/06/microsoft-extensions-logging-part-2-types.html</guid>
      </item>
    
  </channel>
</rss>
