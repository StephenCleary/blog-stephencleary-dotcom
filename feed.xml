<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary&#39;s blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>http://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="http://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="http://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>React/Redux TodoMVC, Part 6: Refactoring</title>
        <description>&lt;p&gt;Today we’re going to start breaking up that huge &lt;code&gt;Main&lt;/code&gt; component. Yes, I said “huge” - in the React world, smaller components are more normal. React encourages the creation of small, reusable components, which are then composed together.&lt;/p&gt;

&lt;p&gt;There’s three big parts to the &lt;code&gt;Main&lt;/code&gt; component: a header, a main part, and a footer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section className=&quot;todoapp&quot;&amp;gt;
    &amp;lt;header className=&quot;header&quot;&amp;gt;
        ...
    &amp;lt;/header&amp;gt;
    &amp;lt;section className=&quot;main&quot;&amp;gt;
        ...
    &amp;lt;/section&amp;gt;
    &amp;lt;footer className=&quot;footer&quot;&amp;gt;
        ...
    &amp;lt;/footer&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I already have a &lt;code&gt;Main&lt;/code&gt; component (oops), at the end of this point I’m going to rename my &lt;code&gt;Main&lt;/code&gt; component to be &lt;code&gt;TodoApp&lt;/code&gt; instead. My goal here is consistency: I’m going to break up &lt;code&gt;TodoApp&lt;/code&gt; into &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Main&lt;/code&gt;, and &lt;code&gt;Footer&lt;/code&gt;, in a way that the &lt;code&gt;class&lt;/code&gt; of each HTML element will match the name of its React component. This just results in more maintainable code.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;If I had more control over the HTML output, I could choose to change the &lt;code&gt;class&lt;/code&gt; for the main section from &lt;code&gt;main&lt;/code&gt; to something like &lt;code&gt;todos&lt;/code&gt;, and keep my old &lt;code&gt;Main&lt;/code&gt; component as it is.&lt;/p&gt;

  &lt;p&gt;However, in this case, the TodoMVC app should have fairly specific HTML output, to enable things like &lt;a href=&quot;https://github.com/tastejs/todomvc/tree/master/tests&quot;&gt;automated acceptance testing&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;So, I have to rename my old &lt;code&gt;Main&lt;/code&gt; component because I didn’t think far enough ahead. Sorry about that. I &lt;em&gt;am&lt;/em&gt; totally making this up as I go along…&lt;/p&gt;

&lt;h2 id=&quot;breaking-up-is-easy-to-do&quot;&gt;Breaking Up is Easy to Do&lt;/h2&gt;

&lt;p&gt;Let’s break out the child components first. In React, a common pattern is to use a &lt;code&gt;components&lt;/code&gt; subdirectory to hold all the components. In larger apps, there can be further subdirectories underneath this, but this app is small enough that all the components should fit. I think. :)&lt;/p&gt;

&lt;p&gt;I’m going to (temporarily) call that middle child &lt;code&gt;Todos&lt;/code&gt; instead of &lt;code&gt;Main&lt;/code&gt; (I’ll fix this in the next step). The &lt;code&gt;Todos&lt;/code&gt; ends up looking like this (in &lt;code&gt;components/todos.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;

export default function Todos() {
    // This section should be hidden by default and shown when there are todos
    return (
        &amp;lt;section className=&quot;main&quot;&amp;gt;
          (copied from main.jsx)
        &amp;lt;/section&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that was pretty easy… The &lt;code&gt;Footer&lt;/code&gt; follows the exact same pattern (exposing a &lt;code&gt;Footer&lt;/code&gt; component from &lt;code&gt;components/footer.jsx&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The header is a bit more difficult, because we have the &lt;code&gt;dispatch&lt;/code&gt; method coming in and used in the header. There are three common ways to approach this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For those who like their dumb components to be &lt;em&gt;really&lt;/em&gt; dumb, then the &lt;code&gt;dispatch&lt;/code&gt; method is only connected to the smart component parent (in this case, &lt;code&gt;Main&lt;/code&gt;). &lt;code&gt;Main&lt;/code&gt; will then bind &lt;code&gt;dispatch&lt;/code&gt; to the action creator (&lt;code&gt;TodoActions.add&lt;/code&gt;), resulting in a new function. That function is then passed down to the dumb component, which uses it to respond to the user action.&lt;/li&gt;
  &lt;li&gt;For those who like their dumb components to be &lt;em&gt;somewhat&lt;/em&gt; dumb, then the &lt;code&gt;dispatch&lt;/code&gt; method is only connected to the smart component parent (&lt;code&gt;Main&lt;/code&gt;). &lt;code&gt;Main&lt;/code&gt; will then pass &lt;code&gt;dispatch&lt;/code&gt; down to the dumb component, and the dumb component calls the action creator (&lt;code&gt;TodoActions.add&lt;/code&gt;) and passes the resulting action to the &lt;code&gt;dispatch&lt;/code&gt; it got from its parent.&lt;/li&gt;
  &lt;li&gt;For those who like their dumb components to be &lt;em&gt;only a little&lt;/em&gt; dumb, then the &lt;code&gt;dispatch&lt;/code&gt; method is connected to the dumb component directly. The dumb component calls the action creator (&lt;code&gt;TodoActions.add&lt;/code&gt;) and passes the resulting action to its own &lt;code&gt;dispatch&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You could argue that the first option is the “most pure”, and the last one is “least pure”. While there are advantages to purity (namely, reusability), in my (limited) experience I feel that the repetitive boilerplate required by the purer approaches outweighs their advantages. For this reason, I take the third approach and just connect the dumb component so it gets its own &lt;code&gt;dispatch&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;Applying this to the &lt;code&gt;Header&lt;/code&gt; yields this (in &lt;code&gt;components/header.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;
import TodoActions from &#39;../actions/todoActions&#39;;

function Header({dispatch}) {
    return (
        &amp;lt;header className=&quot;header&quot;&amp;gt;
            &amp;lt;h1&amp;gt;todos&amp;lt;/h1&amp;gt;
            &amp;lt;input className=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autoFocus onBlur={e =&amp;gt; dispatch(TodoActions.add(e.target.value))}/&amp;gt;
        &amp;lt;/header&amp;gt;
    );
}

export default connect()(Header);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I’m connecting the &lt;code&gt;Header&lt;/code&gt; component, so that it gets &lt;code&gt;dispatch&lt;/code&gt;, which it then uses directly to dispatch the &lt;code&gt;ADD_TODO&lt;/code&gt; action at the appropriate time.&lt;/p&gt;

&lt;p&gt;Now that all the components are broken out, &lt;code&gt;Main&lt;/code&gt; is quite simple (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Main() {
    return (
        &amp;lt;section className=&quot;todoapp&quot;&amp;gt;
            &amp;lt;Header/&amp;gt;
            &amp;lt;Todos/&amp;gt;
            &amp;lt;Footer/&amp;gt;
        &amp;lt;/section&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;renaming&quot;&gt;Renaming&lt;/h2&gt;

&lt;p&gt;Finally, I have to do a bit of cleanup, because I chose a poor name (&lt;code&gt;Main&lt;/code&gt;) without thinking of my HTML structure first.&lt;/p&gt;

&lt;p&gt;So, I’m going to rename the old &lt;code&gt;Main&lt;/code&gt; to &lt;code&gt;TodoApp&lt;/code&gt; instead (and also change the file name from &lt;code&gt;main.jsx&lt;/code&gt; to &lt;code&gt;todoApp.jsx&lt;/code&gt;), and then rename &lt;code&gt;Todos&lt;/code&gt; to &lt;code&gt;Main&lt;/code&gt; (and change the file name from &lt;code&gt;components/todos.jsx&lt;/code&gt; to &lt;code&gt;components/main.jsx&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now the component naming scheme is more maintainable: each part’s &lt;code&gt;class&lt;/code&gt; attribute matches the component name and the file name in which that component lives.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/9c9959be0a85965098c40db1878f5a84420ae015&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/9c9959be0a85965098c40db1878f5a84420ae015/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 May 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/05/refactoring.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/05/refactoring.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 5: Dispatching</title>
        <description>&lt;p&gt;Well, I think it’s about time our app did something!&lt;/p&gt;

&lt;p&gt;The official &lt;a href=&quot;https://github.com/tastejs/todomvc/blob/master/app-spec.md&quot;&gt;TodoMVC application specification&lt;/a&gt; says we’re supposed to create a TODO item if the user types in the input box at the top and then tabs out of it.&lt;/p&gt;

&lt;p&gt;Let’s do it!&lt;/p&gt;

&lt;h2 id=&quot;getting-the-dispatcher&quot;&gt;Getting the Dispatcher&lt;/h2&gt;

&lt;p&gt;Redux provides a way to get a &lt;code&gt;dispatch&lt;/code&gt; method passed to our view components. Currently, our &lt;code&gt;Main&lt;/code&gt; view component looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Main() {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Redux, we can use &lt;a href=&quot;https://github.com/rackt/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;the &lt;code&gt;connect&lt;/code&gt; method&lt;/a&gt; to notify the &lt;code&gt;Provider&lt;/code&gt; that we will need the &lt;code&gt;dispatch&lt;/code&gt; method. &lt;code&gt;Main&lt;/code&gt; now looks like this (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function MainImpl({dispatch}) {
    ...
}
const Main = connect()(MainImpl);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code would be a bit cleaner if we were defining &lt;code&gt;Main&lt;/code&gt; in its own file. And we will, shortly. :)&lt;/p&gt;

&lt;h2 id=&quot;using-the-dispatcher&quot;&gt;Using the Dispatcher&lt;/h2&gt;

&lt;p&gt;Now, when the user tabs off that input field, we want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read the text of that field.&lt;/li&gt;
  &lt;li&gt;Pass that text to our &lt;code&gt;ADD_TODO&lt;/code&gt; action creator, which returns us an &lt;code&gt;ADD_TODO&lt;/code&gt; action.&lt;/li&gt;
  &lt;li&gt;Pass that &lt;code&gt;ADD_TODO&lt;/code&gt; action to &lt;code&gt;dispatch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to just do this all inline for now. The old JSX element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input className=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autoFocus/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the new JSX element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input className=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autoFocus onBlur={e =&amp;gt; dispatch(TodoActions.add(e.target.value))}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, our application can actually create a todo!&lt;/p&gt;

&lt;h2 id=&quot;seeing-it-in-action&quot;&gt;Seeing It in Action&lt;/h2&gt;

&lt;p&gt;Our application doesn’t actually &lt;em&gt;display&lt;/em&gt; the todo items yet, but we can see the results in our Redux DevTools:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxResult1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There you can see the &lt;code&gt;ADD_TODO&lt;/code&gt; action that we created, and the result that it had on the application state (namely, adding a todo). We can expand that state:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxResult2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and see that the new todo item was added with the text I typed in, and with a &lt;code&gt;completed&lt;/code&gt; value of &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s working! :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/3f564477ba32604024f4fa3406f8edf9272ba798&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/3f564477ba32604024f4fa3406f8edf9272ba798/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/04/dispatching.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/04/dispatching.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 4: Debugging</title>
        <description>&lt;p&gt;The debugging support available for React and Redux is amazing! When you do make mistakes in your app, React will give you helpful console error messages.&lt;/p&gt;

&lt;p&gt;In fact, when we converted the HTML to JSX, React started giving us errors in the console:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReactWarnings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a moment and actually read those error messages! Those are nice and detailed, telling you exactly what you did wrong, what the effect will be, how to fix it, and where to fix it! We’ll fix those errors when we make those controls into actual React components; until then, they’ll just be read-only, as the warning states.&lt;/p&gt;

&lt;p&gt;Redux goes even further with its own kind of debugging view, which we’ll add today. This thing looks simple but is just mindblowing in its power (and I was &lt;em&gt;so&lt;/em&gt; late in adding this to DotNetApis!). We’ll be adding this dark box on the right:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxDevTools.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s called &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;Redux DevTools&lt;/a&gt;, and not only does it display a history of all your actions and application state, but it also lets you rewind history and pretend actions never happened!&lt;/p&gt;

&lt;h2 id=&quot;creating-devtools&quot;&gt;Creating DevTools&lt;/h2&gt;

&lt;p&gt;Interestingly enough, the first step in incorporating Redux DevTools is to create the monitors that we want to use to display them.&lt;/p&gt;

&lt;p&gt;For our system, we’ll use the semi-standard &lt;code&gt;LogMonitor&lt;/code&gt;-within-&lt;code&gt;DockMonitor&lt;/code&gt; approach, in a new &lt;code&gt;devTools.jsx&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
import { createDevTools } from &#39;redux-devtools&#39;;
import LogMonitor from &#39;redux-devtools-log-monitor&#39;;
import DockMonitor from &#39;redux-devtools-dock-monitor&#39;;

export default createDevTools(
    &amp;lt;DockMonitor toggleVisibilityKey=&quot;ctrl-h&quot; changePositionKey=&quot;ctrl-j&quot; defaultSize={0.2}&amp;gt;
        &amp;lt;LogMonitor theme=&quot;bright&quot; /&amp;gt;
    &amp;lt;/DockMonitor&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward: we take a &lt;code&gt;LogMonitor&lt;/code&gt;, wrapped in a &lt;code&gt;DockMonitor&lt;/code&gt;, and pass that to the &lt;code&gt;createDevTools&lt;/code&gt; method from &lt;code&gt;redux-devtools&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-devtools&quot;&gt;Using DevTools&lt;/h2&gt;

&lt;p&gt;We also have to include this new &lt;code&gt;DevTools&lt;/code&gt; component in our application, which we can do right in &lt;code&gt;main.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.onload = () =&amp;gt; {
    const root = (
        &amp;lt;Provider store={store}&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;Main/&amp;gt;
                &amp;lt;DevTools/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/Provider&amp;gt;
    );
    render(root, document.getElementById(&#39;app&#39;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we had to put an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapper around our &lt;code&gt;Main&lt;/code&gt; and &lt;code&gt;DevTools&lt;/code&gt; components. This is because &lt;code&gt;Provider&lt;/code&gt; can only have one child component. I find that my React applications do end up with some extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrappers scattered throughout, just due to React limitations. It’s not a big deal, though.&lt;/p&gt;

&lt;p&gt;Finally, we need to hook up the dev tools to our store, in &lt;code&gt;store.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default createStore(reducers, DevTools.instrument());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it! We now have a powerful Redux debugging environment built right in to our application!&lt;/p&gt;

&lt;h2 id=&quot;state-immutability&quot;&gt;State Immutability&lt;/h2&gt;

&lt;p&gt;One of the important rules of Redux is that Redux is in charge of the application state. Our code should never, ever change it.&lt;/p&gt;

&lt;p&gt;Some people like to use ImmutableJS (or something similar) to enforce the immutability of their application state. I prefer to use plain JS objects, but I do put in a “safeguard” that monitors the application state in development builds, and will spit errors out to the console if I ever do change the state.&lt;/p&gt;

&lt;p&gt;This is called the &lt;a href=&quot;https://github.com/leoasis/redux-immutable-state-invariant&quot;&gt;Redux immutable state invariant&lt;/a&gt;, and is a form of &lt;a href=&quot;http://redux.js.org/docs/advanced/Middleware.html&quot;&gt;Redux middleware&lt;/a&gt;. Middleware is a powerful concept: it’s a way of hooking into actions before they actually are processed by the reducers.&lt;/p&gt;

&lt;p&gt;The Redux immutable state invariant can be installed as such (in &lt;code&gt;store.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { applyMiddleware, compose, createStore } from &#39;redux&#39;;
import immutableState from &#39;redux-immutable-state-invariant&#39;;

const middleware = applyMiddleware(immutableState());

const storeFactory = compose(middleware, DevTools.instrument())(createStore);

export default storeFactory(reducers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, first we create our middleware, which in our simple app only consists of the immutable state invariant. In most real-world apps, there are usually other middlewares, such as the popular &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;&lt;code&gt;redux-thunk&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, we take the middleware (which is one kind of store enhancer), and combine it with our DevTools instrumentation (which is another store enhancer), and apply them to the core &lt;code&gt;createStore&lt;/code&gt; method to create our store factory.&lt;/p&gt;

&lt;p&gt;Finally, we invoke the store factory on our reducers, which results in our singleton store.&lt;/p&gt;

&lt;p&gt;This is the most complex part of Redux; it can be a lot to wrap your head around at once. But you’re past the worst part now! As you develop your own application, just add helpers like this individually as you need them, and pay attention to the terminology.&lt;/p&gt;

&lt;p&gt;Oh, and I do expect that JavaScript decorators will clean up this syntax a bit, if they ever get standardized…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/408ecf2c2d5f82b04a284dfaaaa6396f14f0bd42&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/408ecf2c2d5f82b04a284dfaaaa6396f14f0bd42/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/03/debugging.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/03/debugging.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 3: State</title>
        <description>&lt;p&gt;Last time we introduced React; this time we’ll introduce Redux!&lt;/p&gt;

&lt;p&gt;It’s time to add application state. How about the TODO items? Seems like a decent place to start.&lt;/p&gt;

&lt;p&gt;Before we can add our first piece of application state, though, there’s some boilerplate we need to write. It’s time to introduce a lot of new concepts, including Redux.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Please be patient with this step. It seems like a lot to get started, but trust me, once it’s all in place, adding to it is &lt;em&gt;really&lt;/em&gt; simple and easy!&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;actions-and-state&quot;&gt;Actions and State&lt;/h2&gt;

&lt;p&gt;Actions and state are kind of related. Once you have both actions and state, then you can add actions or state individually. But when you’re first starting out, you really have to define actions &lt;em&gt;and&lt;/em&gt; state.&lt;/p&gt;

&lt;p&gt;So, in order to define our list of TODO items (as &lt;em&gt;state&lt;/em&gt;), we also have to define an action to go along with it. An “Add TODO” action sounds like it would be a great fit!&lt;/p&gt;

&lt;h2 id=&quot;actions&quot;&gt;Actions&lt;/h2&gt;

&lt;p&gt;Actions are just plain old objects. Our actions are going to follow the &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; model, which means they’ll have a &lt;code&gt;type&lt;/code&gt; property (generally a string, since that makes debugging and serialization easier) and (for non-error actions) a &lt;code&gt;payload&lt;/code&gt; property. There are a couple other properties, but those are for more advanced scenarios; this simple app will only need &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;payload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s define our “Add TODO” action! Well, it’ll need a &lt;code&gt;type&lt;/code&gt; first off. In real-world projects, it’s useful to define &lt;em&gt;all&lt;/em&gt; the action types in a single file. So, that’s what I’ll do here (in &lt;code&gt;actionTypes.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default {
    ADD_TODO: &#39;ADD_TODO&#39;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, the &lt;code&gt;payload&lt;/code&gt;. The data that travels as arguments of the &lt;code&gt;ADD_TODO&lt;/code&gt; action is the TODO item itself (a string). So the &lt;code&gt;payload&lt;/code&gt; can simply be a string in this case.&lt;/p&gt;

&lt;h2 id=&quot;action-creators&quot;&gt;Action Creators&lt;/h2&gt;

&lt;p&gt;Now that we have a good understanding of the structure of our action, we can implement the action creator. There’s a helper library called &lt;code&gt;redux-actions&lt;/code&gt; that minimizes the repetitive code. With that, we can define our &lt;code&gt;ADD_TODO&lt;/code&gt; action (in &lt;code&gt;actions/todoActions.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ActionTypes from &#39;../actionTypes&#39;;
import { createAction } from &#39;redux-actions&#39;;

export default {
    add: createAction(ActionTypes.ADD_TODO)
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a bit dense… To clarify, we’re creating an object &lt;code&gt;TodoActions&lt;/code&gt; that has a method &lt;code&gt;add&lt;/code&gt; on it. This method takes a single parameter, which is the value of the action’s &lt;code&gt;payload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    add: createAction(ActionTypes.ADD_TODO)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is really the same as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    add: createAction(ActionTypes.ADD_TODO, todoItem =&amp;gt; todoItem)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is the same as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    add: todoItem =&amp;gt; ({ type: ActionTypes.ADD_TODO, payload: todoItem })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Redux, an Action Creator is just a function that creates an action.&lt;/p&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;p&gt;The next step is to define some application state (our collection of todos), and define how the &lt;code&gt;ADD_TODO&lt;/code&gt; action affects that state. Presumably, it should just add the new item to our collection. The TODOs in our collection will need a couple properties: the actual TODO text (which I’ll call &lt;code&gt;text&lt;/code&gt;), and a flag indicating whether the TODO is completed (which I’ll call &lt;code&gt;completed&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This is where it gets a bit wild.&lt;/p&gt;

&lt;p&gt;Let’s define the &lt;a href=&quot;https://rackt.org/redux/docs/basics/Reducers.html&quot;&gt;reducer&lt;/a&gt; first, using the &lt;code&gt;react-actions&lt;/code&gt; helper method &lt;code&gt;handleActions&lt;/code&gt; (in &lt;code&gt;reducer.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { handleActions } from &#39;redux-actions&#39;;
import ActionTypes from &#39;./actionTypes&#39;;

export default handleActions({
    [ActionTypes.ADD_TODO]: (state, action) =&amp;gt; [...state, { completed: false, text: action.payload }]
}, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so let’s break this down. I’m calling &lt;code&gt;handleActions&lt;/code&gt; with two parameters: an object containing the actual reducer method, and an empty array &lt;code&gt;[]&lt;/code&gt;. That second parameter is just the &lt;em&gt;initial state&lt;/em&gt; of our todo collection - it’s easier to have it be an empty collection rather than &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s look at the object. I’m using the &lt;a href=&quot;http://exploringjs.com/es6/ch_oop-besides-classes.html#_computed-property-keys-1&quot;&gt;ES2015 computed property key syntax&lt;/a&gt; to define a function named &lt;code&gt;ADD_TODO&lt;/code&gt;, which is our actual reducer.&lt;/p&gt;

&lt;p&gt;Our reducer takes two parameters: the existing state and the incoming action, and returns the new state (that is, what the state becomes after applying the action).&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Important note: A reducer should &lt;strong&gt;never do anything else!&lt;/strong&gt; It’s a mistake to have a reducer do any I/O, or modify the existing state in-place. It should &lt;em&gt;only&lt;/em&gt; return the new state.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;For the &lt;code&gt;ADD_TODO&lt;/code&gt; action, we just need to add a new TODO to our collection, setting &lt;code&gt;completed&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; to the TODO text (which, for the &lt;code&gt;ADD_TODO&lt;/code&gt; action, is the action’s &lt;code&gt;payload&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(state, action) =&amp;gt; [...state, { completed: false, text: action.payload }]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m using the &lt;a href=&quot;http://exploringjs.com/es6/ch_parameter-handling.html#_spreading-into-arrays&quot;&gt;ES2015 array spread operator&lt;/a&gt; to easily create a &lt;em&gt;new&lt;/em&gt; array of TODOs that contains all the elements of the old array of TODOs, plus the new TODO that I create from the action.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;There are a few competing patterns for writing reducers. &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;ImmutableJS&lt;/a&gt; is one popular option for representing state, in spite of its serialization difficulties. However, in my projects so far, I just use regular JS objects, along with a helper plugin that double-checks my immutability in dev builds. I find this approach is sufficient for me.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-store&quot;&gt;The Store&lt;/h2&gt;

&lt;p&gt;So, we’ve got some basic application state, and we’ve got an action, and we’ve got a reducer that applies that action to our state. Good so far, but there’s a couple more pieces to hook up still.&lt;/p&gt;

&lt;p&gt;First off, we need to tell Redux to actually create our store. Recall from my drawing of how Redux works, that it will create the store using our reducer (the shaded parts are mostly done &lt;em&gt;for&lt;/em&gt; us):&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxInReality.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Redux, our store is a singleton, so I’m going to just expose it as a global object from &lt;code&gt;store.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore } from &#39;redux&#39;;
import reducers from &#39;./reducers&#39;;

export default createStore(reducers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite literally, I’m taking our reducer from &lt;code&gt;reducers.jsx&lt;/code&gt; and passing it to Redux’s &lt;code&gt;createStore&lt;/code&gt; method. Very straightforward.&lt;/p&gt;

&lt;p&gt;You might wonder why I bothered putting this in its own file. That will become clear in the next post, when I add debugging helpers in here.&lt;/p&gt;

&lt;h2 id=&quot;the-views&quot;&gt;The Views&lt;/h2&gt;

&lt;p&gt;The final piece to hook up is to provide our store to our view components. Right now, our view components don’t actually &lt;em&gt;use&lt;/em&gt; the application state (that is, they’re still just displaying the boilerplate HTML, not our actual collection of TODO items). However, they will start displaying the application state soon enough!&lt;/p&gt;

&lt;p&gt;We provide the store to our views using Redux’s &lt;code&gt;Provider&lt;/code&gt;. It looks like this (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { Provider } from &#39;react-redux&#39;;
import store from &#39;./store&#39;;

.. // function Main() hasn&#39;t changed

window.onload = () =&amp;gt; render(&amp;lt;Provider store={store}&amp;gt;&amp;lt;Main/&amp;gt;&amp;lt;/Provider&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it for now! We give the &lt;code&gt;Provider&lt;/code&gt; element our store, and it provides a way for our view components to get at it.&lt;/p&gt;

&lt;p&gt;Now we have an action (with a type and a creator), a reducer to apply that action to our state, a singleton store containing the application state, and the provider that allows our views to read the application state.&lt;/p&gt;

&lt;p&gt;The main thing missing, of course, is something to actually trigger the action. We’ll add that in soon, though!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/58b3a25c0166b7cc2d1909933744e6e290da82df&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/58b3a25c0166b7cc2d1909933744e6e290da82df/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/03/state.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/03/state.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 2: Getting Started</title>
        <description>&lt;p&gt;Let’s introduce some React! The &lt;code&gt;react&lt;/code&gt; package contains almost everything, and the &lt;code&gt;react-dom&lt;/code&gt; package is the piece that injects our React application into the browser DOM.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Most modern JavaScript libraries do not assume they’re running in a browser. This is to enable server-side rendering. It’s not as crazy as it sounds! Check out &lt;a href=&quot;https://channel9.msdn.com/Events/ASPNET-Events/ASPNET-Fall-Sessions/ASPNET--Spa&quot;&gt;this video&lt;/a&gt; of &lt;a href=&quot;https://github.com/aspnet/NodeServices&quot;&gt;work being done on ASP.NET Core &lt;em&gt;right now&lt;/em&gt;&lt;/a&gt; where ASP.NET hosts Node, runs the web app on the server, and then sends the results to the client.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;our-first-react-component&quot;&gt;Our First React Component&lt;/h2&gt;

&lt;p&gt;For now, I just want to move the boilerplate HTML code into my JSX file. We’ll tear it apart more properly later. So, I imported React and wrote a &lt;code&gt;Main&lt;/code&gt; method (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
function Main() {
    return (

    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and pasted all the &lt;code&gt;&amp;lt;section class=&quot;todoapp&quot;&amp;gt;&lt;/code&gt; HTML in there.&lt;/p&gt;

&lt;p&gt;JSX isn’t &lt;em&gt;quite&lt;/em&gt; HTML; it’s just pretty close. Here’s a list of tidying up I had to do (note that ESLint will catch all of these):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unclosed elements are not allowed. In particular, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags must become &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; tags. This is totally understandable.&lt;/li&gt;
  &lt;li&gt;JSX has no notion of comments. You can work around this by embedding JavaScript comments. So all &lt;code&gt;&amp;lt;!--&lt;/code&gt; must be replaced by &lt;code&gt;{/*&lt;/code&gt;, and all &lt;code&gt;--&amp;gt;&lt;/code&gt; by &lt;code&gt;*/}&lt;/code&gt;. This is &lt;em&gt;not&lt;/em&gt; understandable; it’s annoying.&lt;/li&gt;
  &lt;li&gt;JSX is case-sensitive, and prefers camelCasing. E.g., &lt;code&gt;autofocus&lt;/code&gt; needs to be &lt;code&gt;autoFocus&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There’s a few reserved words in JavaScript that JSX has to work around. In particular, the common &lt;code&gt;class&lt;/code&gt; HTML attribute has to be &lt;code&gt;className&lt;/code&gt; in JSX.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s also time to turn off some ESLint warnings that are just too pedantic. &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md&quot;&gt;jsx-no-literals&lt;/a&gt; and &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md&quot;&gt;jsx-max-props-per-line&lt;/a&gt; are history.&lt;/p&gt;

&lt;p&gt;This gets us down to a more reasonable number of warnings:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ESLintWarnings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of these, I’m going to fix &lt;code&gt;autoFocus&lt;/code&gt; in the source, and turn off &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md&quot;&gt;jsx-sort-props&lt;/a&gt;, which leaves us with the display name.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md&quot;&gt;display name&lt;/a&gt; warning triggers when you don’t explicitly give React a name for your component that it can use in error messages. In this case, though, Babel will do it automatically for us, so we just need to let ESLint know that it’s OK (in &lt;code&gt;.eslintrc&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;react/display-name&quot;: [1, { &quot;acceptTranspilerName&quot;: true }],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;sticking-it-in-the-dom&quot;&gt;Sticking It in the DOM&lt;/h2&gt;

&lt;p&gt;First, let’s define a placeholder for our app in th HTML; I added this line where I removed the &lt;code&gt;&amp;lt;section class=&quot;todoapp&quot;&amp;gt;&lt;/code&gt; (in &lt;code&gt;index.html&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapper in the output, but that’s usually not anything to worry about.&lt;/p&gt;

&lt;p&gt;Next, we import &lt;code&gt;render&lt;/code&gt; from &lt;code&gt;react-dom&lt;/code&gt; and then load our app after the DOM is loaded (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { render } from &#39;react-dom&#39;;

// Definition of Main

window.onload = () =&amp;gt; render(Main(), document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can build and run our app. It still doesn’t do anything, but now it’s a &lt;em&gt;React&lt;/em&gt; component that doesn’t do anything. :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/f54223a8647b43b99d62a547505c4b5908459bb6&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/f54223a8647b43b99d62a547505c4b5908459bb6/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/getting-started.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/getting-started.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 1: Language and Tooling</title>
        <description>&lt;p&gt;Modern JavaScript development is lightyears ahead of where it used to be. Last summer, ES2015 (ES6) was officially standardized, and even though browsers are taking their time adopting it, transpilers have existed for some time.&lt;/p&gt;

&lt;h2 id=&quot;babel&quot;&gt;Babel&lt;/h2&gt;

&lt;p&gt;After trying out a few options for DotNetApis, I settled on Babel. Babel allows you to specify exactly what language you want to support, and I have mine set up as ES2015, plus JSX, plus object spread/rest properties.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;ES2015&lt;/a&gt; is the most basic standard for JavaScript development these days. If you’re not on ES2015, then you’re developing in the dark ages. Seriously. It will change your life.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/jsx/&quot;&gt;JSX&lt;/a&gt; is the syntactic extension that React uses for putting HTML in the JavaScript. Technically, React can work completely without JSX, but it’s harder to write and read. And it’s verbosely ugly, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;Object rest/spread properties&lt;/a&gt; are a &lt;a href=&quot;http://www.2ality.com/2015/11/tc39-process.html&quot;&gt;Stage 2 proposal&lt;/a&gt; that will likely be in a future version of JavaScript. I include them in this project for reasons that will become clear when we develop our React reducers.&lt;/p&gt;

&lt;p&gt;My &lt;code&gt;.babelrc&lt;/code&gt; file just enables these three presets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;presets&quot;: [&quot;es2015&quot;, &quot;react&quot;, &quot;stage-2&quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;no-typings---steve-sad&quot;&gt;No Typings - Steve Sad&lt;/h2&gt;

&lt;p&gt;Unfortunately, there are no static typings with this setup. I tried really, &lt;em&gt;really&lt;/em&gt; hard to get them working, because at my core I’m a static typing kind of guy. I like my code completion, and I like my compiler checking!&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; get (modern versions of) &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; to work with React. However, there are a few problems that I ran into.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript is (much) slower than Babel at picking up new language features. TypeScript does support JSX now, but there’s no support for object rest/spread properties, which are very convenient.&lt;/li&gt;
  &lt;li&gt;The existing typings repository is quite incomplete.&lt;/li&gt;
  &lt;li&gt;The value of a more strict object-oriented system bolted onto JavaScript is dubious at best. I prefer libraries and patterns that take advantage of JavaScript’s inherently functional (or multi-paradign) nature.&lt;/li&gt;
  &lt;li&gt;TSLint is way less mature and flexible than ESLint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, I do really like the benefits of static typing, and I tried quite hard to get TypeScript working with DotNetApis. However, all the little frustrations with TypeScript added up, and that initiative didn’t make it.&lt;/p&gt;

&lt;p&gt;My problem &lt;em&gt;actually&lt;/em&gt; was that I didn’t really want to change languages to TypeScript. All I wanted was to use TypeScript as a static type checker for &lt;em&gt;modern&lt;/em&gt; JavaScript, and it’s this goal that I couldn’t get working. TypeScript is a fine language, but I wanted to use JavaScript.&lt;/p&gt;

&lt;p&gt;There’s another, lesser known (for now) static typing system on the block: &lt;a href=&quot;https://code.facebook.com/posts/1505962329687926/flow-a-new-static-type-checker-for-javascript/&quot;&gt;Flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Flow looks exactly like what I need: static typing for JavaScript. Babel even has support for Flow ready to go!&lt;/p&gt;

&lt;p&gt;Unfortunately, I just couldn’t get the (unofficial) Windows port to behave reliably. Flow works great for other platforms, but they need to fully support Windows if they’re going to edge out TypeScript.&lt;/p&gt;

&lt;p&gt;Hopefully in the future, either TypeScript or Flow will meet my needs. For now, neither one does. :(&lt;/p&gt;

&lt;h2 id=&quot;supporting-tools-eslint&quot;&gt;Supporting Tools: ESLint&lt;/h2&gt;

&lt;p&gt;When it comes to linting modern JavaScript, &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt; is the most flexible option. There’s an &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;ESLint plugin for React&lt;/a&gt; that adds a lot of React-specific linting rules.&lt;/p&gt;

&lt;p&gt;For now, I’m just going to turn on every rule. I’ll relax some of these as I go along, but for now ESLint will be very strict. My current &lt;code&gt;.eslintrc&lt;/code&gt; starts by setting up the language (ES2015 + JSX + object rest/spread) and environment (Browser, ES2015/ES6):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;,
&quot;plugins&quot;: [
  &quot;react&quot;
],
&quot;ecmaFeatures&quot;: {
  &quot;modules&quot;: true,
  &quot;jsx&quot;: true,
  &quot;experimentalObjectRestSpread&quot;: true
},
&quot;env&quot;: {
  &quot;browser&quot;: true,
  &quot;es6&quot;: true
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I have a long section enabling all of the React/JSX rules, that I just copied and pasted from the &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/tree/8fe83a0e716ca2db225e98b37b4efa5e2f277848&quot;&gt;ESLint React plugin homepage&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;supporting-tools-webpack&quot;&gt;Supporting Tools: Webpack&lt;/h2&gt;

&lt;p&gt;We’re also going to need a “bundler”. DotNetApis uses Webpack, so I’ll use it, too. I don’t have any experience with other bundlers; my initial research indicated that Webpack was popular, and I haven’t run into any problems with it, so that’s what I ended up with.&lt;/p&gt;

&lt;p&gt;The TodoMVC framework expects a single &lt;code&gt;./js/app.js&lt;/code&gt; file to be our application, with other supporting source files also under &lt;code&gt;./js&lt;/code&gt;. So I’ll use &lt;code&gt;.jsx&lt;/code&gt; for our source files, and specify &lt;code&gt;./js/main.jsx&lt;/code&gt; as the “main entry point”.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;webpack.config.js&lt;/code&gt; will start with that &lt;code&gt;main.jsx&lt;/code&gt;, load all &lt;code&gt;.jsx&lt;/code&gt; files via Babel, and output &lt;code&gt;app.js&lt;/code&gt;. Also, I’m going to include &lt;a href=&quot;https://webpack.github.io/docs/configuration.html#devtool&quot;&gt;webpack source maps&lt;/a&gt;. The webpack config file now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = {
    entry: &#39;./js/main.jsx&#39;,
    output: {
        filename: &#39;./js/app.js&#39;
    },
    module: {
        loaders: [
            {
                test: /\.jsx$/,
                loader: &#39;babel-loader&#39;
            }
        ]
    },
    devtool: &#39;inline-source-map&#39;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With just a bit of tweaking, we can use &lt;a href=&quot;https://github.com/MoOx/eslint-loader&quot;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt; to lint while we build:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module: {
    loaders: [
        {
            test: /\.jsx$/,
            loader: &#39;babel-loader&#39;
        }
    ],
    preLoaders: [
        {
            test: /\.jsx$/,
            loader: &#39;eslint-loader&#39;,
            exclude: /node_modules/
        }
    ]
},
devtool: &#39;inline-source-map&#39;,
eslint: {
    configFile: &#39;./.eslintrc&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;supporting-tools-npm-scripts&quot;&gt;Supporting Tools: npm scripts&lt;/h2&gt;

&lt;p&gt;Finally, we’re ready to bring it all together! All we have to do is add a &lt;code&gt;build&lt;/code&gt; script to our &lt;code&gt;package.json&lt;/code&gt; that runs &lt;code&gt;webpack&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;build&quot;: &quot;node_modules/.bin/webpack&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can build our app!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;watching&quot;&gt;Watching&lt;/h2&gt;

&lt;p&gt;Watching is a piece of cake (in &lt;code&gt;package.json&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;build&quot;: &quot;node_modules/.bin/webpack&quot;,
  &quot;watch&quot;: &quot;node_modules/.bin/webpack --watch&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can have one command prompt open all the time, just for rebuilding our code files as they change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;supporting-tools-babel-runtime&quot;&gt;Supporting Tools: Babel Runtime&lt;/h2&gt;

&lt;p&gt;Babel is an excellent transpiler, but it does require a &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt;runtime polyfill&lt;/a&gt; for some language features. I’ll just include that for now in my &lt;code&gt;main.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &#39;babel-polyfill&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;extra-credit-local-dev-server&quot;&gt;Extra Credit: Local Dev Server&lt;/h2&gt;

&lt;p&gt;DotNetApis uses a real ASP.NET backend, so when I debug locally, I’m actually running the dev ASP.NET server. That won’t work in this scenario, so I checked out dev servers for npm. Of course, webpack has one, but it prevents webpack from writing its results to disk, which works great for some scenarios but is not what I’m wanting.&lt;/p&gt;

&lt;p&gt;So I looked around and found a promising one called &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;&lt;code&gt;http-server&lt;/code&gt;&lt;/a&gt; (where “promising” means “used by a lot of other people so if I have problems they’re easy to solve”).&lt;/p&gt;

&lt;p&gt;Install it, add a &lt;code&gt;serve&lt;/code&gt; script, and we’re all set! (in &lt;code&gt;package.json&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;build&quot;: &quot;node_modules/.bin/webpack&quot;,
  &quot;watch&quot;: &quot;node_modules/.bin/webpack --watch&quot;,
  &quot;serve&quot;: &quot;node_modules/.bin/http-server -o&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can now open a second command prompt for my HTTP server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;current-state&quot;&gt;Current State&lt;/h2&gt;

&lt;p&gt;At this point, we’ve got automatic recompiling anytime our source files change, a local dev server to see the results, and the beginnings of a good development experience. Pop open your browser dev tools (F12), and you should see original source files - even though they’re not actually sent to the browser:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/SourceMaps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/41de4bc84d575443fcaa42e48eec7812e0e5b4c3&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/41de4bc84d575443fcaa42e48eec7812e0e5b4c3/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/language-and-tooling.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/language-and-tooling.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 0B: Why React? Why Redux?</title>
        <description>&lt;p&gt;I was a casualty of the Version 4 Browser Wars.&lt;/p&gt;

&lt;p&gt;Those of you who are old enough to remember know exactly what I’m talking about. For those who weren’t there, maybe I’ll write a post about it someday. But anyway, I became a desktop developer for many years as a direct result of that horrible early web experience. It is only recently (the last few years) that I’ve cautiously stepped out into frontend development again.&lt;/p&gt;

&lt;p&gt;I say this to emphasize that I’m not an expert frontend developer (yet). I’ve dabbled in Knockout, Angular, Durandal, and Aurelia. I’m much more familiar with common libraries like lodash and jQuery. But when it came to choose a framework for &lt;a href=&quot;http://dotnetapis.com&quot;&gt;DotNetApis&lt;/a&gt;, I chose something I had never used before: React.&lt;/p&gt;

&lt;h2 id=&quot;why-react&quot;&gt;Why React?&lt;/h2&gt;

&lt;p&gt;Well, in short, because &lt;a href=&quot;http://www.bitnative.com/&quot;&gt;Cory House&lt;/a&gt; convinced me. I was able to attend his excellent talk at ThatConference 2015 &lt;a href=&quot;https://www.thatconference.com/sessions/session/9108&quot;&gt;Angular, Backbone, and Knockout are great, so why choose React?&lt;/a&gt;, and followed that up with &lt;a href=&quot;https://www.pluralsight.com/courses/react-flux-building-applications&quot;&gt;his Pluralsight course on React and Flux&lt;/a&gt;. Cory House is convincing. :)&lt;/p&gt;

&lt;p&gt;It all boils down to this simple fact: React represents component boundaries as files. In other words, a single component belongs in a single file.&lt;/p&gt;

&lt;p&gt;In a modern MVVM-style data-binding system, you usually end up with &lt;em&gt;pairs&lt;/em&gt; of files. You have the view and the view model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
  components/
    todo/
      todoViewModel.js
      todoView.html
    footer/
      footerViewModel.js
      footerView.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve written a few components like this, enough to know something’s wrong. In particular, when you have this kind of structure in your app and you need to modify a component, which file do you end up modifying? Usually both of them. New functionality generally requires &lt;em&gt;both&lt;/em&gt; the view and view model to change. This is an indication that the view and view model are really dealing with the same underlying concern.&lt;/p&gt;

&lt;p&gt;According to Wikipedia, the Single Responsibility Principle is “every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.” Take special note of the second half of that definition: “that responsibility should be entirely encapsulated”. That’s why it’s harder to have multiple files making up a single component. There’s a lack of cohesion.&lt;/p&gt;

&lt;p&gt;Another hurdle with modern MVVM-style data-binding systems is that they use templating. This means that you have &lt;em&gt;three&lt;/em&gt; languages to deal with: JavaScript (or some variant) for the view model, HTML for most of the view, and whatever HTML extensions exist as part of the templating solution. That’s a fair amount of context switching.&lt;/p&gt;

&lt;p&gt;None of these hurdles are insurmountable, of course. Large systems have been written with these techniques, and they work well. But we can do better.&lt;/p&gt;

&lt;p&gt;React addresses these problems by restructuring a “component”. Instead of having two files, with one of them containing a programming (templating) language within HTML, React just reverses that and puts HTML in the JavaScript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
  components/
    todo.jsx
    footer.jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seems like a small thing, but it really does make a difference in day-to-day work. One component is in one file, which contains both the HTML and logic. When a component changes, only one file changes. And there’s only two languages: JavaScript (or some variant) and HTML. There’s no separate templating language; if you need a &lt;code&gt;for&lt;/code&gt; loop around some content, you just write it in JavaScript.&lt;/p&gt;

&lt;p&gt;React &lt;em&gt;simplifies&lt;/em&gt; component work. Then it gets out of your way.&lt;/p&gt;

&lt;h2 id=&quot;my-first-attempt-flux-not-redux&quot;&gt;My First Attempt (Flux, not Redux)&lt;/h2&gt;

&lt;p&gt;React only addresses the “view” part of the frontend. It doesn’t have any opinions about how you store your data. There’s a pretty common pattern of data management called &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I started using React, I decided to go with “vanilla Flux”; that is, to have a singleton dispatcher implementation. Flux works like this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/FluxAsPromised.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have “action creators”, which are just functions that return actions. Those actions are data (objects) that represent some action, such as a user clicking a button or typing into a textbox. The actions are sent to the dispatcher, which is a singleton. The dispatcher then sends out the action to each store that has registered with it (this is just a simple pub/sub pattern).&lt;/p&gt;

&lt;p&gt;The stores are where the application state lives. Each store updates itself by responding to actions coming from the dispatcher. Each time it updates, it notifies &lt;em&gt;its&lt;/em&gt; subscribers, which are the views (the actual JSX components). Those views in turn will respond to user interaction by calling the action creators and dispatching those actions.&lt;/p&gt;

&lt;p&gt;This diagram is a bit simplified; the “Views” here are really made up of two different kind of views: &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.o5lr2g6lz&quot;&gt;“smart” or “page” or “container” or “route”&lt;/a&gt; views, which sit at the top level and subscribe to store updates, and “dumb” views, which only receive data from their parent views.&lt;/p&gt;

&lt;p&gt;This is all well and good, but as DotNetApis grew more complex, I started running into problems.&lt;/p&gt;

&lt;p&gt;In particular, I had several different “stores”, each one containing part of the application state, divided up logically. Also, I had several different “smart” views, some of which were children of other “smart” views, and each of which had to manage subscriptions to one or more stores. What I ended up with looked more like this diagram:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/FluxInReality.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was just getting too complex. I reached out for help on The Twitter, and &lt;a href=&quot;https://twitter.com/housecor&quot;&gt;Cory House&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ryanlanciaux&quot;&gt;Ryan Lanciaux&lt;/a&gt; were kind enough to point me to Redux.&lt;/p&gt;

&lt;h2 id=&quot;why-redux&quot;&gt;Why Redux?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://rackt.org/redux/&quot;&gt;Redux&lt;/a&gt; is a further simplification of React. Redux declares that you should only have one store, and all of the application state lives in that single store.&lt;/p&gt;

&lt;p&gt;Hmmm, simpler:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxToTheRescue.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Redux &lt;em&gt;does&lt;/em&gt; introduce some new concepts. In short, it implements your store &lt;em&gt;for&lt;/em&gt; you, so you need to fill in a few missing pieces.&lt;/p&gt;

&lt;p&gt;In particular, you need to define how actions will change your application state. In Redux, these are called &lt;a href=&quot;https://rackt.org/redux/docs/basics/Reducers.html&quot;&gt;reducers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A real-world Redux application ends up looking more like this (note that the shaded parts are mostly or entirely implemented by libraries, not by the application author):&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxInReality.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once I started using Redux, I’ve never looked back. Everything is simpler!&lt;/p&gt;

&lt;p&gt;The source hasn’t changed since last time, but if you missed it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/9b881b0bea8070f850c8c78a6fcf4701287101ae&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/9b881b0bea8070f850c8c78a6fcf4701287101ae/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/why-react-why-redux.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/why-react-why-redux.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 0: Introduction</title>
        <description>&lt;p&gt;As of this writing, the front end of &lt;a href=&quot;http://dotnetapis.com&quot;&gt;DotNetApis&lt;/a&gt; is entirely written in &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. This was my first React project, and there were a &lt;em&gt;lot&lt;/em&gt; of things that I learned along the way. My app certainly had “growing pains,” and a lot of React best practices were added rather late in that project.&lt;/p&gt;

&lt;p&gt;So, I thought it would be beneficial to do a series of posts on how to do a new React project, with the benefit of hindsight that I did not have when writing the first version of DotNetApis.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Disclaimer: I am still very new to React. It’s &lt;s&gt;possible&lt;/s&gt; likely that I am entirely missing some really helpful best practices. If you know of any, please let me know in the comments!&lt;/p&gt;

  &lt;p&gt;Disclaimer Part 2: In fact, the whole React community is still new to React. Best practices are still “in flux” (heh), and may not be the same years from now.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ll be developing this project in the open &lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;on GitHub&lt;/a&gt;. I’ve decided to implement the ubiquitous &lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC app&lt;/a&gt;, which is often used to help decide on client-side MVC frameworks. You can argue that React/Redux isn’t really “MVC”-ish, but eh, whatever.&lt;/p&gt;

&lt;p&gt;One problem with TodoMVC is that it doesn’t have examples of asynchronous backend communication, which can make or break a framework decision. In keeping with the spirit of TodoMVC, my React/Redux implementation will also not have asynchronous communication; if I remember, I’ll write a separate blog post describing how to do that after this series wraps up.&lt;/p&gt;

&lt;p&gt;So, let’s get started!&lt;/p&gt;

&lt;p&gt;Here’s what I’ve done so far, just some housekeeping work at the start:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forked the &lt;a href=&quot;https://github.com/tastejs/todomvc-app-template&quot;&gt;TodoMVC app template&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Moved everything to the &lt;a href=&quot;https://pages.github.com/&quot;&gt;&lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, where I’ll do all the development &lt;em&gt;and&lt;/em&gt; deployment simultaneously.&lt;/li&gt;
  &lt;li&gt;Removed the (empty) &lt;code&gt;app.css&lt;/code&gt; from the app template, since I’m quite sure I won’t be needing it.&lt;/li&gt;
  &lt;li&gt;Filled out some of the placeholders in the HTML.&lt;/li&gt;
  &lt;li&gt;Tweaked the &lt;code&gt;.gitignore&lt;/code&gt; to include the “boilerplate” css that comes as dependencies of the app template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Groundbreaking, eh? Don’t worry, this is just getting started! :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/9b881b0bea8070f850c8c78a6fcf4701287101ae&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/9b881b0bea8070f850c8c78a6fcf4701287101ae/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/react-redux-todomvc.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/react-redux-todomvc.html</guid>
      </item>
    
      <item>
        <title>DotNetApis Enters Beta</title>
        <description>&lt;p&gt;I’ve been heads-down for quite a while working on a new project that &lt;em&gt;just went live!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dotnetapis.com&quot;&gt;DotNetApis&lt;/a&gt; is a website that provides documentation for NuGet packages.&lt;/p&gt;

&lt;p&gt;The purpose of this site is twofold: first, to provide reference documentation for developers while they are coding; and second, to provide an easy way for authors to publish reference documentation for their libraries. DotNetApis keeps its URLs stable and human-readable (mostly), so it’s a great way to link to types in online discussions, too.&lt;/p&gt;

&lt;p&gt;The site is currently in Beta, so it’s not feature-complete yet, but I believe it’s finished enough to be useful to others, so I’m publishing it today.&lt;/p&gt;

&lt;p&gt;Please try it out, and let me know what you think!&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/01/dotnetapis.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/01/dotnetapis.html</guid>
      </item>
    
      <item>
        <title>ThatConference 2015</title>
        <description>&lt;p&gt;I’m pleased to announce that I’m returning to ThatConference this year (in August of 2015). My session is &lt;a href=&quot;https://www.thatconference.com/sessions/session/6993&quot;&gt;Unit Testing Asynchronous Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve given this talk a few times in the past - at GRDevDay and CodeMash - but based on feedback, I’ll be updating it to include more mocking and assertion frameworks. It should end up being quite a comprehensive overview, including the current state of async support for unit testing as well as a general conceptual overview.&lt;/p&gt;

&lt;p&gt;If you’d like to register, feel free to use &lt;a href=&quot;http://thatconference2015.eventbrite.com/?discount=aStephenCleary_referral&quot;&gt;this affiliate link&lt;/a&gt;. ;)  ThatConference is one of my favorite conferences - they have a particularly great family track for young coders - but they’re still relatively new and not able to reimburse travel expenses for speakers. So every little bit helps. :)&lt;/p&gt;
</description>
        <pubDate>Wed, 27 May 2015 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2015/05/thatconference.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2015/05/thatconference.html</guid>
      </item>
    
  </channel>
</rss>
