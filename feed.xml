<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary's blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>https://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="https://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="https://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>Docker as a Tool Provider</title>
        <description>&lt;p&gt;Docker is everywhere these days! Even with serverless technology growing more mature, Docker is still a giant in the cloud world. Everyone by now should be familiar with Docker as a way of scaling out your servers using containers.&lt;/p&gt;

&lt;p&gt;However, there’s another perfectly legitimate use case for Docker: building containers for tools.&lt;/p&gt;

&lt;p&gt;This is particularly useful in a Windows environment. I’m an old curmudgeon who knows how to use Windows and hasn’t taken the time to learn Macs. Every time I get a new dev machine, I consider switching, but I just haven’t done it. So my dev machines - even in this modern day - are still all Windows machines.&lt;/p&gt;

&lt;p&gt;This is all good, until you want to make use of some nifty Linux tools. The thing is, Windows just doesn’t work so great with Ruby. Or Python. Or Perl. Some tools have Windows builds that bundle their own dependencies, and others require certain environment variables to find just the right version of whatever runtime they need. It works &lt;em&gt;ok&lt;/em&gt;, but what usually ends up happening is that you have to tweak your dev machine until it is &lt;em&gt;just right&lt;/em&gt; for all the dependencies of all the different tools you want to use… and then you can never get another machine into that exact same state ever again.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;could&lt;/em&gt; use Ubuntu on Windows, which is awesome. But I’d still have to install the tools, and manage dependency conflicts and updates and all that. And I don’t want to shell out to a separate subsystem just to be able to build; I want my overall development environment to be Windows.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;could&lt;/em&gt; use a solution like &lt;a href=&quot;https://boxstarter.org/&quot;&gt;Boxstarter&lt;/a&gt;, but some of this setup is so specific I’d have to write my own Chocolatey packages for some of them and tie it all together with some very custom scripts. I don’t want another project to maintain (the “Steve Cleary dev box setup script and Chocolately package collection”), especially because newer versions of the tools would require changes to those scripts, so I’d end up changing them every time I need to run them anyway! At the end of the day, it would just be way too complex and brittle.&lt;/p&gt;

&lt;p&gt;What I want is to use Boxstarter for my common tools that I use &lt;em&gt;regularly&lt;/em&gt; (Visual Studio, VSCode, Docker, Node, Git, etc); but for my more esoteric tools, I want to be able to encapsulate them and pull them in as a complete unit when I want to use them. And I don’t want to deal with conflicting dependencies for my different tools; I want them more… &lt;em&gt;contained&lt;/em&gt;. (Heh, see what I did there?)&lt;/p&gt;

&lt;p&gt;The answer? Docker, of course.&lt;/p&gt;

&lt;h2 id=&quot;docker-for-tools&quot;&gt;Docker for Tools&lt;/h2&gt;

&lt;p&gt;For this example, I’m going to run &lt;a href=&quot;http://lilypond.org/&quot;&gt;Lilypond&lt;/a&gt; as a Dockerized tool. If you’re not familiar with it, Lilypond is pretty much &lt;em&gt;the&lt;/em&gt; standard for free musical notation software.&lt;/p&gt;

&lt;p&gt;I have &lt;a href=&quot;https://github.com/StephenCleary/Hymnals&quot;&gt;an old project&lt;/a&gt; of Lilypond files that I wanted to hack on recently, but my current dev laptop doesn’t have Lilypond installed. At this point, it has been literally &lt;em&gt;years&lt;/em&gt; since I’ve installed Lilypond, and I don’t remember the details. I do remember that I was using some kind of GUI frontend Lilypond runner (not part of the actual Lilypond project), and I &lt;em&gt;think&lt;/em&gt; the frontend bundled Lilypond along with its dependencies. Maybe. And that GUI frontend project may not be maintained anymore, assuming I can even remember its name (GUI frontends are abandoned much more often than the “real” console applications they build on). I think there was also some weird stuff with PostScript printer drivers or something that may or may not have required tweaking since PostScript isn’t standard on Windows. And of course I didn’t write any of this down.&lt;/p&gt;

&lt;p&gt;Am I going to install Lilypond on my modern dev laptop? Um, no.&lt;/p&gt;

&lt;p&gt;I’m going to Dockerize this tool. I’m going to run Lilypond on the platform it was designed for (Linux), and I’m going to run it on my Windows machine inside a Docker container. I’m going to get this set up &lt;em&gt;once&lt;/em&gt; and then never, ever have to install this on any machine for the rest of my life.&lt;/p&gt;

&lt;h2 id=&quot;lilypond-on-docker&quot;&gt;Lilypond on Docker&lt;/h2&gt;

&lt;p&gt;I started out thinking that I’d have to write a &lt;code&gt;Dockerfile&lt;/code&gt; and install Lilypond on it and everything. I went down that path a little ways before I remembered that &lt;strong&gt;duh&lt;/strong&gt;, Docker has &lt;a href=&quot;https://hub.docker.com/&quot;&gt;a public repository of images&lt;/a&gt;! And it turns out that I &lt;a href=&quot;https://hub.docker.com/search/?isAutomated=0&amp;amp;isOfficial=0&amp;amp;page=1&amp;amp;pullCount=0&amp;amp;q=lilypond&amp;amp;starCount=0&quot;&gt;wasn’t the first one&lt;/a&gt; to want Lilypad Dockerized.&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;https://hub.docker.com/r/iskaron/lilypond/&quot;&gt;look at that&lt;/a&gt; - here’s a nice little Docker image that has Lilypond installed. It’s kept up-to-date (automated build), and seems to have everything I want! Docker Hub FTW!&lt;/p&gt;

&lt;p&gt;With a little tinkering, I found that I could run this straight from the command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run --rm --volume=C:\Work\Hymnals:/app -w /app iskaron/lilypond lilypond SeniorHymnal/Hymnal.ly&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command will download the Lilypond Docker image automatically (if it’s not already downloaded on the local machine), create a new container, run Lilypond within that container on my local files, and clean up the container when Lilypond exits. Let’s tear apart this command, piece by piece.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; - This command is used to create a new Docker container from a template image, and run it. It also implicitly downloads the Docker image from Docker Hub if necessary.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;iskaron/lilypond&lt;/code&gt; - The name of the template image that Docker uses to create the container.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--volume=C:\Work\Hymnals:/app&lt;/code&gt; - Create a volume that links to &lt;code&gt;C:\Work\Hymnals&lt;/code&gt; and mount it as &lt;code&gt;/app&lt;/code&gt; within the container.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-w /app&lt;/code&gt; - Set the working directory within the container to &lt;code&gt;/app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lilypond SeniorHymnal/Hymnal.ly&lt;/code&gt; - The actual command to run inside the container. On my local disk I have &lt;code&gt;C:\Work\Hymnals\SeniorHymnal\Hymnal.ly&lt;/code&gt;, which is accessible inside the container as &lt;code&gt;/app/SeniorHymnal/Hymnal.ly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; - When our tool is done executing, clean up the Docker image and its resources.&lt;/p&gt;

&lt;p&gt;So now I have a single command that I can run, and it will automatically pull down a Dockerized tool and run it in a clean environment! There’s no interference with my local dev box at all; the Dockerized tool is &lt;em&gt;completely&lt;/em&gt; independent. What’s more, it runs in a new “clean room” environment every time it’s executed; even if the tool messes up the container, the next time it’s run, it’ll have a brand new, clean container to run in.&lt;/p&gt;

&lt;h2 id=&quot;npm-scripts&quot;&gt;NPM Scripts&lt;/h2&gt;

&lt;p&gt;Since I apparently only hack on my Lilypond files every few years, I’m not expecting myself to remember this command. Also, there’s this annoying hardcoded &lt;code&gt;C:\Work\Hymnals&lt;/code&gt; path that I want to get rid of. Time for &lt;code&gt;package.json&lt;/code&gt;!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm --volume=%INIT_CWD%:/app -w /app/SeniorHymnal iskaron/lilypond lilypond Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the npm script, I have access to &lt;code&gt;%INIT_CWD%&lt;/code&gt;, which is a Windows-specific way of getting the current working directory. To be honest, getting the current working directory was the hardest part of this whole setup!&lt;/p&gt;

&lt;p&gt;Now I can just do an &lt;code&gt;npm run build&lt;/code&gt; to process my Lilypond files. What’s more, I can &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=truefire.lilypond&quot;&gt;edit them in VSCode&lt;/a&gt; and bind &lt;code&gt;npm run build&lt;/code&gt; as the default build command. Now I have an actual development environment for Lilypond - no separate GUI frontend necessary!&lt;/p&gt;

&lt;h2 id=&quot;updating-images&quot;&gt;Updating Images&lt;/h2&gt;

&lt;p&gt;There’s something else I’d like to do: currently, &lt;code&gt;docker run&lt;/code&gt; will pull down the latest &lt;code&gt;iskaron/lilypond&lt;/code&gt; image &lt;em&gt;the first time it is run&lt;/em&gt;. After that, &lt;a href=&quot;https://github.com/moby/moby/issues/34394&quot;&gt;it never checks for updates&lt;/a&gt;. So I’d like to easily do a &lt;code&gt;docker pull&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Here’s a setup that checks for a new version each time it’s run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;prebuild&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker pull iskaron/lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm --volume=%INIT_CWD%:/app -w /app/SeniorHymnal iskaron/lilypond lilypond Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps this is a little too much, though. I rarely run Lilypond, but when I do, I’ll run it a lot within a few days. So I think it makes more sense to have an explicit &lt;code&gt;npm run pull&lt;/code&gt; command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker pull iskaron/lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm --volume=%INIT_CWD%:/app -w /app/SeniorHymnal iskaron/lilypond lilypond Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The disadvantage to this approach is that I can easily forget to run &lt;code&gt;npm run pull&lt;/code&gt; when I’ve been away from the project a long time.&lt;/p&gt;

&lt;h2 id=&quot;npm-scripts-for-dockerized-tools&quot;&gt;NPM Scripts for Dockerized Tools&lt;/h2&gt;

&lt;p&gt;What I have so far is good, but it’s pretty tied to Lilypond specifically. I want to make my NPM scripts a bit more copy-pastable by making the Docker commands more generic. After hacking around a bit, I ended up with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;iskaron/lilypond&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker pull %npm_package_config_image%&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;docker-run&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm -v %INIT_CWD%:/app -w /app %npm_package_config_image%&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;npm run docker-run -- lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;npm run lilypond -- SeniorHymnal/Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I have a single &lt;code&gt;config&lt;/code&gt; value that will be different for different &lt;code&gt;project.json&lt;/code&gt; files. I can run &lt;code&gt;npm run pull&lt;/code&gt; to update the latest Dockerized tool for this project, and I can run &lt;code&gt;npm run build&lt;/code&gt; to execute that Dockerized tool. The &lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;docker-run&lt;/code&gt; scripts can work with any Dockerized tool and can be copy-pased long with &lt;code&gt;config&lt;/code&gt; from one project to the next. &lt;code&gt;docker-run&lt;/code&gt; in particular has all the “magic” that Docker needs to run a tool in a throwaway container.&lt;/p&gt;

&lt;p&gt;If anyone has any recommendations to make this even better, I’m all ears!&lt;/p&gt;

&lt;!--However, this approach does assume only one Dockerized tool per `project.json`. It's possible to override the `config` when calling one script from another, but that gets verbose pretty quickly. Well, none of my current projects need more than a single Dockerized tool, so I'll cross that bridge when I come to it.--&gt;

&lt;p&gt;The nice thing about using Docker from &lt;code&gt;project.json&lt;/code&gt; is that my dev machine now only has a couple of common requirements (Docker and Node), which it should get from Boxstarter. That’s all it needs to be capable of building any Lilypond script project. No more tool installs!&lt;/p&gt;

&lt;h2 id=&quot;next-target&quot;&gt;Next Target&lt;/h2&gt;

&lt;p&gt;So, I never actually hacked on any of my Lilypond files; I just spent a bunch of time doing this instead. But now it’s done and I’ll never have to set up another machine with Lilypond (or its GUI wrapper) ever again.&lt;/p&gt;

&lt;p&gt;The next logical target for Dockerized tooling is this blog. It currently uses Jekyll with Pygments. That means Ruby &lt;em&gt;and&lt;/em&gt; Python. Currently, to build this blog you have to &lt;a href=&quot;https://github.com/StephenCleary/blog-stephencleary-dotcom/tree/3419602d09b161910bb31a2349dc80bc794bacd1#to-build&quot;&gt;first build a Rube Goldberg machine&lt;/a&gt; with a portable (self-contained) Ruby + Jekyll and a local (impacting your dev environment) Python + setuptools + pygments. It’s a mess of tooling, and it’s the next thing on my list to Dockerize!&lt;/p&gt;
</description>
        <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/05/docker-as-a-tool-provider.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/05/docker-as-a-tool-provider.html</guid>
      </item>
    
      <item>
        <title>Using VSCode with PEGJS</title>
        <description>&lt;p&gt;VSCode has a pretty decent extension system. This week I was playing around with &lt;a href=&quot;https://pegjs.org/&quot;&gt;PEG JS&lt;/a&gt;, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parser generator for JavaScript. I found &lt;a href=&quot;https://github.com/SrTobi/code-pegjs-language&quot;&gt;an extension&lt;/a&gt; for VSCode syntax highlighting of &lt;code&gt;pegjs&lt;/code&gt; files. There are a couple of other options for extensions, but it looks like none of them support reporting errors in VSCode’s &lt;code&gt;Problems&lt;/code&gt; window.&lt;/p&gt;

&lt;p&gt;It’s pretty straightforward to run the pegjs executable from a &lt;code&gt;package.json&lt;/code&gt; npm script. In this example, I’m compiling my &lt;code&gt;pegjs&lt;/code&gt; file into a &lt;code&gt;js&lt;/code&gt; output file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;peg&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pegjs -o src/json-filter-expr.js src/json-filter-expr.pegjs&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem is that if I run this task from VSCode and the compilation fails, there’s no indication in the VSCode Problems window.&lt;/p&gt;

&lt;h2 id=&quot;problem-matchers&quot;&gt;Problem Matchers&lt;/h2&gt;

&lt;p&gt;The solution is to write a &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher&quot;&gt;problem matcher&lt;/a&gt;. This will enable VSCode to parse the &lt;code&gt;pegjs&lt;/code&gt; output and report it just like any other kind of compilation error.&lt;/p&gt;

&lt;p&gt;There’s one other bump in the road. &lt;code&gt;pegjs&lt;/code&gt; writes out its error messages like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;40:3: Expected &amp;quot;=&amp;quot;, comment, end of line, or whitespace but &amp;quot;/&amp;quot; found.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, problem matchers &lt;em&gt;must&lt;/em&gt; be able to parse out at least a &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt;. &lt;code&gt;pegjs&lt;/code&gt; is giving us &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt;, but not &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;VSCode requires the &lt;code&gt;file&lt;/code&gt;, which makes sense since it deals with a whole workspace and needs to know which file the problem is in. On the other hand, &lt;code&gt;pegjs&lt;/code&gt; does not include a filename in its output, which makes sense because it can be run on only one file at a time, and the user specified the file name right there in the command line.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The solution I ended up going with is quite simple: I echo the filename from my npm script and then use a multiline problem matcher to parse out the filename:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;peg&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo src/json-filter-expr.pegjs &amp;amp;&amp;amp; pegjs -o src/json-filter-expr.js src/json-filter-expr.pegjs&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the output from &lt;code&gt;npm run peg&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;src/json-filter-expr.pegjs
40:3: Expected &amp;quot;=&amp;quot;, comment, end of line, or whitespace but &amp;quot;/&amp;quot; found.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this can be matched with a multiline problem matcher that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;problemMatcher&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pegjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;fileLocation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;relative&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;${workspaceFolder}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^([^\\s].*)$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^(\\d+):(\\d+):\\s*(.*)$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;column&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this in place, I can get the nice output from VSCode whenever I have an error in my pegjs file:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/vscode-pegjs.png&quot;&gt;&lt;img src=&quot;/assets/vscode-pegjs.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full source code is &lt;a href=&quot;https://github.com/StephenCleary/json-filter-expr/blob/8a5c0fa113fce6cb065a72d93d4ff0ff79a389e5/.vscode/tasks.json&quot;&gt;available online&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/05/vscode-for-pegjs.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/05/vscode-for-pegjs.html</guid>
      </item>
    
      <item>
        <title>Unit Testing with Roslyn</title>
        <description>&lt;h2 id=&quot;roslyn&quot;&gt;Roslyn&lt;/h2&gt;

&lt;p&gt;Roslyn was a huge project that spanned many years. It was a difficult rewrite of the C# and VB compilers into managed code, with the intent of also enabling fast analysis of partial code segments. These days, Roslyn powers many different systems: the compiler itself, the little hints that pop up as you type, and even static analysis systems that you can bundle with your NuGet package to encourage proper usage.&lt;/p&gt;

&lt;p&gt;I’ve thought many times about using Roslyn to create some analyzers for common mistakes with &lt;code&gt;Task&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt;, but I’ve just never taken the time to do it. However, just recently, I had the opportunity to use Roslyn for something completely different.&lt;/p&gt;

&lt;h2 id=&quot;dotnetapis&quot;&gt;DotNetApis&lt;/h2&gt;

&lt;p&gt;I run &lt;a href=&quot;http://dotnetapis.com/&quot;&gt;a service called DotNetApis&lt;/a&gt; that autogenerates reference documentation for NuGet packages. It does this by walking the CLI metadata (using the awesome &lt;a href=&quot;https://github.com/jbevain/cecil&quot;&gt;Mono.Cecil&lt;/a&gt;) and matching accessible elements with their XML documentation.&lt;/p&gt;

&lt;p&gt;The code that currently runs that site is a bit of a mess. I’ve been cleaning up the code into a v2 &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis&quot;&gt;that is open-source through and through&lt;/a&gt;. As a part of this rewrite, I needed a way to unit test some odd code elements. In the v1 code, I had a single “test”/”sample” dll that had a bunch of weird members, and I ran my unit tests against that. This worked, but I wanted my unit tests to be more self-contained.&lt;/p&gt;

&lt;p&gt;Enter Roslyn.&lt;/p&gt;

&lt;p&gt;I have unit tests in DotNetApis v2 that need to compile some code (as a &lt;code&gt;string&lt;/code&gt;) and then parse the resulting dll and xml. Getting this working was surprisingly easy!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssemblyDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Parse the C# code...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CSharpParseOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSharpParseOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceCodeKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Regular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...as representing a complete .cs file&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithLanguageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LanguageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Latest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...enabling the latest language features&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Compile the C# code...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CSharpCompilationOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CSharpCompilationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DynamicallyLinkedLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...to a dll&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithOptimizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptimizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...in Release configuration&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithAllowUnsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...enabling unsafe code&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Invoke the compiler...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CSharpCompilation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CSharpCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestInMemoryAssembly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ..with some fake dll name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddReferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MetadataReference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateFromFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...referencing the same mscorlib we&amp;#39;re running on&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Parse and compile the C# code into a *.dll and *.xml file in-memory&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSyntaxTrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlDocumentationStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Compilation failed: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Parse the *.dll (with Cecil) and the *.xml (with XDocument)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeekOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeekOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssemblyDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This beautiful little utilty method takes C# code and spits out a parsed dll and xml file, all in-memory! The &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis/blob/0b119d8698a3439b2170ae12c3a438fc2f6e9a0b/service/UnitTestUtility/Utility.cs&quot;&gt;actual code&lt;/a&gt; is a bit more complex for efficiency reasons. I currently have 86 unit tests using this method, with lots more on the way!&lt;/p&gt;

&lt;p&gt;Here’s what one of the unit tests looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[Fact]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Basic_InTopLevelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;@&amp;quot;public class SampleClass {&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      /// &amp;lt;summary&amp;gt;Text to find.&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      public void SampleMethod() { } }&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SelectMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SampleClass&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SampleMethod&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;M:SampleClass.SampleMethod&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XmldocIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AssertXmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Text to find.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertXmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMemberDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elementName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Descendants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;member&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemberXmldocIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elementName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DisableFormatting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This unit test is checking that the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/processing-the-xml-file&quot;&gt;Xmldoc Identifier&lt;/a&gt; calculated by DotNetApis is in fact what we expect it to be (&lt;code&gt;M:SampleClass.SampleMethod&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; that it matches what the C# compiler generated in the xml file. The &lt;code&gt;AssertXmldoc&lt;/code&gt; helper is taking the Xmldoc Id from DotNetApis, looking it up in the *.xml file from the compiler, and asserting that the text we extract is what is expected.&lt;/p&gt;

&lt;p&gt;Sure, this example is pretty easy, but I’ve also started adding the more rare cases like methods that take an array of pointers by reference. There’s a &lt;em&gt;lot&lt;/em&gt; of more complex cases that are undocumented, and we have to rely on observed compiler behavior.&lt;/p&gt;

&lt;h2 id=&quot;roslyn-is-cool&quot;&gt;Roslyn is Cool&lt;/h2&gt;

&lt;p&gt;That’s all I have to say. I just thought it’s &lt;em&gt;so cool&lt;/em&gt; how easy Roslyn made this. And it’s &lt;em&gt;fast&lt;/em&gt;, too! I can keep my Live Unit Testing running while hacking around, even with most of my tests running Roslyn, and it’s all pretty slick!&lt;/p&gt;
</description>
        <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/05/roslyn-unit-testing.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/05/roslyn-unit-testing.html</guid>
      </item>
    
      <item>
        <title>Slides Available: Code PaLOUsa 2018</title>
        <description>&lt;p&gt;I have &lt;a href=&quot;https://github.com/StephenCleary/Presentations/tree/0959859f132483d293bc35e1ad7284d18084f632/Understanding%20Ethereum%20Application%20Development&quot;&gt;uploaded the slides&lt;/a&gt; for the &lt;a href=&quot;http://www.codepalousa.com/Sessions/1115&quot;&gt;talk I gave a couple weeks ago at Code PaLOUsa 2018, entitled “Understanding Ethereum Application Development”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk is more of a conceptual overview of Ethereum application development, covering questions like “what does it mean to &lt;em&gt;run&lt;/em&gt; on the blockchain?” and “what’s the point of an oracle?” It does not cover the details of the Solidity language.&lt;/p&gt;

&lt;p&gt;(Thanks to &lt;a href=&quot;https://twitter.com/carlowahlstedt&quot;&gt;@carlowahlstedt&lt;/a&gt; for reminding me to put this up!)&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/04/slides-available-codepalousa-2018.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/04/slides-available-codepalousa-2018.html</guid>
      </item>
    
      <item>
        <title>Happy Birthday Async</title>
        <description>&lt;p&gt;Today I’d like to say happy birthday to the C# &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords! They officially turn five years old today! C# and VB both officially adopted them on September 12, 2012.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords themselves have a slightly longer history; they were originally introduced in F# on April 12th, 2010. &lt;code&gt;async&lt;/code&gt; slowly moved into C#/VB, and from there they spread to Python, TypeScript, Hack, Dart, and (recently) JavaScript. Python was a huge win for &lt;code&gt;async&lt;/code&gt;; the Python community is quick to pick up (or invent) the best language features, and they have one of the best language-improvement processes out there. Also, I find the Hack adoption particularly amusing - I mean, even &lt;em&gt;PHP&lt;/em&gt; has &lt;code&gt;async&lt;/code&gt; these days!&lt;/p&gt;

&lt;p&gt;The jury is still out on whether C++ will pick up &lt;code&gt;async&lt;/code&gt;, and Java just seems to move at a snail’s pace these days.&lt;/p&gt;

&lt;h2 id=&quot;remembering-ye-olde-async-days&quot;&gt;Remembering Ye Olde Async Days&lt;/h2&gt;

&lt;p&gt;My original &lt;a href=&quot;/2012/02/async-and-await.html&quot;&gt;intro to &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; post&lt;/a&gt; went live on my blog about five and a half years ago! It’s still fully relevant, which is unusual for a five-year-old blog post. And even today, it brings more traffic to my blog than any other post (about 15% of all my blog traffic is just for that one post).&lt;/p&gt;

&lt;p&gt;My, how much has changed since that blog post was published! At that time, &lt;code&gt;async&lt;/code&gt; was an experimental language modification that required you to install a Community Technology Preview (read: unsupported) package that changed the compilers and language features used by Visual Studio 2010. That is, unless you already installed updates to VS2010, in which case the Async CTP installation would just not work. Until they fixed it, and then it worked. Until the next VS2010 update, when it broke again. No, seriously, it was that bad! :)&lt;/p&gt;

&lt;p&gt;Oh, and once (if) you managed to get the Async CTP &lt;em&gt;installed&lt;/em&gt;, there were still &lt;a href=&quot;https://blogs.msdn.microsoft.com/lucian/2011/04/17/async-ctp-refresh-what-bugs-remain-in-it/&quot;&gt;a number of bugs&lt;/a&gt;. And if you encountered them, there wasn’t much you could do about it: the resolution was essentially “don’t do that.” Of particular note was &lt;em&gt;using multiple &lt;code&gt;await&lt;/code&gt;s in expressions&lt;/em&gt;, like Lucian’s example &lt;code&gt;var x = await f() + await g();&lt;/code&gt; Yeah, that didn’t even work. Your rule-of-thumb was one &lt;code&gt;await&lt;/code&gt; per statement, and it was best if that statement did nothing else. &lt;code&gt;var fx = await f(); var gx = await g(); var x = fx + gx;&lt;/code&gt; FTW!&lt;/p&gt;

&lt;p&gt;Also, overload resolution wasn’t quite right, especially for asynchronous delegate types. But there were no &lt;code&gt;async&lt;/code&gt; lambdas anyway. And there was no &lt;code&gt;dynamic&lt;/code&gt; compatibility with &lt;code&gt;await&lt;/code&gt; at all. And a lot of compiler safeguards were missing (e.g., &lt;code&gt;async void Main&lt;/code&gt; was allowed). And the debugger support was &lt;em&gt;horrible&lt;/em&gt; - really, there was no debugging support &lt;em&gt;at all&lt;/em&gt; back then.&lt;/p&gt;

&lt;p&gt;Today, &lt;code&gt;async&lt;/code&gt; is truly a first-class citizen of C# and VB. With every release of Visual Studio, the debugger support for &lt;code&gt;async&lt;/code&gt; code gets better and better. Tracing systems like Application Insights “just work” coordinating traces across asynchronous code. We recently got &lt;a href=&quot;https://github.com/ljw1004/roslyn/blob/features/async-return/docs/specs/feature%20-%20arbitrary%20async%20returns.md&quot;&gt;value-type &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; equivalents&lt;/a&gt;, and new enhancements are on the horizon: better code generation around the &lt;code&gt;async&lt;/code&gt; state machine, &lt;a href=&quot;https://github.com/dotnet/roslyn/issues/261&quot;&gt;&lt;code&gt;async&lt;/code&gt; enumerators&lt;/a&gt;, … the future is bright!&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2017/09/happy-birthday-async.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/09/happy-birthday-async.html</guid>
      </item>
    
      <item>
        <title>Azure Functions SPA</title>
        <description>&lt;p&gt;It seems to me that Azure Functions are a perfect match for single-page applications. I believe SPAs are going to be a natural and common use case for Azure Functions in the near future.&lt;/p&gt;

&lt;p&gt;I had to set up a SPA with an API running on Azure Functions recently, and it took me a bit to figure out all the pieces. Without further ado…&lt;/p&gt;

&lt;h2 id=&quot;host-the-api&quot;&gt;Host the API&lt;/h2&gt;

&lt;p&gt;The first step is to define your API and host it in Azure Functions. &lt;a href=&quot;https://blogs.msdn.microsoft.com/appserviceteam/2017/08/14/azure-functions-tools-released-for-visual-studio-2017-update-3/&quot;&gt;The Visual Studio tooling is out of preview now&lt;/a&gt;, and setting up a C# API is straightforward. Personally, I set up automated deployment from GitHub to my Azure Functions app.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Tip: If you want to deploy from a &lt;em&gt;subdirectory&lt;/em&gt; of a GitHub repository, &lt;a href=&quot;/2017/08/azure-functions-github-subfolder.html&quot;&gt;see this post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;host-the-spa&quot;&gt;Host the SPA&lt;/h2&gt;

&lt;p&gt;The second step is to host the SPA. I’m hosting mine on a static file server, which is easily done for free. With static file hosting, I can keep assets in external files without having to handle all of that in my Azure Functions. Or you can use Azure Blob Storage / Amazon S3 for a really cheap hosting solution, too.&lt;/p&gt;

&lt;h2 id=&quot;serve-through-azure-functions-proxies&quot;&gt;Serve through Azure Functions Proxies&lt;/h2&gt;

&lt;p&gt;The final step is to set up proxies that will forward API calls to the actual Azure Functions API or to the SPA. In your Azure Functions App, turn on Proxies (currently in preview). Then, in your Functions App project in Visual Studio, make a copy of the &lt;code&gt;host.json&lt;/code&gt; file, rename it to &lt;code&gt;proxies.json&lt;/code&gt;, and replace its contents with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;$schema&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://json.schemastore.org/proxies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;proxies&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;matchCondition&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;route&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/api/{*url}&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;backendUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://%WEBSITE_HOSTNAME%/api/{url}&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;matchCondition&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;route&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;{*url}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;methods&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OPTIONS&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;backendUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://%SPA_HOST%/&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;appResources&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;matchCondition&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;route&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/static/{*url}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;methods&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;OPTIONS&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;backendUri&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://%SPA_HOST%/static/{url}&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only part you need to change is &lt;code&gt;%SPA_HOST%&lt;/code&gt; - you can change this to where your SPA is hosted, or just keep the file as-is and add an application setting &lt;code&gt;SPA_HOST&lt;/code&gt; that points to your SPA.&lt;/p&gt;

&lt;p&gt;This will set up three proxies: one for your API calls, one to serve up the SPA HTML, and one to serve up SPA static resources (JavaScript bundle, images, etc).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;api&lt;/code&gt; proxy will forward all requests starting with &lt;code&gt;/api&lt;/code&gt; to the actual Azure Function implementations (using &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/Azure-runtime-environment&quot;&gt;the predefined &lt;code&gt;WEBSITE_HOSTNAME&lt;/code&gt; setting&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;appResources&lt;/code&gt; proxy will forward all requests starting with &lt;code&gt;/static&lt;/code&gt; to your SPA host, preserving the remainder of your url.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; proxy will forward all remaining requests to the SPA.&lt;/p&gt;

&lt;p&gt;A brief note on priorities: Azure Functions Proxies use the same &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2#route-order&quot;&gt;route ordering rules as WebAPI 2 attribute routing&lt;/a&gt;. So the &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;appResources&lt;/code&gt; proxies are always evaluated before the &lt;code&gt;app&lt;/code&gt; proxy because they start with constant path segment prefixes (the &lt;code&gt;api&lt;/code&gt; proxy starts with an &lt;code&gt;/api/&lt;/code&gt; path segment, and the &lt;code&gt;appResources&lt;/code&gt; proxy starts with a &lt;code&gt;/static/&lt;/code&gt; path segment). This way, the &lt;code&gt;app&lt;/code&gt; proxy doesn’t intercept &lt;code&gt;/api&lt;/code&gt; and &lt;code&gt;/static&lt;/code&gt; requests.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you have a single Azure Functions App instance that serves both a SPA and its API! Since both your SPA app and your Azure Functions API exist on the same domain, you don’t need to open up CORS for your API.&lt;/p&gt;

&lt;p&gt;Requests such as &lt;code&gt;/api/bob&lt;/code&gt; will be forwarded to your Azure Function &lt;code&gt;bob&lt;/code&gt;, and requests such as &lt;code&gt;/&lt;/code&gt; will be forwarded to your main SPA HTML page. Requests such as &lt;code&gt;/some/long/path&lt;/code&gt; will &lt;em&gt;also&lt;/em&gt; be forwarded to your SPA HTML page, so you can easily use HTML5 history routing instead of hash routing in your SPA, and your app will be served properly when users refresh the page.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2017/08/azure-functions-spa.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/08/azure-functions-spa.html</guid>
      </item>
    
      <item>
        <title>Continuously Deploy Azure Functions from a GitHub Subfolder</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-continuous-deployment&quot;&gt;You can set up continuous deployment for Azure Functions from any branch of a GitHub repository&lt;/a&gt;. Unfortunately, the deployment system will either just deploy your files (&lt;code&gt;Found solution 'D:\home\site\repository\src\Sample.sln' with no deployable projects. Deploying files instead.&lt;/code&gt;) or may try to deploy the wrong project (e.g., if you have a console app in your solution).&lt;/p&gt;

&lt;p&gt;You can use a different branch in GitHub for the output of your solution, but this is awkward. The solution I chose is to deploy the Azure Functions App from a &lt;em&gt;specific subfolder&lt;/em&gt; of a GitHub repository. You can do this by &lt;a href=&quot;https://github.com/projectkudu/kudu/wiki/Customizing-deployments&quot;&gt;adding a &lt;code&gt;.deployment&lt;/code&gt; file in the root of your repository that tells the deployment system where your Azure Functions App is&lt;/a&gt;. E.g.:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;k&quot;&gt;[config]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/FunctionApp1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you run into deployment errors like &lt;code&gt;The &quot;Move&quot; task failed unexpectedly. (System.Runtime.InteropServices.COMException (0x800700A1): The specified path is invalid.)&lt;/code&gt; when the &lt;code&gt;_GenerateFunctionsPostBuild&lt;/code&gt; target tries to copy your project output, then &lt;a href=&quot;https://stackoverflow.com/questions/45743877/azure-function-ci-build-error-cannot-create-a-file-when-that-file-already-exis&quot;&gt;ensure you’re using v1.0.1 or later of &lt;code&gt;Microsoft.NET.Sdk.Functions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2017/08/azure-functions-github-subfolder.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/08/azure-functions-github-subfolder.html</guid>
      </item>
    
      <item>
        <title>Announcing AsyncTime</title>
        <description>&lt;p&gt;A short post today just to announce a new project of mine: &lt;a href=&quot;https://vimeo.com/ondemand/asynctime&quot;&gt;AsyncTime!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/ondemand/asynctime&quot;&gt;AsyncTime&lt;/a&gt; is a series of short videos covering subjects that work better in a video format rather than a blog post format. Some of the videos will be only for subscribers, but I’m kicking off the channel with several big-picture videos that are free for everyone!&lt;/p&gt;

&lt;p&gt;I hope this is a benefit for you; I’m certainly looking forward to it!&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2017/07/announcing-asynctime.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/07/announcing-asynctime.html</guid>
      </item>
    
      <item>
        <title>Happy birthday, iPhone!</title>
        <description>&lt;p&gt;Today marks the 10th birthday of the iPhone! My, how much has changed in a single decade… This blog deals with all things &lt;code&gt;async&lt;/code&gt;, and the iPhone has been an important part of &lt;code&gt;async&lt;/code&gt; adoption.&lt;/p&gt;

&lt;h2 id=&quot;what-does-the-iphone-have-to-do-with-async&quot;&gt;What does the iPhone have to do with async?&lt;/h2&gt;

&lt;p&gt;Glad you asked!&lt;/p&gt;

&lt;p&gt;The adoption of &lt;code&gt;async&lt;/code&gt; has accelerated considerably over the last few years, with no seeming end in sight. I’ve discussed this phenomenon several times in a couple of my talks, and I’m recording a more permanent discussion of it that will be released shortly.&lt;/p&gt;

&lt;p&gt;To put it simply, &lt;code&gt;async&lt;/code&gt; is all about freeing up threads. This results in two major benefits: on the server side, &lt;code&gt;async&lt;/code&gt; frees up request threads so that the server can scale further (and faster) while requiring fewer resources; on the client side, &lt;code&gt;async&lt;/code&gt; frees up the UI thread so that it can remain responsive to the user.&lt;/p&gt;

&lt;p&gt;Finally, there have been two broad changes in the types of software being written. The first is cloud computing, which gives direct financial benefits to servers that require fewer resources - an ideal scenario for &lt;code&gt;async&lt;/code&gt; adoption.&lt;/p&gt;

&lt;p&gt;The second is mobile applications. Unlike traditional desktop apps, mobile apps &lt;em&gt;must&lt;/em&gt; be responsive to the user - an ideal scenario for &lt;code&gt;async&lt;/code&gt; adoption.&lt;/p&gt;

&lt;p&gt;These two movements - cloud computing and mobile - have encouraged &lt;code&gt;async&lt;/code&gt; adoption to move at a faster rate than it could have otherwise.&lt;/p&gt;

&lt;p&gt;So, happy birthday, iPhone, and thanks for all you’ve done!&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2017/06/happy-birthday-iphone.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/06/happy-birthday-iphone.html</guid>
      </item>
    
      <item>
        <title>Async JavaScript</title>
        <description>&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords first hit the scene way back in 2010, when it was introduced in F#. C# and VB followed fairly quickly in 2012, with Python and TypeScript adopting them in 2015.&lt;/p&gt;

&lt;p&gt;Tuesday or Wednesday next week (the 27th and 28th of June), &lt;code&gt;async&lt;/code&gt; should officially become a part of JavaScript!&lt;/p&gt;

&lt;p&gt;That is, the &lt;a href=&quot;https://github.com/tc39/ecmascript-asyncawait&quot;&gt;&lt;code&gt;async&lt;/code&gt; proposal&lt;/a&gt; &lt;a href=&quot;https://github.com/tc39/proposals/blob/master/finished-proposals.md&quot;&gt;has reached&lt;/a&gt; &lt;a href=&quot;https://tc39.github.io/process-document/&quot;&gt;Stage 4&lt;/a&gt;, is included in the &lt;a href=&quot;https://tc39.github.io/ecma262/2017/&quot;&gt;ES2017 language specification&lt;/a&gt;, and is expected to be ratified &lt;a href=&quot;https://www.ecma-international.org/memento/Ecma_meeting_calendar.htm&quot;&gt;next week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, JavaScript being what it is, lots of people have been &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-async-to-generator/&quot;&gt;using it for some time already&lt;/a&gt;. Chrome even has &lt;a href=&quot;https://developers.google.com/web/fundamentals/getting-started/primers/async-functions&quot;&gt;native support&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;JavaScript is perhaps the most widely-used language today, and this marks a big step forward in the &lt;code&gt;async&lt;/code&gt; invasion. Stay tuned on this blog for JavaScript-related &lt;code&gt;async&lt;/code&gt; tips in addition to the regular .NET ones! :)&lt;/p&gt;

&lt;p&gt;Way to go, &lt;code&gt;async&lt;/code&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2017/06/async-javascript.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2017/06/async-javascript.html</guid>
      </item>
    
  </channel>
</rss>
