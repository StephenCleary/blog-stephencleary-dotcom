<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary&#39;s blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>http://blog.stephencleary.com/</link>
    <atom:link href="http://blog.stephencleary.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>A Tour of Task, Part 6: Results</title>
        <description>&lt;p&gt;The task members discussed in this blog post are concerned with retrieving results from the task. Once the task completes, the consuming code must retrieve the results of the task. Even if the task has no result, it’s important for the consuming code to examine the task for errors so it knows whether the task completed successfully or failed.&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Result&lt;/code&gt; member only exists on the &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; type; it does not exist on the &lt;code&gt;Task&lt;/code&gt; type (which represents a task without a result value).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2014/10/a-tour-of-task-part-5-wait.html&quot;&gt;Like &lt;code&gt;Wait&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Result&lt;/code&gt; will synchronously block the calling thread until the task completes. This is generally not a good idea for the same reason it wasn’t a good idea for &lt;code&gt;Wait&lt;/code&gt;: &lt;a href=&quot;/2012/07/dont-block-on-async-code.html&quot;&gt;it’s easy to cause deadlocks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, &lt;code&gt;Result&lt;/code&gt; will wrap any task exceptions inside an &lt;code&gt;AggregateException&lt;/code&gt;. This usually just complicates the error handling.&lt;/p&gt;

&lt;h2 id=&quot;exception&quot;&gt;Exception&lt;/h2&gt;

&lt;p&gt;Speaking of exceptions, there’s a member specifically just for retrieving the exceptions from a task:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;AggregateException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unlike &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Wait&lt;/code&gt;, &lt;code&gt;Exception&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; block until the task completes; if called while the task is still in progress, it will just return &lt;code&gt;null&lt;/code&gt;. If the task completes successfully &lt;em&gt;or&lt;/em&gt; is cancelled, then &lt;code&gt;Exception&lt;/code&gt; will still return &lt;code&gt;null&lt;/code&gt;. If the task is faulted, then &lt;code&gt;Exception&lt;/code&gt; will return the task’s exceptions wrapped in an &lt;code&gt;AggregateException&lt;/code&gt;. Again, this usually just serves to complicate the error handling.&lt;/p&gt;

&lt;h2 id=&quot;getawaitergetresult&quot;&gt;GetAwaiter().GetResult()&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;GetAwaiter&lt;/code&gt; member was added to &lt;code&gt;Task&lt;/code&gt; and &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; in .NET 4.5, and it’s available as an extension method on .NET 4.0 using the &lt;code&gt;Microsoft.Bcl.Async&lt;/code&gt; NuGet package. Normally, the &lt;code&gt;GetAwaiter&lt;/code&gt; method is just used by &lt;code&gt;await&lt;/code&gt;, but it &lt;em&gt;is&lt;/em&gt; possible to call it yourself:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAwaiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code above will synchronously block until the task completes. As such, it is subject to the &lt;a href=&quot;/2012/07/dont-block-on-async-code.html&quot;&gt;same old deadlock problems&lt;/a&gt; as &lt;code&gt;Wait&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt;. However, it will &lt;em&gt;not&lt;/em&gt; wrap the task exceptions in an &lt;code&gt;AggregateException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code above will retrieve the result value from a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;. The same code pattern can also be applied to &lt;code&gt;Task&lt;/code&gt; (without a result value); in this case “GetResult” actually means “check the task for errors”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAwaiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In general, I try my best to avoid synchronously blocking on an asynchronous task. However, there are a handful of situations where I do violate that guideline. In those rare conditions, my preferred method is &lt;code&gt;GetAwaiter().GetResult()&lt;/code&gt; because it preserves the task exceptions instead of wrapping them in an &lt;code&gt;AggregateException&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;await&quot;&gt;await&lt;/h2&gt;

&lt;p&gt;Of course, &lt;code&gt;await&lt;/code&gt; is not a member of the task type; however, I feel it’s important to remind today’s readers that the &lt;em&gt;best&lt;/em&gt; way of retrieving results from a &lt;a href=&quot;/2014/06/a-tour-of-task-part-3-status.html&quot;&gt;Promise Task&lt;/a&gt; is to merely use &lt;code&gt;await&lt;/code&gt;. &lt;code&gt;await&lt;/code&gt; retrieves task results in the most benign manner possible: &lt;code&gt;await&lt;/code&gt; will &lt;em&gt;asynchronously&lt;/em&gt; wait (not block); &lt;code&gt;await&lt;/code&gt; will return the result (if any) for a successful task; and &lt;code&gt;await&lt;/code&gt; will (re-)throw exceptions for a failed task &lt;em&gt;without&lt;/em&gt; wrapping them in an &lt;code&gt;AggregateException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In short, &lt;code&gt;await&lt;/code&gt; should be your go-to option for retrieving task results. The vast majority of the time, &lt;code&gt;await&lt;/code&gt; should be used instead of &lt;code&gt;Wait&lt;/code&gt;, &lt;code&gt;Result&lt;/code&gt;, &lt;code&gt;Exception&lt;/code&gt;, or &lt;code&gt;GetAwaiter().GetResult()&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Dec 2014 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html</guid>
      </item>
    
      <item>
        <title>A Tour of Task, Part 5: Waiting</title>
        <description>&lt;p&gt;Today, we’ll look at a variety of ways that code can block on a task. All of these options block the calling thread until the task completes, so they’re almost never used with &lt;a href=&quot;/2014/06/a-tour-of-task-part-3-status.html&quot;&gt;Promise Tasks&lt;/a&gt;. Note that &lt;a href=&quot;/2012/07/dont-block-on-async-code.html&quot;&gt;blocking on a Promise Task is a common cause of deadlocks&lt;/a&gt;; blocking is almost exclusively used with Delegate Tasks (i.e., a task returned from &lt;code&gt;Task.Run&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;wait&quot;&gt;Wait&lt;/h2&gt;

&lt;p&gt;There are five overloads of &lt;code&gt;Wait&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These nicely simplify down to a single &lt;em&gt;logical&lt;/em&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TotalMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Wait&lt;/code&gt; is rather simple: it will block the calling thread until the task completes, a timeout occurs, or the wait is cancelled. If the wait is cancelled, then &lt;code&gt;Wait&lt;/code&gt; raises an &lt;code&gt;OperationCanceledException&lt;/code&gt;. If a timeout occurs, then &lt;code&gt;Wait&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. If the task completes in a failed or canceled state, then &lt;code&gt;Wait&lt;/code&gt; wraps any exceptions into an &lt;code&gt;AggregateException&lt;/code&gt;. Note that a canceled &lt;em&gt;task&lt;/em&gt; will raise an &lt;code&gt;OperationCanceledException&lt;/code&gt; wrapped in an &lt;code&gt;AggregateException&lt;/code&gt;, whereas a canceled &lt;em&gt;wait&lt;/em&gt; will raise an unwrapped &lt;code&gt;OperationCanceledException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Task.Wait&lt;/code&gt; is occasionally useful, if it’s done in the correct context. For example, the &lt;code&gt;Main&lt;/code&gt; method of a Console application can use &lt;code&gt;Wait&lt;/code&gt; if it has asynchronous work to do, but wants the main thread to synchronously block until that work is done. However, most of the time, &lt;code&gt;Task.Wait&lt;/code&gt; is dangerous because if its &lt;a href=&quot;/2012/07/dont-block-on-async-code.html&quot;&gt;deadlock potential&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;For asynchronous code, use &lt;code&gt;await&lt;/code&gt; instead of &lt;code&gt;Task.Wait&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;waitall&quot;&gt;WaitAll&lt;/h2&gt;

&lt;p&gt;The overloads for &lt;code&gt;WaitAll&lt;/code&gt; are very similar to the overloads of &lt;code&gt;Wait&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, these nicely simplify down to a single logical method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TotalMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are practically identical to &lt;code&gt;Task.Wait&lt;/code&gt;, except they wait for multiple tasks to all complete. Similarly to &lt;code&gt;Task.Wait&lt;/code&gt;, &lt;code&gt;Task.WaitAll&lt;/code&gt; will throw &lt;code&gt;OperationCanceledException&lt;/code&gt; if the wait is cancelled, or an &lt;code&gt;AggregateException&lt;/code&gt; if any of the tasks fail or are cancelled. &lt;code&gt;WaitAll&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if a timeout occurs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Task.WaitAll&lt;/code&gt; should be very rarely used. It is occasionally useful when working with &lt;a href=&quot;/2014/06/a-tour-of-task-part-3-status.html&quot;&gt;Delegate Tasks&lt;/a&gt;, but even this usage is rare. Developers writing parallel code should first attempt data parallelism; and even if task parallism is necessary, then parent/child tasks may result in cleaner code than defining ad-hoc dependencies with &lt;code&gt;Task.WaitAll&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Note that &lt;code&gt;Task.WaitAll&lt;/code&gt; (for synchronous code) is rare, but &lt;code&gt;Task.WhenAll&lt;/code&gt; (for asynchronous code) is common.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;waitany&quot;&gt;WaitAny&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Task.WaitAny&lt;/code&gt; is similar to &lt;code&gt;WaitAll&lt;/code&gt; except it only waits for the first task to complete (and returns the index of that task). Again, we have the similar overloads:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which simplify down to a single logical method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TotalMilliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WaitAny&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The semantics of &lt;code&gt;WaitAny&lt;/code&gt; are a bit different than &lt;code&gt;WaitAll&lt;/code&gt; and &lt;code&gt;Wait&lt;/code&gt;: &lt;code&gt;WaitAny&lt;/code&gt; merely waits for the first task to complete. It will &lt;em&gt;not&lt;/em&gt; propagate that task’s exception in an &lt;code&gt;AggregateException&lt;/code&gt;. Rather, any task failures will need to be checked after &lt;code&gt;WaitAny&lt;/code&gt; returns. &lt;code&gt;WaitAny&lt;/code&gt; will return &lt;code&gt;-1&lt;/code&gt; on timeout, and will throw &lt;code&gt;OperationCanceledException&lt;/code&gt; if the wait is cancelled.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;Task.WaitAll&lt;/code&gt; is rarely used, &lt;code&gt;Task.WaitAny&lt;/code&gt; should hardly ever be used at all.&lt;/p&gt;

&lt;h2 id=&quot;asyncwaithandle&quot;&gt;AsyncWaitHandle&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Task&lt;/code&gt; type actually implements &lt;code&gt;IAsyncResult&lt;/code&gt; for &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/hh873178(v=vs.110).aspx#TapToApm&quot;&gt;easy interoperation with the (unfortunately named) Asynchronous Programming Model (APM)&lt;/a&gt;. This means &lt;code&gt;Task&lt;/code&gt; has a wait handle as one of its properties:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;WaitHandle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncWaitHandle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that this member is explicitly implemented, so consuming code &lt;em&gt;must&lt;/em&gt; cast the &lt;code&gt;Task&lt;/code&gt; as &lt;code&gt;IAsyncResult&lt;/code&gt; before reading it. The actual underlying wait handle is lazy-allocated.&lt;/p&gt;

&lt;p&gt;Code using &lt;code&gt;AsyncWaitHandle&lt;/code&gt; should be extremely, &lt;em&gt;extremely&lt;/em&gt; rare. It only makes sense if you have tons of existing code that is built around &lt;code&gt;WaitHandle&lt;/code&gt;. If you do read the &lt;code&gt;AsyncWaitHandle&lt;/code&gt; property, strongly consider &lt;a href=&quot;http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx&quot;&gt;disposing the task instance&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are a few corner cases where a single &lt;code&gt;Task.Wait&lt;/code&gt; could be useful; but in general, code should not synchronously block on a task.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/10/a-tour-of-task-part-5-wait.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/10/a-tour-of-task-part-5-wait.html</guid>
      </item>
    
      <item>
        <title>Await in Catch and Finally</title>
        <description>&lt;p&gt;This is just a brief note to publicize a coming improvement to the &lt;code&gt;async&lt;/code&gt; language support.&lt;/p&gt;

&lt;p&gt;Visual Studio “14” &lt;a href=&quot;http://blogs.msdn.com/b/somasegar/archive/2014/06/03/first-preview-of-visual-studio-quot-14-quot-available-now.aspx&quot;&gt;is currently in CTP&lt;/a&gt;, and is &lt;a href=&quot;http://www.visualstudio.com/en-us/downloads/visual-studio-14-ctp-vs&quot;&gt;available for download&lt;/a&gt;. One of the primary advantages of this release is the new Roslyn-based compilers.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Note that the “14” in the name is the version number, not the year of release. In other words, the CTP is for “Visual Studio 14”, &lt;em&gt;not&lt;/em&gt; “Visual Studio 2014”. If I had to guess, I would say that this CTP will probably become “Visual Studio 2015”.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;With the new compilers, changes to the C# language (e.g., &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;) are easier than they used to be. One improvement that is coming is the use of &lt;code&gt;await&lt;/code&gt; in &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; blocks. This enables your error-handling/cleanup code to be asynchronous without awkward code mangling.&lt;/p&gt;

&lt;p&gt;For example, let’s say that you want to (asynchronously) log an exception in one of your &lt;code&gt;async&lt;/code&gt; methods. The natural way to write this is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OperationThatMayThrowAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpectedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this natural code works fine in Visual Studio “14”. However, the currently-released Visual Studio 2013 does not support &lt;code&gt;await&lt;/code&gt; in a &lt;code&gt;catch&lt;/code&gt;, so you would have to keep some kind of “error flag” and move the actual error handling logic outside the &lt;code&gt;catch&lt;/code&gt; block:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;ExpectedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OperationThatMayThrowAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpectedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is only a simple example; in real-world code, this can get ugly rather quickly!&lt;/p&gt;

&lt;p&gt;Fortunately, it looks like the next version of Visual Studio will fix this by allowing &lt;code&gt;await&lt;/code&gt; within &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; blocks. I’ve tested this out with the Visual Studio “14” CTP, and it does work!&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-exclamation-triangle fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;This blog post is describing technology currently in preview (CTP). The final product may be different.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 14 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/06/await-in-catch-and-finally.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/06/await-in-catch-and-finally.html</guid>
      </item>
    
      <item>
        <title>A Tour of Task, Part 4: Id</title>
        <description>&lt;h2 id=&quot;id&quot;&gt;Id&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’ve talked a bit about &lt;a href=&quot;/2013/03/a-few-words-on-taskid-and.html&quot;&gt;task identifiers before&lt;/a&gt;, so I’ll just cover the high points here.&lt;/p&gt;

&lt;p&gt;First, in spite of what the documentation says, the identifiers are not actually &lt;em&gt;unique&lt;/em&gt;. They are pretty close, but not actually unique. The identifiers are generated on-demand, and will never be zero.&lt;/p&gt;

&lt;p&gt;The task identifiers are useful if you’re &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ee517329.aspx&quot;&gt;reading the ETW events&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd998369.aspx&quot;&gt;debugging with the Tasks window&lt;/a&gt;, but they don’t really have a use case outside of diagnostics and debugging.&lt;/p&gt;

&lt;p&gt;Sometimes developers try to use the task identifiers as keys in a collection, to associate “extra data” with a task. This is an incorrect approach; usually what they’re looking for is an &lt;a href=&quot;/2013/04/implicit-async-context-asynclocal.html&quot;&gt;&lt;code&gt;async&lt;/code&gt; local&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;currentid&quot;&gt;CurrentId&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CurrentId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;CurrentId&lt;/code&gt; property returns the identifier of the currently-executing task, or &lt;code&gt;null&lt;/code&gt; if no task is executing. The key word here is &lt;em&gt;executing&lt;/em&gt; - &lt;code&gt;CurrentId&lt;/code&gt; only works for Delegate Tasks, not Promise Tasks.&lt;/p&gt;

&lt;p&gt;In particular, the task returned by an &lt;code&gt;async&lt;/code&gt; method is a Promise Task; it &lt;em&gt;logically&lt;/em&gt; represents the &lt;code&gt;async&lt;/code&gt; method, but it is not a Delegate Task, and does not actually have the asynchronous code as its delegate. &lt;code&gt;CurrentId&lt;/code&gt; may or may not be &lt;code&gt;null&lt;/code&gt; within an &lt;code&gt;async&lt;/code&gt; method, depending on the implementation details of the underlying &lt;code&gt;SynchronizationContext&lt;/code&gt; or &lt;code&gt;TaskScheduler&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;For more information, including sample code, see my &lt;a href=&quot;/2013/03/taskcurrentid-in-async-methods.html&quot; class=&quot;alert-link&quot;&gt;post on &lt;code&gt;CurrentId&lt;/code&gt; in &lt;code&gt;async&lt;/code&gt; methods&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In parallel code, it is &lt;em&gt;possible&lt;/em&gt; to use the current task identifier as a key into a collection to store task-local values or results, but that is a poor approach IMO. It’s usually far better to use the PLINQ/&lt;code&gt;Parallel&lt;/code&gt; built-in local value and result aggregation support.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/06/a-tour-of-task-part-4-id.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/06/a-tour-of-task-part-4-id.html</guid>
      </item>
    
      <item>
        <title>Fire and Forget on ASP.NET</title>
        <description>&lt;p&gt;.NET 4.5.2 added a built-in way to queue background (a.k.a. “fire and forget”) work in ASP.NET. This post is a summary of the different techniques available today.&lt;/p&gt;

&lt;h2 id=&quot;threadpool&quot;&gt;ThreadPool&lt;/h2&gt;

&lt;p&gt;The easiest method is to just throw work onto a background thread, e.g., &lt;code&gt;Task.Run&lt;/code&gt;, &lt;code&gt;Task.Factory.StartNew&lt;/code&gt;, &lt;code&gt;Delegate.BeginInvoke&lt;/code&gt;, &lt;code&gt;ThreadPool.QueueUserWorkItem&lt;/code&gt;, etc. However, this is a &lt;strong&gt;really bad idea&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;The reason is that the ASP.NET runtime has no idea that you’ve queued this work, so it’s not aware that the background work even &lt;em&gt;exists&lt;/em&gt;. For a variety of reasons, IIS/ASP.NET has to occasionally recycle your application. If you have background work running when this recycling takes place, that work will mysteriously disappear.&lt;/p&gt;

&lt;h2 id=&quot;hostingenvironmentqueuebackgroundworkitem&quot;&gt;HostingEnvironment.QueueBackgroundWorkItem&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;QueueBackgroundWorkItem&lt;/code&gt; (QBWI) was added in .NET 4.5.2 to help mitigate loss of background work. &lt;a href=&quot;http://blogs.msdn.com/b/webdev/archive/2014/06/04/queuebackgroundworkitem-to-reliably-schedule-and-run-long-background-process-in-asp-net.aspx&quot;&gt;QBWI will register its background work with the ASP.NET runtime&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Since the ASP.NET runtime is aware of the background work, it will not immediately yank your AppDomain when it’s time to recycle. However, this does not mean that the background work can just do whatever it wants!&lt;/p&gt;

&lt;p&gt;QBWI will register the work with ASP.NET. When ASP.NET has to recycle, it will notify the background work (by setting a &lt;code&gt;CancellationToken&lt;/code&gt;) and will then wait up to 30 seconds for the work to complete. If the background work doesn’t complete in that time frame, the work will mysteriously disappear.&lt;/p&gt;

&lt;p&gt;So, QBWI is a step in the right direction. I would say it’s the “minimum viable” alternative.&lt;/p&gt;

&lt;h2 id=&quot;iregisteredobject&quot;&gt;IRegisteredObject&lt;/h2&gt;

&lt;p&gt;The standard way to register with ASP.NET is via &lt;code&gt;IRegisteredObject&lt;/code&gt;. The semantics aren’t officially documented, but they’re described in &lt;a href=&quot;http://blogs.msdn.com/b/tmarq/archive/2010/04/14/performing-asynchronous-work-or-tasks-in-asp-net-applications.aspx&quot;&gt;this blog post under the third answer of question 5&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can create an object that implements the &lt;code&gt;IRegisteredObject&lt;/code&gt; interface and call &lt;code&gt;HostingEnvironment.RegisterObject&lt;/code&gt; to “register” it with ASP.NET.  When the AppDomain is about to be unloaded, we will call your implementation of &lt;code&gt;IRegisteredObject.Stop(bool immediate)&lt;/code&gt;.  The &lt;code&gt;Stop&lt;/code&gt; method is called twice by ASP.NET, once with the &lt;code&gt;immediate&lt;/code&gt; parameter set to &lt;code&gt;false&lt;/code&gt; and once again with that argument set to &lt;code&gt;true&lt;/code&gt;.  You are supposed to call &lt;code&gt;HostingEnvironment.UnregisterObject&lt;/code&gt; as soon as your registered object has stopped, so ASP.NET knows it doesn’t need to call your &lt;code&gt;Stop&lt;/code&gt; method.  You can call it at anytime, but you definitely should call it before returning from &lt;code&gt;Stop&lt;/code&gt; when it is called with &lt;code&gt;immediate&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, because that’s your final chance and if you’re still running after that you will be rudely aborted…  If you need to, you can hold up the unload as long as you like, because we won’t unload until your &lt;code&gt;Stop&lt;/code&gt; method returns the second time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This blog post clarifies the semantics. Essentially, they boil down to this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When ASP.NET wants to unload your application, it will call &lt;code&gt;IRegisteredObject.Stop(false)&lt;/code&gt; on all objects registered with the ASP.NET runtime.&lt;/li&gt;
  &lt;li&gt;This is a friendly notification that the AppDomain is going away. Registered objects should start cleaning up and call &lt;code&gt;UnregisterObject&lt;/code&gt; when their cleanup is complete.&lt;/li&gt;
  &lt;li&gt;If there are still registered objects running after 30 seconds, ASP.NET will call &lt;code&gt;IRegisteredObject.Stop(true)&lt;/code&gt; on them.&lt;/li&gt;
  &lt;li&gt;ASP.NET will unload the AppDomain after all those second notifications have returned.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I use &lt;code&gt;IRegisteredObject&lt;/code&gt; in my &lt;a href=&quot;https://github.com/StephenCleary/AspNetBackgroundTasks&quot;&gt;ASP.NET Background Tasks library&lt;/a&gt;, and (as of this writing) the built-in &lt;code&gt;QueueBackgroundWorkItem&lt;/code&gt; &lt;em&gt;also&lt;/em&gt; uses &lt;code&gt;IRegisteredObject&lt;/code&gt;. These approaches are slightly different, though. &lt;code&gt;QueueBackgroundWorkItem&lt;/code&gt; ignores the second call to &lt;code&gt;Stop&lt;/code&gt; and returns immediately, so any background work that takes longer than 30 seconds will be terminated. My AspNetBackgroundTasks library will wait for the background work to complete, and will delay the AppDomain shutdown indefinitely.&lt;/p&gt;

&lt;p&gt;Also, QBWI will log any exceptions from the background work, while AspNetBackgroundTasks will not.&lt;/p&gt;

&lt;p&gt;Neither one of those choices is better; they’re just different. &lt;code&gt;QueueBackgroundWorkItem&lt;/code&gt; chose to keep the system as a whole more reliable by sacrificing long-running background work items. AspNetBackgroundTasks chose not to terminate background tasks, which could impact the regular application recycling if one of those tasks is misbehaved.&lt;/p&gt;

&lt;p&gt;Neither of these solutions is ideal. They have to make tradeoffs, and of course neither of them can recover from situations like power losses and server failures. So, I characterize these registration-based solutions as “more reliable” than just queueing work to the thread pool (which is totally unreliable), but even registering with ASP.NET is not totally reliable.&lt;/p&gt;

&lt;h2 id=&quot;hangfire&quot;&gt;HangFire&lt;/h2&gt;

&lt;p&gt;One interesting low-entry reliable solution is &lt;a href=&quot;http://hangfire.io/&quot;&gt;HangFire&lt;/a&gt;. This library is pretty easy to use but does make some assumptions.&lt;/p&gt;

&lt;p&gt;The first and most obvious assumption is that it relies on some kind of reliable storage already in your architecture: specifically, SQL Server, Redis, or Microsoft Message Queues (MSMQ). This is a good start, but I’d like to see support for Azure tables and queues as well.&lt;/p&gt;

&lt;p&gt;The second assumption is that the code will not significantly change. The way that HangFire serializes the background work makes assumptions around the delegates that are queued. If the code changes significantly and ASP.NET restarts with the new code, I’m not sure how the system will respond when it attempts to run the old background work.&lt;/p&gt;

&lt;p&gt;So, I’d need to research this library more to feel comfortable using it (and extend it to support Azure queues), but it does look like a very interesting library with a low bar to entry.&lt;/p&gt;

&lt;h2 id=&quot;distributed-architecture&quot;&gt;Distributed Architecture&lt;/h2&gt;

&lt;p&gt;The proper solution is to use a basic distributed architecture.&lt;/p&gt;

&lt;p&gt;The first thing you need is a reliable storage medium. I prefer queues (e.g., Azure queues, WebSphere message queues, Microsoft message queueing, etc), but any kind of reliable storage would work (as previously mentioned, HangFire prefers databases).&lt;/p&gt;

&lt;p&gt;Then you’ll need a way to store the background work in that storage. HangFire uses an interesting method of serializing the delegate, which I am a little leery of. I’d prefer a solution that stored the background work &lt;em&gt;semantically&lt;/em&gt;. This also means that the schema for the background work should be versioned.&lt;/p&gt;

&lt;p&gt;The next thing is a host to perform the background work. These days I’d prefer an Azure WebJob, but you could also use a separate thread in an ASP.NET app. The host must be reliable in the sense that it should either complete the work or leave the work in storage to try again, but not both. Usually, the easiest way to satisfy this is to make all the work items idempoent and use a “lease” when reading from storage. Most reliable queues have built-in support for leases, but it’s up to you to make the background work idempotent.&lt;/p&gt;

&lt;p&gt;The last thing in this kind of architecture is some kind of “poison message” recovery. That is, if there is some background work that gets into the system, and that work cannot complete successfully for whatever reason, there has to be some procedure for removing that piece of background work and setting it aside so that the system as a whole can continue processing.&lt;/p&gt;

&lt;p&gt;Distributed architecture is complex, but it’s The Right Way™. It is the most reliable and resilient option available.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/06/fire-and-forget-on-asp-net.html</guid>
      </item>
    
      <item>
        <title>A Tour of Task, Part 3: Status</title>
        <description>&lt;h2 id=&quot;status&quot;&gt;Status&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TaskStatus&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you view a &lt;code&gt;Task&lt;/code&gt; as a state machine, then the &lt;code&gt;Status&lt;/code&gt; property represents the current state. Different types of tasks take different paths through the state machine.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;As usual, this post is just taking &lt;a href=&quot;http://blogs.msdn.com/b/pfxteam/archive/2009/08/30/9889070.aspx&quot; class=&quot;alert-link&quot;&gt;what Stephen Toub already said&lt;/a&gt;, expounding on it a bit, and drawing some ugly pictures. :)&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;delegate-tasks&quot;&gt;Delegate Tasks&lt;/h3&gt;

&lt;p&gt;Delegate Tasks follow the basic pattern in the image below:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/TaskStates.Delegate.png&quot;&gt;&lt;img src=&quot;/assets/TaskStates.Delegate.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, Delegate Tasks are created via &lt;code&gt;Task.Run&lt;/code&gt; (or &lt;code&gt;Task.Factory.StartNew&lt;/code&gt;), and enter the state machine at the &lt;code&gt;WaitingToRun&lt;/code&gt; state. &lt;code&gt;WaitingToRun&lt;/code&gt; means that the task is associated with a task scheduler, and is just waiting its turn to run.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Entering at the &lt;code&gt;WaitingToRun&lt;/code&gt; state is the normal path for Delegate Tasks, but there are a couple of other possibilities.&lt;/p&gt;

  &lt;p&gt;If a Delegate Task is started with the &lt;a href=&quot;/2014/05/a-tour-of-task-part-1-constructors.html&quot; class=&quot;alert-link&quot;&gt;task constructor&lt;/a&gt;, then it starts in the &lt;code&gt;Created&lt;/code&gt; state and only moves to the &lt;code&gt;WaitingToRun&lt;/code&gt; state when you assign it to a task scheduler via &lt;code&gt;Start&lt;/code&gt; or &lt;code&gt;RunSynchronously&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;If a Delegate Task is a continuation of another task, then it starts in the &lt;code&gt;WaitingForActivation&lt;/code&gt; state and automatically moves to the &lt;code&gt;WaitingToRun&lt;/code&gt; state when that other task completes.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The task is in the &lt;code&gt;Running&lt;/code&gt; state when the delegate of the Delegate Task is actually executing. When it’s done, the task proceeds to the &lt;code&gt;WaitingForChildrenToComplete&lt;/code&gt; state until its children are all completed. Finally, the task ends up in one of the three final states: &lt;code&gt;RanToCompletion&lt;/code&gt; (successfully), &lt;code&gt;Faulted&lt;/code&gt;, or &lt;code&gt;Canceled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember that since Delegate Tasks represent running code, it’s quite possible that you may not see one or more of these states. For example, it’s possible to queue some very fast work to the thread pool and have that task already completed by the time it’s returned to your code.&lt;/p&gt;

&lt;p&gt;Also, this state machine can be short-circuited at any point if the task is canceled. It is possible for the task to be canceled before it enters the &lt;code&gt;Running&lt;/code&gt; state, and thus not even execute its delegate.&lt;/p&gt;

&lt;h3 id=&quot;promise-tasks&quot;&gt;Promise Tasks&lt;/h3&gt;

&lt;p&gt;Promise Tasks have a much simpler state machine:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/TaskStates.Promise.png&quot;&gt;&lt;img src=&quot;/assets/TaskStates.Promise.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;This diagram is slightly simplified; technically, Promise Tasks &lt;em&gt;can&lt;/em&gt; enter the &lt;code&gt;WaitingForChildrenToComplete&lt;/code&gt; state. However, this is rather non-intuitive and for this reason tasks created for &lt;code&gt;async&lt;/code&gt; use usually specify the &lt;code&gt;DenyChildAttach&lt;/code&gt; flag.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;It is natural to speak of I/O-based operations as “running” or “executing”, e.g., “the HTTP download is currently running”. However, there is no actual &lt;em&gt;CPU code&lt;/em&gt; to be &lt;em&gt;run&lt;/em&gt;, so Promise Tasks (such as an HTTP download task) will never enter the &lt;code&gt;WaitingToRun&lt;/code&gt; or &lt;code&gt;Running&lt;/code&gt; states. And yes, this means that a Promise Task may end in the &lt;code&gt;RanToCompletion&lt;/code&gt; state without ever actually &lt;em&gt;running&lt;/em&gt;. Well, it is what it is…&lt;/p&gt;

&lt;p&gt;All Promise Tasks are created “hot”, meaning that the operation is in progress. The confusing part is that this “in-progress” state is actually called &lt;code&gt;WaitingForActivation&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;For this reason, I try to avoid using the terms “running” or “executing” when talking about Promise Tasks; instead, I prefer to say that “the operation is in progress”.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;status-properties&quot;&gt;Status Properties&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Task&lt;/code&gt; has a few convenience properties for determining the final state of a task:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsCompleted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsCanceled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsFaulted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;IsCanceled&lt;/code&gt; and &lt;code&gt;IsFaulted&lt;/code&gt; map directly to the &lt;code&gt;Canceled&lt;/code&gt; and &lt;code&gt;Faulted&lt;/code&gt; states, but &lt;code&gt;IsCompleted&lt;/code&gt; is tricky. &lt;code&gt;IsCompleted&lt;/code&gt; does not map to &lt;code&gt;RanToCompletion&lt;/code&gt;; rather, it is &lt;code&gt;true&lt;/code&gt; if the task is in &lt;em&gt;any&lt;/em&gt; final state. In other words:&lt;/p&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;

  &lt;table class=&quot;table table-striped&quot;&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Status&lt;/th&gt;
        &lt;th&gt;&lt;code&gt;IsCompleted&lt;/code&gt;&lt;/th&gt;
        &lt;th&gt;&lt;code&gt;IsCanceled&lt;/code&gt;&lt;/th&gt;
        &lt;th&gt;&lt;code&gt;IsFaulted&lt;/code&gt;&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;other&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-times fa-lg no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-times fa-lg no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-times fa-lg no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;RanToCompletion&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-check fa-lg yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-times fa-lg no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-times fa-lg no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;Canceled&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-check fa-lg yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-check fa-lg yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-times fa-lg no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code&gt;Faulted&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-check fa-lg yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-times fa-lg no&quot;&gt;&lt;/i&gt;&lt;/td&gt;
        &lt;td&gt;&lt;i class=&quot;fa fa-check fa-lg yes&quot;&gt;&lt;/i&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As interesting as these state properties all are, they are hardly ever actually &lt;em&gt;used&lt;/em&gt; (except for debugging). Both asynchronous and parallel code do not normally use &lt;code&gt;Status&lt;/code&gt; or the three convenience properties; instead, the normal usage is to wait for the tasks to complete and extract the results.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jun 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/06/a-tour-of-task-part-3-status.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/06/a-tour-of-task-part-3-status.html</guid>
      </item>
    
      <item>
        <title>A Tour of Task, Part 2: AsyncState and CreationOptions</title>
        <description>&lt;p&gt;I skipped last week’s blog post (since I was working on the site redesign), so today is a 2-for-1 deal! :)&lt;/p&gt;

&lt;h2 id=&quot;asyncstate&quot;&gt;AsyncState&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// implements IAsyncResult.AsyncState&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;AsyncState&lt;/code&gt; property implements &lt;code&gt;IAsyncResult.AsyncState&lt;/code&gt;. This member was useful back in the day, but not so much in modern applications.&lt;/p&gt;

&lt;p&gt;When asynchronous programming was going through its awkward teen stage, &lt;code&gt;AsyncState&lt;/code&gt; was an important part of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms228963(v=vs.110).aspx&quot;&gt;Asynchronous Programming Model (APM)&lt;/a&gt;. The &lt;code&gt;Begin*&lt;/code&gt; method would take a &lt;code&gt;state&lt;/code&gt; parameter, which is assigned to the &lt;code&gt;IAsyncResult.AsyncState&lt;/code&gt; member. Later, when the application code’s callback is invoked, it could access the &lt;code&gt;AsyncState&lt;/code&gt; value to determine which asynchronous operation completed.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;&lt;code&gt;IAsyncResult.AsyncState&lt;/code&gt; (and other “state”-like parameters) are no longer necessary these days; a lambda callback can easily capture any number of local variables in a type-safe way. I prefer the lambda approach; it is more expressive, less brittle, and more flexible than a single &lt;code&gt;object state&lt;/code&gt; parameter. However, the &lt;code&gt;state&lt;/code&gt; parameter approach avoids memory allocation, so it is still sometimes used in performance-sensitive code.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In modern code, the &lt;code&gt;Task.AsyncState&lt;/code&gt; member is mainly used for &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/hh873178(v=vs.110).aspx#TapToApm&quot;&gt;interoperation from &lt;code&gt;Task&lt;/code&gt; to APM&lt;/a&gt;. This is only necessary if you’re writing &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; code that must exist within an older asynchronous framework (a rare situation these days). In that scenario, you’re implementing the &lt;code&gt;Begin*&lt;/code&gt;/&lt;code&gt;End*&lt;/code&gt; methods and using a &lt;code&gt;Task&lt;/code&gt; instance as your implementation of &lt;code&gt;IAsyncResult&lt;/code&gt;. The standard approach is to create a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; using &lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;, and you pass the &lt;code&gt;state&lt;/code&gt; parameter into the &lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt; constructor:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeginOperation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsyncCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCompletionSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// start operation, and complete &amp;quot;tcs&amp;quot; when operation completes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There really isn’t a need to read &lt;code&gt;AsyncState&lt;/code&gt; in modern code; it’s mainly important just because it implements &lt;code&gt;IAsyncResult.AsyncState&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creationoptions&quot;&gt;CreationOptions&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreationOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;CreationOptions&lt;/code&gt; merely allows you to read the task creation options that were used to create this task. You can specify these options when you create a task using &lt;a href=&quot;/2014/05/a-tour-of-task-part-1-constructors.html&quot;&gt;the task constructor&lt;/a&gt;, &lt;code&gt;Task.Factory.StartNew&lt;/code&gt;, or &lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;. I’ll cover the meanings of these options later, when we cover &lt;code&gt;Task.Factory.StartNew&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, there’s almost no reason to &lt;em&gt;read&lt;/em&gt; the task creation options once the task has been created. This would only be necessary if you were doing some really funky work with parent/child tasks or task scheduling - &lt;em&gt;far&lt;/em&gt; beyond the normal scenarios for asynchronous or parallel tasks.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Once again none of these members are actually useful in real-world code.&lt;/p&gt;
</description>
        <pubDate>Thu, 29 May 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/05/a-tour-of-task-part-2-asyncstate-and-creationoptions.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/05/a-tour-of-task-part-2-asyncstate-and-creationoptions.html</guid>
      </item>
    
      <item>
        <title>A Tour of Task, Part 1: Constructors</title>
        <description>&lt;p&gt;TL;DR: Do not use &lt;code&gt;Task&lt;/code&gt; or &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; constructors.&lt;/p&gt;

&lt;p&gt;I actually debated quite a bit on how to start this series! I finally decided on starting with the constructors, even though the &lt;code&gt;Task&lt;/code&gt; constructors are a red herring.&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/miniatus-grouper-247578_640.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
(not actually a red herring)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Task&lt;/code&gt; type has a whopping eight constructors:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The BCL avoids default parameters because they don’t work well with &lt;a href=&quot;http://haacked.com/archive/2010/08/10/versioning-issues-with-optional-arguments.aspx/&quot;&gt;versioning&lt;/a&gt; and reflection. However, I’m going to rewrite some of the members with optional parameters to reduce the number of overloads that I need to talk about.&lt;/p&gt;

&lt;p&gt;I’m going to call the eight constructors “actual members” because they actually exist. However, these can be reduced to only one “logical member”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, the &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; type has eight actual constructors:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which simplify down to a single logical constructor:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCreationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, we have 16 actual constructors and two logical constructors.&lt;/p&gt;

&lt;h2 id=&quot;what-for&quot;&gt;What For?&lt;/h2&gt;

&lt;p&gt;The use case for the task constructors is extremely small.&lt;/p&gt;

&lt;p&gt;Remember that there are two kinds of tasks: Promise Tasks and Delegate Tasks. The task constructors &lt;em&gt;cannot&lt;/em&gt; create Promise Tasks; they only create Delegate Tasks.&lt;/p&gt;

&lt;p&gt;Task constructors should not be used with &lt;code&gt;async&lt;/code&gt;, and they should only rarely be used with parallel programming.&lt;/p&gt;

&lt;p&gt;Parallel programming can be split into two types: &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff963552.aspx&quot;&gt;data&lt;/a&gt; &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff963547.aspx&quot;&gt;parallelism&lt;/a&gt; and task parallelism, with the majority of parallel situations calling for data parallelism. Task parallelism can be further split into two types: &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff963549.aspx&quot;&gt;static task parallelism&lt;/a&gt; (where the number of work items is known at the beginning of the parallel processing) and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff963551.aspx&quot;&gt;dynamic task parallelism&lt;/a&gt; (where the number of work items changes while they are being processed). The &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/system.threading.tasks.parallel&quot;&gt;Parallel class&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd460688(v=vs.110).aspx&quot;&gt;PLINQ&lt;/a&gt; types in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd460693(v=vs.110).aspx&quot;&gt;Task Parallel Library&lt;/a&gt; provide higher-level constructs for dealing with data parallelism and static task parallelism. The only reason you should ever create a Delegate Task for parallel code is if you are doing dynamic task parallelism. But even then, you &lt;em&gt;almost never&lt;/em&gt; want to use the task constructors! The task constructors create a task that is not ready to run; it has to be scheduled first. This is almost never necessary; in the real world, most tasks should be scheduled immediately. The only reason you’d want to create a task and then &lt;em&gt;not&lt;/em&gt; schedule it is if you wanted to allow the caller to determine which thread the task actually runs on. And even in that scenario, I’d recommend using &lt;code&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt; instead of returning an unscheduled task.&lt;/p&gt;

&lt;p&gt;Let me put that another way: if you are doing dynamic task parallelism and need to construct a task that can run on any thread, and leave that scheduling decision up to another part of the code, and for whatever reason cannot use &lt;code&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt; instead, then (and &lt;em&gt;only&lt;/em&gt; then) you should use a task constructor. I’ve written countless asynchronous and parallel applications, and I have &lt;strong&gt;never&lt;/strong&gt; been in this situation.&lt;/p&gt;

&lt;p&gt;Even shorter version: Do Not Use!&lt;/p&gt;

&lt;h2 id=&quot;what-instead&quot;&gt;What Instead?&lt;/h2&gt;

&lt;p&gt;If you’re writing &lt;code&gt;async&lt;/code&gt; code, the easiest way to create a Promise Task is to use the &lt;code&gt;async&lt;/code&gt; keyword. If you’re wrapping another asynchronous API or event, use &lt;code&gt;Task.Factory.FromAsync&lt;/code&gt; or &lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;. If you need to run some CPU-bound code and treat it asynchronously, use &lt;code&gt;Task.Run&lt;/code&gt;. We’ll look at all of these options and more in future posts.&lt;/p&gt;

&lt;p&gt;If you’re writing parallel code, first try to use &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/system.threading.tasks.parallel&quot;&gt;Parallel&lt;/a&gt; or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd460688(v=vs.110).aspx&quot;&gt;PLINQ&lt;/a&gt;. If you actually are doing dynamic task parallelism, use &lt;code&gt;Task.Run&lt;/code&gt; or &lt;code&gt;Task.Factory.StartNew&lt;/code&gt;. We’ll consider these options as well in future posts.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Sorry that the first post just boiled down to “don’t use this”, but it is what it is. I’ll cover all the constructor arguments such as &lt;code&gt;CancellationToken&lt;/code&gt; later when I cover &lt;code&gt;Task.Factory.StartNew&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 May 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html</guid>
      </item>
    
      <item>
        <title>Announcement: Concurrency in C# Early Release Ebook Available</title>
        <description>&lt;p&gt;My editor at O’Reilly was able to get my book into the O’Reilly’s Early Release program at the last minute. So, you can buy it today through the Early Release program and get the final eBook when it’s completed shortly (it’s really just proofreading and formatting at this point).&lt;/p&gt;

&lt;p&gt;Don’t forget to use &lt;a href=&quot;http://shop.oreilly.com/category/deals/day-against-drm.do&quot;&gt;discount code DRM2014&lt;/a&gt; for 50% off! And thanks to my editor for slipping &lt;a href=&quot;http://tinyurl.com/ConcurrencyCookbook&quot;&gt;my book&lt;/a&gt; into the Early Release program so you can get that sale! :)&lt;/p&gt;

</description>
        <pubDate>Mon, 05 May 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html</guid>
      </item>
    
      <item>
        <title>Announcement: MSDN Article on Async Services</title>
        <description>&lt;p&gt;My latest MSDN article &lt;a href=&quot;http://msdn.microsoft.com/en-us/magazine/dn683795.aspx&quot;&gt;Patterns for Asynchronous MVVM Applications: Services&lt;/a&gt; is online! The title is a slight misnomer, since the article is actually applicable to asynchronous services in &lt;em&gt;any&lt;/em&gt; kind of application (including Console and ASP.NET apps).&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/dd799403.cover_lrg(en-us,MSDN.10).jpg&quot; alt=&quot;&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;I cover a pretty wide range of topics in a single article. It’s kind of like a trimmed-down version of my &lt;a href=&quot;/2013/01/async-oop-0-introduction.html&quot;&gt;async OOP series&lt;/a&gt; from a while ago. Today’s MSDN article considers how &lt;code&gt;async&lt;/code&gt; interacts with inheritance, unit testing, factories, lazy initialization, and constructors.&lt;/p&gt;

</description>
        <pubDate>Thu, 01 May 2014 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2014/05/announcement-msdn-article-on-async.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2014/05/announcement-msdn-article-on-async.html</guid>
      </item>
    
  </channel>
</rss>
