<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary&#39;s blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>http://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="http://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="http://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>React/Redux TodoMVC, Part 2: Getting Started</title>
        <description>&lt;p&gt;Let’s introduce some React! The &lt;code&gt;react&lt;/code&gt; package contains almost everything, and the &lt;code&gt;react-dom&lt;/code&gt; package is the piece that injects our React application into the browser DOM.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Most modern JavaScript libraries do not assume they’re running in a browser. This is to enable server-side rendering. It’s not as crazy as it sounds! Check out &lt;a href=&quot;https://channel9.msdn.com/Events/ASPNET-Events/ASPNET-Fall-Sessions/ASPNET--Spa&quot;&gt;this video&lt;/a&gt; of &lt;a href=&quot;https://github.com/aspnet/NodeServices&quot;&gt;work being done on ASP.NET Core &lt;em&gt;right now&lt;/em&gt;&lt;/a&gt; where ASP.NET hosts Node, runs the web app on the server, and then sends the results to the client.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;our-first-react-component&quot;&gt;Our First React Component&lt;/h2&gt;

&lt;p&gt;For now, I just want to move the boilerplate HTML code into my JSX file. We’ll tear it apart more properly later. So, I imported React and wrote a &lt;code&gt;Main&lt;/code&gt; method (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
function Main() {
    return (

    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and pasted all the &lt;code&gt;&amp;lt;section class=&quot;todoapp&quot;&amp;gt;&lt;/code&gt; HTML in there.&lt;/p&gt;

&lt;p&gt;JSX isn’t &lt;em&gt;quite&lt;/em&gt; HTML; it’s just pretty close. Here’s a list of tidying up I had to do (note that ESLint will catch all of these):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unclosed elements are not allowed. In particular, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags must become &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; tags. This is totally understandable.&lt;/li&gt;
  &lt;li&gt;JSX has no notion of comments. You can work around this by embedding JavaScript comments. So all &lt;code&gt;&amp;lt;!--&lt;/code&gt; must be replaced by &lt;code&gt;{/*&lt;/code&gt;, and all &lt;code&gt;--&amp;gt;&lt;/code&gt; by &lt;code&gt;*/}&lt;/code&gt;. This is &lt;em&gt;not&lt;/em&gt; understandable; it’s annoying.&lt;/li&gt;
  &lt;li&gt;JSX is case-sensitive, and prefers camelCasing. E.g., &lt;code&gt;autofocus&lt;/code&gt; needs to be &lt;code&gt;autoFocus&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;There’s a few reserved words in JavaScript that JSX has to work around. In particular, the common &lt;code&gt;class&lt;/code&gt; HTML attribute has to be &lt;code&gt;className&lt;/code&gt; in JSX.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s also time to turn off some ESLint warnings that are just too pedantic. &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md&quot;&gt;jsx-no-literals&lt;/a&gt; and &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md&quot;&gt;jsx-max-props-per-line&lt;/a&gt; are history.&lt;/p&gt;

&lt;p&gt;This gets us down to a more reasonable number of warnings:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ESLintWarnings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of these, I’m going to fix &lt;code&gt;autoFocus&lt;/code&gt; in the source, and turn off &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md&quot;&gt;jsx-sort-props&lt;/a&gt;, which leaves us with the display name.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md&quot;&gt;display name&lt;/a&gt; warning triggers when you don’t explicitly give React a name for your component that it can use in error messages. In this case, though, Babel will do it automatically for us, so we just need to let ESLint know that it’s OK (in &lt;code&gt;.eslintrc&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;react/display-name&quot;: [1, { &quot;acceptTranspilerName&quot;: true }],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;sticking-it-in-the-dom&quot;&gt;Sticking It in the DOM&lt;/h2&gt;

&lt;p&gt;First, let’s define a placeholder for our app in th HTML; I added this line where I removed the &lt;code&gt;&amp;lt;section class=&quot;todoapp&quot;&amp;gt;&lt;/code&gt; (in &lt;code&gt;index.html&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapper in the output, but that’s usually not anything to worry about.&lt;/p&gt;

&lt;p&gt;Next, we import &lt;code&gt;render&lt;/code&gt; from &lt;code&gt;react-dom&lt;/code&gt; and then load our app after the DOM is loaded (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { render } from &#39;react-dom&#39;;

// Definition of Main

window.onload = () =&amp;gt; render(Main(), document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can build and run our app. It still doesn’t do anything, but now it’s a &lt;em&gt;React&lt;/em&gt; component that doesn’t do anything. :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/f54223a8647b43b99d62a547505c4b5908459bb6&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/f54223a8647b43b99d62a547505c4b5908459bb6/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/getting-started.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/getting-started.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 1: Language and Tooling</title>
        <description>&lt;p&gt;Modern JavaScript development is lightyears ahead of where it used to be. Last summer, ES2015 (ES6) was officially standardized, and even though browsers are taking their time adopting it, transpilers have existed for some time.&lt;/p&gt;

&lt;h2 id=&quot;babel&quot;&gt;Babel&lt;/h2&gt;

&lt;p&gt;After trying out a few options for DotNetApis, I settled on Babel. Babel allows you to specify exactly what language you want to support, and I have mine set up as ES2015, plus JSX, plus object spread/rest properties.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;ES2015&lt;/a&gt; is the most basic standard for JavaScript development these days. If you’re not on ES2015, then you’re developing in the dark ages. Seriously. It will change your life.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/jsx/&quot;&gt;JSX&lt;/a&gt; is the syntactic extension that React uses for putting HTML in the JavaScript. Technically, React can work completely without JSX, but it’s harder to write and read. And it’s verbosely ugly, too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;Object rest/spread properties&lt;/a&gt; are a &lt;a href=&quot;http://www.2ality.com/2015/11/tc39-process.html&quot;&gt;Stage 2 proposal&lt;/a&gt; that will likely be in a future version of JavaScript. I include them in this project for reasons that will become clear when we develop our React reducers.&lt;/p&gt;

&lt;p&gt;My &lt;code&gt;.babelrc&lt;/code&gt; file just enables these three presets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;presets&quot;: [&quot;es2015&quot;, &quot;react&quot;, &quot;stage-2&quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;no-typings---steve-sad&quot;&gt;No Typings - Steve Sad&lt;/h2&gt;

&lt;p&gt;Unfortunately, there are no static typings with this setup. I tried really, &lt;em&gt;really&lt;/em&gt; hard to get them working, because at my core I’m a static typing kind of guy. I like my code completion, and I like my compiler checking!&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; get (modern versions of) &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; to work with React. However, there are a few problems that I ran into.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript is (much) slower than Babel at picking up new language features. TypeScript does support JSX now, but there’s no support for object rest/spread properties, which are very convenient.&lt;/li&gt;
  &lt;li&gt;The existing typings repository is quite incomplete.&lt;/li&gt;
  &lt;li&gt;The value of a more strict object-oriented system bolted onto JavaScript is dubious at best. I prefer libraries and patterns that take advantage of JavaScript’s inherently functional (or multi-paradign) nature.&lt;/li&gt;
  &lt;li&gt;TSLint is way less mature and flexible than ESLint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That said, I do really like the benefits of static typing, and I tried quite hard to get TypeScript working with DotNetApis. However, all the little frustrations with TypeScript added up, and that initiative didn’t make it.&lt;/p&gt;

&lt;p&gt;My problem &lt;em&gt;actually&lt;/em&gt; was that I didn’t really want to change languages to TypeScript. All I wanted was to use TypeScript as a static type checker for &lt;em&gt;modern&lt;/em&gt; JavaScript, and it’s this goal that I couldn’t get working. TypeScript is a fine language, but I wanted to use JavaScript.&lt;/p&gt;

&lt;p&gt;There’s another, lesser known (for now) static typing system on the block: &lt;a href=&quot;https://code.facebook.com/posts/1505962329687926/flow-a-new-static-type-checker-for-javascript/&quot;&gt;Flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Flow looks exactly like what I need: static typing for JavaScript. Babel even has support for Flow ready to go!&lt;/p&gt;

&lt;p&gt;Unfortunately, I just couldn’t get the (unofficial) Windows port to behave reliably. Flow works great for other platforms, but they need to fully support Windows if they’re going to edge out TypeScript.&lt;/p&gt;

&lt;p&gt;Hopefully in the future, either TypeScript or Flow will meet my needs. For now, neither one does. :(&lt;/p&gt;

&lt;h2 id=&quot;supporting-tools-eslint&quot;&gt;Supporting Tools: ESLint&lt;/h2&gt;

&lt;p&gt;When it comes to linting modern JavaScript, &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt; is the most flexible option. There’s an &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;ESLint plugin for React&lt;/a&gt; that adds a lot of React-specific linting rules.&lt;/p&gt;

&lt;p&gt;For now, I’m just going to turn on every rule. I’ll relax some of these as I go along, but for now ESLint will be very strict. My current &lt;code&gt;.eslintrc&lt;/code&gt; starts by setting up the language (ES2015 + JSX + object rest/spread) and environment (Browser, ES2015/ES6):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;,
&quot;plugins&quot;: [
  &quot;react&quot;
],
&quot;ecmaFeatures&quot;: {
  &quot;modules&quot;: true,
  &quot;jsx&quot;: true,
  &quot;experimentalObjectRestSpread&quot;: true
},
&quot;env&quot;: {
  &quot;browser&quot;: true,
  &quot;es6&quot;: true
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I have a long section enabling all of the React/JSX rules, that I just copied and pasted from the &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react/tree/8fe83a0e716ca2db225e98b37b4efa5e2f277848&quot;&gt;ESLint React plugin homepage&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;supporting-tools-webpack&quot;&gt;Supporting Tools: Webpack&lt;/h2&gt;

&lt;p&gt;We’re also going to need a “bundler”. DotNetApis uses Webpack, so I’ll use it, too. I don’t have any experience with other bundlers; my initial research indicated that Webpack was popular, and I haven’t run into any problems with it, so that’s what I ended up with.&lt;/p&gt;

&lt;p&gt;The TodoMVC framework expects a single &lt;code&gt;./js/app.js&lt;/code&gt; file to be our application, with other supporting source files also under &lt;code&gt;./js&lt;/code&gt;. So I’ll use &lt;code&gt;.jsx&lt;/code&gt; for our source files, and specify &lt;code&gt;./js/main.jsx&lt;/code&gt; as the “main entry point”.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;webpack.config.js&lt;/code&gt; will start with that &lt;code&gt;main.jsx&lt;/code&gt;, load all &lt;code&gt;.jsx&lt;/code&gt; files via Babel, and output &lt;code&gt;app.js&lt;/code&gt;. Also, I’m going to include &lt;a href=&quot;https://webpack.github.io/docs/configuration.html#devtool&quot;&gt;webpack source maps&lt;/a&gt;. The webpack config file now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = {
    entry: &#39;./js/main.jsx&#39;,
    output: {
        filename: &#39;./js/app.js&#39;
    },
    module: {
        loaders: [
            {
                test: /\.jsx$/,
                loader: &#39;babel-loader&#39;
            }
        ]
    },
    devtool: &#39;inline-source-map&#39;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With just a bit of tweaking, we can use &lt;a href=&quot;https://github.com/MoOx/eslint-loader&quot;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt; to lint while we build:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module: {
    loaders: [
        {
            test: /\.jsx$/,
            loader: &#39;babel-loader&#39;
        }
    ],
    preLoaders: [
        {
            test: /\.jsx$/,
            loader: &#39;eslint-loader&#39;,
            exclude: /node_modules/
        }
    ]
},
devtool: &#39;inline-source-map&#39;,
eslint: {
    configFile: &#39;./.eslintrc&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;supporting-tools-npm-scripts&quot;&gt;Supporting Tools: npm scripts&lt;/h2&gt;

&lt;p&gt;Finally, we’re ready to bring it all together! All we have to do is add a &lt;code&gt;build&lt;/code&gt; script to our &lt;code&gt;package.json&lt;/code&gt; that runs &lt;code&gt;webpack&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;build&quot;: &quot;node_modules/.bin/webpack&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we can build our app!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;watching&quot;&gt;Watching&lt;/h2&gt;

&lt;p&gt;Watching is a piece of cake (in &lt;code&gt;package.json&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;build&quot;: &quot;node_modules/.bin/webpack&quot;,
  &quot;watch&quot;: &quot;node_modules/.bin/webpack --watch&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can have one command prompt open all the time, just for rebuilding our code files as they change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;supporting-tools-babel-runtime&quot;&gt;Supporting Tools: Babel Runtime&lt;/h2&gt;

&lt;p&gt;Babel is an excellent transpiler, but it does require a &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt;runtime polyfill&lt;/a&gt; for some language features. I’ll just include that for now in my &lt;code&gt;main.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &#39;babel-polyfill&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;extra-credit-local-dev-server&quot;&gt;Extra Credit: Local Dev Server&lt;/h2&gt;

&lt;p&gt;DotNetApis uses a real ASP.NET backend, so when I debug locally, I’m actually running the dev ASP.NET server. That won’t work in this scenario, so I checked out dev servers for npm. Of course, webpack has one, but it prevents webpack from writing its results to disk, which works great for some scenarios but is not what I’m wanting.&lt;/p&gt;

&lt;p&gt;So I looked around and found a promising one called &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;&lt;code&gt;http-server&lt;/code&gt;&lt;/a&gt; (where “promising” means “used by a lot of other people so if I have problems they’re easy to solve”).&lt;/p&gt;

&lt;p&gt;Install it, add a &lt;code&gt;serve&lt;/code&gt; script, and we’re all set! (in &lt;code&gt;package.json&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
  &quot;build&quot;: &quot;node_modules/.bin/webpack&quot;,
  &quot;watch&quot;: &quot;node_modules/.bin/webpack --watch&quot;,
  &quot;serve&quot;: &quot;node_modules/.bin/http-server -o&quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can now open a second command prompt for my HTTP server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;current-state&quot;&gt;Current State&lt;/h2&gt;

&lt;p&gt;At this point, we’ve got automatic recompiling anytime our source files change, a local dev server to see the results, and the beginnings of a good development experience. Pop open your browser dev tools (F12), and you should see original source files - even though they’re not actually sent to the browser:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/SourceMaps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/41de4bc84d575443fcaa42e48eec7812e0e5b4c3&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/41de4bc84d575443fcaa42e48eec7812e0e5b4c3/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/language-and-tooling.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/language-and-tooling.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 0B: Why React? Why Redux?</title>
        <description>&lt;p&gt;I was a casualty of the Version 4 Browser Wars.&lt;/p&gt;

&lt;p&gt;Those of you who are old enough to remember know exactly what I’m talking about. For those who weren’t there, maybe I’ll write a post about it someday. But anyway, I became a desktop developer for many years as a direct result of that horrible early web experience. It is only recently (the last few years) that I’ve cautiously stepped out into frontend development again.&lt;/p&gt;

&lt;p&gt;I say this to emphasize that I’m not an expert frontend developer (yet). I’ve dabbled in Knockout, Angular, Durandal, and Aurelia. I’m much more familiar with common libraries like lodash and jQuery. But when it came to choose a framework for &lt;a href=&quot;http://dotnetapis.com&quot;&gt;DotNetApis&lt;/a&gt;, I chose something I had never used before: React.&lt;/p&gt;

&lt;h2 id=&quot;why-react&quot;&gt;Why React?&lt;/h2&gt;

&lt;p&gt;Well, in short, because &lt;a href=&quot;http://www.bitnative.com/&quot;&gt;Cory House&lt;/a&gt; convinced me. I was able to attend his excellent talk at ThatConference 2015 &lt;a href=&quot;https://www.thatconference.com/sessions/session/9108&quot;&gt;Angular, Backbone, and Knockout are great, so why choose React?&lt;/a&gt;, and followed that up with &lt;a href=&quot;https://www.pluralsight.com/courses/react-flux-building-applications&quot;&gt;his Pluralsight course on React and Flux&lt;/a&gt;. Cory House is convincing. :)&lt;/p&gt;

&lt;p&gt;It all boils down to this simple fact: React represents component boundaries as files. In other words, a single component belongs in a single file.&lt;/p&gt;

&lt;p&gt;In a modern MVVM-style data-binding system, you usually end up with &lt;em&gt;pairs&lt;/em&gt; of files. You have the view and the view model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
  components/
    todo/
      todoViewModel.js
      todoView.html
    footer/
      footerViewModel.js
      footerView.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve written a few components like this, enough to know something’s wrong. In particular, when you have this kind of structure in your app and you need to modify a component, which file do you end up modifying? Usually both of them. New functionality generally requires &lt;em&gt;both&lt;/em&gt; the view and view model to change. This is an indication that the view and view model are really dealing with the same underlying concern.&lt;/p&gt;

&lt;p&gt;According to Wikipedia, the Single Responsibility Principle is “every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.” Take special note of the second half of that definition: “that responsibility should be entirely encapsulated”. That’s why it’s harder to have multiple files making up a single component. There’s a lack of cohesion.&lt;/p&gt;

&lt;p&gt;Another hurdle with modern MVVM-style data-binding systems is that they use templating. This means that you have &lt;em&gt;three&lt;/em&gt; languages to deal with: JavaScript (or some variant) for the view model, HTML for most of the view, and whatever HTML extensions exist as part of the templating solution. That’s a fair amount of context switching.&lt;/p&gt;

&lt;p&gt;None of these hurdles are insurmountable, of course. Large systems have been written with these techniques, and they work well. But we can do better.&lt;/p&gt;

&lt;p&gt;React addresses these problems by restructuring a “component”. Instead of having two files, with one of them containing a programming (templating) language within HTML, React just reverses that and puts HTML in the JavaScript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
  components/
    todo.jsx
    footer.jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This seems like a small thing, but it really does make a difference in day-to-day work. One component is in one file, which contains both the HTML and logic. When a component changes, only one file changes. And there’s only two languages: JavaScript (or some variant) and HTML. There’s no separate templating language; if you need a &lt;code&gt;for&lt;/code&gt; loop around some content, you just write it in JavaScript.&lt;/p&gt;

&lt;p&gt;React &lt;em&gt;simplifies&lt;/em&gt; component work. Then it gets out of your way.&lt;/p&gt;

&lt;h2 id=&quot;my-first-attempt-flux-not-redux&quot;&gt;My First Attempt (Flux, not Redux)&lt;/h2&gt;

&lt;p&gt;React only addresses the “view” part of the frontend. It doesn’t have any opinions about how you store your data. There’s a pretty common pattern of data management called &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I started using React, I decided to go with “vanilla Flux”; that is, to have a singleton dispatcher implementation. Flux works like this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/FluxAsPromised.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You have “action creators”, which are just functions that return actions. Those actions are data (objects) that represent some action, such as a user clicking a button or typing into a textbox. The actions are sent to the dispatcher, which is a singleton. The dispatcher then sends out the action to each store that has registered with it (this is just a simple pub/sub pattern).&lt;/p&gt;

&lt;p&gt;The stores are where the application state lives. Each store updates itself by responding to actions coming from the dispatcher. Each time it updates, it notifies &lt;em&gt;its&lt;/em&gt; subscribers, which are the views (the actual JSX components). Those views in turn will respond to user interaction by calling the action creators and dispatching those actions.&lt;/p&gt;

&lt;p&gt;This diagram is a bit simplified; the “Views” here are really made up of two different kind of views: &lt;a href=&quot;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.o5lr2g6lz&quot;&gt;“smart” or “page” or “container” or “route”&lt;/a&gt; views, which sit at the top level and subscribe to store updates, and “dumb” views, which only receive data from their parent views.&lt;/p&gt;

&lt;p&gt;This is all well and good, but as DotNetApis grew more complex, I started running into problems.&lt;/p&gt;

&lt;p&gt;In particular, I had several different “stores”, each one containing part of the application state, divided up logically. Also, I had several different “smart” views, some of which were children of other “smart” views, and each of which had to manage subscriptions to one or more stores. What I ended up with looked more like this diagram:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/FluxInReality.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was just getting too complex. I reached out for help on The Twitter, and &lt;a href=&quot;https://twitter.com/housecor&quot;&gt;Cory House&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ryanlanciaux&quot;&gt;Ryan Lanciaux&lt;/a&gt; were kind enough to point me to Redux.&lt;/p&gt;

&lt;h2 id=&quot;why-redux&quot;&gt;Why Redux?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://rackt.org/redux/&quot;&gt;Redux&lt;/a&gt; is a further simplification of React. Redux declares that you should only have one store, and all of the application state lives in that single store.&lt;/p&gt;

&lt;p&gt;Hmmm, simpler:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxToTheRescue.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Redux &lt;em&gt;does&lt;/em&gt; introduce some new concepts. In short, it implements your store &lt;em&gt;for&lt;/em&gt; you, so you need to fill in a few missing pieces.&lt;/p&gt;

&lt;p&gt;In particular, you need to define how actions will change your application state. In Redux, these are called &lt;a href=&quot;https://rackt.org/redux/docs/basics/Reducers.html&quot;&gt;reducers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A real-world Redux application ends up looking more like this (note that the shaded parts are mostly or entirely implemented by libraries, not by the application author):&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxInReality.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once I started using Redux, I’ve never looked back. Everything is simpler!&lt;/p&gt;

&lt;p&gt;The source hasn’t changed since last time, but if you missed it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/9b881b0bea8070f850c8c78a6fcf4701287101ae&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/9b881b0bea8070f850c8c78a6fcf4701287101ae/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/why-react-why-redux.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/why-react-why-redux.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 0: Introduction</title>
        <description>&lt;p&gt;As of this writing, the front end of &lt;a href=&quot;http://dotnetapis.com&quot;&gt;DotNetApis&lt;/a&gt; is entirely written in &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. This was my first React project, and there were a &lt;em&gt;lot&lt;/em&gt; of things that I learned along the way. My app certainly had “growing pains,” and a lot of React best practices were added rather late in that project.&lt;/p&gt;

&lt;p&gt;So, I thought it would be beneficial to do a series of posts on how to do a new React project, with the benefit of hindsight that I did not have when writing the first version of DotNetApis.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Disclaimer: I am still very new to React. It’s &lt;s&gt;possible&lt;/s&gt; likely that I am entirely missing some really helpful best practices. If you know of any, please let me know in the comments!&lt;/p&gt;

  &lt;p&gt;Disclaimer Part 2: In fact, the whole React community is still new to React. Best practices are still “in flux” (heh), and may not be the same years from now.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ll be developing this project in the open &lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;on GitHub&lt;/a&gt;. I’ve decided to implement the ubiquitous &lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC app&lt;/a&gt;, which is often used to help decide on client-side MVC frameworks. You can argue that React/Redux isn’t really “MVC”-ish, but eh, whatever.&lt;/p&gt;

&lt;p&gt;One problem with TodoMVC is that it doesn’t have examples of asynchronous backend communication, which can make or break a framework decision. In keeping with the spirit of TodoMVC, my React/Redux implementation will also not have asynchronous communication; if I remember, I’ll write a separate blog post describing how to do that after this series wraps up.&lt;/p&gt;

&lt;p&gt;So, let’s get started!&lt;/p&gt;

&lt;p&gt;Here’s what I’ve done so far, just some housekeeping work at the start:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Forked the &lt;a href=&quot;https://github.com/tastejs/todomvc-app-template&quot;&gt;TodoMVC app template&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Moved everything to the &lt;a href=&quot;https://pages.github.com/&quot;&gt;&lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, where I’ll do all the development &lt;em&gt;and&lt;/em&gt; deployment simultaneously.&lt;/li&gt;
  &lt;li&gt;Removed the (empty) &lt;code&gt;app.css&lt;/code&gt; from the app template, since I’m quite sure I won’t be needing it.&lt;/li&gt;
  &lt;li&gt;Filled out some of the placeholders in the HTML.&lt;/li&gt;
  &lt;li&gt;Tweaked the &lt;code&gt;.gitignore&lt;/code&gt; to include the “boilerplate” css that comes as dependencies of the app template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Groundbreaking, eh? Don’t worry, this is just getting started! :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/9b881b0bea8070f850c8c78a6fcf4701287101ae&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/9b881b0bea8070f850c8c78a6fcf4701287101ae/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/02/react-redux-todomvc.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/02/react-redux-todomvc.html</guid>
      </item>
    
      <item>
        <title>DotNetApis Enters Beta</title>
        <description>&lt;p&gt;I’ve been heads-down for quite a while working on a new project that &lt;em&gt;just went live!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dotnetapis.com&quot;&gt;DotNetApis&lt;/a&gt; is a website that provides documentation for NuGet packages.&lt;/p&gt;

&lt;p&gt;The purpose of this site is twofold: first, to provide reference documentation for developers while they are coding; and second, to provide an easy way for authors to publish reference documentation for their libraries. DotNetApis keeps its URLs stable and human-readable (mostly), so it’s a great way to link to types in online discussions, too.&lt;/p&gt;

&lt;p&gt;The site is currently in Beta, so it’s not feature-complete yet, but I believe it’s finished enough to be useful to others, so I’m publishing it today.&lt;/p&gt;

&lt;p&gt;Please try it out, and let me know what you think!&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/01/dotnetapis.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/01/dotnetapis.html</guid>
      </item>
    
      <item>
        <title>ThatConference 2015</title>
        <description>&lt;p&gt;I’m pleased to announce that I’m returning to ThatConference this year (in August of 2015). My session is &lt;a href=&quot;https://www.thatconference.com/sessions/session/6993&quot;&gt;Unit Testing Asynchronous Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve given this talk a few times in the past - at GRDevDay and CodeMash - but based on feedback, I’ll be updating it to include more mocking and assertion frameworks. It should end up being quite a comprehensive overview, including the current state of async support for unit testing as well as a general conceptual overview.&lt;/p&gt;

&lt;p&gt;If you’d like to register, feel free to use &lt;a href=&quot;http://thatconference2015.eventbrite.com/?discount=aStephenCleary_referral&quot;&gt;this affiliate link&lt;/a&gt;. ;)  ThatConference is one of my favorite conferences - they have a particularly great family track for young coders - but they’re still relatively new and not able to reimburse travel expenses for speakers. So every little bit helps. :)&lt;/p&gt;
</description>
        <pubDate>Wed, 27 May 2015 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2015/05/thatconference.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2015/05/thatconference.html</guid>
      </item>
    
      <item>
        <title>MVP Virtual Conference</title>
        <description>&lt;p&gt;I’m pleased to announce that I’m speaking at the MVP Virtual Conference in a couple of weeks. My session is called “Surviving in an Async-First Development World”, and it’s kind of like a “catch-up” session for devs who haven’t had a chance to use &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; yet.&lt;/p&gt;

&lt;p&gt;I gave a similar talk a few weeks ago &lt;a href=&quot;/2015/03/grdevday-2015.html&quot;&gt;at GRDevDay&lt;/a&gt;, where I tried a much less slide-oriented and more demo-oriented talk. Based on the feedback from that talk, I’ve decided to make my MVP talk with &lt;em&gt;even fewer slides&lt;/em&gt; - literally, there’ll just be a handful at the beginning, and all the rest of it will be done with live coding.&lt;/p&gt;

&lt;p&gt;Also, my goal for this talk is to have it be very heavily influenced by Q&amp;amp;A - I have a few primary points to cover, but there will be considerable leeway for devs to steer the presentation with their own questions. &lt;a href=&quot;https://mvp.microsoft.com/en-us/mvp/Vidya%20Vrat%20Agarwal-5000564&quot;&gt;Vidya Agarwal&lt;/a&gt; is acting as moderator for this session, and I’m sure we’ll give him plenty of work to do. :)&lt;/p&gt;

&lt;p&gt;If you feel this session would be helpful for your colleagues (or just want a refresher yourself), you can &lt;a href=&quot;http://aka.ms/mvpvirtualconference2015&quot;&gt;register online&lt;/a&gt;. It’s entirely free!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update, 2015-06-02:&lt;/strong&gt; Video is &lt;a href=&quot;http://channel9.msdn.com/Events/MVP-Virtual-Conference/MVP-Virtual-Conference-Americas-2015/Dev2-Surviving-in-an-Async-First-Development-World&quot;&gt;now available&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 May 2015 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2015/05/mvp-virtual-conference.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2015/05/mvp-virtual-conference.html</guid>
      </item>
    
      <item>
        <title>A Tour of Task, Part 10: Promise Tasks</title>
        <description>&lt;p&gt;Last time, we looked at &lt;a href=&quot;/2015/03/a-tour-of-task-part-9-delegate-tasks.html&quot;&gt;ways to start Delegate Tasks&lt;/a&gt;. Today we’ll look at the most common ways to create Promise Tasks. As a reminder, Promise Tasks are tasks that represent a kind of “event” within a system; they don’t have any user-defined code to execute.&lt;/p&gt;

&lt;h2 id=&quot;taskdelay&quot;&gt;Task.Delay&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Task.Delay&lt;/code&gt; is the asynchronous equivalent of &lt;code&gt;Thread.Sleep&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;int&lt;/code&gt; argument is treated as a number of milliseconds; I usually prefer the &lt;code&gt;TimeSpan&lt;/code&gt; versions since they are more explicit. Using &lt;code&gt;int&lt;/code&gt; millisecond values for timeouts is a holdover from an older API design; many Win32-level APIs only take timeout values as integer milliseconds. So, it makes sense to expose an &lt;code&gt;int&lt;/code&gt; parameter for lower-level waits like &lt;code&gt;WaitHandle.WaitOne&lt;/code&gt; or even &lt;code&gt;Task.Wait&lt;/code&gt;. However, &lt;code&gt;Task.Delay&lt;/code&gt; isn’t a thin wrapper over any Win32 API; the &lt;code&gt;int&lt;/code&gt; parameter in this case is just provided for tradition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Delay&lt;/code&gt; may also take a &lt;code&gt;CancellationToken&lt;/code&gt;, which allows the delay to be cancelled.&lt;/p&gt;

&lt;p&gt;Under the hood, &lt;code&gt;Delay&lt;/code&gt; starts a timer and completes its returned task when that timer fires. Or, if the &lt;code&gt;CancellationToken&lt;/code&gt; is signaled first, then &lt;code&gt;Delay&lt;/code&gt; cancels its returned task.&lt;/p&gt;

&lt;p&gt;In real-world code, &lt;code&gt;Delay&lt;/code&gt; is almost never used. Its primary use case is as a retry timeout, i.e., if an asynchronous operation failed, the code will (asynchronously) wait a period of time before trying again. Generally, retry logic is wrapped into a separate library (such as &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/hh675232.aspx&quot;&gt;Transient Fault Handling&lt;/a&gt; or &lt;a href=&quot;https://github.com/michael-wolfenden/Polly&quot;&gt;Polly&lt;/a&gt;), and &lt;code&gt;Delay&lt;/code&gt; is only used internally by those libraries, not directly by application code.&lt;/p&gt;

&lt;h2 id=&quot;taskyield&quot;&gt;Task.Yield&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Task.Yield&lt;/code&gt; has several interesting aspects. To begin with, it doesn’t actually return a &lt;code&gt;Task&lt;/code&gt;, so it’s not really a Promise Task kind of method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;YieldAwaitable&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But it does kind of &lt;em&gt;act&lt;/em&gt; kind of like a Promise Task. The &lt;code&gt;YieldAwaitable&lt;/code&gt; type interacts with the &lt;code&gt;async&lt;/code&gt; compiler transformation to &lt;em&gt;force&lt;/em&gt; an asynchronous point within a method. By default, if &lt;code&gt;await&lt;/code&gt; is used on an operation that has already completed, then the execution of the &lt;code&gt;async&lt;/code&gt; method continues synchronously. &lt;code&gt;YieldAwaitable&lt;/code&gt; throws a wrench into this by always claiming it is &lt;em&gt;not&lt;/em&gt; completed, and then scheduling its continuations immediately. This causes &lt;code&gt;await&lt;/code&gt; to schedule the rest of the &lt;code&gt;async&lt;/code&gt; method for immediate execution and return.&lt;/p&gt;

&lt;p&gt;I’ve used &lt;code&gt;Task.Yield&lt;/code&gt; only occasionally during unit testing, when I needed to ensure that a particular method would in fact work if its asynchronous operation did not complete synchronously. I’ve found &lt;code&gt;Yield&lt;/code&gt; most useful when the asynchronous operation in question normally &lt;em&gt;does&lt;/em&gt; complete synchronously, and I need to force asynchrony to ensure the method behavior is correct.&lt;/p&gt;

&lt;p&gt;However, I’ve never needed &lt;code&gt;Yield&lt;/code&gt; in production code. There is one use case where developers sometimes (incorrectly) attempt to use &lt;code&gt;Yield&lt;/code&gt;: to try to “refresh” the UI.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad code, do not use!!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LongRunningCpuBoundWorkAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This method is called directly from the UI, and&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//  does lots of CPU-bound work.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Since this blocks the UI, this method is given&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//  an async signature and periodically &amp;quot;yields&amp;quot;.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CPU-bound work.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this approach will not work. The reason is that UI message loops are &lt;em&gt;priority&lt;/em&gt; queues, and any scheduled continuations have a much higher priority than “repaint the window”. So, the &lt;code&gt;Yield&lt;/code&gt; schedules the continuation and returns to the message loop, and the message loop immediately executes that continuation without processing any of its &lt;code&gt;WM_PAINT&lt;/code&gt; messages.&lt;/p&gt;

&lt;p&gt;Some developers have discovered that using &lt;code&gt;Task.Delay&lt;/code&gt; instead of &lt;code&gt;Task.Yield&lt;/code&gt; will allow message processing (messages are processed until the timer fires). However, a far cleaner solution is to do the CPU-bound work on a background thread:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LongRunningCpuBoundWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CPU-bound work.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Called as:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongRunningCpuBoundWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In conclusion, &lt;code&gt;Task.Yield&lt;/code&gt; is occasionally useful when unit testing, but much less so for production code.&lt;/p&gt;

&lt;h2 id=&quot;taskfromresult&quot;&gt;Task.FromResult&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Task.FromResult&lt;/code&gt; will create a &lt;em&gt;completed&lt;/em&gt; task with the specified value:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FromResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It might seem silly at first to return a task that is already completed, but this is actually useful in several scenarios.&lt;/p&gt;

&lt;p&gt;For instance, an interface method may have an asynchronous (task-returning) signature, and if an implementation is synchronous, then it can use &lt;code&gt;Task.FromResult&lt;/code&gt; to wrap up its (synchronous) result within a task. This is particularly useful when creating stubs for unit testing, but is also occasionally useful in production code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMyInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Implementations *might* need to be asynchronous,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//  so we define an asynchronous API.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomethingAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMyInterface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This particular implementation is not asynchronous.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomethingAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Do synchronous work.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Be careful, though, that your synchronous implementation is not &lt;em&gt;blocking&lt;/em&gt;. Implementing an asynchronous API with a blocking method is surprising behavior.&lt;/p&gt;

&lt;p&gt;Another use case of &lt;code&gt;Task.FromResult&lt;/code&gt; is when doing some form of caching. In this case, you have some data that is synchronously retrieved (from the cache), and need to return it directly. In the case of a cache miss, then a true asynchronous operation is performed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetValueAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoGetValueAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoGetValueAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrySetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Tip: If you can, cache the task objects themselves instead of their resulting values; maintain a cache of &lt;em&gt;operations&lt;/em&gt; rather than &lt;em&gt;results&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;As of this writing, one final common use of &lt;code&gt;Task.FromResult&lt;/code&gt; is just as a completed task. For this, the expressions &lt;code&gt;Task.FromResult(0)&lt;/code&gt; or &lt;code&gt;Task.FromResult&amp;lt;object&amp;gt;(null)&lt;/code&gt; are commonly used. This use case is similar to the synchronous implementation of an asynchronous API:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPlugin&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Permit each plugin to initialize asynchronously.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InitializeAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyPlugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPlugin&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InitializeAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The async equivalent of a noop.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;In the preview builds of .NET 4.6, there is a static &lt;code&gt;Task.CompletedTask&lt;/code&gt; that should be used instead of &lt;code&gt;Task.FromResult(0)&lt;/code&gt; or &lt;code&gt;Task.FromResult&amp;lt;object&amp;gt;(null)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;You might be wondering if there’s a way to return already-completed tasks in other states - particularly, canceled or faulted tasks. As of now, you have to write this yourself (using &lt;code&gt;TaskCompletionSource&lt;/code&gt;), but .NET 4.6 will introduce the &lt;code&gt;Task.FromCanceled&lt;/code&gt; and &lt;code&gt;Task.FromException&lt;/code&gt; methods to return synchronously canceled or faulted tasks.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2015/04/a-tour-of-task-part-10-promise-tasks.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2015/04/a-tour-of-task-part-10-promise-tasks.html</guid>
      </item>
    
      <item>
        <title>Continuous Integration and Code Coverage for Open Source .NET CoreCLR Projects</title>
        <description>&lt;p&gt;So, I’ve been doing some more CoreCLR work, gradually porting over all my OSS projects. I just recently learned about some great tools during this process, so this post is for any other devs out there who want to start porting to CoreCLR.&lt;/p&gt;

&lt;p&gt;Here’s a screenshot of the first project that I converted to CoreCLR; it is hosted on GitHub, and is tied to a continuous integration system that kicks off on every checkin (the “build” and “coverage” badges show live data). The best part? All of this infrastructure support is free! :)&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/OssBadges.png&quot;&gt;&lt;img src=&quot;/assets/OssBadges.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;unit-tests-xunit&quot;&gt;Unit Tests: xUnit&lt;/h2&gt;

&lt;p&gt;It seems like CoreCLR development is centering around xUnit, who were the first to push into this new platform. The actual Microsoft CoreCLR projects use &lt;a href=&quot;https://github.com/dotnet/buildtools&quot;&gt;a special runner for xUnit called &lt;code&gt;xunit.console.netcore&lt;/code&gt;&lt;/a&gt;; unfortunately, that &lt;a href=&quot;http://nuget.org/packages/Microsoft.DotNet.BuildTools&quot;&gt;NuGet package&lt;/a&gt; has been unlisted, so it’s difficult to use for our own projects.&lt;/p&gt;

&lt;p&gt;So, I took the approach of using a &lt;a href=&quot;http://xunit.github.io/docs/getting-started-aspnet.html&quot;&gt;standard xUnit runner for ASP.NET projects; their web page has pretty good instructions&lt;/a&gt;. Just bear in mind that you must be in the same directory as the &lt;code&gt;project.json&lt;/code&gt; for your unit test project before you can run &lt;code&gt;k test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you have unit tests running from the command line with a simple &lt;code&gt;k test&lt;/code&gt;, then it’s time to move on to continuous integration.&lt;/p&gt;

&lt;h2 id=&quot;continuous-integration-appveyor&quot;&gt;Continuous Integration: AppVeyor&lt;/h2&gt;

&lt;p&gt;AppVeyor is one of several CI solutions who provide free builds for OSS. In addition, AppVeyor is one of the few who support VS2015 preview builds. As they describe &lt;a href=&quot;http://www.appveyor.com/blog/2015/01/20/visual-studio-2015-ctp-image&quot;&gt;on their blog&lt;/a&gt;, there’s two initial steps to enable VS2015 support: use a VS2015 CTP image, and modify your &lt;code&gt;PATH&lt;/code&gt; so it picks up the correct &lt;code&gt;msbuild&lt;/code&gt; version.&lt;/p&gt;

&lt;p&gt;Once you’ve linked your GitHub project to AppVeyor, selecting the image is straightforward; I’m using VS2015 CTP 6 (the most recent as of this writing):&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/AppVeyor.Image.png&quot;&gt;&lt;img src=&quot;/assets/AppVeyor.Image.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, actually getting it to build is a bit more challenging. I currently have the following set up as a PowerShell “Install Script” for my AppVeyor build:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new-object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webclient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DownloadString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://raw.githubusercontent.com/aspnet/Home/master/kvminstall.ps1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$env:Path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;C:\Program Files (x86)\MSBuild\14.0\Bin;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;[Environment]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetEnvironmentVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Machine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;[Environment]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetEnvironmentVariables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kvm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first line downloads and installs KVM, just like the &lt;a href=&quot;https://github.com/aspnet/home&quot;&gt;instructions on the ASP.NET 5 repository home page say to do&lt;/a&gt;. As part of that install, it modifies the &lt;code&gt;PATH&lt;/code&gt;, so the next line refreshes that script’s path and also modifies it to pick up the correct &lt;code&gt;msbuild&lt;/code&gt; version. Finally, &lt;code&gt;kvm upgrade&lt;/code&gt; downloads and installs the most recent K runtimes.&lt;/p&gt;

&lt;p&gt;There’s just one more step: we need to restore packages before building. I have the following set up as a PowerShell “Before Build Script”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;kpm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restore&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now be able to kick off a build without errors.&lt;/p&gt;

&lt;p&gt;Before moving on, let’s add in just a bit to get unit tests working. AppVeyor tries to do as much as possible for you using reasonable defaults, but it’s not (yet) capable of auto-detecting the xUnit .NET Core unit test project. You should be able to get unit tests running in your build by changing the test settings from &lt;code&gt;Auto&lt;/code&gt; to &lt;code&gt;Script&lt;/code&gt; and specifying this PowerShell script to run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnitTests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first line changes to the directory where my unit test &lt;code&gt;project.json&lt;/code&gt; file is (you may need to change this if your unit test project is named differently). The second line simply executes the tests.&lt;/p&gt;

&lt;h2 id=&quot;code-coverage-opencover--coveralls&quot;&gt;Code Coverage: OpenCover + Coveralls&lt;/h2&gt;

&lt;p&gt;OK, so on to code coverage! I’m using the &lt;a href=&quot;https://github.com/dotnet/buildtools/blob/25decb2fe02edd3b7ab32a325e2281c2a2df9ea9/src/Microsoft.DotNet.Build.Tasks/Targets/CodeCoverage.targets&quot;&gt;same basic approach as the .NET Core team&lt;/a&gt; - that is to say, &lt;a href=&quot;https://github.com/OpenCover/opencover&quot;&gt;OpenCover&lt;/a&gt; for generating code coverage, &lt;a href=&quot;https://coveralls.io/&quot;&gt;Coveralls&lt;/a&gt; for publishing the code coverage publicly, and &lt;a href=&quot;https://github.com/danielpalme/ReportGenerator&quot;&gt;ReportGenerator&lt;/a&gt; for generating local code coverage reports. But my solution uses PowerShell scripts instead of MSBuild tasks.&lt;/p&gt;

&lt;p&gt;First, you need to declare dependencies on the &lt;code&gt;OpenCover&lt;/code&gt;, &lt;code&gt;coveralls.io&lt;/code&gt;, and &lt;code&gt;ReportGenerator&lt;/code&gt; packages in your unit test project. This way they’ll be picked up by &lt;code&gt;kpm restore&lt;/code&gt; and installed on the AppVeyor build server. The &lt;a href=&quot;https://github.com/StephenCleary/Deque/blob/cf0b28933befe5303c037739c94f16267de8b71e/test/UnitTests/project.json&quot;&gt;&lt;code&gt;project.json&lt;/code&gt; for my unit test project&lt;/a&gt; has these dependencies:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Nito.Collections.Deque&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;xunit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2.0.0.0-rc3-build2880&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;xunit.runner.aspnet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2.0.0.0-rc3-build52&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;OpenCover&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4.5.3809-rc94&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;coveralls.io&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.3.2.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;ReportGenerator&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2.1.4.0&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These dependencies should all be straightforward: &lt;code&gt;Nito.Collections.Deque&lt;/code&gt; is the library these tests are testing, &lt;code&gt;xunit&lt;/code&gt; and &lt;code&gt;xunit.runner.aspnet&lt;/code&gt; are the standard packages for running xUnit on .NET Core projects, and &lt;code&gt;OpenCover&lt;/code&gt;, &lt;code&gt;coveralls.io&lt;/code&gt;, and &lt;code&gt;ReportGenerator&lt;/code&gt; are for code coverage.&lt;/p&gt;

&lt;p&gt;I recommend getting this working locally first, and then it’ll be clearer to understand why my AppVeyor test script does what it does.&lt;/p&gt;

&lt;p&gt;First, you have to be sure to be building in the &lt;code&gt;Debug&lt;/code&gt; configuration. I’ve had problems with OpenCover not showing coverage for optimized builds.&lt;/p&gt;

&lt;p&gt;Second, you need to enable outputs (as in, physical disk files) for the &lt;code&gt;Debug&lt;/code&gt; build of the library you’re testing. This checkbox is under your project settings, under the &lt;code&gt;Build&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;Third, you have to really pay attention to your directories, because OpenCover has a hard time finding PDBs for .NET Core assemblies. I &lt;em&gt;believe&lt;/em&gt; that the K runtime is using a different form of assembly loading than the traditional .NET platform, and OpenCover doesn’t (yet) support finding PDBs in a K-runtime-compatible way. So we have to help it out a bit with PDB location.&lt;/p&gt;

&lt;p&gt;With all that said, you should be able to execute something like the following to generate a code coverage report:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net45&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$env:KRE_APPBASE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../../../../../test/UnitTests&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stephen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenCover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3809-rc94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenCover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-register&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-target&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;k.cmd&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-targetargs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-output&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-skipautoprops&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-returntargetcode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-filter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;+[Nito*]*&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, I’m changing to the directory where my PDB files are for the project I’m &lt;em&gt;testing&lt;/em&gt; (you’ll have to change to your own debug output directory, of course). Then, I’m setting the &lt;code&gt;KRE_APPBASE&lt;/code&gt; environment variable so that the K runtime can find the &lt;code&gt;project.json&lt;/code&gt; for my &lt;em&gt;unit test&lt;/em&gt; project (if yours is named differently, you’ll need to change this, too).&lt;/p&gt;

&lt;p&gt;Finally, I’m executing OpenCover with a few &lt;a href=&quot;https://github.com/opencover/opencover/wiki/Usage&quot;&gt;command line options&lt;/a&gt;. You’ll probably have to change the &lt;code&gt;filter&lt;/code&gt; argument for your library; my filter is requesting coverage data only for types in namespaces that start with &lt;code&gt;Nito&lt;/code&gt;. The &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;targetargs&lt;/code&gt; options are telling OpenCover to execute the command &lt;code&gt;k.cmd test&lt;/code&gt; (I found I did have to specify &lt;code&gt;k.cmd&lt;/code&gt; and not just &lt;code&gt;k&lt;/code&gt; for OpenCover to find the command script).&lt;/p&gt;

&lt;p&gt;If you have all the paths (and filters) set correctly, you should see some output that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Executing: C:\Users\stephen\.k\runtimes\kre-clr-win-x86.1.0.0-beta3\bin\k.cmd
xUnit.net ASP.NET test runner (32-bit Asp.Net 5.0)
Copyright (C) 2015 Outercurve Foundation.

Discovering: UnitTests
Discovered:  UnitTests
Starting:    UnitTests
Finished:    UnitTests

=== TEST EXECUTION SUMMARY ===
   UnitTests  Total: 88, Errors: 0, Failed: 0, Skipped: 0, Time: 2.310s
Committing...
Visited Classes 3 of 7 (42.86)
Visited Methods 59 of 70 (84.29)
Visited Points 390 of 442 (88.24)
Visited Branches 167 of 196 (85.20)

==== Alternative Results (includes all methods including those without corresponding source) ====
Alternative Visited Classes 3 of 7 (42.86)
Alternative Visited Methods 64 of 83 (77.11)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The detailed code coverage data is also written out to a local file, in this case, &lt;code&gt;artifacts\bin\Nito.Collections.Deque\Debug\net45\coverage.xml&lt;/code&gt;. To upload this coverage data to Coveralls, first link the GitHub project to Coveralls using their dashboard. Then, copy your &lt;strong&gt;Repo Token&lt;/strong&gt; and set it as an environment variable &lt;code&gt;COVERALLS_REPO_TOKEN&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$env:COVERALLS_REPO_TOKEN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Repo Token&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now use &lt;code&gt;coveralls.io&lt;/code&gt; to upload the code coverage data to Coveralls. The only gotcha I ran into here is that the &lt;code&gt;coverall.io&lt;/code&gt; package runs into errors if it tries to use a hash of the source files (instead of the source files themselves), so I just pass &lt;code&gt;--full-sources&lt;/code&gt; to force it to load the full source files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stephen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coveralls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coveralls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-opencover&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coverage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-full-sources&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can take a few minutes for Coveralls.io to actually process and dispaly the coverage data, but after a few browser refreshes you should see the coverage data on their website!&lt;/p&gt;

&lt;p&gt;Note that if you select a specific source file, Coveralls will need a bit of help to find the matching source in the repo; you should be able to specify a value of &lt;code&gt;../../../../../&lt;/code&gt; as your “Git repo root directory”:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/CoverallsSourceLocation.png&quot;&gt;&lt;img src=&quot;/assets/CoverallsSourceLocation.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then it should refresh with the complete source file from GitHub, highlighted with statement coverage data:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/CoverallsSourceDisplay.png&quot;&gt;&lt;img src=&quot;/assets/CoverallsSourceDisplay.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;continuous-integration-code-coverage&quot;&gt;Continuous Integration Code Coverage&lt;/h2&gt;

&lt;p&gt;OK, so let’s move all of this into AppVeyor!&lt;/p&gt;

&lt;p&gt;First, under your &lt;code&gt;Environment&lt;/code&gt; settings, create an environment variable called &lt;code&gt;COVERALLS_REPO_TOKEN&lt;/code&gt; with your &lt;strong&gt;Repo Token&lt;/strong&gt; from the Coveralls page for this project. Be sure to turn on encryption (the little shield icon).&lt;/p&gt;

&lt;p&gt;Next, we can replace our existing test script with something a bit more fancy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net45&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$env:KRE_APPBASE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../../../../../test/UnitTests&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$env:USERPROFILE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\.k\packages\OpenCover&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\OpenCover.Console.exe&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -register:user -target:&amp;quot;k.cmd&amp;quot; -targetargs:&amp;quot;test&amp;quot; -output:coverage.xml -skipautoprops -returntargetcode -filter:&amp;quot;+[Nito*]*&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$env:USERPROFILE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\.k\packages\coveralls.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\tools\coveralls.net.exe&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; --opencover coverage.xml --full-sources&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is doing the same thing that we did “by hand”, but the invocations of OpenCover and Coveralls are a bit different. The only thing I’m doing here is running “whatever package is installed” instead of depending on a specific user profile location and package version. My original command line &lt;code&gt;C:\users\stephen\.k\packages\OpenCover\4.5.3809-rc94\OpenCover.Console.exe&lt;/code&gt; would of course only work for users named &lt;code&gt;stephen&lt;/code&gt; using version &lt;code&gt;4.5.3809-rc94&lt;/code&gt; of OpenCover. The fancier &lt;code&gt;(Get-ChildItem ($env:USERPROFILE + &#39;\.k\packages\OpenCover&#39;))[0].FullName + &#39;\OpenCover.Console.exe&#39;&lt;/code&gt; works for whoever the current user is (&lt;code&gt;USERPROFILE&lt;/code&gt;) and whatever version of OpenCover is installed (it does, however, assume there is only one version installed - it just grabs the first one it finds).&lt;/p&gt;

&lt;p&gt;Now you should be able to kick off a new AppVeyor build, and within a few minutes, see the code coverage results automatically in Coveralls.io!&lt;/p&gt;

&lt;h2 id=&quot;badger-badger-badger-badger&quot;&gt;Badger, Badger, Badger, Badger&lt;/h2&gt;

&lt;p&gt;This is a good point to add some fancy badges to our GitHub readme. The OSS community has more-or-less standardized on &lt;a href=&quot;http://shields.io/&quot;&gt;shields.io&lt;/a&gt; for consistent, scalable, nice-looking badges. Shields.io supports a number of “badge providers”, including AppVeyor and Coveralls.&lt;/p&gt;

&lt;p&gt;Their webpage is not the most intuitive, IMO, but it wasn’t &lt;em&gt;too&lt;/em&gt; hard to get working. The URL for my AppVeyor build is &lt;code&gt;https://img.shields.io/appveyor/ci/StephenCleary/Deque.svg&lt;/code&gt; - that is, telling the shields.io service to use the AppVeyor CI badge provider for my (GitHub) username and project. The URL for Coveralls is similar: &lt;code&gt;https://img.shields.io/coveralls/StephenCleary/Deque.svg&lt;/code&gt; - in this case, telling the shields.io service to use the Coveralls provider for my (GitHub) username and project.&lt;/p&gt;

&lt;p&gt;I did notice several problems with the badges when I was first getting this working. For example, if there’s an AppVeyor build &lt;em&gt;in progress&lt;/em&gt; (i.e., if you just modified your &lt;code&gt;Readme.md&lt;/code&gt;), then the badges tend to time out. Just be patient and wait a bit, and then see if they start working again.&lt;/p&gt;

&lt;h2 id=&quot;better-code-coverage-reports&quot;&gt;Better Code Coverage Reports&lt;/h2&gt;

&lt;p&gt;There’s one big problem with Coveralls that not a lot of people have brought to the front: it &lt;em&gt;only supports line coverage&lt;/em&gt;, which is the weakest (and most misleading) form of code coverage. As of this writing, this is basically a &lt;a href=&quot;https://github.com/lemurheavy/coveralls-public/issues/31&quot;&gt;limitation of the Coveralls.io service itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In particular, OpenCover is generating branch coverage as well as statement coverage, but all that branch coverage data (and part of that statement coverage data) is thrown away when the data is uploaded to Coveralls. I was unable to find a Coveralls alternative that supports .NET, understands branch coverage, &lt;em&gt;and&lt;/em&gt; is free for OSS. Maybe someday…&lt;/p&gt;

&lt;p&gt;In the meantime, you really do want better coverage information than you can get from Coveralls. Don’t get me wrong - Coveralls is great for integrating with your build process and updating badges, but it’s &lt;em&gt;not&lt;/em&gt; actually a good measurement of test coverage.&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;ReportGenerator&lt;/code&gt;. You may have noticed earlier on that we installed that NuGet package, but never actually used it. Well, now we’re going to use it. :)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ReportGenerator&lt;/code&gt; takes the output from OpenCover (that same &lt;code&gt;coverage.xml&lt;/code&gt; file) and generates reports with the full code coverage information. I added a &lt;a href=&quot;https://github.com/StephenCleary/Deque/blob/cf0b28933befe5303c037739c94f16267de8b71e/Coverage.ps1&quot;&gt;&lt;code&gt;Coverage.ps1&lt;/code&gt; script to my solution&lt;/a&gt; that does &lt;em&gt;almost&lt;/em&gt; the same thing as the AppVeyor test script, except it generates a local report instead of uploading to Coveralls:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;pushd&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nito&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net45&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$env:KRE_APPBASE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;../../../../../test/UnitTests&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$env:USERPROFILE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\.k\packages\OpenCover&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\OpenCover.Console.exe&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; -register:user -target:&amp;quot;k.cmd&amp;quot; -targetargs:&amp;quot;test&amp;quot; -output:coverage.xml -skipautoprops -returntargetcode -filter:&amp;quot;+[Nito*]*&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$env:USERPROFILE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\.k\packages\ReportGenerator&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FullName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\ReportGenerator.exe -reports:coverage.xml -targetdir:.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htm&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;popd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It should be pretty straightforward by this point, with the added twist that I push the current directory at the beginning and pop it at the end. I change into the directory where the PDBs are, set &lt;code&gt;KRE_APPBASE&lt;/code&gt; so the K runtime can find my &lt;code&gt;project.json&lt;/code&gt;, run the tests with code coverage, generate HTML reports using &lt;code&gt;ReportGenerator&lt;/code&gt;, and open up the resulting reports. This script was designed to be run from the Package Manager Console within Visual Studio, so it’s easy to use.&lt;/p&gt;

&lt;p&gt;There is just one gotcha with this script as-is: it just grabs the first version of OpenCover and ReportGenerator that it finds. So, when these packages release newer versions, you’ll want to delete the old versions from your development machine.&lt;/p&gt;

&lt;h2 id=&quot;final-notes&quot;&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;I don’t actually do continuous &lt;em&gt;deployment&lt;/em&gt; with AppVeyor. If you want to, I’m sure it would not be too difficult to get working. Right now, though, nothing supports reading/writing versions in &lt;code&gt;project.json&lt;/code&gt;, so keeping the versioning correct would be a bit awkward. Even more scripting, and (for me) it’s not worth it.&lt;/p&gt;

&lt;p&gt;My current workflow is to use AppVeyor for continuous builds and tests, and for publishing unit test coverage data (such as it is). I still build locally (actually on an Azure VM) when I want to deploy or have a better picture of my &lt;em&gt;actual&lt;/em&gt; unit test coverage data with a local coverage report.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2015/03/continuous-integration-code-coverage-open-source-net-coreclr-projects.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2015/03/continuous-integration-code-coverage-open-source-net-coreclr-projects.html</guid>
      </item>
    
      <item>
        <title>GRDevDay 2015</title>
        <description>&lt;p&gt;Once again I had the privilege of speaking at &lt;a href=&quot;http://grdevday.org/&quot;&gt;Grand Rapids DevDay 2015&lt;/a&gt;, my “most local” conference. Someday I’ll write up a bit more about GRDevDay, but for now I’ll just say it’s a conference I always enjoy. :)&lt;/p&gt;

&lt;p&gt;My morning talk was &lt;strong&gt;Introduction to Async and Await&lt;/strong&gt;. Believe it or not, this was my first time presenting just an async intro talk at a conference. It went pretty well once I got the projector working. :)&lt;/p&gt;

&lt;p&gt;Slides and demo code are &lt;a href=&quot;https://github.com/StephenCleary/Presentations/tree/57ff9987955ae098ddfd4b4c46201e0eeeeae49f/Intro%20to%20Async&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My afternoon talk is on &lt;strong&gt;Async Unit Testing&lt;/strong&gt;. Full slides and demo are also &lt;a href=&quot;https://github.com/StephenCleary/Presentations/tree/9173ae58793ae0dd10ab0af0840656121e0cb8b9/Async%20Unit%20Testing&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2015/03/grdevday-2015.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2015/03/grdevday-2015.html</guid>
      </item>
    
  </channel>
</rss>
