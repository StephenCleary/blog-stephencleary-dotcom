<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary's blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>https://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="https://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="https://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 3: Implementing Deploy and Teardown</title>
        <description>&lt;h2 id=&quot;implementing-deploy&quot;&gt;Implementing Deploy&lt;/h2&gt;

&lt;p&gt;So far, we have a &lt;code&gt;slash-commands&lt;/code&gt; GitHub Action that translates &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; ChatOps commands into &lt;code&gt;repository_dispatch&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;To handle the &lt;code&gt;/deploy&lt;/code&gt; slash command, we’ll need to handle a &lt;code&gt;repository_dispatch&lt;/code&gt; event of type &lt;code&gt;deploy-command&lt;/code&gt;. In your GitHub repository, open up the Actions tab and choose “New workflow” and then “Set up a workflow yourself”. Name the file &lt;code&gt;deploy-command.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Inputs:
#  client_payload.pull_request.number - PR number
#  client_payload.pull_request.head.sha - PR SHA

name: Create PR Staging Environment

on:
  repository_dispatch:
    types: [deploy-command]

# Set environment variables available to all action steps.
env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      - name: Install dependencies
        run: npm ci

      - name: Build static site
        run: npx gatsby build

      - name: Publish to surge.sh
        run: npx surge ./public ${{ env.DOMAIN }}
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ format('Published to [staging environment](https://{0})', env.DOMAIN) }}

            To teardown, comment with the `/teardown` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one’s a bit longer, so let’s walk through the steps.&lt;/p&gt;

&lt;p&gt;The first step checks out the repository. Note that it specifically checks out the SHA of the pull request (&lt;code&gt;client_payload.pull_request&lt;/code&gt; is provided by &lt;code&gt;slash-command-dispatch&lt;/code&gt;). So we’re checking out the code &lt;em&gt;for that PR&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next couple steps build the site by running &lt;code&gt;npm ci&lt;/code&gt; and &lt;code&gt;npx gatsby build&lt;/code&gt;. Just like building locally, the output is placed in the &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The publish step runs &lt;code&gt;npx surge ./public ${{ env.DOMAIN }}&lt;/code&gt;. This time we’re running &lt;code&gt;surge&lt;/code&gt; and giving it the name of the domain we want to publish to. The &lt;code&gt;DOMAIN&lt;/code&gt; environment variable was defined earlier in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s really nice about this setup is that every pull request gets a different domain - and thus a different staging environment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SURGE_LOGIN&lt;/code&gt; and &lt;code&gt;SURGE_TOKEN&lt;/code&gt; are additional environment variables used by the &lt;code&gt;surge&lt;/code&gt; command line so it authenticates under your account while deploying.&lt;/p&gt;

&lt;p&gt;The last step adds a comment to the pull request with a clickable link for the deployed staging environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ format('Published to [staging environment](https://{0})', env.DOMAIN) }}

            To teardown, comment with the `/teardown` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ends up looking like this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/github-actions-deploy.png&quot;&gt;&lt;img src=&quot;/assets/github-actions-deploy.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-up-surge-secrets&quot;&gt;Set Up Surge Secrets&lt;/h3&gt;

&lt;p&gt;There are a couple of new secrets used by the deploy action: &lt;code&gt;SURGE_LOGIN&lt;/code&gt; and &lt;code&gt;SURGE_TOKEN&lt;/code&gt;. These can be added as &lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets&quot;&gt;repository secrets&lt;/a&gt; just like last time.&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;SURGE_LOGIN&lt;/code&gt; to the email address &lt;a href=&quot;2020-04-02-github-actions-pull-request-staging-environments-part-1&quot;&gt;you used to sign up with Surge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get &lt;code&gt;SURGE_TOKEN&lt;/code&gt;, run &lt;code&gt;surge token&lt;/code&gt; from your own computer. This will give you a token that you can save in the &lt;code&gt;SURGE_TOKEN&lt;/code&gt; secret, so your deployments are associated with your Surge account.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try It Out!&lt;/h2&gt;

&lt;p&gt;At this point, you should be able to create a pull request and then add a &lt;code&gt;/deploy&lt;/code&gt; comment on it. Check out the Actions tab of the repository to watch your actions run or see the logs for old action runs.&lt;/p&gt;

&lt;h2 id=&quot;implementing-teardown&quot;&gt;Implementing Teardown&lt;/h2&gt;

&lt;p&gt;The next step is to implement teardown. In your GitHub repository, open up the Actions tab and choose “New workflow” and then “Set up a workflow yourself”. Name the file &lt;code&gt;teardown-command.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Inputs:
#  client_payload.pull_request.number - PR number

name: Delete PR Staging Environment

on:
  repository_dispatch:
    types: [teardown-command]

env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Teardown surge.sh
        run: npx surge teardown ${{ env.DOMAIN }}
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: ${{ format('Tore down {0}', env.DOMAIN) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one is pretty simple; we use a similar pattern to &lt;code&gt;/deploy&lt;/code&gt; but there are fewer steps since there’s no build (or even a checkout). We use the same pattern for defining &lt;code&gt;DOMAIN&lt;/code&gt; and the Surge secrets, and then we run &lt;code&gt;npx surge teardown ${{ env.DOMAIN }}&lt;/code&gt; to tear down the environment for this pull request. The last step adds a comment to the PR indicating that its staging environment has been torn down.&lt;/p&gt;

&lt;h2 id=&quot;who-can-issue-commands&quot;&gt;Who Can Issue Commands?&lt;/h2&gt;

&lt;p&gt;By default, only developers with write access to your repository can issue slash commands. This is the default behavior of &lt;code&gt;slash-command-dispatch&lt;/code&gt;. So if this is just your project, then only you can create or tear down staging environments. If you have an open-source project - and if creating staging environments is cheap for you - you can edit the &lt;code&gt;slash-commands.yml&lt;/code&gt; file and add a &lt;code&gt;permission&lt;/code&gt; argument to &lt;code&gt;slash-command-dispatch&lt;/code&gt; with the value &lt;code&gt;none&lt;/code&gt;. That way, &lt;em&gt;anyone&lt;/em&gt; would be able to create and tear down staging environments.&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next Time&lt;/h2&gt;

&lt;p&gt;ChatOps are cool. But can we automate this further?&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-3-implementing-deploy-and-teardown.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-3-implementing-deploy-and-teardown.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 2: Slash Commands</title>
        <description>&lt;h2 id=&quot;slash-commands&quot;&gt;Slash Commands&lt;/h2&gt;

&lt;p&gt;I’m not very familiar with the &lt;em&gt;term&lt;/em&gt; “ChatOps”, but I’ve seen ChatOps actually &lt;em&gt;used&lt;/em&gt; a lot. The idea is that you can set up chat bots to listen to your team’s chat and take actions based on commands you can type in the chat.&lt;/p&gt;

&lt;p&gt;What we’ll be setting up here is pretty close to that; we want to be able to add a comment to a PR with a “slash command” that will do our deploy (or teardown) for us. Specifically, we’ll be using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/deploy&lt;/code&gt; to deploy a PR to its staging environment.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/teardown&lt;/code&gt; to tear down a PR staging environment when we’re done with the PR.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dispatching-slash-commands&quot;&gt;Dispatching Slash Commands&lt;/h2&gt;

&lt;p&gt;The way we’ll be setting this up is to have one GitHub Action that listens for PR comments and decides if they have any slash commands. For any slash commands, we want to dispatch an event to our repository.&lt;/p&gt;

&lt;p&gt;In your GitHub repository, open up the Actions tab and choose “Set up a workflow yourself”. Name the file &lt;code&gt;slash-commands.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Translates slash-commands in issue comments to repository-dispatch events.

# Name of the action (displayed in the Actions tab)
name: Slash command dispatch

# Triggers for this action.
#  This one only runs when a comment is added to an issue.
#  (on GitHub, pull requests are one kind of &quot;issue&quot;)
on:
  issue_comment:
    types: [ created ]

# When the trigger fires, we run these jobs.
jobs:
  dispatch: #  We just have one job, called &quot;dispatch&quot;
    runs-on: ubuntu-latest # The OS we run on. Doesn't really matter for this simple action.
    steps: # This job only has one step, called &quot;Dispatch slash command&quot;
      - name: Dispatch slash command
        uses: peter-evans/slash-command-dispatch@v1 # Uses a pre-built action from the Marketplace
        with: # These are the parameters passed to the action
          token: ${{ secrets.DISPATCH_TOKEN }} # This action needs a personal access token in order to dispatch
          reactions: false # By default, this action will add reactions to the slash command comment; this turns those off
          issue-type: pull-request # We only want to look for slash commands in pull requests, not other issues
          commands: deploy, teardown # The slash commands we look for: /deploy and /teardown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, our GitHub Action is simple; &lt;a href=&quot;https://github.com/marketplace/actions/slash-command-dispatch&quot;&gt;&lt;code&gt;slash-command-dispatch&lt;/code&gt;&lt;/a&gt; is specifically designed for matching slash commands in issue and/or PR comments, and dispatching a command to the repository.&lt;/p&gt;

&lt;p&gt;Note that we’re passing a &lt;code&gt;token&lt;/code&gt; to this GitHub Action, and we’re taking the value from &lt;code&gt;secrets.DISPATCH_TOKEN&lt;/code&gt;. We don’t have that secret yet, so let’s set that up now. In order to dispatch, &lt;code&gt;slash-command-dispatch&lt;/code&gt; needs a token with write access to the repository. You can get one by &lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line&quot;&gt;following the GitHub directions&lt;/a&gt;; when creating your token, you’ll want &lt;code&gt;public_repo&lt;/code&gt; scope if your repository is public - otherwise, you’ll want &lt;code&gt;repo&lt;/code&gt; scope. Copy that access token value once it’s created.&lt;/p&gt;

&lt;p&gt;Next, create a &lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets&quot;&gt;repository secret&lt;/a&gt; named &lt;code&gt;DISPATCH_TOKEN&lt;/code&gt; and paste that value in… and if you did that without doing any verification, then you just failed Security 101.&lt;/p&gt;

&lt;p&gt;On a more serious note, right now the world of GitHub Actions (and its Marketplace) are in the “just trying to get it to work” stage. And in that stage of technology adoption, security is often overlooked. So when you’re reading some blog on the Internet and it tells you to make a personal access token and paste it somewhere, you should take a step back and really think about what’s going on.&lt;/p&gt;

&lt;h2 id=&quot;security-concerns&quot;&gt;Security Concerns&lt;/h2&gt;

&lt;p&gt;At the very least, take a look at the code that’s receiving the token. I’m using &lt;a href=&quot;https://github.com/marketplace/actions/slash-command-dispatch&quot;&gt;&lt;code&gt;peter-evans/slash-command-dispatch&lt;/code&gt;&lt;/a&gt; in the example above. Does it look like an upstanding project? Good documentation? High(ish) number of stars? Not forked from a different project? Who is this “Peter Evans” and does he seem like a trustworthy person? Go ahead and open the action’s repository; does the code look OK?&lt;/p&gt;

&lt;p&gt;Any time you’re passing a token to an action, you should do this kind of research, if not more. If you’re not comfortable with pasting a personal access token, there are a few alternative approaches.&lt;/p&gt;

&lt;h3 id=&quot;alternative-approaches&quot;&gt;Alternative Approaches&lt;/h3&gt;

&lt;p&gt;The security concerns above are due to the choice to &lt;em&gt;dispatch&lt;/em&gt; the repository events rather than handling them directly, so we end up handing a token to a third-party GitHub Action.&lt;/p&gt;

&lt;p&gt;Alternative approaches include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Performing a security audit of the GitHub Action and then SHA-locking to that specific version. I.e., instead of &lt;code&gt;peter-evans/slash-command-dispatch@v1&lt;/code&gt;, use &lt;code&gt;peter-evans/slash-command-dispatch@8a61cc727ff2d87afea4c46b11145543bef0c02f&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Performing a security audit of the GitHub Action, cloning it to your own personal GitHub Action, and using that one instead.&lt;/li&gt;
  &lt;li&gt;Writing your own GitHub Action that does essentially the same thing.&lt;/li&gt;
  &lt;li&gt;Creating a separate GitHub account, inviting that account to your repository (in a &lt;code&gt;write&lt;/code&gt; role), accepting that invitation, and using a &lt;code&gt;public_repo&lt;/code&gt;/&lt;code&gt;repo&lt;/code&gt; token from &lt;em&gt;that&lt;/em&gt; account instead of your personal account.
    &lt;ul&gt;
      &lt;li&gt;This ensures that the token can only be used to disrupt this &lt;em&gt;one&lt;/em&gt; repository, instead of &lt;em&gt;all&lt;/em&gt; your repositories.&lt;/li&gt;
      &lt;li&gt;It does still allow write access to this repository, though.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Handling all slash commands directly instead of dispatching.
    &lt;ul&gt;
      &lt;li&gt;You have to either combine all slash command handling into a single file (which makes your workflow file messy), or have multiple slash command handler actions (which makes your PR “checks” section messy).&lt;/li&gt;
      &lt;li&gt;At the time of this writing, there isn’t a great GitHub Action for parsing multiple slash commands and setting &lt;a href=&quot;https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#steps-context&quot;&gt;step outputs&lt;/a&gt; that can be used by future steps.&lt;/li&gt;
      &lt;li&gt;Even if such an action did exist, the resulting &lt;code&gt;slash-command.yml&lt;/code&gt; file would get rather long and ugly with &lt;code&gt;if:&lt;/code&gt; conditionals throughout.&lt;/li&gt;
      &lt;li&gt;However, this is the only alternative that is fully safe, since you would no longer require a personal access token &lt;em&gt;at all&lt;/em&gt;. Because it doesn’t do dispatching.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve tried out a few alternatives, and I tend to prefer either just doing it the easy way (as done in this post), or creating a separate GitHub account (to limit the scope of a breached token to this single repository). I don’t like handling all slash commands directly instead of dispatching, for reasons that will become more clear when we extend this solution to automate deploy and teardown commands (in a future post).&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-goal&quot;&gt;Back to The Goal&lt;/h2&gt;

&lt;p&gt;The rest of this blog series assumes that you have done a sufficient security check and have stored a token in the repository secrets, named &lt;code&gt;DISPATCH_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dispatch&quot;&gt;Dispatch&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;slash-command-dispatch&lt;/code&gt; action recognizes slash commands and then sends a &lt;a href=&quot;https://help.github.com/en/actions/reference/events-that-trigger-workflows#external-events-repository_dispatch&quot;&gt;repository dispatch event&lt;/a&gt; to the repository. &lt;code&gt;repository_dispatch&lt;/code&gt; is a special event that you can listen for (with another GitHub Action) and respond to.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;slash-command-dispatch&lt;/code&gt; follows a convention where the commands it listens to (&lt;code&gt;deploy&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; in our case) are sent with the &lt;code&gt;repository_dispatch&lt;/code&gt; event, with a &lt;code&gt;-command&lt;/code&gt; suffix. So, just like today’s GitHub Action listened for an &lt;code&gt;issue_comment&lt;/code&gt; event of type &lt;code&gt;created&lt;/code&gt;, next time we’ll write GitHub Actions that listen for a &lt;code&gt;repository_dispatch&lt;/code&gt; event of type &lt;code&gt;deploy-command&lt;/code&gt; or &lt;code&gt;teardown-command&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;At this point, you should have a “ChatOps bot” of sorts that listens for &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; comments on your pull requests, and then translates those into &lt;code&gt;repository_dispatch&lt;/code&gt; events. Next time we’ll add handlers for those events.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-2-slash-commands.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-2-slash-commands.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 1: Introduction</title>
        <description>&lt;h2 id=&quot;the-goal&quot;&gt;The Goal&lt;/h2&gt;

&lt;p&gt;This is a short series of posts on how to use GitHub Actions to deploy and teardown staging environments for your pull requests.&lt;/p&gt;

&lt;p&gt;The idea is that each pull request on GitHub represents some change (feature, bug fix, etc) that you want to test out before merging it into master. This series looks at using GitHub Actions to deploy the PR code into an isolated staging environment, and then tearing down that environment when you’re done testing.&lt;/p&gt;

&lt;h2 id=&quot;example-services&quot;&gt;Example Services&lt;/h2&gt;

&lt;p&gt;Since this series is focusing on using GitHub Actions, our environments will be deliberately simple.&lt;/p&gt;

&lt;p&gt;I’ll be using &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; as the framework for the example project. I have not used Gatsby yet, but I’m considering moving this blog to it. Gatsby is a React-based front-end development system that produces static files as its output.&lt;/p&gt;

&lt;p&gt;I’ll be using &lt;a href=&quot;https://surge.sh/&quot;&gt;Surge&lt;/a&gt; as a deployment engine. I never heard of Surge until I was reading the docs for Gatsby, but I must say I’m impressed with it! Surge allows you to quickly publish any folder to a domain name, and just as quickly tear it down again.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;It’s best if you follow along right on GitHub.&lt;/p&gt;

&lt;p&gt;First, create a test repository (mine is &lt;a href=&quot;https://github.com/StephenClearyExamples/PullRequestStaging&quot;&gt;here&lt;/a&gt;); the following steps give you a repository with a tiny Gatsby site on it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a new repository on GitHub and clone it to your local machine.&lt;/li&gt;
  &lt;li&gt;Create a new “hello, world” Gatsby project in the &lt;code&gt;my-hello-world&lt;/code&gt; folder by running &lt;code&gt;npx gatsby new my-hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy the files in the &lt;code&gt;my-hello-world&lt;/code&gt; folder to the root of your repository.&lt;/li&gt;
  &lt;li&gt;Commit and push.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, sign up for a Surge account:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install Surge by running &lt;code&gt;npm install --global surge&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sign up for a Surge account by running &lt;code&gt;surge login&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optionally, you can deploy what’s currently on your master branch:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build the Gatsby site by running &lt;code&gt;npx gatsby build&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Gatsby output is placed in the &lt;code&gt;public&lt;/code&gt; folder.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Choose a domain name that should be unique.&lt;/li&gt;
  &lt;li&gt;Deploy the Gatsby output to your domain name by running &lt;code&gt;surge ./public MY-UNIQUE-DOMAIN.surge.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quick-surge-primer&quot;&gt;Quick Surge Primer&lt;/h2&gt;

&lt;p&gt;Be aware that running Surge without any arguments will attempt to deploy the current folder. If you need help, you have to pass a &lt;code&gt;--help&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;At any time, you can check the status of your Surge deployments by running &lt;code&gt;surge list&lt;/code&gt;, and you can tear down any Surge deployment by running &lt;code&gt;surge teardown&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;That’s it for the command line; the rest of the repository updates can be done entirely on GitHub.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-1.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-1.html</guid>
      </item>
    
      <item>
        <title>ValueTask Restrictions</title>
        <description>&lt;h2 id=&quot;valuetask-restrictions&quot;&gt;ValueTask Restrictions&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt; is a type that was introduced waaaay back in .NET Core 1.0, almost four years ago (which is pretty much forever in Internet time). However, value tasks are just now becoming more commonly used. Language features including asynchronous disposal and asynchronous enumerables (a.k.a. asynchronous streams) are thrusting value tasks in front of many more developers.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-a-simple-description&quot;&gt;ValueTask: A Simple Description&lt;/h2&gt;

&lt;p&gt;Here’s value tasks in a single sentence: a value task (&lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt;) is a more efficient task than a reference task (&lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As the name implies, a &lt;em&gt;value&lt;/em&gt; task is a value type rather than a reference type (like ordinary tasks). When using the reference type of task (e.g., &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;), even if the value is known synchronously (e.g., using &lt;code&gt;Task.FromResult&lt;/code&gt;), the &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; wrapper object still needs to be allocated. Value tasks avoid this allocation because they are value types; when a value is known synchronously, code can create and return a value task without having to do any allocation. In addition to a clear performance win in the synchronous case, value tasks often produce more efficient code even in many common asynchronous cases.&lt;/p&gt;

&lt;p&gt;However, value tasks come with two important restrictions. Before adopting value tasks everywhere as a replacement for reference tasks, your team needs to understand these restrictions - and if you’re writing a library, you should make sure your consumers understand these restrictions, too.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-restriction-1-only-consume-once-or-yoco-you-only-consume-once&quot;&gt;ValueTask Restriction #1: Only Consume Once (or “YOCO: You Only Consume Once”)&lt;/h2&gt;

&lt;p&gt;Each value task can only be consumed once. This is because value tasks can be reused, so once a value task is consumed, that value task can then &lt;em&gt;change what it represents&lt;/em&gt; so it now represents some other, unrelated operation. This is unusual for value types, so it can be surprising.&lt;/p&gt;

&lt;p&gt;To clarify, by “consume”, I mean use &lt;code&gt;await&lt;/code&gt; to asynchronously wait for the value task to compete, &lt;em&gt;or&lt;/em&gt; use &lt;code&gt;AsTask&lt;/code&gt; to convert the value task into a regular task.&lt;/p&gt;

&lt;p&gt;Most of the time, the calling code just calls &lt;code&gt;await&lt;/code&gt; immediately after calling the function (like &lt;code&gt;await FuncAsync();&lt;/code&gt;), and value tasks work perfectly fine with code like this. But if your code does an &lt;code&gt;await&lt;/code&gt; more than once, or wants to use &lt;code&gt;Task.WhenAll&lt;/code&gt; or &lt;code&gt;Task.WhenAny&lt;/code&gt;, then it should &lt;em&gt;not&lt;/em&gt; &lt;code&gt;await&lt;/code&gt; the value task - it should convert the value task to a reference task (by calling &lt;code&gt;AsTask&lt;/code&gt;) exactly once, and then only use that reference task from then on. Reference tasks may be safely &lt;code&gt;await&lt;/code&gt;ed multiple times; a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; never changes what it represents.&lt;/p&gt;

&lt;p&gt;Code consuming a &lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt; should only consume it once, and after that the &lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt; should be completely ignored.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-restriction-2-only-consume-asynchronously-or-no-more-blocking-now-i-mean-it&quot;&gt;ValueTask Restriction #2: Only Consume Asynchronously (or “No More Blocking Now, I Mean It!”)&lt;/h2&gt;

&lt;p&gt;Blocking on asynchronous code has &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&quot;&gt;never been the ideal solution&lt;/a&gt;, but in some cases it is necessary. It is &lt;em&gt;possible&lt;/em&gt; to block on reference tasks using &lt;code&gt;GetAwaiter().GetResult()&lt;/code&gt; (or &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Wait()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;However, this will not work for value tasks. You simply &lt;strong&gt;cannot&lt;/strong&gt; block on value tasks. If you &lt;em&gt;must&lt;/em&gt; block (again, this is never ideal), then you’ll need to convert the value task to a reference task by calling &lt;code&gt;AsTask&lt;/code&gt;, and then block on that reference task.&lt;/p&gt;

&lt;p&gt;Unfortunately, value task does contain a &lt;code&gt;Result&lt;/code&gt; property, and the code &lt;code&gt;GetAwaiter().GetResult()&lt;/code&gt; will compile. So code that &lt;em&gt;attempts&lt;/em&gt; to block on a value task will compile just fine. The problem is that these code patterns &lt;em&gt;do not always block&lt;/em&gt; when used on a value task. The resulting code has undefined behavior. Just don’t go there.&lt;/p&gt;

&lt;h2 id=&quot;valuetask-restrictions-and-the-pitfall-of-library-upgrades&quot;&gt;ValueTask Restrictions and the Pitfall of Library Upgrades&lt;/h2&gt;

&lt;p&gt;With &lt;em&gt;both&lt;/em&gt; of the restrictions mentioned above, there is an additional value task pitfall when it comes to library upgrades. To understand why, you need to understand a bit more about how value tasks are implemented.&lt;/p&gt;

&lt;p&gt;There are actually three different kinds of value tasks (as of this writing): result value wrappers, reference task wrappers, and the more complex (and more efficient) value task source wrappers. If consuming code violates either of the restrictions above, it will have undefined behavior that can be different depending on what kind of value task is returned.&lt;/p&gt;

&lt;p&gt;So one problem is this: consider a library that returns value tasks. For version 1.0.0, this library just uses simple reference task wrappers for its value tasks. If users of the library write code that consumes the value tasks multiple times &lt;em&gt;or&lt;/em&gt; blocks on the value tasks, then (as of this writing) that code will just happen to work as the consumers expect it to. The undefined behavior &lt;em&gt;just happens&lt;/em&gt; to be the desired behavior. However, if version 1.0.1 of that library switches to the more efficient value task source wrappers, then those consumers would suddenly break. Not at compile time, mind you - because the compiler will still happily compile this code - but at runtime. If the user code blocks, that could throw exceptions where there were none before. If the user code consumes the value task multiple times, that could cause very strange behavior that can be extremely difficult to debug (since it could be &lt;code&gt;await&lt;/code&gt;ing operations it didn’t even start).&lt;/p&gt;

&lt;p&gt;I say all that to say this: before adopting value tasks, you need to be sure your consumers internalize these restrictions! Once value task restrictions are widely understood, then we can start to use value tasks as a more general and widespread replacement for reference tasks.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR:&lt;/h2&gt;

&lt;p&gt;When adopting value tasks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Only Consume Once (or “YOCO: You Only Consume Once”)&lt;/li&gt;
  &lt;li&gt;Only Consume Asynchronously (or &lt;a href=&quot;https://www.youtube.com/watch?v=ury9eoLnb-0&quot;&gt;“No More Blocking Now, I Mean It!”&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/03/valuetask.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/03/valuetask.html</guid>
      </item>
    
      <item>
        <title>Microsoft.Extensions.Logging, Part 2: Types</title>
        <description>&lt;h2 id=&quot;factory-provider-repository-builders&quot;&gt;Factory Provider Repository Builders&lt;/h2&gt;

&lt;p&gt;Yeah, naming is hard.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;, there are two types in particular that I kept conflating: &lt;code&gt;ILoggerProvider&lt;/code&gt; and &lt;code&gt;ILoggerFactory&lt;/code&gt;. Even though they both can create instances of &lt;code&gt;ILogger&lt;/code&gt;, they are actually completely different!&lt;/p&gt;

&lt;p&gt;In this post, I’m going to cover the main types of &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; and describe their intended use.&lt;/p&gt;

&lt;h2 id=&quot;loglevel&quot;&gt;LogLevel&lt;/h2&gt;

&lt;p&gt;Like all other logging frameworks, &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; defines a sequence of levels for its logs. In increasing order of severity, they are &lt;code&gt;Trace&lt;/code&gt;, &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Information&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, and &lt;code&gt;Critical&lt;/code&gt;. The &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel&quot;&gt;meanings of these values&lt;/a&gt; are well documented, along with &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/#log-level&quot;&gt;advice on when to use each&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is another “log level” which is not really a log level: &lt;code&gt;None&lt;/code&gt;. This is technically part of the enumeration, but is used during &lt;em&gt;configuration&lt;/em&gt; to indicate that no logs for that part of the system should be logged. The &lt;code&gt;None&lt;/code&gt; value is not used during logging.&lt;/p&gt;

&lt;h2 id=&quot;ilogger&quot;&gt;ILogger&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ILogger&lt;/code&gt; is a logger that your code can use to write log messages to. There are three core methods: &lt;code&gt;IsEnabled&lt;/code&gt; tests whether a log level is enabled on that logger; &lt;code&gt;Log&lt;/code&gt; is the core logging method that is used to write log messages; and &lt;code&gt;BeginScope&lt;/code&gt; defines a logging scope.&lt;/p&gt;

&lt;p&gt;We’ll cover logging scopes later in this series. That leaves &lt;code&gt;IsEnabled&lt;/code&gt; and &lt;code&gt;Log&lt;/code&gt;, which are the core logging methods. There’s a bunch of logging extension methods that build on that core; the common methods like &lt;code&gt;LogInformation&lt;/code&gt; are just wrappers around &lt;code&gt;Log&lt;/code&gt;, with the appropriate arguments.&lt;/p&gt;

&lt;p&gt;Internally, an &lt;code&gt;ILogger&lt;/code&gt; has a “name” (also called a “category”). The idea is that each &lt;code&gt;ILogger&lt;/code&gt; instance is used by a different component of the application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILogger&lt;/code&gt; is a base interface that provides the core logging functionality, but it is seldom used directly. There are some exceptions (e.g., Azure Functions will pass you an &lt;code&gt;ILogger&lt;/code&gt;), but most of the time your code will log to an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;iloggerlttgt&quot;&gt;ILogger&amp;lt;T&amp;gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; is a logger that is named after a type &lt;code&gt;T&lt;/code&gt;. All logs sent to an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; (with the default implementation) will have a logger name/category of &lt;code&gt;typeof(T).FullName&lt;/code&gt;. &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; is derived from &lt;code&gt;ILogger&lt;/code&gt; and adds no new functionality.&lt;/p&gt;

&lt;p&gt;If you’re using dependency injection, an instance of &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; is usually injected into your type &lt;code&gt;T&lt;/code&gt;. So, each time you have a constructor that takes an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;, you are defining a “component” for your application.&lt;/p&gt;

&lt;p&gt;Personally, I’m not a &lt;em&gt;huge&lt;/em&gt; fan of this style of getting a logger, but it works. In my applications, the concept of a “component” seldomly has a 1:1 relationship with “types that log”. It tends to work out best for ASP.NET Controllers, but less so for utility types used by services (where I usually want the utility type to use the service’s component name). Of course, you can just pass an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; (or &lt;code&gt;ILogger&lt;/code&gt;) to the utility type, and that’s the way this is generally resolved.&lt;/p&gt;

&lt;p&gt;So, here’s a question that you may have: if &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; provides no benefit over &lt;code&gt;ILogger&lt;/code&gt; (other than being named after a type &lt;code&gt;T&lt;/code&gt;), why does this type exist at all? The answer is logging extension methods, which we’ll look at in more detail further in this series.&lt;/p&gt;

&lt;h2 id=&quot;iloggerprovider&quot;&gt;ILoggerProvider&lt;/h2&gt;

&lt;p&gt;The logger provider is a type that (drum roll…) provides &lt;code&gt;ILogger&lt;/code&gt; instances. But not just that; it provides &lt;code&gt;ILogger&lt;/code&gt; instances &lt;em&gt;for a specific logging system&lt;/em&gt;. Microsoft publishes &lt;a href=&quot;https://github.com/aspnet/Logging/tree/dev/src&quot;&gt;a few logger providers&lt;/a&gt; that support writing to &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.Debug/&quot;&gt;debugger output&lt;/a&gt;, the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.Console/&quot;&gt;Console&lt;/a&gt;, the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.EventLog/&quot;&gt;Windows Event Log&lt;/a&gt;, &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.Extensions.Logging.EventSource/&quot;&gt;Event Tracing for Windows (ETW)&lt;/a&gt;, and others.&lt;/p&gt;

&lt;p&gt;There are plenty of third-party logging providers, too. The primary purpose of a logging provider is to take log events and forward them to some logging backend. So there are logging providers for all kinds of logging backends: Serilog, Seq, log4net, etc. This allows you to write code that is independent of a logging framework (logging to an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;), and the implementation at runtime hits a specific backend (or multiple ones!).&lt;/p&gt;

&lt;p&gt;You can also create your own implementations of &lt;code&gt;ILoggerProvider&lt;/code&gt;. In my &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis&quot;&gt;DotNetApis project&lt;/a&gt;, I have one provider that &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis/blob/796f146e3027a0c470717befe33457c3dfeab50c/service/DotNetApis.Common/InMemoryLoggerProvider.cs&quot;&gt;stores logs in memory&lt;/a&gt; so they can be returned to the frontend as part of the HTTP response, another provider that &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis/blob/796f146e3027a0c470717befe33457c3dfeab50c/service/DotNetApis.Common/JsonLoggerProvider.cs&quot;&gt;streams JSON logs to a GZIP-compressed Azure blob&lt;/a&gt;, and several others.&lt;/p&gt;

&lt;p&gt;Creating reusable implementations of &lt;code&gt;ILoggerProvider&lt;/code&gt; is perhaps the most underdocumented part of &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;. The providers in my DotNetApis project at this point are incomplete; there is no way I would put them in a NuGet package or anything. A proper, reusable &lt;code&gt;ILoggerProvider&lt;/code&gt; is more involved; later in this series I’ll look specifically at implementing &lt;code&gt;ILoggerProvider&lt;/code&gt; properly, and cover all the necessary details.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILoggerProvider&lt;/code&gt; is a way to extend &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; by &lt;em&gt;implementation&lt;/em&gt;. However, you don’t ever want to &lt;em&gt;consume&lt;/em&gt; a logger provider directly. Even though &lt;code&gt;ILoggerProvider.CreateLogger&lt;/code&gt; creates &lt;code&gt;ILogger&lt;/code&gt; instances, you never actually want to call that method to &lt;em&gt;get&lt;/em&gt; a logger. To get loggers, you want to use dependency injection or &lt;code&gt;ILoggerFactory&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;iloggerfactory&quot;&gt;ILoggerFactory&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ILoggerFactory&lt;/code&gt; is the mastermind that brings together all the types above. Conceptually, an &lt;code&gt;ILoggerFactory&lt;/code&gt; has a collection of &lt;code&gt;ILoggerProvider&lt;/code&gt;s, and the &lt;code&gt;ILoggerFactory&lt;/code&gt; creates &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; instances for the application.&lt;/p&gt;

&lt;h3 id=&quot;registering-iloggerproviders-with-iloggerfactory&quot;&gt;Registering ILoggerProviders with ILoggerFactory&lt;/h3&gt;

&lt;p&gt;This is where the official documentation starts to fall short. In the ASP.NET Core world, ASP.NET Core itself takes care of creating an &lt;code&gt;ILoggerFactory&lt;/code&gt; instance, which it then passes to your application to configure. Your application can then call &lt;code&gt;AddProvider&lt;/code&gt; or a higher-level provider-specific method such as &lt;code&gt;AddDebug&lt;/code&gt;, &lt;code&gt;AddConsole&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Fortunately, even without ASP.NET Core, it’s not too difficult to do this yourself using the &lt;code&gt;LoggerFactory&lt;/code&gt; type in &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddDebug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;getting-iloggerlttgt-instances-from-iloggerfactory&quot;&gt;Getting ILogger&amp;lt;T&amp;gt; Instances from ILoggerFactory&lt;/h3&gt;

&lt;p&gt;In the ASP.NET Core world, the &lt;code&gt;ILoggerFactory&lt;/code&gt; is included in your Dependency Injection container, and it already knows how to get &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; values out of it, and everything is magical rainbows.&lt;/p&gt;

&lt;p&gt;When you’re outside of the ASP.NET Core world, you can still use &lt;code&gt;ILoggerFactory&lt;/code&gt; in this way. You just have to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Provide the &lt;code&gt;ILoggerFactory&lt;/code&gt; instance to your DI container.&lt;/li&gt;
  &lt;li&gt;Configure your DI container to resolve &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; instances by calling &lt;code&gt;ILoggerFactory.GetLogger&amp;lt;T&amp;gt;()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The exact instructions on how to do this depends on your DI container of choice.&lt;/p&gt;

&lt;p&gt;Of course, there’s another option, too. You can just provide the &lt;code&gt;ILoggerFactory&lt;/code&gt; instance, and your consuming types can take the &lt;code&gt;ILoggerFactory&lt;/code&gt; and create their own &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-iloggerfactorys-iloggers&quot;&gt;What Are the ILoggerFactory’s ILoggers?&lt;/h2&gt;

&lt;p&gt;Before closing out this post, I just want to point out that the &lt;code&gt;ILogger&lt;/code&gt; instances provided by &lt;code&gt;ILoggerFactory&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; the same as the &lt;code&gt;ILogger&lt;/code&gt; instances provided by &lt;code&gt;ILoggerProvider&lt;/code&gt;. An &lt;code&gt;ILoggerProvider&lt;/code&gt; &lt;code&gt;ILogger&lt;/code&gt; is a logger that logs &lt;em&gt;to that specific provider&lt;/em&gt;. An &lt;code&gt;ILoggerFactory&lt;/code&gt; &lt;code&gt;ILogger&lt;/code&gt; is a logger that logs &lt;em&gt;to all registered providers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In other words, the &lt;code&gt;ILoggerFactory&lt;/code&gt; &lt;code&gt;ILogger&lt;/code&gt;/&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; loggers are &lt;em&gt;composite&lt;/em&gt; loggers; they forward log messages to each provider’s &lt;code&gt;ILogger&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;review&quot;&gt;Review&lt;/h1&gt;

&lt;p&gt;This post has described the various logging types from the component’s perspective (&lt;code&gt;ILogger&lt;/code&gt;) and working out towards the application’s perspective (&lt;code&gt;ILoggerFactory&lt;/code&gt;). Let’s briefly review, going the other way this time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILoggerFactory&lt;/code&gt; is a collection of &lt;code&gt;ILoggerProvider&lt;/code&gt;s that creates composite &lt;code&gt;ILogger&lt;/code&gt;/&lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; loggers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ILoggerProvider&lt;/code&gt; ia a provider for a &lt;em&gt;specific&lt;/em&gt; logging system. It provides &lt;code&gt;ILogger&lt;/code&gt; loggers to the &lt;code&gt;ILoggerFactory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each component gets an &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; (or &lt;code&gt;ILogger&lt;/code&gt;) from the &lt;code&gt;ILoggerFactory&lt;/code&gt; that it should use for logging.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/06/microsoft-extensions-logging-part-2-types.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/06/microsoft-extensions-logging-part-2-types.html</guid>
      </item>
    
      <item>
        <title>Microsoft.Extensions.Logging, Part 1: Introduction</title>
        <description>&lt;h2 id=&quot;microsoftextensions&quot;&gt;Microsoft.Extensions.*&lt;/h2&gt;

&lt;p&gt;As part of ASP.NET Core, Microsoft has released several libraries under the &lt;code&gt;Microsoft.Extensions&lt;/code&gt; banner. I’m not entirely sure why “extensions” is in the name, but these are generic libraries that are useful in all kinds of scenarios. They were developed as part of ASP.NET Core, but can be used in any kind of application.&lt;/p&gt;

&lt;p&gt;For example, Azure Functions has first-class support for &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;; it will happily pass an &lt;code&gt;ILogger&lt;/code&gt; to your function, which you can then use for writing logs. I’ve also found the &lt;code&gt;Microsoft.Extensions&lt;/code&gt; abstractions useful for Console apps as well as shared code that may or may not run on .NET Core.&lt;/p&gt;

&lt;h2 id=&quot;microsoftextensionslogging&quot;&gt;Microsoft.Extensions.Logging&lt;/h2&gt;

&lt;p&gt;Recently, I found myself in a situation where I needed to work closely with &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;, both in a consuming and producing scenario. The documentation is still a bit lacking - particularly for implementing custom providers - so I figured I’d write up my lessons learned on this blog.&lt;/p&gt;

&lt;h2 id=&quot;logging-for-libraries&quot;&gt;Logging for Libraries&lt;/h2&gt;

&lt;p&gt;I write a &lt;em&gt;lot&lt;/em&gt; of libraries. “How should I log from my library?” is one question that the .NET ecosystem doesn’t have a good answer for. “How should I log from my application?” has about a hundred answers, but what about libraries?&lt;/p&gt;

&lt;p&gt;There are three general approaches to library logging:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use a specific logger.&lt;/li&gt;
  &lt;li&gt;Use a common logging abstraction.&lt;/li&gt;
  &lt;li&gt;Use a custom logging abstraction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Option (1) isn’t great for most libraries. The problem is that a library author doesn’t want to push their preferred logger onto all their consumers. There are scenarios where you can get away with it - e.g., if logging is purely for diagnostic information and you’re using something very low-level like ETW, then that may work. But most of the time, tying your library to a specific logging framework will only limit your adoption.&lt;/p&gt;

&lt;p&gt;Option (2) is to use a common logging abstraction like &lt;code&gt;Microsoft.Extensions.Logging.Abstractions&lt;/code&gt; or &lt;code&gt;Common.Logging&lt;/code&gt;. The advantage here is that you can work with abstract interfaces (e.g., &lt;code&gt;Microsoft.Extensions.Logging.ILogger&lt;/code&gt;), and the consumer of your library can plug in a common implementation for their logging framework of choice. The disadvantage is with versioning: over time, the abstraction itself will version (e.g., &lt;code&gt;Microsoft.Extensions.Logging.Abstractions&lt;/code&gt; is already at &lt;code&gt;2.1.0&lt;/code&gt;), and this may cause problems as multiple libraries using multiple versions of the common logging abstraction all need to coexist in a single application.&lt;/p&gt;

&lt;p&gt;Option (3) is to use a custom logging abstraction defined by your own code. In this case, you have your own &lt;code&gt;IMyLibraryLogger&lt;/code&gt; that your consumers need to implement. The disadvantage to this approach is that since the abstraction is custom, there are no libraries of common implementations that your consumers can just “plug in”. You also run the risk of not supporting the abstractions needed by your consumers; e.g., consumers will not be pleased if your library only supports text logging rather than semantic logging, or if it does not support &lt;code&gt;async&lt;/code&gt;-compatible scopes. Logging abstractions are hard to get right, and doing this for each library you write just gets annoying. There is a project called &lt;a href=&quot;https://github.com/damianh/LibLog&quot;&gt;LibLog&lt;/a&gt; that attempts to provide a common way of defining custom logging abstractions, but it doesn’t seem to have gotten a lot of traction yet.&lt;/p&gt;

&lt;p&gt;As of today, none of these options is really strong. Option (3) is sufficient for &lt;em&gt;frameworks&lt;/em&gt; (where users are willing to do extra work to get good logs), but there doesn’t seem to be a clear winner for your run-of-the-mill small libraries.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Steven van Deursen, the creator of Simple Injector, has &lt;a href=&quot;https://stackoverflow.com/a/41244169/263693&quot; class=&quot;alert-link&quot;&gt;gone on record&lt;/a&gt; saying the whole &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; design is a violation of the Dependency Injection Principle, with the &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt; specifically a violation of the Interface Segregation Principle. He strongly recommends option (3), but I have to counter that it’s hard for every library author in the world to get right. The &lt;a href=&quot;https://stackoverflow.com/a/5646876/263693&quot;&gt;example solution&lt;/a&gt; he links to, for example, only supports text logging, not structured logging. That said, Steven is an incredibly smart person, and you should read his arguments carefully and understand them.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;back-to-microsoftextensionslogging&quot;&gt;Back to Microsoft.Extensions.Logging&lt;/h2&gt;

&lt;p&gt;This blog series is diving into the details and design of &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;. I think it’s a great choice for applications; whether it should be used in libraries is still up for debate. I have not (yet) adopted &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt; in my own libraries, but it is my logging abstraction of choice when writing applications - even those that have absolutely nothing to do with ASP.NET Core.&lt;/p&gt;

&lt;p&gt;Next time, we’ll dive into the main types and terminology used by &lt;code&gt;Microsoft.Extensions.Logging&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/05/microsoft-extensions-logging-part-1-introduction.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/05/microsoft-extensions-logging-part-1-introduction.html</guid>
      </item>
    
      <item>
        <title>Docker as a Tool Provider</title>
        <description>&lt;p&gt;Docker is everywhere these days! Even with serverless technology growing more mature, Docker is still a giant in the cloud world. Everyone by now should be familiar with Docker as a way of scaling out your servers using containers.&lt;/p&gt;

&lt;p&gt;However, there’s another perfectly legitimate use case for Docker: building containers for tools.&lt;/p&gt;

&lt;p&gt;This is particularly useful in a Windows environment. I’m an old curmudgeon who knows how to use Windows and hasn’t taken the time to learn Macs. Every time I get a new dev machine, I consider switching, but I just haven’t done it. So my dev machines - even in this modern day - are still all Windows machines.&lt;/p&gt;

&lt;p&gt;This is all good, until you want to make use of some nifty Linux tools. The thing is, Windows just doesn’t work so great with Ruby. Or Python. Or Perl. Some tools have Windows builds that bundle their own dependencies, and others require certain environment variables to find just the right version of whatever runtime they need. It works &lt;em&gt;ok&lt;/em&gt;, but what usually ends up happening is that you have to tweak your dev machine until it is &lt;em&gt;just right&lt;/em&gt; for all the dependencies of all the different tools you want to use… and then you can never get another machine into that exact same state ever again.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;could&lt;/em&gt; use Ubuntu on Windows, which is awesome. But I’d still have to install the tools, and manage dependency conflicts and updates and all that. And I don’t want to shell out to a separate subsystem just to be able to build; I want my overall development environment to be Windows.&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;could&lt;/em&gt; use a solution like &lt;a href=&quot;https://boxstarter.org/&quot;&gt;Boxstarter&lt;/a&gt;, but some of this setup is so specific I’d have to write my own Chocolatey packages for some of them and tie it all together with some very custom scripts. I don’t want another project to maintain (the “Steve Cleary dev box setup script and Chocolately package collection”), especially because newer versions of the tools would require changes to those scripts, so I’d end up changing them every time I need to run them anyway! At the end of the day, it would just be way too complex and brittle.&lt;/p&gt;

&lt;p&gt;What I want is to use Boxstarter for my common tools that I use &lt;em&gt;regularly&lt;/em&gt; (Visual Studio, VSCode, Docker, Node, Git, etc); but for my more esoteric tools, I want to be able to encapsulate them and pull them in as a complete unit when I want to use them. And I don’t want to deal with conflicting dependencies for my different tools; I want them more… &lt;em&gt;contained&lt;/em&gt;. (Heh, see what I did there?)&lt;/p&gt;

&lt;p&gt;The answer? Docker, of course.&lt;/p&gt;

&lt;h2 id=&quot;docker-for-tools&quot;&gt;Docker for Tools&lt;/h2&gt;

&lt;p&gt;For this example, I’m going to run &lt;a href=&quot;http://lilypond.org/&quot;&gt;Lilypond&lt;/a&gt; as a Dockerized tool. If you’re not familiar with it, Lilypond is pretty much &lt;em&gt;the&lt;/em&gt; standard for free musical notation software.&lt;/p&gt;

&lt;p&gt;I have &lt;a href=&quot;https://github.com/StephenCleary/Hymnals&quot;&gt;an old project&lt;/a&gt; of Lilypond files that I wanted to hack on recently, but my current dev laptop doesn’t have Lilypond installed. At this point, it has been literally &lt;em&gt;years&lt;/em&gt; since I’ve installed Lilypond, and I don’t remember the details. I do remember that I was using some kind of GUI frontend Lilypond runner (not part of the actual Lilypond project), and I &lt;em&gt;think&lt;/em&gt; the frontend bundled Lilypond along with its dependencies. Maybe. And that GUI frontend project may not be maintained anymore, assuming I can even remember its name (GUI frontends are abandoned much more often than the “real” console applications they build on). I think there was also some weird stuff with PostScript printer drivers or something that may or may not have required tweaking since PostScript isn’t standard on Windows. And of course I didn’t write any of this down.&lt;/p&gt;

&lt;p&gt;Am I going to install Lilypond on my modern dev laptop? Um, no.&lt;/p&gt;

&lt;p&gt;I’m going to Dockerize this tool. I’m going to run Lilypond on the platform it was designed for (Linux), and I’m going to run it on my Windows machine inside a Docker container. I’m going to get this set up &lt;em&gt;once&lt;/em&gt; and then never, ever have to install this on any machine for the rest of my life.&lt;/p&gt;

&lt;h2 id=&quot;lilypond-on-docker&quot;&gt;Lilypond on Docker&lt;/h2&gt;

&lt;p&gt;I started out thinking that I’d have to write a &lt;code&gt;Dockerfile&lt;/code&gt; and install Lilypond on it and everything. I went down that path a little ways before I remembered that &lt;strong&gt;duh&lt;/strong&gt;, Docker has &lt;a href=&quot;https://hub.docker.com/&quot;&gt;a public repository of images&lt;/a&gt;! And it turns out that I &lt;a href=&quot;https://hub.docker.com/search/?isAutomated=0&amp;amp;isOfficial=0&amp;amp;page=1&amp;amp;pullCount=0&amp;amp;q=lilypond&amp;amp;starCount=0&quot;&gt;wasn’t the first one&lt;/a&gt; to want Lilypad Dockerized.&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;https://hub.docker.com/r/iskaron/lilypond/&quot;&gt;look at that&lt;/a&gt; - here’s a nice little Docker image that has Lilypond installed. It’s kept up-to-date (automated build), and seems to have everything I want! Docker Hub FTW!&lt;/p&gt;

&lt;p&gt;With a little tinkering, I found that I could run this straight from the command line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run --rm --volume=C:\Work\Hymnals:/app -w /app iskaron/lilypond lilypond SeniorHymnal/Hymnal.ly&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This command will download the Lilypond Docker image automatically (if it’s not already downloaded on the local machine), create a new container, run Lilypond within that container on my local files, and clean up the container when Lilypond exits. Let’s tear apart this command, piece by piece.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; - This command is used to create a new Docker container from a template image, and run it. It also implicitly downloads the Docker image from Docker Hub if necessary.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;iskaron/lilypond&lt;/code&gt; - The name of the template image that Docker uses to create the container.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--volume=C:\Work\Hymnals:/app&lt;/code&gt; - Create a volume that links to &lt;code&gt;C:\Work\Hymnals&lt;/code&gt; and mount it as &lt;code&gt;/app&lt;/code&gt; within the container.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-w /app&lt;/code&gt; - Set the working directory within the container to &lt;code&gt;/app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lilypond SeniorHymnal/Hymnal.ly&lt;/code&gt; - The actual command to run inside the container. On my local disk I have &lt;code&gt;C:\Work\Hymnals\SeniorHymnal\Hymnal.ly&lt;/code&gt;, which is accessible inside the container as &lt;code&gt;/app/SeniorHymnal/Hymnal.ly&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; - When our tool is done executing, clean up the Docker image and its resources.&lt;/p&gt;

&lt;p&gt;So now I have a single command that I can run, and it will automatically pull down a Dockerized tool and run it in a clean environment! There’s no interference with my local dev box at all; the Dockerized tool is &lt;em&gt;completely&lt;/em&gt; independent. What’s more, it runs in a new “clean room” environment every time it’s executed; even if the tool messes up the container, the next time it’s run, it’ll have a brand new, clean container to run in.&lt;/p&gt;

&lt;h2 id=&quot;npm-scripts&quot;&gt;NPM Scripts&lt;/h2&gt;

&lt;p&gt;Since I apparently only hack on my Lilypond files every few years, I’m not expecting myself to remember this command. Also, there’s this annoying hardcoded &lt;code&gt;C:\Work\Hymnals&lt;/code&gt; path that I want to get rid of. Time for &lt;code&gt;package.json&lt;/code&gt;!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm --volume=%INIT_CWD%:/app -w /app/SeniorHymnal iskaron/lilypond lilypond Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the npm script, I have access to &lt;code&gt;%INIT_CWD%&lt;/code&gt;, which is a Windows-specific way of getting the current working directory. To be honest, getting the current working directory was the hardest part of this whole setup!&lt;/p&gt;

&lt;p&gt;Now I can just do an &lt;code&gt;npm run build&lt;/code&gt; to process my Lilypond files. What’s more, I can &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=truefire.lilypond&quot;&gt;edit them in VSCode&lt;/a&gt; and bind &lt;code&gt;npm run build&lt;/code&gt; as the default build command. Now I have an actual development environment for Lilypond - no separate GUI frontend necessary!&lt;/p&gt;

&lt;h2 id=&quot;updating-images&quot;&gt;Updating Images&lt;/h2&gt;

&lt;p&gt;There’s something else I’d like to do: currently, &lt;code&gt;docker run&lt;/code&gt; will pull down the latest &lt;code&gt;iskaron/lilypond&lt;/code&gt; image &lt;em&gt;the first time it is run&lt;/em&gt;. After that, &lt;a href=&quot;https://github.com/moby/moby/issues/34394&quot;&gt;it never checks for updates&lt;/a&gt;. So I’d like to easily do a &lt;code&gt;docker pull&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Here’s a setup that checks for a new version each time it’s run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;prebuild&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker pull iskaron/lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm --volume=%INIT_CWD%:/app -w /app/SeniorHymnal iskaron/lilypond lilypond Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perhaps this is a little too much, though. I rarely run Lilypond, but when I do, I’ll run it a lot within a few days. So I think it makes more sense to have an explicit &lt;code&gt;npm run pull&lt;/code&gt; command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker pull iskaron/lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm --volume=%INIT_CWD%:/app -w /app/SeniorHymnal iskaron/lilypond lilypond Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The disadvantage to this approach is that I can easily forget to run &lt;code&gt;npm run pull&lt;/code&gt; when I’ve been away from the project a long time.&lt;/p&gt;

&lt;h2 id=&quot;npm-scripts-for-dockerized-tools&quot;&gt;NPM Scripts for Dockerized Tools&lt;/h2&gt;

&lt;p&gt;What I have so far is good, but it’s pretty tied to Lilypond specifically. I want to make my NPM scripts a bit more copy-pastable by making the Docker commands more generic. After hacking around a bit, I ended up with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;iskaron/lilypond&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker pull %npm_package_config_image%&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;docker-run&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docker run --rm -v %INIT_CWD%:/app -w /app %npm_package_config_image%&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;npm run docker-run -- lilypond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;npm run lilypond -- SeniorHymnal/Hymnal.ly&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I have a single &lt;code&gt;config&lt;/code&gt; value that will be different for different &lt;code&gt;project.json&lt;/code&gt; files. I can run &lt;code&gt;npm run pull&lt;/code&gt; to update the latest Dockerized tool for this project, and I can run &lt;code&gt;npm run build&lt;/code&gt; to execute that Dockerized tool. The &lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;docker-run&lt;/code&gt; scripts can work with any Dockerized tool and can be copy-pased long with &lt;code&gt;config&lt;/code&gt; from one project to the next. &lt;code&gt;docker-run&lt;/code&gt; in particular has all the “magic” that Docker needs to run a tool in a throwaway container.&lt;/p&gt;

&lt;p&gt;If anyone has any recommendations to make this even better, I’m all ears!&lt;/p&gt;

&lt;!--However, this approach does assume only one Dockerized tool per `project.json`. It's possible to override the `config` when calling one script from another, but that gets verbose pretty quickly. Well, none of my current projects need more than a single Dockerized tool, so I'll cross that bridge when I come to it.--&gt;

&lt;p&gt;The nice thing about using Docker from &lt;code&gt;project.json&lt;/code&gt; is that my dev machine now only has a couple of common requirements (Docker and Node), which it should get from Boxstarter. That’s all it needs to be capable of building any Lilypond script project. No more tool installs!&lt;/p&gt;

&lt;h2 id=&quot;next-target&quot;&gt;Next Target&lt;/h2&gt;

&lt;p&gt;So, I never actually hacked on any of my Lilypond files; I just spent a bunch of time doing this instead. But now it’s done and I’ll never have to set up another machine with Lilypond (or its GUI wrapper) ever again.&lt;/p&gt;

&lt;p&gt;The next logical target for Dockerized tooling is this blog. It currently uses Jekyll with Pygments. That means Ruby &lt;em&gt;and&lt;/em&gt; Python. Currently, to build this blog you have to &lt;a href=&quot;https://github.com/StephenCleary/blog-stephencleary-dotcom/tree/3419602d09b161910bb31a2349dc80bc794bacd1#to-build&quot;&gt;first build a Rube Goldberg machine&lt;/a&gt; with a portable (self-contained) Ruby + Jekyll and a local (impacting your dev environment) Python + setuptools + pygments. It’s a mess of tooling, and it’s the next thing on my list to Dockerize!&lt;/p&gt;
</description>
        <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/05/docker-as-a-tool-provider.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/05/docker-as-a-tool-provider.html</guid>
      </item>
    
      <item>
        <title>Using VSCode with PEGJS</title>
        <description>&lt;p&gt;VSCode has a pretty decent extension system. This week I was playing around with &lt;a href=&quot;https://pegjs.org/&quot;&gt;PEG JS&lt;/a&gt;, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Parsing_expression_grammar&quot;&gt;PEG&lt;/a&gt; parser generator for JavaScript. I found &lt;a href=&quot;https://github.com/SrTobi/code-pegjs-language&quot;&gt;an extension&lt;/a&gt; for VSCode syntax highlighting of &lt;code&gt;pegjs&lt;/code&gt; files. There are a couple of other options for extensions, but it looks like none of them support reporting errors in VSCode’s &lt;code&gt;Problems&lt;/code&gt; window.&lt;/p&gt;

&lt;p&gt;It’s pretty straightforward to run the pegjs executable from a &lt;code&gt;package.json&lt;/code&gt; npm script. In this example, I’m compiling my &lt;code&gt;pegjs&lt;/code&gt; file into a &lt;code&gt;js&lt;/code&gt; output file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;peg&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pegjs -o src/json-filter-expr.js src/json-filter-expr.pegjs&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem is that if I run this task from VSCode and the compilation fails, there’s no indication in the VSCode Problems window.&lt;/p&gt;

&lt;h2 id=&quot;problem-matchers&quot;&gt;Problem Matchers&lt;/h2&gt;

&lt;p&gt;The solution is to write a &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher&quot;&gt;problem matcher&lt;/a&gt;. This will enable VSCode to parse the &lt;code&gt;pegjs&lt;/code&gt; output and report it just like any other kind of compilation error.&lt;/p&gt;

&lt;p&gt;There’s one other bump in the road. &lt;code&gt;pegjs&lt;/code&gt; writes out its error messages like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;40:3: Expected &amp;quot;=&amp;quot;, comment, end of line, or whitespace but &amp;quot;/&amp;quot; found.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, problem matchers &lt;em&gt;must&lt;/em&gt; be able to parse out at least a &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt;. &lt;code&gt;pegjs&lt;/code&gt; is giving us &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt;, but not &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;VSCode requires the &lt;code&gt;file&lt;/code&gt;, which makes sense since it deals with a whole workspace and needs to know which file the problem is in. On the other hand, &lt;code&gt;pegjs&lt;/code&gt; does not include a filename in its output, which makes sense because it can be run on only one file at a time, and the user specified the file name right there in the command line.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The solution I ended up going with is quite simple: I echo the filename from my npm script and then use a multiline problem matcher to parse out the filename:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;peg&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo src/json-filter-expr.pegjs &amp;amp;&amp;amp; pegjs -o src/json-filter-expr.js src/json-filter-expr.pegjs&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the output from &lt;code&gt;npm run peg&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;src/json-filter-expr.pegjs
40:3: Expected &amp;quot;=&amp;quot;, comment, end of line, or whitespace but &amp;quot;/&amp;quot; found.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this can be matched with a multiline problem matcher that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;problemMatcher&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pegjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;fileLocation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;relative&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;${workspaceFolder}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;pattern&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^([^\\s].*)$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;regexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^(\\d+):(\\d+):\\s*(.*)$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;column&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;loop&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this in place, I can get the nice output from VSCode whenever I have an error in my pegjs file:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/vscode-pegjs.png&quot;&gt;&lt;img src=&quot;/assets/vscode-pegjs.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full source code is &lt;a href=&quot;https://github.com/StephenCleary/json-filter-expr/blob/8a5c0fa113fce6cb065a72d93d4ff0ff79a389e5/.vscode/tasks.json&quot;&gt;available online&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/05/vscode-for-pegjs.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/05/vscode-for-pegjs.html</guid>
      </item>
    
      <item>
        <title>Unit Testing with Roslyn</title>
        <description>&lt;h2 id=&quot;roslyn&quot;&gt;Roslyn&lt;/h2&gt;

&lt;p&gt;Roslyn was a huge project that spanned many years. It was a difficult rewrite of the C# and VB compilers into managed code, with the intent of also enabling fast analysis of partial code segments. These days, Roslyn powers many different systems: the compiler itself, the little hints that pop up as you type, and even static analysis systems that you can bundle with your NuGet package to encourage proper usage.&lt;/p&gt;

&lt;p&gt;I’ve thought many times about using Roslyn to create some analyzers for common mistakes with &lt;code&gt;Task&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt;, but I’ve just never taken the time to do it. However, just recently, I had the opportunity to use Roslyn for something completely different.&lt;/p&gt;

&lt;h2 id=&quot;dotnetapis&quot;&gt;DotNetApis&lt;/h2&gt;

&lt;p&gt;I run &lt;a href=&quot;http://dotnetapis.com/&quot;&gt;a service called DotNetApis&lt;/a&gt; that autogenerates reference documentation for NuGet packages. It does this by walking the CLI metadata (using the awesome &lt;a href=&quot;https://github.com/jbevain/cecil&quot;&gt;Mono.Cecil&lt;/a&gt;) and matching accessible elements with their XML documentation.&lt;/p&gt;

&lt;p&gt;The code that currently runs that site is a bit of a mess. I’ve been cleaning up the code into a v2 &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis&quot;&gt;that is open-source through and through&lt;/a&gt;. As a part of this rewrite, I needed a way to unit test some odd code elements. In the v1 code, I had a single “test”/”sample” dll that had a bunch of weird members, and I ran my unit tests against that. This worked, but I wanted my unit tests to be more self-contained.&lt;/p&gt;

&lt;p&gt;Enter Roslyn.&lt;/p&gt;

&lt;p&gt;I have unit tests in DotNetApis v2 that need to compile some code (as a &lt;code&gt;string&lt;/code&gt;) and then parse the resulting dll and xml. Getting this working was surprisingly easy!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssemblyDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Parse the C# code...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CSharpParseOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSharpParseOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SourceCodeKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Regular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...as representing a complete .cs file&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithLanguageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LanguageVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Latest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...enabling the latest language features&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Compile the C# code...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CSharpCompilationOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CSharpCompilationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DynamicallyLinkedLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...to a dll&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithOptimizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptimizationLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...in Release configuration&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithAllowUnsafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...enabling unsafe code&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Invoke the compiler...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CSharpCompilation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CSharpCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestInMemoryAssembly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ..with some fake dll name&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compileOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddReferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MetadataReference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateFromFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...referencing the same mscorlib we&amp;#39;re running on&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Parse and compile the C# code into a *.dll and *.xml file in-memory&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSyntaxTrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlDocumentationStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emitResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Compilation failed: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Parse the *.dll (with Cecil) and the *.xml (with XDocument)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeekOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeekOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssemblyDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmlStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This beautiful little utilty method takes C# code and spits out a parsed dll and xml file, all in-memory! The &lt;a href=&quot;https://github.com/StephenClearyApps/DotNetApis/blob/0b119d8698a3439b2170ae12c3a438fc2f6e9a0b/service/UnitTestUtility/Utility.cs&quot;&gt;actual code&lt;/a&gt; is a bit more complex for efficiency reasons. I currently have 86 unit tests using this method, with lots more on the way!&lt;/p&gt;

&lt;p&gt;Here’s what one of the unit tests looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[Fact]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Basic_InTopLevelType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;@&amp;quot;public class SampleClass {&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      /// &amp;lt;summary&amp;gt;Text to find.&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      public void SampleMethod() { } }&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SelectMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SampleClass&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SampleMethod&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;M:SampleClass.SampleMethod&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XmldocIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AssertXmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Text to find.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AssertXmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XDocument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMemberDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elementName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmldoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Descendants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;member&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemberXmldocIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elementName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SaveOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DisableFormatting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This unit test is checking that the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/processing-the-xml-file&quot;&gt;Xmldoc Identifier&lt;/a&gt; calculated by DotNetApis is in fact what we expect it to be (&lt;code&gt;M:SampleClass.SampleMethod&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; that it matches what the C# compiler generated in the xml file. The &lt;code&gt;AssertXmldoc&lt;/code&gt; helper is taking the Xmldoc Id from DotNetApis, looking it up in the *.xml file from the compiler, and asserting that the text we extract is what is expected.&lt;/p&gt;

&lt;p&gt;Sure, this example is pretty easy, but I’ve also started adding the more rare cases like methods that take an array of pointers by reference. There’s a &lt;em&gt;lot&lt;/em&gt; of more complex cases that are undocumented, and we have to rely on observed compiler behavior.&lt;/p&gt;

&lt;h2 id=&quot;roslyn-is-cool&quot;&gt;Roslyn is Cool&lt;/h2&gt;

&lt;p&gt;That’s all I have to say. I just thought it’s &lt;em&gt;so cool&lt;/em&gt; how easy Roslyn made this. And it’s &lt;em&gt;fast&lt;/em&gt;, too! I can keep my Live Unit Testing running while hacking around, even with most of my tests running Roslyn, and it’s all pretty slick!&lt;/p&gt;
</description>
        <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/05/roslyn-unit-testing.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/05/roslyn-unit-testing.html</guid>
      </item>
    
      <item>
        <title>Slides Available: Code PaLOUsa 2018</title>
        <description>&lt;p&gt;I have &lt;a href=&quot;https://github.com/StephenCleary/Presentations/tree/0959859f132483d293bc35e1ad7284d18084f632/Understanding%20Ethereum%20Application%20Development&quot;&gt;uploaded the slides&lt;/a&gt; for the &lt;a href=&quot;http://www.codepalousa.com/Sessions/1115&quot;&gt;talk I gave a couple weeks ago at Code PaLOUsa 2018, entitled “Understanding Ethereum Application Development”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk is more of a conceptual overview of Ethereum application development, covering questions like “what does it mean to &lt;em&gt;run&lt;/em&gt; on the blockchain?” and “what’s the point of an oracle?” It does not cover the details of the Solidity language.&lt;/p&gt;

&lt;p&gt;(Thanks to &lt;a href=&quot;https://twitter.com/carlowahlstedt&quot;&gt;@carlowahlstedt&lt;/a&gt; for reminding me to put this up!)&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2018/04/slides-available-codepalousa-2018.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2018/04/slides-available-codepalousa-2018.html</guid>
      </item>
    
  </channel>
</rss>
