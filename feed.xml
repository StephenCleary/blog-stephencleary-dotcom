<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary&#39;s blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>http://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="http://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="http://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>ZipArchive on Write-Only Streams</title>
        <description>&lt;p&gt;A couple weeks ago, I described &lt;a href=&quot;/2016/10/async-pushstreamcontent.html&quot;&gt;how to build a zip file on-the-fly from ASP.NET WebAPI&lt;/a&gt; using the &lt;a href=&quot;https://www.nuget.org/packages/DotNetZip/&quot;&gt;&lt;code&gt;DotNetZip&lt;/code&gt; library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, here’s a question: “Why use &lt;code&gt;DotNetZip&lt;/code&gt; instead of the built-in &lt;code&gt;ZipArchive&lt;/code&gt;?”&lt;/p&gt;

&lt;p&gt;The answer is: You &lt;em&gt;can&lt;/em&gt; use &lt;code&gt;ZipArchive&lt;/code&gt;, but you would need to work around a bug in the &lt;code&gt;ZipArchive&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The straightforward approach is to just use &lt;code&gt;ZipArchive&lt;/code&gt; with &lt;code&gt;PushStreamContent&lt;/code&gt;, very similar to &lt;a href=&quot;/2016/10/async-pushstreamcontent.html&quot;&gt;the previous example&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/README.md&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.gitignore&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/.gitignore&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PushStreamContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transportContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipArchive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipArchive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipArchiveMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipEntry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipArchive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStreamAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyToAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaTypeHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentDisposition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentDispositionHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;attachment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;MyZipfile.zip&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code &lt;em&gt;should&lt;/em&gt; work, but it will actually fail (as of .NET 4.6.2). It will throw a &lt;code&gt;NotSupportedException&lt;/code&gt; from within the &lt;code&gt;PushStreamContent&lt;/code&gt; callback, so it’s annoying to find and debug.&lt;/p&gt;

&lt;p&gt;Here’s the problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Streams can be “seekable.” Seekable streams allow reading the &lt;code&gt;Position&lt;/code&gt; property and updating it via the &lt;code&gt;Seek&lt;/code&gt; method.&lt;/li&gt;
  &lt;li&gt;The ASP.NET response output stream is not seekable. This is a common aspect of all network streams.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ZipArchive&lt;/code&gt; should work with write-only (non-seekable) streams. However (and this is the bug), it will actually &lt;em&gt;read&lt;/em&gt; &lt;code&gt;Position&lt;/code&gt; even for non-seekable streams in order to build up its list of zip entry offsets in the zip file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This bug &lt;a href=&quot;https://connect.microsoft.com/VisualStudio/feedback/details/816411/ziparchive-shouldnt-read-the-position-of-non-seekable-streams&quot;&gt;was reported several years ago&lt;/a&gt; (&lt;a href=&quot;http://www.webcitation.org/6lGHjvc3C&quot;&gt;webcite&lt;/a&gt;), and it has been closed as “Won’t Fix” for some reason. The ever-intelligent @svick has &lt;a href=&quot;http://stackoverflow.com/questions/16585488/writing-to-ziparchive-using-the-httpcontext-outputstream/21513194#21513194&quot;&gt;suggested a workaround&lt;/a&gt; for this bug: writing a stream wrapper that keeps track of &lt;code&gt;Position&lt;/code&gt; and allows it to be read.&lt;/p&gt;

&lt;p&gt;The important parts of this stream wrapper look like this (the other members of &lt;a href=&quot;https://github.com/StephenClearyExamples/AsyncDynamicZip/blob/full-ziparchive/Example/WebApplication/WriteOnlyStreamWrapper.cs&quot;&gt;this type&lt;/a&gt; just forward to the underlying stream):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WriteOnlyStreamWrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteOnlyStreamWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotSupportedException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeginWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncCallback&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeginWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EndWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAsyncResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asyncResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancellationToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only tricky part about this wrapper is that we want to be sure to override the asynchronous methods as well as the synchronous ones. This is because the &lt;code&gt;Stream&lt;/code&gt; base class will provide a default implementation of these that just runs the synchronous APIs on a thread pool thread. In other words, it’s using fake asynchrony by default! So we need to override them to provide true asynchrony.&lt;/p&gt;

&lt;p&gt;With that wrapper in place, our action method can be updated:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/README.md&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.gitignore&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/.gitignore&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PushStreamContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transportContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// The only change is in this line:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipArchive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipArchive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WriteOnlyStreamWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipArchiveMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipEntry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipArchive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStreamAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyToAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaTypeHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentDisposition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentDispositionHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;attachment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;MyZipfile.zip&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And &lt;code&gt;ZipArchive&lt;/code&gt; is quite happy with the stream wrapper!&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;A fully-working solution for ASP.NET 4.6 (using the built-in &lt;code&gt;ZipArchive&lt;/code&gt;) is &lt;a href=&quot;https://github.com/StephenClearyExamples/AsyncDynamicZip/tree/full-ziparchive&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Nov 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/11/ziparchive-on-write-only-streams.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/11/ziparchive-on-write-only-streams.html</guid>
      </item>
    
      <item>
        <title>Historical Asynchronous PushStreamContent</title>
        <description>&lt;p&gt;Last time, &lt;a href=&quot;/2016/10/async-pushstreamcontent.html&quot;&gt;we looked at using &lt;code&gt;PushStreamContent&lt;/code&gt; with an asynchronous delegate to zip up files on-demand with a fully-asynchronous system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I didn’t want to complicate that post by mentioning the odd history of asynchronous &lt;code&gt;PushStreamContent&lt;/code&gt; use, but I personally find it - er, “interesting.” :)&lt;/p&gt;

&lt;p&gt;Today, &lt;code&gt;PushStreamContent&lt;/code&gt; takes an &lt;a href=&quot;/2014/02/synchronous-and-asynchronous-delegate.html&quot;&gt;asynchronous delegate&lt;/a&gt; (&lt;code&gt;Func&amp;lt;Stream, HttpContent, TransportContext, Task&amp;gt;&lt;/code&gt;), and it finishes sending the response when that asynchronous delegate completes. This is the natural way of supporting asynchronous stream writes.&lt;/p&gt;

&lt;p&gt;Historically, &lt;code&gt;PushStreamContent&lt;/code&gt; was a lot weirder. It always supported asynchronous writing of the response stream, but the way it used to do so was odd, to say the least.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;PushStreamContent&lt;/code&gt; was first introduced, it only allowed &lt;em&gt;synchronous&lt;/em&gt; delegates (&lt;code&gt;Action&amp;lt;Stream, HttpContent, TransportContext&amp;gt;&lt;/code&gt;). It wasn’t really obvious, but it &lt;em&gt;did&lt;/em&gt; actually support asynchronous usage. What you had to do was pass an asynchronous lambda expression, which would actually get converted to an &lt;code&gt;async void&lt;/code&gt; method. One of the main &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/jj991977.aspx&quot;&gt;problems with &lt;code&gt;async void&lt;/code&gt; methods&lt;/a&gt; is that it’s very difficult for the caller to know when the &lt;code&gt;async void&lt;/code&gt; method has completed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PushStreamContent&lt;/code&gt; used to solve this in an unusual way: &lt;a href=&quot;http://stackoverflow.com/questions/15060214/web-api-httpclient-an-asynchronous-module-or-handler-completed-while-an-async&quot;&gt;&lt;code&gt;PushStreamContent&lt;/code&gt; would consider its callback “complete” when it closed the output stream&lt;/a&gt;. “Interesting,” indeed.&lt;/p&gt;

&lt;p&gt;This unusual design implies an unwritten rule: after closing the output stream, the callback really shouldn’t do anything else.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/ASP-NET-MVC/aspnetwebstack/commit/262ec8b273e2c8b7a4ae4cc7d43ad8e3f9c36c64#diff-778a5a33d4cdc98ca84864b003b2c36c&quot;&gt;&lt;code&gt;PushStreamContent&lt;/code&gt; has been changed to support asynchronous delegates&lt;/a&gt; as first-class citizens (as of &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Client/5.0.0&quot;&gt;&lt;code&gt;Microsoft.AspNet.WebApi.Client&lt;/code&gt; version 5.0.0&lt;/a&gt;). Now it works just like any other asynchronous code, rather than having the odd “&lt;code&gt;async void&lt;/code&gt; that completes when the stream is closed” behavior.&lt;/p&gt;

&lt;p&gt;There’s nothing really important in this blog post for modern code (the newer &lt;code&gt;PushStreamContent&lt;/code&gt; went live 3 years ago this month) - just an interesting historical note.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/10/async-pushstreamcontent-historical-note.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/10/async-pushstreamcontent-historical-note.html</guid>
      </item>
    
      <item>
        <title>Asynchronous PushStreamContent</title>
        <description>&lt;p&gt;I ran into this problem the other day, and thought it would serve as a good use case study.&lt;/p&gt;

&lt;p&gt;Put simply, I want to write an ASP.NET WebAPI action that will download a bunch of URLs and generate a zip on the fly, without storing any files in memory, &lt;em&gt;and&lt;/em&gt; without blocking any threads on I/O.&lt;/p&gt;

&lt;p&gt;Fun, fun!&lt;/p&gt;

&lt;h2 id=&quot;downloading-a-simple-stream&quot;&gt;Downloading a Simple Stream&lt;/h2&gt;

&lt;p&gt;It’s pretty straightforward to download a simple stream in WebAPI; there’s built-in support for that:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStreamAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/README.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaTypeHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentDisposition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentDispositionHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;attachment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we (asynchronously) send the HTTP request and get the stream back (at this point, the file is not in memory). Next, we create an &lt;code&gt;HttpResponseMessage&lt;/code&gt; that will use that stream as its content (&lt;code&gt;StreamContent&lt;/code&gt;). Finally, we set a few headers so that this file downloads nicely if a browser makes the request. If you hit this API in a browser, it will download the &lt;code&gt;README.md&lt;/code&gt; file indirectly through the WebAPI.&lt;/p&gt;

&lt;h2 id=&quot;constructing-a-zip-file-on-the-fly-using-memorystream&quot;&gt;Constructing a Zip File on the Fly Using MemoryStream&lt;/h2&gt;

&lt;p&gt;Let’s extend this example to have our WebAPI download &lt;em&gt;multiple&lt;/em&gt; files, and combine them into a single zip file which is then downloaded by the user.&lt;/p&gt;

&lt;p&gt;We can do this as such (using the excellent &lt;a href=&quot;https://www.nuget.org/packages/DotNetZip/&quot;&gt;&lt;code&gt;DotNetZip&lt;/code&gt; library&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/README.md&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.gitignore&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/.gitignore&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipOutputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaveOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PutNextEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStreamAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyToAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;archive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaTypeHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentDisposition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentDispositionHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;attachment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;MyZipfile.zip&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we’re downloading &lt;em&gt;two&lt;/em&gt; files and combining them on-the-fly into a single zip which is downloaded by the user. First, we create the &lt;code&gt;MemoryStream&lt;/code&gt; that the zip library will write to. Then, we download all the files asynchronously, and add them to the zip archive. Finally, we rewind the &lt;code&gt;MemoryStream&lt;/code&gt; containing the zip file and send it to the browser using good ‘ol &lt;code&gt;StreamContent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem with this approach is the &lt;code&gt;MemoryStream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Storing the zip archive in the &lt;code&gt;MemoryStream&lt;/code&gt; (as you may infer from the name) means that we’re building up the entire zip file in memory. The code is asynchronously downloading (using &lt;code&gt;HttpClient&lt;/code&gt;), and WebAPI will asynchronously send it to the browser (using &lt;code&gt;StreamContent&lt;/code&gt;), but we are holding the entire zip in memory in the meantime.&lt;/p&gt;

&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; a way to build the zip file &lt;em&gt;while it is being streamed to the client&lt;/em&gt;. This is possible because the zip file format lists its contents at the &lt;em&gt;end&lt;/em&gt; of the file.&lt;/p&gt;

&lt;p&gt;To use this kind of dynamic streaming, we can’t use &lt;code&gt;MemoryStream&lt;/code&gt; or &lt;code&gt;StreamContent&lt;/code&gt;. What we &lt;em&gt;really&lt;/em&gt; want is to write to the output stream directly. With ASP.NET MVC, we could use &lt;code&gt;HttpResponse.OutputStream&lt;/code&gt; to grab the output stream directly and write to it (not ideal from a design standpoint, but it would work). This is not an option in ASP.NET WebAPI.&lt;/p&gt;

&lt;p&gt;However, ASP.NET WebAPI does have a response type that acts as a “callback” that allows us to write directly to the output stream &lt;em&gt;after&lt;/em&gt; we return from the controller action method. Its name is &lt;code&gt;PushStreamContent&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;constructing-a-zip-file-on-the-fly-using-pushstreamcontent&quot;&gt;Constructing a Zip File on the Fly Using PushStreamContent&lt;/h2&gt;

&lt;p&gt;I think of &lt;code&gt;PushStreamContent&lt;/code&gt; as just a “callback”. When ASP.NET has sent the headers and is ready to send the actual content, it just invokes the callback that we give to &lt;code&gt;PushStreamContent&lt;/code&gt;. Using this technique, our code looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/README.md&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.gitignore&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;https://raw.githubusercontent.com/StephenClearyExamples/AsyncDynamicZip/master/.gitignore&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponseMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PushStreamContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transportContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipOutputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filenamesAndUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PutNextEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStreamAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyToAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaTypeHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentDisposition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentDispositionHeaderValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;attachment&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;MyZipfile.zip&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the callback approach, we can write the zip archive directly to the output stream.&lt;/p&gt;

&lt;p&gt;The actual sequence of operations is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ASP.NET calls our controller action.&lt;/li&gt;
  &lt;li&gt;We build the list of filenames to download, and return an &lt;code&gt;HttpResponseMessage&lt;/code&gt; with a status code, a callback, and some HTTP headers.&lt;/li&gt;
  &lt;li&gt;ASP.NET starts sending the response to the client; it sends the status code and HTTP headers first.&lt;/li&gt;
  &lt;li&gt;Then, when ASP.NET sends the response body to the client, it invokes our callback method.&lt;/li&gt;
  &lt;li&gt;Our &lt;code&gt;PushStreamContent&lt;/code&gt; callback starts writing a zip file (directly to the response body), downloading the files asynchronously one at a time and adding them to the zipped content.&lt;/li&gt;
  &lt;li&gt;When our callback returns, ASP.NET completes the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach has some really nice advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All I/O is asynchronous. At no time are any threads blocked waiting to read the source files from their URLs, nor are any threads blocked waiting to write to the output response stream.&lt;/li&gt;
  &lt;li&gt;The zip file is not held in memory. It is streamed directly to the client, compressing on-the-fly.&lt;/li&gt;
  &lt;li&gt;In fact, for large files, not even a single file is read entirely into memory. Each file is individually compressed on-the-fly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s interesting to think about how this API will start a download of the zip file, and the zip is already streaming when it may not even have started downloading the other source files!&lt;/p&gt;

&lt;h2 id=&quot;drawbacks-to-pushstreamcontent&quot;&gt;Drawbacks to PushStreamContent&lt;/h2&gt;

&lt;p&gt;Well, it’s not all rainbows and unicorns, of course.&lt;/p&gt;

&lt;p&gt;The primary drawback to &lt;code&gt;PushStreamContent&lt;/code&gt; is error handling. Since an HTTP response always &lt;em&gt;starts&lt;/em&gt; with sending the status code (like &lt;code&gt;200 OK&lt;/code&gt;) and the headers, by the time our &lt;code&gt;PushStreamContent&lt;/code&gt; callback is invoked, it’s too late to notify the client of an error. So, what happens if our callback throws an exception?&lt;/p&gt;

&lt;p&gt;Based on my testing, it appears that ASP.NET will abort the connection. With all the browsers I tested, they correctly interpreted it as a generic “network error”.&lt;/p&gt;

&lt;p&gt;The problem is, ASP.NET can’t go back in time and change the status code or response headers. So it’s not possible to get any kind of detailed error information to the client if there’s a problem in the &lt;code&gt;PushStreamContent&lt;/code&gt; callback. The best you can do is just log the error on the server side. This is something to keep in mind when using &lt;code&gt;PushStreamContent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Update from the comments: as Paleta points out, you also must close the output stream when using &lt;code&gt;PushStreamContent&lt;/code&gt;. In our sample code, &lt;code&gt;ZipOutputStream&lt;/code&gt; closes the output stream for us, but if you forget to close the ouput stream, ASP.NET will &lt;em&gt;not&lt;/em&gt; do it for you!&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;p&gt;A fully-working solution for ASP.NET 4.6 is &lt;a href=&quot;https://github.com/StephenClearyExamples/AsyncDynamicZip/tree/full-dotnetzip&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/10/async-pushstreamcontent.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/10/async-pushstreamcontent.html</guid>
      </item>
    
      <item>
        <title>Announcement: Speaking at Milwaukee .NET</title>
        <description>&lt;p&gt;I’ll be speaking at the &lt;a href=&quot;http://www.mkedotnet.com/&quot;&gt;MKE DOT NET conference&lt;/a&gt; in Milwaukee, WI on October 29th!&lt;/p&gt;

&lt;p&gt;My topic is &lt;a href=&quot;http://www.mkedotnet.com/sessions/asynchronous-parallel-reactive-help/&quot;&gt;Asynchronous? Parallel? Reactive? HELP!&lt;/a&gt;, which is a gentle introduction to various forms of concurrency, with guidance on how to choose between them.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/10/announcement-speaking-at-mkedotnet.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/10/announcement-speaking-at-mkedotnet.html</guid>
      </item>
    
      <item>
        <title>Brazilian Portuguese translation of Async/Await</title>
        <description>&lt;p&gt;This is just a quick note to let you know that my &lt;a href=&quot;/2012/02/async-and-await.html&quot;&gt;async intro blog post&lt;/a&gt; has been &lt;a href=&quot;http://www.estacouveflor.com/async-e-await/&quot;&gt;translated into Brazilian Portuguese&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Many thanks to Cleiton Gomes for doing it so beautifully!&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/10/portuguese-translation-of-async.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/10/portuguese-translation-of-async.html</guid>
      </item>
    
      <item>
        <title>DotNet / NetCore Versions</title>
        <description>&lt;p&gt;Well, the .NET Core 1.0 RTM release went out yesterday, and everything went just fine!&lt;/p&gt;

&lt;p&gt;No, just kidding. When does the first major release of a new platform ever go just fine? :)&lt;/p&gt;

&lt;p&gt;Currently, there’s a bit of confusion out there because the &lt;em&gt;runtime&lt;/em&gt; (netcore) RTM’d, but the &lt;em&gt;tooling&lt;/em&gt; (dotnet) is still in preview. I’m writing down how all the pieces fit together (along with recent history) so I can keep it all straight in my head.&lt;/p&gt;

&lt;p&gt;So, this is my short reference blog post pointing out which versions of which go with what. And stuff.&lt;/p&gt;

&lt;h2 id=&quot;the-right-bits&quot;&gt;The Right Bits&lt;/h2&gt;

&lt;p&gt;There have been several reports of odd Visual Studio behavior due to conflicting installs.&lt;/p&gt;

&lt;p&gt;So, the &lt;strong&gt;first&lt;/strong&gt; thing to do is to uninstall all old DNX or dotnet tooling, and any pre-release netcore runtimes. See the end of this post for uninstall helps.&lt;/p&gt;

&lt;p&gt;Then, install the &lt;a href=&quot;https://www.microsoft.com/net/core&quot;&gt;proper bits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a Windows machine running Visual Studio, the proper bits are Visual Studio 2015 Update 3 followed by the .NET Core for Visual Studio Official MSI Installer (which includes some RTM pieces &lt;em&gt;and&lt;/em&gt; some preview pieces).&lt;/p&gt;

&lt;p&gt;For a command-line setup, the proper bits are the .NET Core Runtime followed by the .NET Core SDK (which is in preview).&lt;/p&gt;

&lt;p&gt;If you use ReSharper, be sure to upgrade to &lt;a href=&quot;https://confluence.jetbrains.com/display/ReSharper/ReSharper+2016.2+EAP&quot;&gt;2016.2 EAP 6&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dotnet-and-netcore&quot;&gt;DotNet and NetCore&lt;/h2&gt;

&lt;p&gt;As previously noted, .NET Core did RTM yesterday, but the DotNet tooling is still in preview. Here’s a rundown of the recent releases and how they match:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;.NET Core (runtime) Version&lt;/th&gt;&lt;th&gt;DotNet (tooling) Version&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;RC1&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-rc1-update2&lt;/code&gt; (RC1)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;RC2&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-preview1-002702&lt;/code&gt; (Preview 1)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-beta-002071&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.0.0 (RTM)&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-preview2-003121&lt;/code&gt; (Preview 2)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;em&gt;tooling&lt;/em&gt; version is what should be referenced in your &lt;code&gt;global.json&lt;/code&gt;. So a &lt;code&gt;global.json&lt;/code&gt; targeting the current tooling release would look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;projects&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;sdk&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0.0-preview2-003121&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The tooling version is also what gets reported from &lt;code&gt;dotnet --version&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet --version
1.0.0-preview2-003121
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;The naming definitely got messed up for the tooling.&lt;/p&gt;

  &lt;p&gt;It looks like it was originally tracking with the runtime release names (the “RC1” release names match), but then broke off on its own as “Preview 1” when the runtime went to “RC2”.&lt;/p&gt;

  &lt;p&gt;Then there was an intermediate release between the two preview releases, to fix the tooling for F# projects. It was called “beta” for some reason.&lt;/p&gt;

  &lt;p&gt;So the tooling has gone from RC to Preview 1 to Beta to Preview 2. However, those were not “real” Beta/RC releases - they were really just incremental previews. Future versions will doubtless have “real” Beta/RC names.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;installing-tooling-on-ci-machines&quot;&gt;Installing Tooling on CI Machines&lt;/h2&gt;

&lt;p&gt;Continuous Integration build servers also need to have the appropriate tooling installed. For a variety of reasons, I prefer to have my .NET Core projects locally install the exact version of tooling that they need.&lt;/p&gt;

&lt;p&gt;The DotNet tooling has supported “scripted installs” via PowerShell / Bash scripts for a long time. It’s not too hard to install the tooling as part of your build script, if you know where the files are.&lt;/p&gt;

&lt;p&gt;The basic idea is that you first download an “install” script and then invoke it with the desired “channel” and “version” to get the actual tooling.&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;DotNet (tooling) Version&lt;/th&gt;&lt;th&gt;Install Script Location&lt;/th&gt;&lt;th&gt;Install Script Invocation&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-rc1-update2&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;a href=&quot;https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.ps1&quot;&gt;https://raw.githubusercontent.com/​aspnet/​Home/​dev/​dnvminstall.ps1&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;dnvm install 1.0.0-rc1-update2&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-preview1-002702&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview1/scripts/obtain/dotnet-install.ps1&quot;&gt;https://raw.githubusercontent.com/​dotnet/​cli/​rel/​1.0.0-preview1/​scripts/​obtain/​dotnet-install.ps1&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;dotnet-install.ps1 -Channel &quot;preview&quot; -Version &quot;1.0.0-preview1-002702&quot;&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-beta-002071&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview1/scripts/obtain/dotnet-install.ps1&quot;&gt;https://raw.githubusercontent.com/​dotnet/​cli/​rel/​1.0.0-preview1/​scripts/​obtain/​dotnet-install.ps1&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;dotnet-install.ps1 -Channel &quot;preview&quot; -Version &quot;1.0.0-beta-002071&quot;&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;1.0.0-preview2-003121&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;a href=&quot;https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview2/scripts/obtain/dotnet-install.ps1&quot;&gt;https://raw.githubusercontent.com/​dotnet/​cli/​rel/​1.0.0-preview2/​scripts/​obtain/​dotnet-install.ps1&lt;/a&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span&gt;&lt;code&gt;dotnet-install.ps1 -Channel &quot;preview&quot; -Version &quot;1.0.0-preview2-003121&quot;&lt;/code&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The Bash install scripts are located in the same place, just with a &lt;code&gt;.sh&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;A full “install local” PowerShell script for the current tooling version would look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Download the &amp;quot;dotnet-install.ps1&amp;quot; script.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview2/scripts/obtain/dotnet-install.ps1&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-OutFile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.\dotnet-install.ps1&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Decide to install into a &amp;quot;.dotnetcli&amp;quot; local directory.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$env:DOTNET_INSTALL_DIR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$pwd\.dotnetcli&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Do the actual install.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotnet-install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-Channel&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;preview&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-Version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0.0-preview2-003121&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;-InstallDir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$env:DOTNET_INSTALL_DIR&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;misc-tips&quot;&gt;Misc Tips&lt;/h2&gt;

&lt;p&gt;As a general rule, you want use the &lt;em&gt;highest&lt;/em&gt; available release of the &lt;code&gt;NETStandard.Library&lt;/code&gt; dependency (if you’re using it), but the &lt;em&gt;lowest&lt;/em&gt; possible &lt;code&gt;netstandard&lt;/code&gt; target (to reach the largest number of platforms). For more details, see the conceptual links below.&lt;/p&gt;

&lt;h2 id=&quot;helpful-links&quot;&gt;Helpful Links&lt;/h2&gt;

&lt;p&gt;If you have an upgrade problem that you just can’t figure out, join the &lt;a href=&quot;http://tattoocoder.com/aspnet-slack-sign-up/&quot;&gt;(unofficial) .NET Core Slack channel&lt;/a&gt; or the &lt;a href=&quot;https://gitter.im/dotnet/coreclr&quot;&gt;(official) .NET Core Gitter room&lt;/a&gt; and ask on there.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;h3 id=&quot;conceptual&quot;&gt;Conceptual&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md&quot;&gt;All about netstandard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/articles/core/packages&quot;&gt;Packages, Metapackages, and Frameworks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/articles/core/deploying/reducing-dependencies&quot;&gt;Dependency Trimming&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;upgrading&quot;&gt;Upgrading&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://weblog.west-wind.com/posts/2016/Jun/27/Upgrading-to-ASPNET-Core-RTM-from-RC2&quot;&gt;Upgrading to ASP.NET Core RTM from RC2 (Rick Strahl)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://xunit.github.io/docs/getting-started-dotnet-core.html&quot;&gt;xUnit on .NET Core&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/corefx/issues/8880&quot;&gt;OpenCover requires the -oldStyle flag to work on the .NET Core 1.0.0/RTM runtime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/37288385/moq-netcore-failing-for-net-core-rc2&quot;&gt;Moq 4.6.25-alpha is missing a dependency, so you need to declare it manually&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aspnet-aspnet.readthedocs-hosted.com/en/latest/migration/rc2-to-rtm.html&quot;&gt;[ASP.NET] Migrating from ASP.NET Core RC2 to ASP.NET Core 1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aspnet-aspnet.readthedocs-hosted.com/en/latest/migration/rc1-to-rtm.html&quot;&gt;[ASP.NET] Migrating from ASP.NET 5 RC1 to ASP.NET Core 1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/articles/core/migrating-from-dnx&quot;&gt;Migrating from DNX&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;uninstalling-old-versions&quot;&gt;Uninstalling Old versions&lt;/h2&gt;

&lt;p&gt;Some developers have reported that Visual Studio .NET Core RC2 will not uninstall without the MSI. If you need the MSI, you can get it from &lt;a href=&quot;https://download.microsoft.com/download/4/6/1/46116DFF-29F9-4FF8-94BF-F9BE05BE263B/DotNetCore.1.0.0.RC2-VS2015Tools.Preview1.exe&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some developers have had problems with old uninstallers not cleaning up older versions of the tooling, and the problems with naming (where “RC1” and “RC2” tooling versions are &lt;em&gt;older&lt;/em&gt; than “Preview 2”) cause the wrong version of tooling to be found. The solution is to manually delete &lt;a href=&quot;https://files.gitter.im/aspnet/Home/ufDJ/2016-06-28-20_04_03-sdk.png&quot;&gt;the old versions&lt;/a&gt; from &lt;code&gt;%PROGRAMFILES%\dotnet\sdk&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/06/dotnet-netcore-versions.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/06/dotnet-netcore-versions.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 6: Refactoring</title>
        <description>&lt;p&gt;Today we’re going to start breaking up that huge &lt;code&gt;Main&lt;/code&gt; component. Yes, I said “huge” - in the React world, smaller components are more normal. React encourages the creation of small, reusable components, which are then composed together.&lt;/p&gt;

&lt;p&gt;There’s three big parts to the &lt;code&gt;Main&lt;/code&gt; component: a header, a main part, and a footer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section className=&quot;todoapp&quot;&amp;gt;
    &amp;lt;header className=&quot;header&quot;&amp;gt;
        ...
    &amp;lt;/header&amp;gt;
    &amp;lt;section className=&quot;main&quot;&amp;gt;
        ...
    &amp;lt;/section&amp;gt;
    &amp;lt;footer className=&quot;footer&quot;&amp;gt;
        ...
    &amp;lt;/footer&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I already have a &lt;code&gt;Main&lt;/code&gt; component (oops), at the end of this post I’m going to rename my &lt;code&gt;Main&lt;/code&gt; component to be &lt;code&gt;TodoApp&lt;/code&gt; instead. My goal here is consistency: I’m going to break up &lt;code&gt;TodoApp&lt;/code&gt; into &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Main&lt;/code&gt;, and &lt;code&gt;Footer&lt;/code&gt;, in a way that the &lt;code&gt;class&lt;/code&gt; of each HTML element will match the name of its React component. This just results in more maintainable code.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;If I had more control over the HTML output, I could choose to change the &lt;code&gt;class&lt;/code&gt; for the main section from &lt;code&gt;main&lt;/code&gt; to something like &lt;code&gt;todos&lt;/code&gt;, and keep my old &lt;code&gt;Main&lt;/code&gt; component as it is.&lt;/p&gt;

  &lt;p&gt;However, in this case, the TodoMVC app should have fairly specific HTML output, to enable things like &lt;a href=&quot;https://github.com/tastejs/todomvc/tree/master/tests&quot;&gt;automated acceptance testing&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;So, I have to rename my old &lt;code&gt;Main&lt;/code&gt; component because I didn’t think far enough ahead. Sorry about that. I &lt;em&gt;am&lt;/em&gt; totally making this up as I go along…&lt;/p&gt;

&lt;h2 id=&quot;breaking-up-is-easy-to-do&quot;&gt;Breaking Up is Easy to Do&lt;/h2&gt;

&lt;p&gt;Let’s break out the child components first. In React, a common pattern is to use a &lt;code&gt;components&lt;/code&gt; subdirectory to hold all the components. In larger apps, there can be further subdirectories underneath this, but this app is small enough that all the components should fit. I think. :)&lt;/p&gt;

&lt;p&gt;I’m going to (temporarily) call that middle child &lt;code&gt;Todos&lt;/code&gt; instead of &lt;code&gt;Main&lt;/code&gt; (I’ll fix this in the next step). The &lt;code&gt;Todos&lt;/code&gt; ends up looking like this (in &lt;code&gt;components/todos.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;

export default function Todos() {
    // This section should be hidden by default and shown when there are todos
    return (
        &amp;lt;section className=&quot;main&quot;&amp;gt;
          (copied from main.jsx)
        &amp;lt;/section&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that was pretty easy… The &lt;code&gt;Footer&lt;/code&gt; follows the exact same pattern (exposing a &lt;code&gt;Footer&lt;/code&gt; component from &lt;code&gt;components/footer.jsx&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The header is a bit more difficult, because we have the &lt;code&gt;dispatch&lt;/code&gt; method coming in and used in the header. There are three common ways to approach this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For those who like their dumb components to be &lt;em&gt;really&lt;/em&gt; dumb, then the &lt;code&gt;dispatch&lt;/code&gt; method is only connected to the smart component parent (in this case, &lt;code&gt;Main&lt;/code&gt;). &lt;code&gt;Main&lt;/code&gt; will then bind &lt;code&gt;dispatch&lt;/code&gt; to the action creator (&lt;code&gt;TodoActions.add&lt;/code&gt;), resulting in a new function. That function is then passed down to the dumb component, which uses it to respond to the user action.&lt;/li&gt;
  &lt;li&gt;For those who like their dumb components to be &lt;em&gt;somewhat&lt;/em&gt; dumb, then the &lt;code&gt;dispatch&lt;/code&gt; method is only connected to the smart component parent (&lt;code&gt;Main&lt;/code&gt;). &lt;code&gt;Main&lt;/code&gt; will then pass &lt;code&gt;dispatch&lt;/code&gt; down to the dumb component, and the dumb component calls the action creator (&lt;code&gt;TodoActions.add&lt;/code&gt;) and passes the resulting action to the &lt;code&gt;dispatch&lt;/code&gt; it got from its parent.&lt;/li&gt;
  &lt;li&gt;For those who like their dumb components to be &lt;em&gt;only a little&lt;/em&gt; dumb, then the &lt;code&gt;dispatch&lt;/code&gt; method is connected to the dumb component directly. The dumb component calls the action creator (&lt;code&gt;TodoActions.add&lt;/code&gt;) and passes the resulting action to its own &lt;code&gt;dispatch&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You could argue that the first option is the “most pure”, and the last one is “least pure”. While there are advantages to purity (namely, reusability), in my (limited) experience I feel that the repetitive boilerplate required by the purer approaches outweighs their advantages. For this reason, I take the third approach and just connect the dumb component so it gets its own &lt;code&gt;dispatch&lt;/code&gt; directly.&lt;/p&gt;

&lt;p&gt;Applying this to the &lt;code&gt;Header&lt;/code&gt; yields this (in &lt;code&gt;components/header.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;
import TodoActions from &#39;../actions/todoActions&#39;;

function Header({dispatch}) {
    return (
        &amp;lt;header className=&quot;header&quot;&amp;gt;
            &amp;lt;h1&amp;gt;todos&amp;lt;/h1&amp;gt;
            &amp;lt;input className=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autoFocus onBlur={e =&amp;gt; dispatch(TodoActions.add(e.target.value))}/&amp;gt;
        &amp;lt;/header&amp;gt;
    );
}

export default connect()(Header);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I’m connecting the &lt;code&gt;Header&lt;/code&gt; component, so that it gets &lt;code&gt;dispatch&lt;/code&gt;, which it then uses directly to dispatch the &lt;code&gt;ADD_TODO&lt;/code&gt; action at the appropriate time.&lt;/p&gt;

&lt;p&gt;Now that all the components are broken out, &lt;code&gt;Main&lt;/code&gt; is quite simple (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Main() {
    return (
        &amp;lt;section className=&quot;todoapp&quot;&amp;gt;
            &amp;lt;Header/&amp;gt;
            &amp;lt;Todos/&amp;gt;
            &amp;lt;Footer/&amp;gt;
        &amp;lt;/section&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;renaming&quot;&gt;Renaming&lt;/h2&gt;

&lt;p&gt;Finally, I have to do a bit of cleanup, because I chose a poor name (&lt;code&gt;Main&lt;/code&gt;) without thinking of my HTML structure first.&lt;/p&gt;

&lt;p&gt;So, I’m going to rename the old &lt;code&gt;Main&lt;/code&gt; to &lt;code&gt;TodoApp&lt;/code&gt; instead (and also change the file name from &lt;code&gt;main.jsx&lt;/code&gt; to &lt;code&gt;todoApp.jsx&lt;/code&gt;), and then rename &lt;code&gt;Todos&lt;/code&gt; to &lt;code&gt;Main&lt;/code&gt; (and change the file name from &lt;code&gt;components/todos.jsx&lt;/code&gt; to &lt;code&gt;components/main.jsx&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now the component naming scheme is more maintainable: each part’s &lt;code&gt;class&lt;/code&gt; attribute matches the component name and the file name in which that component lives.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/9c9959be0a85965098c40db1878f5a84420ae015&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/9c9959be0a85965098c40db1878f5a84420ae015/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 May 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/05/refactoring.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/05/refactoring.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 5: Dispatching</title>
        <description>&lt;p&gt;Well, I think it’s about time our app did something!&lt;/p&gt;

&lt;p&gt;The official &lt;a href=&quot;https://github.com/tastejs/todomvc/blob/master/app-spec.md&quot;&gt;TodoMVC application specification&lt;/a&gt; says we’re supposed to create a TODO item if the user types in the input box at the top and then tabs out of it.&lt;/p&gt;

&lt;p&gt;Let’s do it!&lt;/p&gt;

&lt;h2 id=&quot;getting-the-dispatcher&quot;&gt;Getting the Dispatcher&lt;/h2&gt;

&lt;p&gt;Redux provides a way to get a &lt;code&gt;dispatch&lt;/code&gt; method passed to our view components. Currently, our &lt;code&gt;Main&lt;/code&gt; view component looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Main() {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Redux, we can use &lt;a href=&quot;https://github.com/rackt/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options&quot;&gt;the &lt;code&gt;connect&lt;/code&gt; method&lt;/a&gt; to notify the &lt;code&gt;Provider&lt;/code&gt; that we will need the &lt;code&gt;dispatch&lt;/code&gt; method. &lt;code&gt;Main&lt;/code&gt; now looks like this (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function MainImpl({dispatch}) {
    ...
}
const Main = connect()(MainImpl);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code would be a bit cleaner if we were defining &lt;code&gt;Main&lt;/code&gt; in its own file. And we will, shortly. :)&lt;/p&gt;

&lt;h2 id=&quot;using-the-dispatcher&quot;&gt;Using the Dispatcher&lt;/h2&gt;

&lt;p&gt;Now, when the user tabs off that input field, we want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read the text of that field.&lt;/li&gt;
  &lt;li&gt;Pass that text to our &lt;code&gt;ADD_TODO&lt;/code&gt; action creator, which returns us an &lt;code&gt;ADD_TODO&lt;/code&gt; action.&lt;/li&gt;
  &lt;li&gt;Pass that &lt;code&gt;ADD_TODO&lt;/code&gt; action to &lt;code&gt;dispatch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to just do this all inline for now. The old JSX element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input className=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autoFocus/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the new JSX element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input className=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; autoFocus onBlur={e =&amp;gt; dispatch(TodoActions.add(e.target.value))}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, our application can actually create a todo!&lt;/p&gt;

&lt;h2 id=&quot;seeing-it-in-action&quot;&gt;Seeing It in Action&lt;/h2&gt;

&lt;p&gt;Our application doesn’t actually &lt;em&gt;display&lt;/em&gt; the todo items yet, but we can see the results in our Redux DevTools:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxResult1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There you can see the &lt;code&gt;ADD_TODO&lt;/code&gt; action that we created, and the result that it had on the application state (namely, adding a todo). We can expand that state:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxResult2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and see that the new todo item was added with the text I typed in, and with a &lt;code&gt;completed&lt;/code&gt; value of &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s working! :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/3f564477ba32604024f4fa3406f8edf9272ba798&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/3f564477ba32604024f4fa3406f8edf9272ba798/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 -0400</pubDate>
        <link>http://blog.stephencleary.com/2016/04/dispatching.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/04/dispatching.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 4: Debugging</title>
        <description>&lt;p&gt;The debugging support available for React and Redux is amazing! When you do make mistakes in your app, React will give you helpful console error messages.&lt;/p&gt;

&lt;p&gt;In fact, when we converted the HTML to JSX, React started giving us errors in the console:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReactWarnings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a moment and actually read those error messages! Those are nice and detailed, telling you exactly what you did wrong, what the effect will be, how to fix it, and where to fix it! We’ll fix those errors when we make those controls into actual React components; until then, they’ll just be read-only, as the warning states.&lt;/p&gt;

&lt;p&gt;Redux goes even further with its own kind of debugging view, which we’ll add today. This thing looks simple but is just mindblowing in its power (and I was &lt;em&gt;so&lt;/em&gt; late in adding this to DotNetApis!). We’ll be adding this dark box on the right:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxDevTools.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s called &lt;a href=&quot;https://github.com/gaearon/redux-devtools&quot;&gt;Redux DevTools&lt;/a&gt;, and not only does it display a history of all your actions and application state, but it also lets you rewind history and pretend actions never happened!&lt;/p&gt;

&lt;h2 id=&quot;creating-devtools&quot;&gt;Creating DevTools&lt;/h2&gt;

&lt;p&gt;Interestingly enough, the first step in incorporating Redux DevTools is to create the monitors that we want to use to display them.&lt;/p&gt;

&lt;p&gt;For our system, we’ll use the semi-standard &lt;code&gt;LogMonitor&lt;/code&gt;-within-&lt;code&gt;DockMonitor&lt;/code&gt; approach, in a new &lt;code&gt;devTools.jsx&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
import { createDevTools } from &#39;redux-devtools&#39;;
import LogMonitor from &#39;redux-devtools-log-monitor&#39;;
import DockMonitor from &#39;redux-devtools-dock-monitor&#39;;

export default createDevTools(
    &amp;lt;DockMonitor toggleVisibilityKey=&quot;ctrl-h&quot; changePositionKey=&quot;ctrl-j&quot; defaultSize={0.2}&amp;gt;
        &amp;lt;LogMonitor theme=&quot;bright&quot; /&amp;gt;
    &amp;lt;/DockMonitor&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty straightforward: we take a &lt;code&gt;LogMonitor&lt;/code&gt;, wrapped in a &lt;code&gt;DockMonitor&lt;/code&gt;, and pass that to the &lt;code&gt;createDevTools&lt;/code&gt; method from &lt;code&gt;redux-devtools&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-devtools&quot;&gt;Using DevTools&lt;/h2&gt;

&lt;p&gt;We also have to include this new &lt;code&gt;DevTools&lt;/code&gt; component in our application, which we can do right in &lt;code&gt;main.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.onload = () =&amp;gt; {
    const root = (
        &amp;lt;Provider store={store}&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;Main/&amp;gt;
                &amp;lt;DevTools/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/Provider&amp;gt;
    );
    render(root, document.getElementById(&#39;app&#39;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we had to put an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrapper around our &lt;code&gt;Main&lt;/code&gt; and &lt;code&gt;DevTools&lt;/code&gt; components. This is because &lt;code&gt;Provider&lt;/code&gt; can only have one child component. I find that my React applications do end up with some extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; wrappers scattered throughout, just due to React limitations. It’s not a big deal, though.&lt;/p&gt;

&lt;p&gt;Finally, we need to hook up the dev tools to our store, in &lt;code&gt;store.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default createStore(reducers, DevTools.instrument());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it! We now have a powerful Redux debugging environment built right in to our application!&lt;/p&gt;

&lt;h2 id=&quot;state-immutability&quot;&gt;State Immutability&lt;/h2&gt;

&lt;p&gt;One of the important rules of Redux is that Redux is in charge of the application state. Our code should never, ever change it.&lt;/p&gt;

&lt;p&gt;Some people like to use ImmutableJS (or something similar) to enforce the immutability of their application state. I prefer to use plain JS objects, but I do put in a “safeguard” that monitors the application state in development builds, and will spit errors out to the console if I ever do change the state.&lt;/p&gt;

&lt;p&gt;This is called the &lt;a href=&quot;https://github.com/leoasis/redux-immutable-state-invariant&quot;&gt;Redux immutable state invariant&lt;/a&gt;, and is a form of &lt;a href=&quot;http://redux.js.org/docs/advanced/Middleware.html&quot;&gt;Redux middleware&lt;/a&gt;. Middleware is a powerful concept: it’s a way of hooking into actions before they actually are processed by the reducers.&lt;/p&gt;

&lt;p&gt;The Redux immutable state invariant can be installed as such (in &lt;code&gt;store.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { applyMiddleware, compose, createStore } from &#39;redux&#39;;
import immutableState from &#39;redux-immutable-state-invariant&#39;;

const middleware = applyMiddleware(immutableState());

const storeFactory = compose(middleware, DevTools.instrument())(createStore);

export default storeFactory(reducers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, first we create our middleware, which in our simple app only consists of the immutable state invariant. In most real-world apps, there are usually other middlewares, such as the popular &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;&lt;code&gt;redux-thunk&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, we take the middleware (which is one kind of store enhancer), and combine it with our DevTools instrumentation (which is another store enhancer), and apply them to the core &lt;code&gt;createStore&lt;/code&gt; method to create our store factory.&lt;/p&gt;

&lt;p&gt;Finally, we invoke the store factory on our reducers, which results in our singleton store.&lt;/p&gt;

&lt;p&gt;This is the most complex part of Redux; it can be a lot to wrap your head around at once. But you’re past the worst part now! As you develop your own application, just add helpers like this individually as you need them, and pay attention to the terminology.&lt;/p&gt;

&lt;p&gt;Oh, and I do expect that JavaScript decorators will clean up this syntax a bit, if they ever get standardized…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/408ecf2c2d5f82b04a284dfaaaa6396f14f0bd42&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/408ecf2c2d5f82b04a284dfaaaa6396f14f0bd42/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/03/debugging.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/03/debugging.html</guid>
      </item>
    
      <item>
        <title>React/Redux TodoMVC, Part 3: State</title>
        <description>&lt;p&gt;Last time we introduced React; this time we’ll introduce Redux!&lt;/p&gt;

&lt;p&gt;It’s time to add application state. How about the TODO items? Seems like a decent place to start.&lt;/p&gt;

&lt;p&gt;Before we can add our first piece of application state, though, there’s some boilerplate we need to write. It’s time to introduce a lot of new concepts, including Redux.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Please be patient with this step. It seems like a lot to get started, but trust me, once it’s all in place, adding to it is &lt;em&gt;really&lt;/em&gt; simple and easy!&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;actions-and-state&quot;&gt;Actions and State&lt;/h2&gt;

&lt;p&gt;Actions and state are kind of related. Once you have both actions and state, then you can add actions or state individually. But when you’re first starting out, you really have to define actions &lt;em&gt;and&lt;/em&gt; state.&lt;/p&gt;

&lt;p&gt;So, in order to define our list of TODO items (as &lt;em&gt;state&lt;/em&gt;), we also have to define an action to go along with it. An “Add TODO” action sounds like it would be a great fit!&lt;/p&gt;

&lt;h2 id=&quot;actions&quot;&gt;Actions&lt;/h2&gt;

&lt;p&gt;Actions are just plain old objects. Our actions are going to follow the &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; model, which means they’ll have a &lt;code&gt;type&lt;/code&gt; property (generally a string, since that makes debugging and serialization easier) and (for non-error actions) a &lt;code&gt;payload&lt;/code&gt; property. There are a couple other properties, but those are for more advanced scenarios; this simple app will only need &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;payload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s define our “Add TODO” action! Well, it’ll need a &lt;code&gt;type&lt;/code&gt; first off. In real-world projects, it’s useful to define &lt;em&gt;all&lt;/em&gt; the action types in a single file. So, that’s what I’ll do here (in &lt;code&gt;actionTypes.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default {
    ADD_TODO: &#39;ADD_TODO&#39;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, the &lt;code&gt;payload&lt;/code&gt;. The data that travels as arguments of the &lt;code&gt;ADD_TODO&lt;/code&gt; action is the TODO item itself (a string). So the &lt;code&gt;payload&lt;/code&gt; can simply be a string in this case.&lt;/p&gt;

&lt;h2 id=&quot;action-creators&quot;&gt;Action Creators&lt;/h2&gt;

&lt;p&gt;Now that we have a good understanding of the structure of our action, we can implement the action creator. There’s a helper library called &lt;code&gt;redux-actions&lt;/code&gt; that minimizes the repetitive code. With that, we can define our &lt;code&gt;ADD_TODO&lt;/code&gt; action (in &lt;code&gt;actions/todoActions.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import ActionTypes from &#39;../actionTypes&#39;;
import { createAction } from &#39;redux-actions&#39;;

export default {
    add: createAction(ActionTypes.ADD_TODO)
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a bit dense… To clarify, we’re creating an object &lt;code&gt;TodoActions&lt;/code&gt; that has a method &lt;code&gt;add&lt;/code&gt; on it. This method takes a single parameter, which is the value of the action’s &lt;code&gt;payload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    add: createAction(ActionTypes.ADD_TODO)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is really the same as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    add: createAction(ActionTypes.ADD_TODO, todoItem =&amp;gt; todoItem)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is the same as this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    add: todoItem =&amp;gt; ({ type: ActionTypes.ADD_TODO, payload: todoItem })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Redux, an Action Creator is just a function that creates an action.&lt;/p&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;p&gt;The next step is to define some application state (our collection of todos), and define how the &lt;code&gt;ADD_TODO&lt;/code&gt; action affects that state. Presumably, it should just add the new item to our collection. The TODOs in our collection will need a couple properties: the actual TODO text (which I’ll call &lt;code&gt;text&lt;/code&gt;), and a flag indicating whether the TODO is completed (which I’ll call &lt;code&gt;completed&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This is where it gets a bit wild.&lt;/p&gt;

&lt;p&gt;Let’s define the &lt;a href=&quot;https://rackt.org/redux/docs/basics/Reducers.html&quot;&gt;reducer&lt;/a&gt; first, using the &lt;code&gt;react-actions&lt;/code&gt; helper method &lt;code&gt;handleActions&lt;/code&gt; (in &lt;code&gt;reducer.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { handleActions } from &#39;redux-actions&#39;;
import ActionTypes from &#39;./actionTypes&#39;;

export default handleActions({
    [ActionTypes.ADD_TODO]: (state, action) =&amp;gt; [...state, { completed: false, text: action.payload }]
}, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so let’s break this down. I’m calling &lt;code&gt;handleActions&lt;/code&gt; with two parameters: an object containing the actual reducer method, and an empty array &lt;code&gt;[]&lt;/code&gt;. That second parameter is just the &lt;em&gt;initial state&lt;/em&gt; of our todo collection - it’s easier to have it be an empty collection rather than &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s look at the object. I’m using the &lt;a href=&quot;http://exploringjs.com/es6/ch_oop-besides-classes.html#_computed-property-keys-1&quot;&gt;ES2015 computed property key syntax&lt;/a&gt; to define a function named &lt;code&gt;ADD_TODO&lt;/code&gt;, which is our actual reducer.&lt;/p&gt;

&lt;p&gt;Our reducer takes two parameters: the existing state and the incoming action, and returns the new state (that is, what the state becomes after applying the action).&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Important note: A reducer should &lt;strong&gt;never do anything else!&lt;/strong&gt; It’s a mistake to have a reducer do any I/O, or modify the existing state in-place. It should &lt;em&gt;only&lt;/em&gt; return the new state.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;For the &lt;code&gt;ADD_TODO&lt;/code&gt; action, we just need to add a new TODO to our collection, setting &lt;code&gt;completed&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; to the TODO text (which, for the &lt;code&gt;ADD_TODO&lt;/code&gt; action, is the action’s &lt;code&gt;payload&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(state, action) =&amp;gt; [...state, { completed: false, text: action.payload }]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m using the &lt;a href=&quot;http://exploringjs.com/es6/ch_parameter-handling.html#_spreading-into-arrays&quot;&gt;ES2015 array spread operator&lt;/a&gt; to easily create a &lt;em&gt;new&lt;/em&gt; array of TODOs that contains all the elements of the old array of TODOs, plus the new TODO that I create from the action.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;There are a few competing patterns for writing reducers. &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;ImmutableJS&lt;/a&gt; is one popular option for representing state, in spite of its serialization difficulties. However, in my projects so far, I just use regular JS objects, along with a helper plugin that double-checks my immutability in dev builds. I find this approach is sufficient for me.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-store&quot;&gt;The Store&lt;/h2&gt;

&lt;p&gt;So, we’ve got some basic application state, and we’ve got an action, and we’ve got a reducer that applies that action to our state. Good so far, but there’s a couple more pieces to hook up still.&lt;/p&gt;

&lt;p&gt;First off, we need to tell Redux to actually create our store. Recall from my drawing of how Redux works, that it will create the store using our reducer (the shaded parts are mostly done &lt;em&gt;for&lt;/em&gt; us):&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/assets/ReduxInReality.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Redux, our store is a singleton, so I’m going to just expose it as a global object from &lt;code&gt;store.jsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore } from &#39;redux&#39;;
import reducers from &#39;./reducers&#39;;

export default createStore(reducers);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite literally, I’m taking our reducer from &lt;code&gt;reducers.jsx&lt;/code&gt; and passing it to Redux’s &lt;code&gt;createStore&lt;/code&gt; method. Very straightforward.&lt;/p&gt;

&lt;p&gt;You might wonder why I bothered putting this in its own file. That will become clear in the next post, when I add debugging helpers in here.&lt;/p&gt;

&lt;h2 id=&quot;the-views&quot;&gt;The Views&lt;/h2&gt;

&lt;p&gt;The final piece to hook up is to provide our store to our view components. Right now, our view components don’t actually &lt;em&gt;use&lt;/em&gt; the application state (that is, they’re still just displaying the boilerplate HTML, not our actual collection of TODO items). However, they will start displaying the application state soon enough!&lt;/p&gt;

&lt;p&gt;We provide the store to our views using Redux’s &lt;code&gt;Provider&lt;/code&gt;. It looks like this (in &lt;code&gt;main.jsx&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { Provider } from &#39;react-redux&#39;;
import store from &#39;./store&#39;;

.. // function Main() hasn&#39;t changed

window.onload = () =&amp;gt; render(&amp;lt;Provider store={store}&amp;gt;&amp;lt;Main/&amp;gt;&amp;lt;/Provider&amp;gt;, document.getElementById(&#39;app&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it for now! We give the &lt;code&gt;Provider&lt;/code&gt; element our store, and it provides a way for our view components to get at it.&lt;/p&gt;

&lt;p&gt;Now we have an action (with a type and a creator), a reducer to apply that action to our state, a singleton store containing the application state, and the provider that allows our views to read the application state.&lt;/p&gt;

&lt;p&gt;The main thing missing, of course, is something to actually trigger the action. We’ll add that in soon, though!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux/tree/58b3a25c0166b7cc2d1909933744e6e290da82df&quot;&gt;Source code at this revision&lt;/a&gt; - &lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/StephenCleary/todomvc-react-redux/blob/58b3a25c0166b7cc2d1909933744e6e290da82df/index.html&quot;&gt;Live site at this revision&lt;/a&gt; (ignore the “startup flicker”; that’s just due to the way it’s hosted)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/StephenCleary/todomvc-react-redux&quot;&gt;Most current source code&lt;/a&gt; - &lt;a href=&quot;http://stephencleary.github.io/todomvc-react-redux/&quot;&gt;Most current live site&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://blog.stephencleary.com/2016/03/state.html</link>
        <guid isPermaLink="true">http://blog.stephencleary.com/2016/03/state.html</guid>
      </item>
    
  </channel>
</rss>
