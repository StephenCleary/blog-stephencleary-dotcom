<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Cleary (the blog)</title>
    <description>Stephen Cleary's blog: async/await, programming, language design, and other sundry computer science topics.</description>
    <link>https://blog.stephencleary.com/</link>
    <atom:link rel="self" type="application/rss+xml" href="https://blog.stephencleary.com/feed.xml" />
    <atom:link rel="search" type="application/opensearchdescription+xml" href="https://stephencleary.com/opensearch.xml" title="Cleary Search" />
    
      <item>
        <title>Asynchronous Messaging, Part 2: Durable Queues</title>
        <description>&lt;p&gt;Last time I concluded that the proper solution for request-extrinsic code is asynchronous messaging, which has two primary parts: a durable queue and a backend service. Today I’m going to discuss durable queues.&lt;/p&gt;

&lt;h2 id=&quot;the-definition-of-durable&quot;&gt;The Definition of “Durable”&lt;/h2&gt;

&lt;p&gt;When I suggest the asynchronous messaging solution, I try to use the term “durable” or “reliable”, and the emphasis is on the “durable” in “durable queue”. But what do “durable” or “reliable” really mean? There’s a range of meanings, from what I would consider “minimum viable” to “paranoid”.&lt;/p&gt;

&lt;p&gt;A durable queue must &lt;em&gt;at least&lt;/em&gt; write the new item to disk when it is placed into the queue. In other words, a durable queue is one that stores &lt;strong&gt;durable messages&lt;/strong&gt;. This is the minimum viable behavior for a durable queue: messages must survive shutdowns. Asynchronous messaging &lt;em&gt;must&lt;/em&gt; use a queue whose messages survive shutdown. This is good enough for many (most?) applications.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;more&lt;/em&gt; durable (or more reliable) queue would be one that writes to &lt;em&gt;multiple&lt;/em&gt; disks. This allows the messages to also survive a single disk failure. An even more durable queue would be one that writes to disks on multiple &lt;em&gt;servers&lt;/em&gt;; this allows the messages to survive a complete server failure. Finally, the most paranoid durable queues write to multiple servers in distinct geographical locations; this allows the message to survive the destruction of an entire data center. Most applications do not require that level of durability.&lt;/p&gt;

&lt;p&gt;But it’s important to note that the minimum acceptable reliability is writing to disk. In-memory queues are &lt;em&gt;not&lt;/em&gt; reliable enough for asynchronous messaging; this includes &lt;code&gt;Queue&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Channel&amp;lt;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;BlockingCollection&amp;lt;T&amp;gt;&lt;/code&gt;, the three most common in-memory queues. When I say they are not “reliable”, I don’t mean that they can’t be used as in-memory queues; they’re perfectly fine for that scenario. However, since their messages are not durable (i.e., will not survive shutdown), they do not provide sufficient reliability for use with asynchronous messaging.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-in-memory-queues&quot;&gt;The Problem with In-Memory Queues&lt;/h2&gt;

&lt;p&gt;I’m going to dive into this in a bit of detail, because this is a common point of confusion. I’ve defined “durable” as meaning at least “on disk”, and I’ve used the reasoning that “asynchronous messages must survive shutdown”. This section will go into more detail of the reasoning behind this restriction.&lt;/p&gt;

&lt;p&gt;I think it’s easiest to understand this by contemplating one question: “When is it safe for an HTTP service to shut down?”&lt;/p&gt;

&lt;p&gt;The HTTP protocol is ubiquitous; it’s used by all kinds of APIs and web services. And there’s a seemingly endless number of conventions and standards built on top of HTTP. With all these details and abstractions, sometimes one critical truth is forgotten: &lt;strong&gt;the HTTP protocol is a request/response protocol&lt;/strong&gt;. In other words, for every request there is exactly one response. From the HTTP service’s perspective, a request arrives, and then some time later the response is sent and that request is completed.&lt;/p&gt;

&lt;p&gt;Back to that question: “When is it safe for an HTTP service to shut down?” The easiest possible answer is “when a response for each request has been sent.” Or to word the same idea a different way: “when there are no more outstanding requests.”&lt;/p&gt;

&lt;p&gt;This is such a natural answer to the question that &lt;em&gt;every&lt;/em&gt; HTTP server has this as its default answer. It doesn’t matter if you’re on ASP.NET, Node.js, Ruby on Rails, … &lt;em&gt;Every&lt;/em&gt; HTTP server framework keeps track of how many outstanding requests it has, and considers itself “safe to shut down” when that number reaches zero. This also holds true for load balancers and proxies: “When is it safe to remove this HTTP server from my list?” - “When it has no more requests waiting for responses.” It doesn’t matter if you’re using nginx, HAProxy, Kubernetes’ apiserver proxy, … &lt;em&gt;Every&lt;/em&gt; HTTP proxy application keeps track of the number of outstanding requests, and considers HTTP servers “done” when they have sent out responses for all of their requests.&lt;/p&gt;

&lt;p&gt;This is why request-extrinsic code is dangerous: all of this default behavior is suddenly wrong. The HTTP service says it’s safe to shut down when it’s not safe to shut down; all the proxies and load balancers say it’s safe to take that machine out of rotation when it’s not.&lt;/p&gt;

&lt;h3 id=&quot;shutdowns-are-normal&quot;&gt;Shutdowns Are Normal&lt;/h3&gt;

&lt;p&gt;Often developers react to this by trying to force alternative solutions. All HTTP server frameworks answer “When is it safe to shut down?” with “When there are no more outstanding requests” &lt;em&gt;by default&lt;/em&gt;, but many of them allow overriding that default so the application itself can answer “It’s only safe to shut down when I say it’s safe to shut down.”&lt;/p&gt;

&lt;p&gt;One of the problems with trying to force that alternative solution is that it only changes the answer at the HTTP service level; proxies and load balancers &lt;em&gt;also&lt;/em&gt; need to have their default logic changed (assuming that changing the default is even possible). Even if you get that working, there’s an unending maintenance problem: your HTTP server farm now handles shutdowns &lt;em&gt;completely differently&lt;/em&gt; than all other HTTP server farms.&lt;/p&gt;

&lt;p&gt;When developers begin down this path, it is usually because the developer wants to keep their HTTP application running indefinitely. And this is a major misunderstanding: in reality, systems are more resilient if servers do &lt;em&gt;not&lt;/em&gt; run indefinitely. In fact, shutdowns are &lt;em&gt;normal&lt;/em&gt;, and we need to accept shutdowns as a normal part of life.&lt;/p&gt;

&lt;p&gt;One example is rolling updates. When a new version of an HTTP application is developed, it needs to replace the old versions of that application. The normal way to do this is via rolling updates: for each server, the upstream proxy will stop forwarding new requests, wait until the service has no more outstanding requests, shut it down, install the update, start it up, and start forwarding new requests. Shutdowns are necessary to perform rolling updates.&lt;/p&gt;

&lt;p&gt;Another example is applying operating system or runtime patches. This is similar to rolling updates, but in this case it is the lower layers that is being updated, so it’s machine-wide. The same steps apply, though: stop forwarding new requests to all services on that machine, wait until the machine has no outstanding requests, shut down all the services, install the patches (rebooting if necessary), start up all the services, and start forwarding new requests. This kind of shutdown occurs regularly, even for HTTP services that are not in active development.&lt;/p&gt;

&lt;p&gt;A final example is that some frameworks and host processes just do periodic application restarts just to keep things clean. For example, Apache’s &lt;code&gt;MaxConnectionsPerChild&lt;/code&gt; or IIS’s &lt;code&gt;periodicRestart&lt;/code&gt; can recycle child processes periodically. This is primarily useful for managing memory leaks in applications, frameworks, and/or libraries. Apache no longer recycles by default, but IIS still does. Again, this is based on the number of outstanding requests: the server will recycle its child application when it has no outstanding requests.&lt;/p&gt;

&lt;p&gt;The reasonable conclusion is that &lt;em&gt;shutdowns are normal&lt;/em&gt;. All HTTP applications must work correctly when shutdowns occur. Corollary: All software that assumes it will never shut down is inherently buggy.&lt;/p&gt;

&lt;p&gt;Finally, we return to what “durable” means. In-memory queues cannot survive shutdowns. Therefore, “minimum acceptable reliability” means that the queue of work survives shutdowns, which are normal and common.&lt;/p&gt;

&lt;h2 id=&quot;examples-of-durable-queues&quot;&gt;Examples of Durable Queues&lt;/h2&gt;

&lt;p&gt;I tend to prefer cloud queues whenever possible, because the cloud provider manages them, they scale really well, and they give you knobs for controlling how paranoid you want your durability to be.&lt;/p&gt;

&lt;p&gt;For this reason, my top go-tos for durable queues are &lt;a href=&quot;https://azure.microsoft.com/en-us/services/storage/queues/&quot;&gt;Azure Storage Queue&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/sqs/&quot;&gt;Amazon Simple Queue Service (SQS)&lt;/a&gt;, and &lt;a href=&quot;https://cloud.google.com/tasks&quot;&gt;Google Cloud Tasks&lt;/a&gt;. I’m most familiar with Azure’s queueing, though I have also used Amazon’s in production systems. All cloud queueing systems provide durable queues that can scale out automatically.&lt;/p&gt;

&lt;p&gt;As much as I like cloud solutions, on-premises queueing systems are perfectly viable. It’s not possible to get the same scaling capabilities as a cloud solution, but you can get lower latencies. The most common on-premises durable queues these days are &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; and &lt;a href=&quot;https://kafka.apache.org/documentation/&quot;&gt;Kafka&lt;/a&gt;. I’ve also used &lt;a href=&quot;https://www.ibm.com/products/mq&quot;&gt;IBM MQ&lt;/a&gt; (called WebSphere MQ at the time). For older Windows systems, &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/desktop/msmq/ms711472(v=vs.85)&quot;&gt;Microsoft Message Queueing (MSMQ)&lt;/a&gt; was common, though that is no longer recommended these days. Note that some on-premises queueing solutions do not use durable messages by default, so some configuration is necessary to make them actually durable (I’m looking at you, &lt;a href=&quot;https://www.rabbitmq.com/queues.html#durability&quot;&gt;RabbitMQ&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are other solutions for both cloud and on-premises. The ones mentioned here are just ones I’ve had experience with, and which appear to be the most common.&lt;/p&gt;

&lt;h3 id=&quot;database-as-a-durable-queue&quot;&gt;Database As a Durable Queue&lt;/h3&gt;

&lt;p&gt;One other solution that is sometimes used is an actual database. Usually, this needs to be a database that guarantees ACID. Some NoSql databases can also be used as durable queues, as long as they actually have durable writes; but be aware that some NoSql databases can lose writes, in which case they do not qualify as durable queues. In my experience, most databases used as durable queues are fully ACID (i.e., transactional).&lt;/p&gt;

&lt;p&gt;Using an ACID database as a durable queue allows you to use the Outbox Pattern. When a service wants to publish a message &lt;em&gt;if and only if&lt;/em&gt; a particular database transaction succeeds, then it writes that message to the database &lt;em&gt;as part of that transaction&lt;/em&gt;. It can’t publish the message before doing the database update, because the database update may fail; and it can’t publish the message after doing the database update, because if there’s some problem reaching the durable queue then the message wouldn’t be published. So, by using the database itself as a durable queue, then the service guarantees that the message will be published if and only if the database update takes place.&lt;/p&gt;

&lt;p&gt;The Outbox Pattern gets its name because there’s usually a separate “outbox” table that just holds messages that are published. It’s possible to have the queue consumer read the outbox table directly, but a more common solution is to have the outbox table just act as temporary storage for messages on their way to another durable queue - usually one that is used by the rest of the application, e.g., a cloud queue or on-premises durable queue. In that case, the publishing service (or another service) has a polling job that reads the messages from the outbox table, sends then to the durable queue, and then deletes those messages from the outbox table. This provides an at-least-once delivery of the messages stored in the outbox table.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2021/01/asynchronous-messaging-2-durable-queues.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2021/01/asynchronous-messaging-2-durable-queues.html</guid>
      </item>
    
      <item>
        <title>Asynchronous Messaging, Part 1: Basic Distributed Architecture</title>
        <description>&lt;p&gt;This is the first of a short series of blog posts on Asynchronous Messaging. This is not a new problem at all, but it’s something I’ve observed becoming more and more common over the last few years. Also, this is the kind of a problem that is difficult to solve quickly - or even &lt;em&gt;describe&lt;/em&gt; the solution quickly, so I think a blog (series) is appropriate.&lt;/p&gt;

&lt;p&gt;A bit of a side note, here: I primarily develop in the .NET stack these days (for the backend, at least). So some of my details will discuss ASP.NET-specific technologies and solutions. However, the general problem and solution is applicable to &lt;strong&gt;all&lt;/strong&gt; technology stacks. I’ll call out the ASP.NET-specific parts as I cover them.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;The problem usually manifests in a desire to &lt;strong&gt;return early&lt;/strong&gt; from an HTTP request. So, once the request has been received, the developer wants the server-side API application to &lt;strong&gt;not wait&lt;/strong&gt; for the processing to complete, and instead send the response back immediately.&lt;/p&gt;

&lt;p&gt;A common term for this is &lt;strong&gt;fire and forget&lt;/strong&gt;, in the sense that the developer wants to start (“fire”) some background work but then not wait for it to complete (“forget”).&lt;/p&gt;

&lt;p&gt;The goal is to have the HTTP call just &lt;strong&gt;start a workflow&lt;/strong&gt;. This workflow then runs on the server side without further input from the client application. It’s a form of &lt;strong&gt;long-running operation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I’ve decided to call this “request-extrinsic code”, because it sounds fancy. “Request-extrinsic” means that it’s code that runs &lt;em&gt;outside&lt;/em&gt; of a request. This is fundamentally dangerous, which is why the solution is more complex than at first seems necessary.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;ASP.NET-specific:&lt;/strong&gt; In ASP.NET pre-Core, there is an exception that developers may trigger with the message “An asynchronous module or handler completed while an asynchronous operation was still pending.” This is a “safety net” exception that indicates there’s some request-extrinsic code (which is dangerous). Unfortunately, ASP.NET Core does not have this “safety net” check, even though request-extrinsic code is just as bad on ASP.NET Core as it was on ASP.NET pre-Core.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The proper solution for request-extrinsic code is &lt;strong&gt;asynchronous messaging&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;My blog often deals with “asynchronous” in the sense of the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords. This blog series is on &lt;em&gt;asynchronous messaging&lt;/em&gt;, which is a completely different thing. &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; deal with asynchrony within the scope of a single process; asynchronous messaging deals with asynchrony across two processes (client and server). The two uses of “asynchronous” are similar at the 10,000 foot view, but completely different on the ground.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Asynchronous messaging has two parts (with an optional third part):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;em&gt;durable queue&lt;/em&gt;. By “durable”, I mean a queue that at least flushes to disk on writes. In other words, the &lt;em&gt;messages&lt;/em&gt; sent to the queue are durable. An in-memory &lt;code&gt;Queue&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;BlockingCollection&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;ChannelWriter&amp;lt;T&amp;gt;&lt;/code&gt; is not a “durable queue” by this definition.&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;backend service&lt;/em&gt;. This is an independent service that reads from that durable queue and processes the items in it (i.e., executes the long-running operation).&lt;/li&gt;
  &lt;li&gt;(optional) Some method to &lt;em&gt;retrieve results&lt;/em&gt;. If the client needs to know the outcome of the long-running operation, then this is the part that provides that outcome to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One common example is sending emails. If an API wants to send an email but does not want to wait for the email to be sent before returning to the client, then the API should add a message to the durable queue describing the email to be sent and then return. Since this is a durable queue, the queue message (containing the email details) is flushed to disk before the HTTP response is sent to the client. Then a separate backend service reading from that queue retrieves the queue message and sends the actual email.&lt;/p&gt;

&lt;p&gt;Another common example is database writes. Sometimes there are situations where the API knows what to write to the database but doesn’t want to make the client wait for it. In that case, the API should write the information to a durable queue and then return to the client. Then a separate backend service reading from that queue retrieves the information and performs the actual database update.&lt;/p&gt;

&lt;p&gt;Retrieving results is often not necessary. E.g., the email itself usually &lt;em&gt;is&lt;/em&gt; the result of sending an email, and database writes will show up eventually as the user navigates/refreshes. But sometimes you do need the client to be notified of results; this is possible either using polling or a proactive notification using a messaging technology like WebSockets.&lt;/p&gt;

&lt;p&gt;In the rest of this series, I’ll dive more into each parts of the solution, and discuss specific approaches in more detail. But the description above is usually all that’s needed.&lt;/p&gt;

&lt;p&gt;The proper solution for request-extrinsic code is &lt;strong&gt;asynchronous messaging&lt;/strong&gt;, which is accomplished by adding a &lt;strong&gt;durable queue&lt;/strong&gt; coupled with a &lt;strong&gt;backend service&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2021/01/asynchronous-messaging-1-basic-distributed-architecture.html</guid>
      </item>
    
      <item>
        <title>Win32 Service Gotcha: Recovery Actions</title>
        <description>&lt;h2 id=&quot;win32-services-and-recovery-actions&quot;&gt;Win32 Services and Recovery Actions&lt;/h2&gt;

&lt;p&gt;This blog post doesn’t have to do with &lt;code&gt;BackgroundService&lt;/code&gt; specifically, but it is an issue that can come up with .NET Core workers that are run as Win32 Services. In some ways, this blog post has more to do with &lt;a href=&quot;/2013/10/managed-services-roundup.html&quot;&gt;managed services&lt;/a&gt;, but I decided to put it with the &lt;code&gt;BackgroundService&lt;/code&gt; series because it is a problem with &lt;code&gt;BackgroundService&lt;/code&gt;s run as Win32 services.&lt;/p&gt;

&lt;h2 id=&quot;background-recovery-actions&quot;&gt;Background: Recovery Actions&lt;/h2&gt;

&lt;p&gt;The Win32 Service Control Manager (SCM) is responsible for starting and stopping services on Windows machines. It’s also responsible for restarting Win32 services when they fail:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/win32-service-recovery.png&quot;&gt;&lt;img src=&quot;/assets/win32-service-recovery.png&quot; alt=&quot;Win32 Service Recovery Action Settings&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, it can be a bit confusing to think about what “fail” actually &lt;em&gt;means&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;background-win32-service-failure&quot;&gt;Background: Win32 Service Failure&lt;/h2&gt;

&lt;p&gt;It’s pretty clear that if a Win32 application crashes, that indicates “failure”. Normally, Win32 services communicate with the SCM and let it know what their state is. The most common states are “stopped” and “started”, along with transitional states like “stopping” and “starting”. So, if a Win32 application exits (or crashes) without telling the SCM it is “stopped”, then the SCM treats that as a failure.&lt;/p&gt;

&lt;p&gt;What’s much less clear is how exit codes are handled.&lt;/p&gt;

&lt;p&gt;The first thing to keep in mind is that each Win32 service has its own exit code. A single Win32 process can contain &lt;em&gt;multiple&lt;/em&gt; different Win32 services within that single process, and each of those Win32 services has its &lt;em&gt;own&lt;/em&gt; exit code. As far as I can tell, the exit code of the process itself is completely ignored.&lt;/p&gt;

&lt;p&gt;What’s more, if the Win32 service does report that it is “stopped” to the SCM, the SCM will ignore the Win32 service exit code, too! The SCM assumes that if the service has reported it is “stopped”, then the service has stopped successfully, and there is no need to restart the service.&lt;/p&gt;

&lt;p&gt;This means that if you have a Win32 service and it reports a non-zero exit code (either for the process exit code or the Win32 service exit code), and if that Win32 service exits cleanly after setting its non-zero exit code, then that exit code will be ignored and the service will not be restarted.&lt;/p&gt;

&lt;h2 id=&quot;tip-honoring-win32-service-exit-codes&quot;&gt;Tip: Honoring Win32 Service Exit Codes&lt;/h2&gt;

&lt;p&gt;There is &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winsvc/ns-winsvc-service_failure_actions_flag&quot;&gt;a flag&lt;/a&gt; you can set that will cause SCM to honor the Win32 service exit code, treating a non-zero code as a “failure” and running its recovery actions. You can turn this flag on at the command line as such:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sc failureflag &amp;quot;My Service&amp;quot; 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Setting that flag checks this checkbox, which has the rather difficult-to-understand wording of “Enable actions for stops with errors.”:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/win32-service-recovery-highlight.png&quot;&gt;&lt;img src=&quot;/assets/win32-service-recovery-highlight.png&quot; alt=&quot;Win32 Service Recovery Action Settings&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;win32-service-exit-codes-and-servicebase&quot;&gt;Win32 Service Exit Codes and ServiceBase&lt;/h2&gt;

&lt;p&gt;For .NET applications, the &lt;code&gt;Environment.ExitCode&lt;/code&gt; property manages the exit code for the &lt;em&gt;process&lt;/em&gt;. As far as I know, this value is always ignored when the process is run as a service. The Win32 service exit code is managed by the &lt;code&gt;ServiceBase.ExitCode&lt;/code&gt; property. Remember, there can be multiple Win32 services in a single process.&lt;/p&gt;

&lt;h2 id=&quot;win32-service-exit-codes-and-windowsservicelifetime&quot;&gt;Win32 Service Exit Codes and WindowsServiceLifetime&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/windows-service&quot;&gt;.NET Core applications that are run as Win32 services&lt;/a&gt;, it’s normal to call &lt;code&gt;IHostBuilder.UseWindowsService()&lt;/code&gt;, which installs a &lt;code&gt;WindowsServiceLifetime&lt;/code&gt; as the &lt;code&gt;IHostLifetime&lt;/code&gt;, instead of the default &lt;code&gt;ConsoleLifetime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WindowsServiceLifetime&lt;/code&gt; lets the SCM control the starting and stopping of the .NET Core application. It &lt;a href=&quot;https://github.com/dotnet/extensions/blob/4becf241089932aa1f1e7f3ab4155a437fd3dba1/src/Hosting/WindowsServices/src/WindowsServiceLifetime.cs#L14&quot;&gt;derives from &lt;code&gt;ServiceBase&lt;/code&gt;&lt;/a&gt;. Since &lt;a href=&quot;https://github.com/aspnet/Hosting/issues/1401&quot;&gt;multiple &lt;code&gt;IHostLifetime&lt;/code&gt; instances aren’t supported&lt;/a&gt;, this means that .NET Core workers do not naturally support multiple Win32 services in a single process. It may be possible to support that by creating a new type that derives from &lt;code&gt;ServiceBase&lt;/code&gt; and &lt;code&gt;IHostedService&lt;/code&gt;, along with some kind of coordinating &lt;code&gt;IHostLifetime&lt;/code&gt; implementation, but I’m not aware of anyone doing that yet. For now, all the .NET Core Win32 services I know of use &lt;code&gt;WindowsServiceLifetime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One important note is that &lt;code&gt;WindowsServiceLifetime&lt;/code&gt; stops cleanly. If the .NET Core application is shutdown, then &lt;code&gt;WindowsServiceLifetime&lt;/code&gt; reports to the SCM that the service is “stopped”, and this means that the SCM will not restart the service.&lt;/p&gt;

&lt;p&gt;You can write code that will set the Win32 service exit code on failure by accessing &lt;code&gt;ServiceBase.ExitCode&lt;/code&gt; as such:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hostLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHostLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_hostLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_hostLifetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceBase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, as noted above, you have to also set the &lt;code&gt;failureflag&lt;/code&gt; on the service, or else the SCM will ignore the non-zero exit code.&lt;/p&gt;

&lt;p&gt;If desired, you can write a custom &lt;code&gt;WindowsServiceLifetime&lt;/code&gt; that will treat non-zero &lt;code&gt;Environment.ExitCode&lt;/code&gt; values as non-zero Win32 service exit codes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyWindowsServiceLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowsServiceLifetime&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyWindowsServiceLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILoggerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HostOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Take the process ExitCode if there isn&amp;#39;t one for our Win32 service&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can be installed by adding this service (&lt;code&gt;services.AddSingleton&amp;lt;IHostLifetime, MyWindowsServiceLifetime&amp;gt;()&lt;/code&gt;) after calling &lt;code&gt;UseWindowsService&lt;/code&gt;; the .NET Core dependency injection will just take the last registered &lt;code&gt;IHostLifetime&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;crashing-windowsservicelifetime&quot;&gt;Crashing WindowsServiceLifetime&lt;/h2&gt;

&lt;p&gt;It is also possible to create a custom derived &lt;code&gt;WindowsServiceLifetime&lt;/code&gt; that can detect application failures and will prevent &lt;code&gt;ServiceBase&lt;/code&gt; from sending the “stopped” message to the SCM. That way, your service will be restarted regardless of the &lt;code&gt;failureflag&lt;/code&gt; setting, because any failures will cause the process to crash.&lt;/p&gt;

&lt;p&gt;We don’t want to crash the process immediately; instead, we want to shut down the .NET Core host and then terminate, so that the SCM knows the process failed. The &lt;code&gt;WindowsServiceLifetime&lt;/code&gt; type has &lt;a href=&quot;https://github.com/dotnet/extensions/blob/4becf241089932aa1f1e7f3ab4155a437fd3dba1/src/Hosting/WindowsServices/src/WindowsServiceLifetime.cs#L105&quot;&gt;some similar behavior&lt;/a&gt;: if the SCM requests the service to stop, then it will shut down the .NET Core host and wait for it to stop. We can do the same thing in our custom lifetime type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyWindowsServiceLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WindowsServiceLifetime&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ManualResetEventSlim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_shutdownComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CancellationTokenRegistration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_applicationStoppedRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyWindowsServiceLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILoggerFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HostOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loggerFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_shutdownComplete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ManualResetEventSlim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_applicationStoppedRegistration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationStopped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_shutdownComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Take the process ExitCode if there isn&amp;#39;t one for our Win32 service&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Wait for application to shut down.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StopApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_shutdownComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Terminate app. Do not call base.OnStop().&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If we&amp;#39;re exiting normally, just let WindowsServiceLifetime do its job.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnStop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disposing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_shutdownComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_applicationStoppedRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disposing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This kind of &lt;code&gt;MyWindowsServiceLifetime&lt;/code&gt; implementation will work whether or not you set the &lt;code&gt;failureflag&lt;/code&gt; on your service.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/06/servicebase-gotcha-recovery-actions.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/06/servicebase-gotcha-recovery-actions.html</guid>
      </item>
    
      <item>
        <title>A New Pattern for Exception Logging</title>
        <description>&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Your code should log exceptions from within an exception filter, not a &lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt;

&lt;h3 id=&quot;quick-examples&quot;&gt;Quick Examples&lt;/h3&gt;

&lt;p&gt;The old pattern of “log-and-propagate” looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-propagate, old pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logging should be moved into an exception filter like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-propagate, new pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly, the old pattern of “log-and-handle” looks something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-handle, old pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or some other handling code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logging should be moved into an exception filter like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Log-and-handle, old pattern:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or some other handling code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both of these examples assume the presence of a couple simple utility methods:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Use when you want to handle the exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Use when you want to propagate the exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;

&lt;p&gt;The remainder of this blog post goes into the “why” behind the new pattern.&lt;/p&gt;

&lt;h2 id=&quot;semantic-logging--structured-logging&quot;&gt;Semantic Logging / Structured Logging&lt;/h2&gt;

&lt;p&gt;Long gone are the days of text file logging; modern logging systems support rich, contextual logs. This means you can add data fields to your log messages, and then use those additional pieces of data when debugging an issue. It’s very satisfying to be able to filter by an HTTP status code range, or take the top three servers where user &lt;code&gt;Steve&lt;/code&gt; had a &lt;code&gt;FileNotFound&lt;/code&gt; exception.&lt;/p&gt;

&lt;p&gt;Structured logging is so important that every modern logging system supports it. For example, .NET Core style logging uses &lt;a href=&quot;https://messagetemplates.org/&quot;&gt;message templates&lt;/a&gt;, which looks something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Result: {result}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above will create a log message like &lt;code&gt;&quot;Result: 4&quot;&lt;/code&gt;. What’s not immediately obvious is that the log message &lt;em&gt;also&lt;/em&gt; has structured data attached to it: a data field called &lt;code&gt;result&lt;/code&gt; has the (integer) value &lt;code&gt;4&lt;/code&gt;. When this is consumed by a logging provider that understands structured data, the &lt;code&gt;result&lt;/code&gt; field is stored &lt;em&gt;along with&lt;/em&gt; the log message, and can be used for searching or filtering.&lt;/p&gt;

&lt;p&gt;If you would like to follow along at home, create an ASP.NET Worker Service (which is really just a Console app with ASP.NET-style logging and dependency injection all set up for you). Then replace &lt;code&gt;Worker.ExecuteAsync&lt;/code&gt; with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you run it, you should see this in the output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;info: MyApp.Worker[0]
      Result: 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;logging-scopes&quot;&gt;Logging Scopes&lt;/h3&gt;

&lt;p&gt;So far, so good, and hopefully that’s nothing new.&lt;/p&gt;

&lt;p&gt;In addition to adding structured data to a single log message, most modern logging frameworks also support logging &lt;em&gt;scopes&lt;/em&gt; of structured data. So you can create a logging scope that attaches structured data to &lt;em&gt;every&lt;/em&gt; log message within that scope:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeginScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Dividing {numerator} by {denominator}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Result: {result}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when the &lt;code&gt;Result: 4&lt;/code&gt; message is logged, it will capture additional structured data items: &lt;code&gt;result&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;numerator&lt;/code&gt; is &lt;code&gt;13&lt;/code&gt;, and &lt;code&gt;denominator&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;. It should be clear that strategically placing data items in logging scopes can greatly assist debugging. Any time you’ve stared at an error message or unexpected result and wondered “what was the input that caused this?”, that’s the perfect place to add a logging scope.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;i class=&quot;fa fa-hand-o-right fa-2x pull-left&quot;&gt;&lt;/i&gt;&lt;/p&gt;

  &lt;p&gt;Tip: The Console logger ignores logging scopes by default; they have to be manually enabled.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you’re following along at home, enable logging scopes for the Console logger by updating &lt;code&gt;CreateHostBuilder&lt;/code&gt; in your &lt;code&gt;Program.cs&lt;/code&gt;, adding a call to &lt;code&gt;ConfigureLogging&lt;/code&gt; that removes the existing Console logger and adds a new one that sets &lt;code&gt;IncludeScopes&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (begin code changes)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureLogging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClearProviders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddConsole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IncludeScopes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (end code changes)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddHostedService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when you run the code, you’ll see the logging scope written to the Console as a part of the information message:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;info: MyApp.Worker[0]
      =&amp;gt; Dividing 13 by 3
      Result: 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the logs have a clear context.&lt;/p&gt;

&lt;h2 id=&quot;exception-logging&quot;&gt;Exception Logging&lt;/h2&gt;

&lt;p&gt;So, let’s talk about logging exceptions. Most methods do not log their own exceptions; any exceptions are propagated out of the method, possibly through many other methods, and eventually logged at a much higher level in the code.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that the logging scope is lost once the stack is unwound.&lt;/p&gt;

&lt;p&gt;Here’s the kind of situation that causes this problem. &lt;code&gt;Worker.ExecuteAsync&lt;/code&gt; is going to wrap its call in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; and log the exception. This is a very common pattern in most code bases today:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The problem, as stated above, is that the logging scope is already gone by the time &lt;code&gt;LogError&lt;/code&gt; is called. So our logging output looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;fail: MyApp.Worker[0]
      Unexpected error.
System.DivideByZeroException: Attempted to divide by zero.
   at MyApp.Worker.Divide(Int32 numerator, Int32 denominator) in ...
   at MyApp.Worker.&amp;lt;ExecuteAsync&amp;gt;b__2_0() in ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The logs have the exception details, including the stack trace, but they do not have the structured data from the logging scope. When sent to a logging backend, there is no &lt;code&gt;numerator&lt;/code&gt; or &lt;code&gt;denominator&lt;/code&gt; data that is attached to this log message. Losing that logging scope data is a problem.&lt;/p&gt;

&lt;p&gt;To fix this, we first need a minor segue into how exceptions work.&lt;/p&gt;

&lt;h2 id=&quot;how-exceptions-work&quot;&gt;How Exceptions Work&lt;/h2&gt;

&lt;p&gt;When an exception is thrown, the runtime will search the stack for a matching handler. So the runtime walks up the stack looking at each &lt;code&gt;catch&lt;/code&gt; block and evaluating whether it matches the exception (e.g., the exception type matches). When a matching handler is found, then the stack is unwound to that point and the &lt;code&gt;catch&lt;/code&gt; block is executed.&lt;/p&gt;

&lt;p&gt;The important part of this behavior is that there are two distinct steps: &lt;em&gt;find, then unwind&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exception-filters&quot;&gt;Exception Filters&lt;/h2&gt;

&lt;p&gt;Exception filters have been around for a very long time; .NET 1.0 (2002) supported them, and &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/debug/structured-exception-handling&quot;&gt;Structured Exception Handling&lt;/a&gt; existed even way before that. C# only got exception filter capabilities in C# 6.0 (2015), and so far they haven’t really become common in most codebases. That may change now, though.&lt;/p&gt;

&lt;p&gt;Exception filters allow you to hook into the “find” part of “find, then unwind”. By providing an exception filter, you can control whether a specific &lt;code&gt;catch&lt;/code&gt; block matches the exception.&lt;/p&gt;

&lt;p&gt;The key thing to keep in mind about exception filters is that because they hook into the “find” part of the process, this means &lt;em&gt;they run where the exception is thrown, not where the exception is caught&lt;/em&gt;. This is a little mind-bendy at first, but it makes sense: exception filters are run &lt;em&gt;before&lt;/em&gt; the stack is unwound.&lt;/p&gt;

&lt;h2 id=&quot;solution-move-exception-logging-into-an-exception-filter&quot;&gt;Solution: Move Exception Logging into an Exception Filter&lt;/h2&gt;

&lt;p&gt;So, now we have the pieces necessary for fixing the problem. We just need to log exceptions from within an exception filter. Since the exception filter runs where there exception was thrown, the logging data scope is still present. The stack hasn’t been unwound yet, so all that rich semantic data is still available.&lt;/p&gt;

&lt;p&gt;There’s just one quirk: the exception filter must return a boolean value, indicating whether or not the &lt;code&gt;catch&lt;/code&gt; block matches. In our case, the logging is just a side effect; logging the exception has no effect on whether the &lt;code&gt;catch&lt;/code&gt; block matches. So, I use a type like this that just provides methods to “execute this side effect and then return a boolean”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExceptionFilterUtility&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you do a &lt;code&gt;using static ExceptionFilterUtility;&lt;/code&gt;, you can use it like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected error.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And there you go! Our error log message now has the full data context of where the exception was &lt;em&gt;thrown&lt;/em&gt;, instead of where it was &lt;em&gt;caught&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;fail: MyApp.Worker[0]
      =&amp;gt; Dividing 13 by 0
      Unexpected error.
System.DivideByZeroException: Attempted to divide by zero.
   at MyApp.Worker.Divide(Int32 numerator, Int32 denominator) in ...
   at MyApp.Worker.&amp;lt;ExecuteAsync&amp;gt;b__2_0() in ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The full data logging scope is now preserved.&lt;/p&gt;

&lt;h2 id=&quot;true-or-false&quot;&gt;True or False?&lt;/h2&gt;

&lt;p&gt;I’ve defined two helper methods - &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; - to apply side effects and then return a boolean. I recommend using &lt;code&gt;False&lt;/code&gt; if the body of your &lt;code&gt;catch&lt;/code&gt; is nothing more than &lt;code&gt;throw;&lt;/code&gt;. When an exception is thrown, the exception filter is run and the exception is logged, and then the &lt;code&gt;false&lt;/code&gt; result means that the exception filter does not match the exception, and the runtime continues searching for a matching handler.&lt;/p&gt;

&lt;p&gt;Another scenario is if the &lt;code&gt;catch&lt;/code&gt; block actually handles the exception. Say, if we know there is an exception that is safe to ignore. In that case, use the &lt;code&gt;True&lt;/code&gt; helper method so that the exception matches the &lt;code&gt;catch&lt;/code&gt; block and the stack is unwound and the exception is handled there.&lt;/p&gt;

&lt;p&gt;Both helpers are useful in different scenarios.&lt;/p&gt;

&lt;h2 id=&quot;caveat&quot;&gt;Caveat&lt;/h2&gt;

&lt;p&gt;The solution here unfortunately does not work well with &lt;code&gt;async&lt;/code&gt; code. This is because &lt;code&gt;async&lt;/code&gt; will cause exceptions to be caught and then re-thrown at the point of the &lt;code&gt;await&lt;/code&gt;. So, the exception filter runs at the point of the &lt;code&gt;await&lt;/code&gt; instead of where the exception was &lt;em&gt;originally&lt;/em&gt; thrown.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Modern exception-logging code should do its logging from within an exception filter. As logging data scopes become more and more common, this pattern will enable much more helpful logs for your system.&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/06/a-new-pattern-for-exception-logging.html</guid>
      </item>
    
      <item>
        <title>BackgroundService Gotcha: Application Lifetime</title>
        <description>&lt;h2 id=&quot;backgroundservice-gotcha-service-lifetime-is-independent-from-application-lifetime&quot;&gt;BackgroundService Gotcha: Service Lifetime is Independent from Application Lifetime&lt;/h2&gt;

&lt;p&gt;OK, I guess I &lt;em&gt;do&lt;/em&gt; have a series on my hands.&lt;/p&gt;

&lt;p&gt;This one isn’t so much a “gotcha” as it is a common mistake. Hosted services (including &lt;code&gt;BackgroundService&lt;/code&gt;s) have a lifetime that is &lt;em&gt;independent&lt;/em&gt; from their host. This means that if a &lt;code&gt;BackgroundService&lt;/code&gt; exits, its host will not exit. And a host will happily continue running even if &lt;em&gt;all&lt;/em&gt; its services have exited.&lt;/p&gt;

&lt;p&gt;This mistake is most common when writing a kind of “subscriber” or “backend processor” application - something that listens to a queue and processes messages on that queue. For these kinds of applications, it’s common to have a .NET Core host with only a single hosted service, and the service has a loop which processes messages from the queue. This is essentially the “ASP.NET Core Worker Process” template project in Visual Studio. When writing this kind of application, it’s easy to forget about the host, and treat the hosted service &lt;em&gt;as&lt;/em&gt; the application. But when there are no more messages (or some other shutdown signal is delivered to the hosted service) and the service exits, then the host application stays around.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;This behavior is by design. If a &lt;code&gt;BackgroundService&lt;/code&gt; implementation wants the application to exit when it stops (or &lt;a href=&quot;/2020/05/backgroundservice-gotcha-silent-failure.html&quot;&gt;has a fatal error&lt;/a&gt;), it needs to do that itself by injecting an &lt;code&gt;IHostApplicationLifetime&lt;/code&gt; and calling &lt;code&gt;StopApplication&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StopApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I recommend also &lt;a href=&quot;/2020/05/backgroundservice-gotcha-startup.html&quot;&gt;using &lt;code&gt;Task.Run&lt;/code&gt; to avoid startup problems&lt;/a&gt; and &lt;a href=&quot;/2020/05/backgroundservice-gotcha-silent-failure.html&quot;&gt;logging all exceptions in this top-level loop&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fatal error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_hostApplicationLifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StopApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, this is a fair amount of boilerplate code to go into each background service. Production code bases should probably define a “critical background service” base type that handles all the wrapper code so background services only need to define the &lt;code&gt;// Implementation&lt;/code&gt; part.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/06/backgroundservice-gotcha-application-lifetime.html</guid>
      </item>
    
      <item>
        <title>BackgroundService Gotcha: Silent Failures</title>
        <description>&lt;h2 id=&quot;backgroundservice-gotcha-silent-failures&quot;&gt;BackgroundService Gotcha: Silent Failures&lt;/h2&gt;

&lt;p&gt;I know &lt;a href=&quot;/2020/05/backgroundservice-gotcha-startup.html&quot;&gt;last time&lt;/a&gt; I talked about &lt;code&gt;BackgroundService&lt;/code&gt;… I don’t want to make this a series or anything, but there is another common “gotcha” when it comes to &lt;code&gt;BackgroundService&lt;/code&gt;: exceptions are silently ignored.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;ExecuteAsync&lt;/code&gt; implementation throws an exception, that exception is silently swallowed and ignored. This is because &lt;code&gt;BackgroundService&lt;/code&gt; captures the task from &lt;code&gt;ExecuteAsync&lt;/code&gt; but never &lt;code&gt;await&lt;/code&gt;s it - i.e., &lt;a href=&quot;https://github.com/dotnet/runtime/blob/e3ffd343ad5bd3a999cb9515f59e6e7a777b2c34/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/BackgroundService.cs&quot;&gt;&lt;code&gt;BackgroundService&lt;/code&gt; uses fire-and-forget&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h2&gt;

&lt;p&gt;This problem will surface as &lt;code&gt;BackgroundService&lt;/code&gt; instances just stopping, without any indication of a problem. What actually happens if &lt;code&gt;ExecuteAsync&lt;/code&gt; throws an exception is that the exception is captured and placed on the &lt;code&gt;Task&lt;/code&gt; that was returned from &lt;code&gt;ExecuteAsync&lt;/code&gt;. The problem is that &lt;code&gt;BackgroundService&lt;/code&gt; doesn’t observe that task, so there’s no logging and no process crash - the &lt;code&gt;BackgroundService&lt;/code&gt; has completed executing but it just sits there doing nothing.&lt;/p&gt;

&lt;p&gt;This is not &lt;em&gt;necessarily&lt;/em&gt; a problem with &lt;code&gt;BackgroundService&lt;/code&gt;; fire-and-forget can be appropriate for “top-level” loops such as a background worker task. However, it would be nice to have logging at least, so this “gotcha” is detectable.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;All top-level loops should have a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; with some kind of reporting if something goes wrong. &lt;code&gt;ExecuteAsync&lt;/code&gt; implementations are top-level loops, so they should have a top-level &lt;code&gt;try&lt;/code&gt; that catches all exceptions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fatal error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I recommend you combine this solution with the solution from last time that &lt;a href=&quot;/2020/05/backgroundservice-gotcha-startup.html&quot;&gt;uses &lt;code&gt;Task.Run&lt;/code&gt; to avoid startup problems&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyBackgroundService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fatal error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-silent-failure.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-silent-failure.html</guid>
      </item>
    
      <item>
        <title>BackgroundService Gotcha: Startup</title>
        <description>&lt;h2 id=&quot;backgroundservice-gotcha-synchronous-starts&quot;&gt;BackgroundService Gotcha: Synchronous Starts&lt;/h2&gt;

&lt;p&gt;This is some behavior that I’ve found surprising (and others have as well): ASP.NET Core background services are started with a synchronous call.&lt;/p&gt;

&lt;p&gt;Specifically, the host will invoke &lt;code&gt;IHostedService.StartAsync&lt;/code&gt; for all its hosted services, and &lt;code&gt;BackgroundService&lt;/code&gt; &lt;a href=&quot;https://github.com/dotnet/runtime/blob/e3ffd343ad5bd3a999cb9515f59e6e7a777b2c34/src/libraries/Microsoft.Extensions.Hosting.Abstractions/src/BackgroundService.cs#L37&quot;&gt;directly invokes &lt;code&gt;ExecuteAsync&lt;/code&gt; before returning from &lt;code&gt;StartAsync&lt;/code&gt;&lt;/a&gt;. So &lt;code&gt;BackgroundService&lt;/code&gt; &lt;em&gt;assumes&lt;/em&gt; that its derived classes will have an asynchronous &lt;code&gt;ExecuteAsync&lt;/code&gt;. If the &lt;code&gt;ExecuteAsync&lt;/code&gt; implementation is synchronous (or starts executing with a blocking call), then problems will ensue.&lt;/p&gt;

&lt;h2 id=&quot;problem-description&quot;&gt;Problem Description&lt;/h2&gt;

&lt;p&gt;The resulting behavior is that the background service will start executing, but the host will be unable to finish starting up. This will block other background services from starting.&lt;/p&gt;

&lt;p&gt;Depending on the background service implementation, this may manifest as a delay of startup or a complete block of startup. If &lt;code&gt;ExecuteAsync&lt;/code&gt; is synchronous, then the host cannot continue starting up until that background service has &lt;em&gt;completed&lt;/em&gt;. If &lt;code&gt;ExecuteAsync&lt;/code&gt; is asynchronous but takes a long time before it yields, then the host has its startup delayed.&lt;/p&gt;

&lt;h2 id=&quot;common-scenarios&quot;&gt;Common Scenarios&lt;/h2&gt;

&lt;p&gt;This problem is common in any of these conditions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The hosted service has a synchronous &lt;code&gt;ExecuteAsync&lt;/code&gt;. In this case, the host is prevented from starting until &lt;code&gt;ExecuteAsync&lt;/code&gt; completes.&lt;/li&gt;
  &lt;li&gt;The hosted service reads from a queue to process messages, but the queue reading is blocking. Even if the processing is asynchronous, the host startup is blocked until the first message arrives for this service and is (asynchronously) processed.&lt;/li&gt;
  &lt;li&gt;The hosted service is properly asynchronous, but the asynchrony is completing immediately. E.g., if it is asynchronously reading from a queue but there are many messages immediately received, then the host startup is blocked until the background service actually yields.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Since the problem is synchronous &lt;code&gt;ExecuteAsync&lt;/code&gt; methods (or at least &lt;code&gt;ExecuteAsync&lt;/code&gt; methods that do non-trivial work before they become asynchronous), the simplest solution is to ensure &lt;code&gt;ExecuteAsync&lt;/code&gt; is asynchronous.&lt;/p&gt;

&lt;p&gt;I’m &lt;a href=&quot;/2013/11/taskrun-etiquette-examples-dont-use.html&quot;&gt;not a fan of using &lt;code&gt;Task.Run&lt;/code&gt; to wrap the body of a method&lt;/a&gt; (i.e., “fake asynchrony”), but since the caller &lt;em&gt;requires&lt;/em&gt; an asynchronous implementation, I think that’s an acceptable approach in this case:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBackgroundService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancellationToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stoppingToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Implementation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way, any slow or blocking code early in &lt;code&gt;ExecuteAsync&lt;/code&gt; will not prevent the host from starting up.&lt;/p&gt;

&lt;h2 id=&quot;update-2020-05-22&quot;&gt;Update (2020-05-22)&lt;/h2&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Update (2020-05-22):&lt;/strong&gt; I’ve &lt;a href=&quot;https://twitter.com/klettier/status/1263727450502152194&quot; class=&quot;alert-link&quot;&gt;been informed&lt;/a&gt; that the .NET Core team is &lt;a href=&quot;https://github.com/dotnet/runtime/issues/36063#issuecomment-518913079&quot; class=&quot;alert-link&quot;&gt;considering changing this behavior&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/05/backgroundservice-gotcha-startup.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 4: Automated Deploy and Teardown</title>
        <description>&lt;h2 id=&quot;automating-deploy&quot;&gt;Automating Deploy&lt;/h2&gt;

&lt;p&gt;We currently have slash commands &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; that are converted into &lt;code&gt;repository_dispatch&lt;/code&gt; (&lt;code&gt;deploy-command&lt;/code&gt; / &lt;code&gt;teardown-command&lt;/code&gt;) events, and those &lt;code&gt;repository_dispatch&lt;/code&gt; events deploy or tear down a staging environment specific to a pull request. That’s pretty cool.&lt;/p&gt;

&lt;p&gt;But what I’d &lt;em&gt;really&lt;/em&gt; like is to deploy a PR’s staging environment as soon as the PR is created, and automatically tear it down when the PR is closed. That would be &lt;em&gt;really&lt;/em&gt; cool.&lt;/p&gt;

&lt;h2 id=&quot;security-again&quot;&gt;Security (Again)&lt;/h2&gt;

&lt;p&gt;First, though, I do have to talk about security. Yes, again.&lt;/p&gt;

&lt;p&gt;For security reasons, &lt;em&gt;all secrets are unavailable&lt;/em&gt; when automating a pull request from a &lt;em&gt;fork&lt;/em&gt; of a repository. This makes sense; you don’t want someone to create a fork, change the actions, and be able to retrieve your secrets by opening a PR against your repository.&lt;/p&gt;

&lt;p&gt;Currently, this is a hard and fast rule. But there are discussions about loosening up these rules a bit:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.community/t5/GitHub-Actions/Make-secrets-available-to-builds-of-forks/td-p/30678&quot;&gt;Opt-in to secret sharing to forks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.community/t5/GitHub-Actions/Allow-secrets-to-be-shared-with-trusted-Actions/td-p/34278&quot;&gt;Mark certain actions as “trusted”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I think it makes sense to always have pull request events run using the actions of the &lt;em&gt;base&lt;/em&gt; branch, not the &lt;em&gt;head&lt;/em&gt; branch. So cross-repository pull requests will always run the actions in the origin repository, not the fork repository.&lt;/p&gt;

&lt;p&gt;However, for now, the result of this security restriction is that we can only automate &lt;em&gt;local&lt;/em&gt; pull requests (from one branch to another in the same repository). The solution we’re using here will not work for cross-repository PRs (i.e., a PR from a forked repository).&lt;/p&gt;

&lt;h2 id=&quot;dispatch-when-a-pull-request-is-opened&quot;&gt;Dispatch when a Pull Request is Opened&lt;/h2&gt;

&lt;p&gt;We already have an action that handles &lt;code&gt;repository_dispatch&lt;/code&gt; events of type &lt;code&gt;deploy-command&lt;/code&gt;, so we can just use a pull request event as a “trigger”, dispatching the same kind of command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Queues a deploy command for every local PR.

name: Local PR Opened/Updated

# By default, this is run when a PR is opened or synchronized.
on:
  pull_request:

jobs:
  dispatch-deploy-command:
    if: github.repository == github.event.pull_request.head.repo.full_name # Only try to deploy local PRs
    runs-on: ubuntu-latest
    steps:
    - name: Dispatch /deploy Command
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.DISPATCH_TOKEN }} # Same security issues as before, unfortunately
        event-type: deploy-command # Send the deploy-command type for the repository_dispatch event
        client-payload: '{&quot;pull_request&quot;: ${{ toJson(github.event.pull_request) }}}' # Pass along the pull request details
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only tricky part here is the last line: our &lt;code&gt;deploy-command.yml&lt;/code&gt; handler expects to be able to use &lt;code&gt;client_payload.pull_request.number&lt;/code&gt; and &lt;code&gt;client_payload.pull_request.head.sha&lt;/code&gt;. &lt;code&gt;client_payload.pull_request&lt;/code&gt; is populated automatically by &lt;code&gt;slash-command-dispatch&lt;/code&gt;, but here we need to fill it out ourselves. Fortunately, the &lt;code&gt;pull_request&lt;/code&gt; data is already provided to us as part of the &lt;code&gt;pull_request&lt;/code&gt; event, so we just need to copy it over.&lt;/p&gt;

&lt;h2 id=&quot;dispatch-when-a-pull-request-is-closed&quot;&gt;Dispatch when a Pull Request is Closed&lt;/h2&gt;

&lt;p&gt;Similarly, we have an action that handles &lt;code&gt;repository_dispatch&lt;/code&gt; events of type &lt;code&gt;teardown-command&lt;/code&gt;, so we can use a pull request close event to dispatch the same command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Queues a teardown command for every local PR closed.

name: Local PR Closed

# Only listen for close events.
on:
  pull_request:
    types: [ closed ]

jobs:
  dispatch-teardown-command:
    if: github.repository == github.event.pull_request.head.repo.full_name # Only try to tear down local PRs
    runs-on: ubuntu-latest
    steps:
    - name: Dispatch /teardown Command
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.DISPATCH_TOKEN }} # Same security issues as before, unfortunately
        event-type: teardown-command # Send the deploy-command type for the repository_dispatch event
        client-payload: '{&quot;pull_request&quot;: ${{ toJson(github.event.pull_request) }}}' # Pass along the pull request details
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;done&quot;&gt;Done&lt;/h2&gt;

&lt;p&gt;At this point, we’re as automated as we can be (safely). All PRs support &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; commands, managing a per-PR staging environment. In addition, local PRs get their environments deployed and torn down automatically.&lt;/p&gt;

&lt;p&gt;Hopefully in the future, we can fully automate PRs from forks. That would be especially helpful for open-source projects. In the meantime, &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; are still pretty cool.&lt;/p&gt;

&lt;p&gt;As a final reminder, the staging environments in this example were deliberately simple: building a static site and deploying that static site. This simple example is fine for a lot of front-end projects. But staging environments can also include back-end code. There’s no reason you can’t define “deploy” to mean “deploy the front end to Surge &lt;em&gt;and&lt;/em&gt; deploy the backend to a new Azure resource group” or something like that. So dream big!&lt;/p&gt;

&lt;p&gt;Enjoy GitHub Actions!&lt;/p&gt;
</description>
        <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/05/github-actions-pull-request-staging-environments-part-4-automated-deploy-and-teardown.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/05/github-actions-pull-request-staging-environments-part-4-automated-deploy-and-teardown.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 3: Implementing Deploy and Teardown</title>
        <description>&lt;h2 id=&quot;implementing-deploy&quot;&gt;Implementing Deploy&lt;/h2&gt;

&lt;p&gt;So far, we have a &lt;code&gt;slash-commands&lt;/code&gt; GitHub Action that translates &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; ChatOps commands into &lt;code&gt;repository_dispatch&lt;/code&gt; events.&lt;/p&gt;

&lt;p&gt;To handle the &lt;code&gt;/deploy&lt;/code&gt; slash command, we’ll need to handle a &lt;code&gt;repository_dispatch&lt;/code&gt; event of type &lt;code&gt;deploy-command&lt;/code&gt;. In your GitHub repository, open up the Actions tab and choose “New workflow” and then “Set up a workflow yourself”. Name the file &lt;code&gt;deploy-command.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Inputs:
#  client_payload.pull_request.number - PR number
#  client_payload.pull_request.head.sha - PR SHA

name: Create PR Staging Environment

on:
  repository_dispatch:
    types: [deploy-command]

# Set environment variables available to all action steps.
env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}

      - name: Install dependencies
        run: npm ci

      - name: Build static site
        run: npx gatsby build

      - name: Publish to surge.sh
        run: npx surge ./public ${{ env.DOMAIN }}
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ format('Published to [staging environment](https://{0})', env.DOMAIN) }}

            To teardown, comment with the `/teardown` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one’s a bit longer, so let’s walk through the steps.&lt;/p&gt;

&lt;p&gt;The first step checks out the repository. Note that it specifically checks out the SHA of the pull request (&lt;code&gt;client_payload.pull_request&lt;/code&gt; is provided by &lt;code&gt;slash-command-dispatch&lt;/code&gt;). So we’re checking out the code &lt;em&gt;for that PR&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next couple steps build the site by running &lt;code&gt;npm ci&lt;/code&gt; and &lt;code&gt;npx gatsby build&lt;/code&gt;. Just like building locally, the output is placed in the &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The publish step runs &lt;code&gt;npx surge ./public ${{ env.DOMAIN }}&lt;/code&gt;. This time we’re running &lt;code&gt;surge&lt;/code&gt; and giving it the name of the domain we want to publish to. The &lt;code&gt;DOMAIN&lt;/code&gt; environment variable was defined earlier in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s really nice about this setup is that every pull request gets a different domain - and thus a different staging environment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SURGE_LOGIN&lt;/code&gt; and &lt;code&gt;SURGE_TOKEN&lt;/code&gt; are additional environment variables used by the &lt;code&gt;surge&lt;/code&gt; command line so it authenticates under your account while deploying.&lt;/p&gt;

&lt;p&gt;The last step adds a comment to the pull request with a clickable link for the deployed staging environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ format('Published to [staging environment](https://{0})', env.DOMAIN) }}

            To teardown, comment with the `/teardown` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ends up looking like this:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;a href=&quot;/assets/github-actions-deploy.png&quot;&gt;&lt;img src=&quot;/assets/github-actions-deploy.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-up-surge-secrets&quot;&gt;Set Up Surge Secrets&lt;/h3&gt;

&lt;p&gt;There are a couple of new secrets used by the deploy action: &lt;code&gt;SURGE_LOGIN&lt;/code&gt; and &lt;code&gt;SURGE_TOKEN&lt;/code&gt;. These can be added as &lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets&quot;&gt;repository secrets&lt;/a&gt; just like last time.&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;SURGE_LOGIN&lt;/code&gt; to the email address &lt;a href=&quot;2020-04-02-github-actions-pull-request-staging-environments-part-1&quot;&gt;you used to sign up with Surge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get &lt;code&gt;SURGE_TOKEN&lt;/code&gt;, run &lt;code&gt;surge token&lt;/code&gt; from your own computer. This will give you a token that you can save in the &lt;code&gt;SURGE_TOKEN&lt;/code&gt; secret, so your deployments are associated with your Surge account.&lt;/p&gt;

&lt;h2 id=&quot;try-it-out&quot;&gt;Try It Out!&lt;/h2&gt;

&lt;p&gt;At this point, you should be able to create a pull request and then add a &lt;code&gt;/deploy&lt;/code&gt; comment on it. Check out the Actions tab of the repository to watch your actions run or see the logs for old action runs.&lt;/p&gt;

&lt;h2 id=&quot;implementing-teardown&quot;&gt;Implementing Teardown&lt;/h2&gt;

&lt;p&gt;The next step is to implement teardown. In your GitHub repository, open up the Actions tab and choose “New workflow” and then “Set up a workflow yourself”. Name the file &lt;code&gt;teardown-command.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Inputs:
#  client_payload.pull_request.number - PR number

name: Delete PR Staging Environment

on:
  repository_dispatch:
    types: [teardown-command]

env:
  DOMAIN: ${{ format('{0}-{1}-pr{2}.surge.sh', github.event.repository.owner.login, github.event.repository.name, github.event.client_payload.pull_request.number) }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Teardown surge.sh
        run: npx surge teardown ${{ env.DOMAIN }}
        env:
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}

      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: ${{ format('Tore down {0}', env.DOMAIN) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one is pretty simple; we use a similar pattern to &lt;code&gt;/deploy&lt;/code&gt; but there are fewer steps since there’s no build (or even a checkout). We use the same pattern for defining &lt;code&gt;DOMAIN&lt;/code&gt; and the Surge secrets, and then we run &lt;code&gt;npx surge teardown ${{ env.DOMAIN }}&lt;/code&gt; to tear down the environment for this pull request. The last step adds a comment to the PR indicating that its staging environment has been torn down.&lt;/p&gt;

&lt;h2 id=&quot;who-can-issue-commands&quot;&gt;Who Can Issue Commands?&lt;/h2&gt;

&lt;p&gt;By default, only developers with write access to your repository can issue slash commands. This is the default behavior of &lt;code&gt;slash-command-dispatch&lt;/code&gt;. So if this is just your project, then only you can create or tear down staging environments. If you have an open-source project - and if creating staging environments is cheap for you - you can edit the &lt;code&gt;slash-commands.yml&lt;/code&gt; file and add a &lt;code&gt;permission&lt;/code&gt; argument to &lt;code&gt;slash-command-dispatch&lt;/code&gt; with the value &lt;code&gt;none&lt;/code&gt;. That way, &lt;em&gt;anyone&lt;/em&gt; would be able to create and tear down staging environments.&lt;/p&gt;

&lt;h2 id=&quot;next-time&quot;&gt;Next Time&lt;/h2&gt;

&lt;p&gt;ChatOps are cool. But can we automate this further?&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-3-implementing-deploy-and-teardown.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-3-implementing-deploy-and-teardown.html</guid>
      </item>
    
      <item>
        <title>Using GitHub Actions for Pull Request Staging Environments, Part 2: Slash Commands</title>
        <description>&lt;h2 id=&quot;slash-commands&quot;&gt;Slash Commands&lt;/h2&gt;

&lt;p&gt;I’m not very familiar with the &lt;em&gt;term&lt;/em&gt; “ChatOps”, but I’ve seen ChatOps actually &lt;em&gt;used&lt;/em&gt; a lot. The idea is that you can set up chat bots to listen to your team’s chat and take actions based on commands you can type in the chat.&lt;/p&gt;

&lt;p&gt;What we’ll be setting up here is pretty close to that; we want to be able to add a comment to a PR with a “slash command” that will do our deploy (or teardown) for us. Specifically, we’ll be using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/deploy&lt;/code&gt; to deploy a PR to its staging environment.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/teardown&lt;/code&gt; to tear down a PR staging environment when we’re done with the PR.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dispatching-slash-commands&quot;&gt;Dispatching Slash Commands&lt;/h2&gt;

&lt;p&gt;The way we’ll be setting this up is to have one GitHub Action that listens for PR comments and decides if they have any slash commands. For any slash commands, we want to dispatch an event to our repository.&lt;/p&gt;

&lt;p&gt;In your GitHub repository, open up the Actions tab and choose “Set up a workflow yourself”. Name the file &lt;code&gt;slash-commands.yml&lt;/code&gt; and paste this in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Translates slash-commands in issue comments to repository-dispatch events.

# Name of the action (displayed in the Actions tab)
name: Slash command dispatch

# Triggers for this action.
#  This one only runs when a comment is added to an issue.
#  (on GitHub, pull requests are one kind of &quot;issue&quot;)
on:
  issue_comment:
    types: [ created ]

# When the trigger fires, we run these jobs.
jobs:
  dispatch: #  We just have one job, called &quot;dispatch&quot;
    runs-on: ubuntu-latest # The OS we run on. Doesn't really matter for this simple action.
    steps: # This job only has one step, called &quot;Dispatch slash command&quot;
      - name: Dispatch slash command
        uses: peter-evans/slash-command-dispatch@v1 # Uses a pre-built action from the Marketplace
        with: # These are the parameters passed to the action
          token: ${{ secrets.DISPATCH_TOKEN }} # This action needs a personal access token in order to dispatch
          reactions: false # By default, this action will add reactions to the slash command comment; this turns those off
          issue-type: pull-request # We only want to look for slash commands in pull requests, not other issues
          commands: deploy, teardown # The slash commands we look for: /deploy and /teardown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, our GitHub Action is simple; &lt;a href=&quot;https://github.com/marketplace/actions/slash-command-dispatch&quot;&gt;&lt;code&gt;slash-command-dispatch&lt;/code&gt;&lt;/a&gt; is specifically designed for matching slash commands in issue and/or PR comments, and dispatching a command to the repository.&lt;/p&gt;

&lt;p&gt;Note that we’re passing a &lt;code&gt;token&lt;/code&gt; to this GitHub Action, and we’re taking the value from &lt;code&gt;secrets.DISPATCH_TOKEN&lt;/code&gt;. We don’t have that secret yet, so let’s set that up now. In order to dispatch, &lt;code&gt;slash-command-dispatch&lt;/code&gt; needs a token with write access to the repository. You can get one by &lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line&quot;&gt;following the GitHub directions&lt;/a&gt;; when creating your token, you’ll want &lt;code&gt;public_repo&lt;/code&gt; scope if your repository is public - otherwise, you’ll want &lt;code&gt;repo&lt;/code&gt; scope. Copy that access token value once it’s created.&lt;/p&gt;

&lt;p&gt;Next, create a &lt;a href=&quot;https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets&quot;&gt;repository secret&lt;/a&gt; named &lt;code&gt;DISPATCH_TOKEN&lt;/code&gt; and paste that value in… and if you did that without doing any verification, then you just failed Security 101.&lt;/p&gt;

&lt;p&gt;On a more serious note, right now the world of GitHub Actions (and its Marketplace) are in the “just trying to get it to work” stage. And in that stage of technology adoption, security is often overlooked. So when you’re reading some blog on the Internet and it tells you to make a personal access token and paste it somewhere, you should take a step back and really think about what’s going on.&lt;/p&gt;

&lt;h2 id=&quot;security-concerns&quot;&gt;Security Concerns&lt;/h2&gt;

&lt;p&gt;At the very least, take a look at the code that’s receiving the token. I’m using &lt;a href=&quot;https://github.com/marketplace/actions/slash-command-dispatch&quot;&gt;&lt;code&gt;peter-evans/slash-command-dispatch&lt;/code&gt;&lt;/a&gt; in the example above. Does it look like an upstanding project? Good documentation? High(ish) number of stars? Not forked from a different project? Who is this “Peter Evans” and does he seem like a trustworthy person? Go ahead and open the action’s repository; does the code look OK?&lt;/p&gt;

&lt;p&gt;Any time you’re passing a token to an action, you should do this kind of research, if not more. If you’re not comfortable with pasting a personal access token, there are a few alternative approaches.&lt;/p&gt;

&lt;h3 id=&quot;alternative-approaches&quot;&gt;Alternative Approaches&lt;/h3&gt;

&lt;p&gt;The security concerns above are due to the choice to &lt;em&gt;dispatch&lt;/em&gt; the repository events rather than handling them directly, so we end up handing a token to a third-party GitHub Action.&lt;/p&gt;

&lt;p&gt;Alternative approaches include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Performing a security audit of the GitHub Action and then SHA-locking to that specific version. I.e., instead of &lt;code&gt;peter-evans/slash-command-dispatch@v1&lt;/code&gt;, use &lt;code&gt;peter-evans/slash-command-dispatch@8a61cc727ff2d87afea4c46b11145543bef0c02f&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Performing a security audit of the GitHub Action, cloning it to your own personal GitHub Action, and using that one instead.&lt;/li&gt;
  &lt;li&gt;Writing your own GitHub Action that does essentially the same thing.&lt;/li&gt;
  &lt;li&gt;Creating a separate GitHub account, inviting that account to your repository (in a &lt;code&gt;write&lt;/code&gt; role), accepting that invitation, and using a &lt;code&gt;public_repo&lt;/code&gt;/&lt;code&gt;repo&lt;/code&gt; token from &lt;em&gt;that&lt;/em&gt; account instead of your personal account.
    &lt;ul&gt;
      &lt;li&gt;This ensures that the token can only be used to disrupt this &lt;em&gt;one&lt;/em&gt; repository, instead of &lt;em&gt;all&lt;/em&gt; your repositories.&lt;/li&gt;
      &lt;li&gt;It does still allow write access to this repository, though.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Handling all slash commands directly instead of dispatching.
    &lt;ul&gt;
      &lt;li&gt;You have to either combine all slash command handling into a single file (which makes your workflow file messy), or have multiple slash command handler actions (which makes your PR “checks” section messy).&lt;/li&gt;
      &lt;li&gt;At the time of this writing, there isn’t a great GitHub Action for parsing multiple slash commands and setting &lt;a href=&quot;https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#steps-context&quot;&gt;step outputs&lt;/a&gt; that can be used by future steps.&lt;/li&gt;
      &lt;li&gt;Even if such an action did exist, the resulting &lt;code&gt;slash-command.yml&lt;/code&gt; file would get rather long and ugly with &lt;code&gt;if:&lt;/code&gt; conditionals throughout.&lt;/li&gt;
      &lt;li&gt;However, this is the only alternative that is fully safe, since you would no longer require a personal access token &lt;em&gt;at all&lt;/em&gt;. Because it doesn’t do dispatching.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve tried out a few alternatives, and I tend to prefer either just doing it the easy way (as done in this post), or creating a separate GitHub account (to limit the scope of a breached token to this single repository). I don’t like handling all slash commands directly instead of dispatching, for reasons that will become more clear when we extend this solution to automate deploy and teardown commands (in a future post).&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-goal&quot;&gt;Back to The Goal&lt;/h2&gt;

&lt;p&gt;The rest of this blog series assumes that you have done a sufficient security check and have stored a token in the repository secrets, named &lt;code&gt;DISPATCH_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dispatch&quot;&gt;Dispatch&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;slash-command-dispatch&lt;/code&gt; action recognizes slash commands and then sends a &lt;a href=&quot;https://help.github.com/en/actions/reference/events-that-trigger-workflows#external-events-repository_dispatch&quot;&gt;repository dispatch event&lt;/a&gt; to the repository. &lt;code&gt;repository_dispatch&lt;/code&gt; is a special event that you can listen for (with another GitHub Action) and respond to.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;slash-command-dispatch&lt;/code&gt; follows a convention where the commands it listens to (&lt;code&gt;deploy&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; in our case) are sent with the &lt;code&gt;repository_dispatch&lt;/code&gt; event, with a &lt;code&gt;-command&lt;/code&gt; suffix. So, just like today’s GitHub Action listened for an &lt;code&gt;issue_comment&lt;/code&gt; event of type &lt;code&gt;created&lt;/code&gt;, next time we’ll write GitHub Actions that listen for a &lt;code&gt;repository_dispatch&lt;/code&gt; event of type &lt;code&gt;deploy-command&lt;/code&gt; or &lt;code&gt;teardown-command&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;At this point, you should have a “ChatOps bot” of sorts that listens for &lt;code&gt;/deploy&lt;/code&gt; and &lt;code&gt;/teardown&lt;/code&gt; comments on your pull requests, and then translates those into &lt;code&gt;repository_dispatch&lt;/code&gt; events. Next time we’ll add handlers for those events.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-2-slash-commands.html</link>
        <guid isPermaLink="true">https://blog.stephencleary.com/2020/04/github-actions-pull-request-staging-environments-part-2-slash-commands.html</guid>
      </item>
    
  </channel>
</rss>
