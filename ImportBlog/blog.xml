<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-7297021906893122222.archive</id><updated>2014-05-16T22:10:30.829-04:00</updated><title type='text'>Stephen Cleary (the blog)</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/archive'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/archive'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-7297021906893122222.layout</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Template: Stephen Cleary (the blog)</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
  &lt;head&gt;
    &lt;b:include data='blog' name='all-head-content'/&gt;
    &lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt;
    &lt;b:skin&gt;&lt;![CDATA[/*
-----------------------------------------------
Blogger Template Style
Name:     Stretch Denim Light
Designer: Darren Delaye
URL:      www.DarrenDelaye.com
Date:     11 Jul 2006
-----------------------------------------------
*/

/* Variable definitions
   ====================
 &lt;Variable name="bgColor" description="Page Background Color"
           type="color" default="#ffffff" value="#ffffff"&gt;
 &lt;Variable name="textColor" description="Text Color"
           type="color" default="#333333" value="#333333"&gt;
 &lt;Variable name="linkColor" description="Link Color"
           type="color" default="#336699" value="#336699"&gt;

 &lt;Variable name="headerBgColor" description="Page Header Background Color"
           type="color" default="#c4e1ff" value="#c4e1ff"&gt;
 &lt;Variable name="headerTextColor" description="Page Header Text Color"
           type="color" default="#003366" value="#003366"&gt; 
 &lt;Variable name="headerCornersColor" description="Page Header Corners Color"
           type="color" default="#c4e1ff" value="#c4e1ff"&gt;

 &lt;Variable name="mainBgColor" description="Main Background Color"
           type="color" default="#ffffff" value="#ffffff"&gt;
 &lt;Variable name="borderColor" description="Border Color"
           type="color" default="#ffffff" value="#ffffff"&gt;
 &lt;Variable name="dateHeaderColor" description="Date Header Color"
           type="color" default="#999999" value="#999999"&gt;

 &lt;Variable name="sidebarTitleBgColor" description="Sidebar Title Background Color"
           type="color" default="#ffffff" value="#ffffff"&gt;
 &lt;Variable name="sidebarTitleTextColor" description="Sidebar Title Text Color"
           type="color" default="#333333" value="#333333"&gt;
 
 &lt;Variable name="bodyFont" description="Text Font"
           type="font" default="normal normal 100% Verdana, Arial, Sans-serif;" value="normal normal 100% Verdana, Arial, Sans-serif;"&gt;
 &lt;Variable name="headerFont" description="Page Header Font"
           type="font" default="normal normal 210% Verdana, Arial, Sans-serif;" value="normal normal 210% Verdana, Arial, Sans-serif;"&gt;

 &lt;Variable name="startSide" description="Start side in blog language"
           type="automatic" default="left" value="left"&gt;
 &lt;Variable name="endSide" description="End side in blog language"
           type="automatic" default="right" value="right"&gt;
*/

body {
  background: $bgColor;
  margin: 0;
  padding: 0px;
  font: x-small Verdana, Arial;
  text-align: center;
  color: $textColor;
  font-size/* */:/**/small;
  font-size: /**/small;
}
a:link {
  color: $linkColor;
}
a:visited {
  color: $linkColor;
}
a img {
  border-width: 0;
}

#outer-wrapper { 
  font: $bodyFont;
}

/* Header
----------------------------------------------- */
#header-wrapper {
  margin:0;
  padding: 0;
  background-color: $headerCornersColor;
  text-align: $startSide;
}

#header {
  margin: 0 2%;
  background-color: $headerBgColor;
  color: $headerTextColor;
  padding: 0;
  font: $headerFont;
  position: relative;
}

h1.title {
  padding-top: 38px;
  margin: 0 1% .1em;
  line-height: 1.2em;
  font-size: 100%;
}

h1.title a, h1.title a:visited {
  color: $headerTextColor;
  text-decoration: none;
}

#header .description {
  display: block;
  margin: 0 1%;
  padding: 0 0 40px;
  line-height: 1.4em;
  font-size: 50%;
}
                                                              
/* Content
----------------------------------------------- */

.clear { 
  clear: both;
}


#content-wrapper {
  margin: 0 2%;
  padding: 0 0 15px;
  text-align: $startSide;
  background-color: $mainBgColor;
  border: 1px solid $borderColor;
  border-top: 0;
}
#main-wrapper {
  margin-$startSide: 1%;
  width: 64%;
  float: $startSide;
  background-color: $mainBgColor;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
}
#sidebar-wrapper {
  margin-$endSide: 1%;
  width: 29%;
  float: $endSide;
  background-color: $mainBgColor;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
}

/* Headings
----------------------------------------------- */
h2, h3 {
  margin: 0;
}

/* Posts
----------------------------------------------- */
.date-header {
  margin: 1.5em 0 0;
  font-weight: normal;
  color: $dateHeaderColor;
  font-size: 100%;
}
.post {
  margin: 0 0 1.5em;
  padding-bottom: 1.5em;
}
.post-title {
  margin: 0;
  padding: 0;
  font-size: 125%;
  font-weight: bold;
  line-height: 1.1em;
}
.post-title a, .post-title a:visited, .post-title strong {
  text-decoration: none;
  color: $textColor;
  font-weight: bold;
}
.post div {
  margin: 0 0 .75em;
  line-height: 1.3em;
}

.post-footer {
  margin: -.25em 0 0;
  color: $textColor;
  font-size: 87%;
}

.post-footer .span {
  margin-$endSide: .3em;
}
.post img, table.tr-caption-container {
  padding: 4px;
  border: 1px solid $borderColor;
}
.tr-caption-container img {
  border: none;
  padding: 0;
}
.post blockquote {
  margin: 1em 20px;
}
.post blockquote p {
  margin: .75em 0;
}

/* Comments
----------------------------------------------- */
#comments h4 {
  margin: 1em 0;
  color: $dateHeaderColor;
}
#comments h4 strong {
  font-size: 110%;
}
#comments-block {
  margin: 1em 0 1.5em;
  line-height: 1.3em;
}
#comments-block dt {
  margin: .5em 0;
}
#comments-block dd {
  margin: .25em 0 0;
}
#comments-block dd.comment-footer {
  margin: -.25em 0 2em;
  line-height: 1.4em;
  font-size: 78%;
}
#comments-block dd p {
  margin: 0 0 .75em;
}

.deleted-comment {
  font-style:italic;
  color:gray;
}

.feed-links {
  clear: both;
  line-height: 2.5em;
}

#blog-pager-newer-link {
  float: $startSide;
 }

#blog-pager-older-link {
  float: $endSide;
 }
 
#blog-pager {   
  text-align: center; 
 }

/* Sidebar Content
----------------------------------------------- */
.sidebar h2 {
 margin: 1.6em 0 .5em;
 padding: 4px 5px;
 background-color: $sidebarTitleBgColor;
 font-size: 100%;
 color: $sidebarTitleTextColor;
}
                                                              
.sidebar ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
.sidebar li {
  margin: 0;
  padding-top: 0;
  padding-$endSide: 0;
  padding-bottom: .5em;
  padding-$startSide: 15px;
  text-indent: -15px;
  line-height: 1.5em;
}
.sidebar {
  color: $textColor;
  line-height:1.3em; 
}
.sidebar .widget { 
  margin-bottom: 1em;
}

.sidebar .widget-content {
  margin: 0 5px;
}

/* Profile 
----------------------------------------------- */
.profile-img { 
  float: $startSide;
  margin-top: 0;
  margin-$endSide: 5px;
  margin-bottom: 5px;
  margin-$startSide: 0;
  padding: 4px;
  border: 1px solid $borderColor;
}

.profile-data {
  margin:0;
  text-transform:uppercase;
  letter-spacing:.1em;
  font-weight: bold;
  line-height: 1.6em;
  font-size: 78%;
}

.profile-datablock {
  margin:.5em 0 .5em;
}

.profile-textblock {
  margin: 0.5em 0;
  line-height: 1.6em;
}

                                                              
/* Footer
----------------------------------------------- */
#footer {
  clear: both;
  text-align: center;
  color: $textColor;
}

#footer .widget {
  margin:.5em;
  padding-top: 20px;
  font-size: 85%;
  line-height: 1.5em;
  text-align: $startSide;
}

/** Page structure tweaks for layout editor wireframe */
body#layout #header { 
  width: 750px;
}
]]&gt;&lt;/b:skin&gt;



&lt;!-- SAC - New-style code formatting --&gt;
&lt;link href='http://alexgorbatchev.com/pub/sh/current/styles/shCore.css' rel='stylesheet' type='text/css'/&gt;
&lt;link href='http://alexgorbatchev.com/pub/sh/current/styles/shThemeDefault.css' rel='stylesheet' type='text/css'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCSharp.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCpp.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushJScript.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushXml.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushPowerShell.js' type='text/javascript'/&gt;
&lt;script type='text/javascript'&gt;
SyntaxHighlighter.config.bloggerMode = true;
SyntaxHighlighter.defaults.gutter = false;
SyntaxHighlighter.all();
&lt;/script&gt;

&lt;style type='text/css'&gt;
/* C# code in a block */
pre code {
    border: 1px solid black;
    max-height: 600px;
    overflow: scroll;
    padding: 5px;
    display: block;
}

/* Code that may be block or inline */
code {
    font-family: Consolas, monospace;
    padding: 1px 5px 1px 5px;
    background-color: #eeeeee;
    color: black;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; Comment */
.csharp .comment {
    color: green;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; Keyword */
.csharp .keyword {
    color: blue;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; String */
.csharp .string {
    color: #A31515;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; User Types */
.csharp .type {
    color: #2B91AF;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; Current Statement */
.csharp .highlight {
    background-color: yellow;
}

.csharp .highlight * {
    color: black;
}
  
/* http://www.in3d.eu/xml/Code_Highlighter.php */

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; XML Attribute */
.xml .AttrName {
    color: red;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; XML Attribute Value */
.xml .AttrValue {
    color: blue;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; XML CData Section */
.xml .CDATA, .xml .CDATAValue {
    color: #808080;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; XML Comment */
.xml .Comment {
    color: #008000;
}

/* VS Environment -&amp;gt; Fonts and Colors -&amp;gt; XML Name */
.xml .Element {
    color: #A31515;
}
&lt;/style&gt;

&lt;!-- SAC - Hide navbar --&gt;
&lt;style type='text/css'&gt;#navbar-iframe { display:none }&lt;/style&gt;

&lt;!-- SAC - Hide redundant "Subscription" link at bottom --&gt;
&lt;style type='text/css'&gt;.post-feeds { display:none }&lt;/style&gt;

&lt;!-- SAC - Google tracking --&gt;
&lt;script type='text/javascript'&gt;

  var _gaq = _gaq || [];
  _gaq.push([&amp;#39;_setAccount&amp;#39;, &amp;#39;UA-8910661-1&amp;#39;]);
  _gaq.push([&amp;#39;_trackPageview&amp;#39;]);

  (function() {
    var ga = document.createElement(&amp;#39;script&amp;#39;); ga.type = &amp;#39;text/javascript&amp;#39;; ga.async = true;
    ga.src = (&amp;#39;https:&amp;#39; == document.location.protocol ? &amp;#39;https://ssl&amp;#39; : &amp;#39;http://www&amp;#39;) + &amp;#39;.google-analytics.com/ga.js&amp;#39;;
    var s = document.getElementsByTagName(&amp;#39;script&amp;#39;)[0]; s.parentNode.insertBefore(ga, s);
  })();

&lt;/script&gt;

&lt;!-- SAC - Google Universal Analytics --&gt;
&lt;script&gt;
  (function(i,s,o,g,r,a,m){i[&amp;#39;GoogleAnalyticsObject&amp;#39;]=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,&amp;#39;script&amp;#39;,&amp;#39;//www.google-analytics.com/analytics.js&amp;#39;,&amp;#39;ga&amp;#39;);

  ga(&amp;#39;create&amp;#39;, &amp;#39;UA-8910661-5&amp;#39;, &amp;#39;stephencleary.com&amp;#39;);
  ga(&amp;#39;send&amp;#39;, &amp;#39;pageview&amp;#39;);

&lt;/script&gt;

  &lt;/head&gt;

  &lt;body&gt;
  &lt;b:section class='navbar' id='navbar' maxwidgets='1' showaddelement='no'&gt;
    &lt;b:widget id='Navbar1' locked='true' title='Navbar' type='Navbar'&gt;
      &lt;b:includable id='main'&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener(&amp;#39;load&amp;#39;,
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent(&amp;#39;onload&amp;#39;, function(){ object[attribute] = val; });
      }
    }
  &amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;navbar-iframe-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://apis.google.com/js/plusone.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        gapi.load(&amp;quot;gapi.iframes:gapi.iframes.style.bubble&amp;quot;, function() {
          if (gapi.iframes &amp;amp;&amp;amp; gapi.iframes.getContext) {
            gapi.iframes.getContext().openChild({
                url: &amp;#39;https://www.blogger.com/navbar.g?targetBlogID\0757297021906893122222\46blogName\75Stephen+Cleary+(the+blog)\46publishMode\75PUBLISH_MODE_HOSTED\46navbarType\75BLUE\46layoutType\75LAYOUTS\46searchRoot\75http://blog.stephencleary.com/search\46blogLocale\75en\46v\0752\46homepageUrl\75http://blog.stephencleary.com/\46vt\759194377183113144798&amp;#39;,
                where: document.getElementById(&amp;quot;navbar-iframe-container&amp;quot;),
                id: &amp;quot;navbar-iframe&amp;quot;
            });
          }
        });
      &amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function() {
var script = document.createElement(&amp;#39;script&amp;#39;);
script.type = &amp;#39;text/javascript&amp;#39;;
script.src = &amp;#39;//pagead2.googlesyndication.com/pagead/js/google_top_exp.js&amp;#39;;
var head = document.getElementsByTagName(&amp;#39;head&amp;#39;)[0];
if (head) {
head.appendChild(script);
}})();
&amp;lt;/script&amp;gt;
&lt;/b:includable&gt;
    &lt;/b:widget&gt;
  &lt;/b:section&gt;


  &lt;div id='outer-wrapper'&gt;&lt;div id='wrap2'&gt;

    &lt;!-- skip links for text browsers --&gt;
    &lt;span id='skiplinks' style='display:none;'&gt;
      &lt;a href='#main'&gt;skip to main &lt;/a&gt; |
      &lt;a href='#sidebar'&gt;skip to sidebar&lt;/a&gt;
    &lt;/span&gt;

    &lt;div id='header-wrapper'&gt;
      &lt;b:section class='header' id='header' maxwidgets='1' showaddelement='no'&gt;
        &lt;b:widget id='Header1' locked='true' title='Stephen Cleary (the blog) (Header)' type='Header'&gt;
          &lt;b:includable id='main'&gt;

  &lt;b:if cond='data:useImage'&gt;
    &lt;b:if cond='data:imagePlacement == &amp;quot;BEHIND&amp;quot;'&gt;
      &lt;!--
      Show image as background to text. You can't really calculate the width
      reliably in JS because margins are not taken into account by any of
      clientWidth, offsetWidth or scrollWidth, so we don't force a minimum
      width if the user is using shrink to fit.
      This results in a margin-width's worth of pixels being cropped. If the
      user is not using shrink to fit then we expand the header.
      --&gt;
      &lt;b:if cond='data:mobile'&gt;
          &lt;div id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;b:else/&gt;
          &lt;div expr:style='&amp;quot;background-image: url(\&amp;quot;&amp;quot; + data:sourceUrl + &amp;quot;\&amp;quot;); &amp;quot;                        + &amp;quot;background-position: &amp;quot;                        + data:backgroundPositionStyleStr + &amp;quot;; &amp;quot;                        + data:widthStyleStr                        + &amp;quot;min-height: &amp;quot; + data:height                        + &amp;quot;_height: &amp;quot; + data:height                        + &amp;quot;background-repeat: no-repeat; &amp;quot;' id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;/b:if&gt;
    &lt;b:else/&gt;
      &lt;!--Show the image only--&gt;
      &lt;div id='header-inner'&gt;
        &lt;a expr:href='data:blog.homepageUrl' style='display: block'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_headerimg&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width' style='display: block'/&gt;
        &lt;/a&gt;
        &lt;!--Show the description--&gt;
        &lt;b:if cond='data:imagePlacement == &amp;quot;BEFORE_DESCRIPTION&amp;quot;'&gt;
          &lt;b:include name='description'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;!--No header image --&gt;
    &lt;div id='header-inner'&gt;
      &lt;div class='titlewrapper'&gt;
        &lt;h1 class='title'&gt;
          &lt;b:include name='title'/&gt;
        &lt;/h1&gt;
      &lt;/div&gt;
      &lt;b:include name='description'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
          &lt;b:includable id='description'&gt;
  &lt;div class='descriptionwrapper'&gt;
    &lt;p class='description'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;b:includable id='title'&gt;
  &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
    &lt;data:title/&gt;
  &lt;b:else/&gt;
    &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
        &lt;/b:widget&gt;
      &lt;/b:section&gt;
    &lt;/div&gt;
 
    &lt;div id='content-wrapper'&gt;

      &lt;div id='crosscol-wrapper' style='text-align:center'&gt;
        &lt;b:section class='crosscol' id='crosscol' showaddelement='no'/&gt;
      &lt;/div&gt;

      &lt;div id='main-wrapper'&gt;
        &lt;b:section class='main' id='main' showaddelement='no'&gt;
          &lt;b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'&gt;
            &lt;b:includable id='main' var='top'&gt;
  &lt;b:if cond='data:mobile == &amp;quot;false&amp;quot;'&gt;

    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;data:defaultAdStart/&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &lt;b:if cond='data:post.isFirstPost == &amp;quot;false&amp;quot;'&gt;
            &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.dateHeader'&gt;
          &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;div class='post-outer'&gt;
        &lt;b:include data='post' name='post'/&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;/div&gt;
        &lt;b:if cond='data:post.includeAd'&gt;
          &lt;b:if cond='data:post.isFirstPost'&gt;
            &lt;data:defaultAdEnd/&gt;
          &lt;b:else/&gt;
            &lt;data:adEnd/&gt;
          &lt;/b:if&gt;
          &lt;div class='inline-ad'&gt;
            &lt;data:adCode/&gt;
          &lt;/div&gt;
          &lt;data:adStart/&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
      &lt;b:if cond='data:numPosts != 0'&gt;
        &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
      &lt;/b:if&gt;
      &lt;data:adEnd/&gt;
    &lt;/div&gt;

    &lt;!-- navigation --&gt;
    &lt;b:include name='nextprev'/&gt;

    &lt;!-- feed links --&gt;
    &lt;b:include name='feedLinks'/&gt;

    &lt;b:if cond='data:top.showStars'&gt;
      &lt;script src='//www.google.com/jsapi' type='text/javascript'/&gt;
      &lt;script type='text/javascript'&gt;
        google.load(&amp;quot;annotations&amp;quot;, &amp;quot;1&amp;quot;, {&amp;quot;locale&amp;quot;: &amp;quot;&lt;data:top.languageCode/&gt;&amp;quot;});
        function initialize() {
          google.annotations.setApplicationId(&lt;data:top.blogspotReviews/&gt;);
          google.annotations.createAll();
          google.annotations.fetch();
        }
        google.setOnLoadCallback(initialize);
      &lt;/script&gt;
    &lt;/b:if&gt;

  &lt;b:else/&gt;
    &lt;b:include name='mobile-main'/&gt;
  &lt;/b:if&gt;

  &lt;b:if cond='data:top.showDummy'&gt;
    &lt;data:top.dummyBootstrap/&gt;
  &lt;/b:if&gt;

&lt;/b:includable&gt;
            &lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
      &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
    &lt;/a&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='backlinks' var='post'&gt;
  &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
    &lt;dl class='comments-block' id='comments-block'&gt;
      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
        &lt;div class='collapsed-backlink backlink-control'&gt;
          &lt;dt class='comment-title'&gt;
            &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
          &lt;/dt&gt;
          &lt;dd class='comment-body collapseable'&gt;
            &lt;data:backlink.snippet/&gt;
          &lt;/dd&gt;
          &lt;dd class='comment-footer collapseable'&gt;
            &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
            &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
          &lt;/dd&gt;
        &lt;/div&gt;
      &lt;/b:loop&gt;
    &lt;/dl&gt;
  &lt;/b:if&gt;
  &lt;p class='comment-footer'&gt;
    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;h4 id='comment-post-message'&gt;
        &lt;a expr:id='data:widget.instanceId + &amp;quot;_comment-editor-toggle-link&amp;quot;' href='javascript:void(0)'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='commentDeleteIcon' var='comment'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div class='goog-toggle-button'&gt;
        &lt;div class='goog-inline-block comment-action-icon'/&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment_count_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.canonicalUrl'&gt;
    &lt;/span&gt;
  &lt;b:else/&gt;
    &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
      &lt;data:post.commentLabelFull/&gt;:
    &lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comment_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;b:include data='post' name='iframe_comments'/&gt;
  &lt;b:else/&gt;
    &lt;b:if cond='data:post.showThreadedComments'&gt;
      &lt;b:include data='post' name='threaded_comments'/&gt;
    &lt;b:else/&gt;
      &lt;b:include data='post' name='comments'/&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;b:if cond='data:post.allowComments'&gt;
      &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;b:if cond='data:post.hasOlderLinks'&gt;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;&lt;data:post.oldestLinkText/&gt;&lt;/a&gt;
              &amp;#160;
            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;&lt;data:post.olderLinkText/&gt;&lt;/a&gt;
              &amp;#160;
          &lt;/b:if&gt;

          &lt;data:post.commentRangeText/&gt;

          &lt;b:if cond='data:post.hasNewerLinks'&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;&lt;data:post.newerLinkText/&gt;&lt;/a&gt;
            &amp;#160;
            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;&lt;data:post.newestLinkText/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
              &lt;b:if cond='data:comment.favicon'&gt;
                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/&gt;
              &lt;/b:if&gt;
              &lt;a expr:name='data:comment.anchorName'/&gt;
              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                &lt;data:comment.authorAvatarImage/&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;
                  &lt;data:comment.body/&gt;
                &lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
            &lt;data:post.oldestLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
            &lt;data:post.olderLinkText/&gt;
          &lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
            &lt;data:post.newerLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
            &lt;data:post.newestLinkText/&gt;
          &lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;p class='comment-footer'&gt;
        &lt;b:if cond='data:post.embedCommentForm'&gt;
          &lt;b:if cond='data:post.allowNewComments'&gt;
            &lt;b:include data='post' name='comment-form'/&gt;
          &lt;b:else/&gt;
            &lt;data:post.noNewCommentsText/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;

      &lt;/p&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='feedLinks'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
    &lt;b:if cond='data:feedLinks'&gt;
      &lt;div class='blog-feeds'&gt;
        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:else/&gt; &lt;!--Post feed links --&gt;
    &lt;div class='post-feeds'&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.allowComments'&gt;
          &lt;b:if cond='data:post.feedLinks'&gt;
            &lt;b:include data='post.feedLinks' name='feedLinksBody'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='feedLinksBody' var='links'&gt;
  &lt;div class='feed-links'&gt;
  &lt;data:feedLinksMsg/&gt;
  &lt;b:loop values='data:links' var='f'&gt;
     &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
  &lt;/b:loop&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='iframe_comments' var='post'&gt;

  &lt;b:if cond='data:post.allowIframeComments'&gt;
    &lt;script expr:src='data:post.iframeCommentSrc' type='text/javascript'/&gt;
    &lt;div class='cmt_iframe_holder' expr:data-href='data:post.canonicalUrl' expr:data-viewtype='data:post.viewType'/&gt;

    &lt;b:if cond='data:post.embedCommentForm == &amp;quot;false&amp;quot;'&gt;
      &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-index-post' var='post'&gt;
  &lt;div class='mobile-date-outer date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;div class='date-header'&gt;
        &lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-post-outer'&gt;
      &lt;a expr:href='data:post.url'&gt;
        &lt;h3 class='mobile-index-title entry-title' itemprop='name'&gt;
          &lt;data:post.title/&gt;
        &lt;/h3&gt;

        &lt;div class='mobile-index-arrow'&gt;&amp;amp;rsaquo;&lt;/div&gt;

        &lt;div class='mobile-index-contents'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;div class='mobile-index-thumbnail'&gt;
              &lt;div class='Image'&gt;
                &lt;img expr:src='data:post.thumbnailUrl'/&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/b:if&gt;

          &lt;div class='post-body'&gt;
            &lt;b:if cond='data:post.snippet'&gt;&lt;data:post.snippet/&gt;&lt;/b:if&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div style='clear: both;'/&gt;
      &lt;/a&gt;

      &lt;div class='mobile-index-comment'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;b:if cond='data:post.numComments != 0'&gt;
              &lt;b:include data='post' name='comment_count_picker'/&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-main' var='top'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-index-post'/&gt;
        &lt;/b:loop&gt;
      &lt;b:else/&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-post'/&gt;
        &lt;/b:loop&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

   &lt;b:include name='mobile-nextprev'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&amp;amp;lsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&amp;amp;rsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-link-button' id='blog-pager-home-link'&gt;
    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class='mobile-desktop-link'&gt;
      &lt;a class='home-link' expr:href='data:desktopLinkUrl'&gt;&lt;data:desktopLinkMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='mobile-post' var='post'&gt;
  &lt;div class='date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='date-posts'&gt;
      &lt;div class='post-outer'&gt;

        &lt;div class='post hentry uncustomized-post-template' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;meta expr:content='data:post.thumbnailUrl' itemprop='image_url'/&gt;
          &lt;/b:if&gt;
          &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
          &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;

          &lt;a expr:name='data:post.id'/&gt;
          &lt;b:if cond='data:post.title'&gt;
            &lt;h3 class='post-title entry-title' itemprop='name'&gt;
              &lt;b:if cond='data:post.link'&gt;
                &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;b:if cond='data:post.url'&gt;
                  &lt;b:if cond='data:blog.url != data:post.url'&gt;
                    &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
                  &lt;b:else/&gt;
                    &lt;data:post.title/&gt;
                  &lt;/b:if&gt;
                &lt;b:else/&gt;
                  &lt;data:post.title/&gt;
                &lt;/b:if&gt;
              &lt;/b:if&gt;
            &lt;/h3&gt;
          &lt;/b:if&gt;

          &lt;div class='post-header'&gt;
            &lt;div class='post-header-line-1'/&gt;
          &lt;/div&gt;

          &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='articleBody'&gt;
            &lt;data:post.body/&gt;
            &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
          &lt;/div&gt;

          &lt;div class='post-footer'&gt;
            &lt;div class='post-footer-line post-footer-line-1'&gt;
              &lt;span class='post-author vcard'&gt;
                &lt;b:if cond='data:top.showAuthor'&gt;
                  &lt;b:if cond='data:post.authorProfileUrl'&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;meta expr:content='data:post.authorProfileUrl' itemprop='url'/&gt;
                      &lt;a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                        &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                      &lt;/a&gt;
                    &lt;/span&gt;
                  &lt;b:else/&gt;
                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                      &lt;span itemprop='name'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-timestamp'&gt;
                &lt;b:if cond='data:top.showTimestamp'&gt;
                  &lt;data:top.timestampLabel/&gt;
                  &lt;b:if cond='data:post.url'&gt;
                    &lt;meta expr:content='data:post.canonicalUrl' itemprop='url'/&gt;
                    &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-comment-link'&gt;
                &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                  &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                    &lt;b:if cond='data:post.allowComments'&gt;
                      &lt;b:include data='post' name='comment_count_picker'/&gt;
                    &lt;/b:if&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;
            &lt;/div&gt;

            &lt;div class='post-footer-line post-footer-line-2'&gt;
              &lt;b:if cond='data:top.showMobileShare'&gt;
                &lt;div class='mobile-link-button goog-inline-block' id='mobile-share-button'&gt;
                  &lt;a href='javascript:void(0);'&gt;&lt;data:shareMsg/&gt;&lt;/a&gt;
                &lt;/div&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:top.showDummy'&gt;
                &lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;
              &lt;/b:if&gt;
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;

        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:include data='post' name='comment_picker'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;span id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;span id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;

    &lt;b:if cond='data:mobileLinkUrl'&gt;
      &lt;div class='blog-mobile-link'&gt;
        &lt;a expr:href='data:mobileLinkUrl'&gt;&lt;data:mobileLinkMsg/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='post' var='post'&gt;
  &lt;div class='post hentry'&gt;
    &lt;a expr:name='data:post.id'/&gt;
    &lt;b:if cond='data:post.title'&gt;
      &lt;h3 class='post-title entry-title'&gt;
     &lt;b:if cond='data:post.link'&gt;
       &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
     &lt;b:else/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
        &lt;b:else/&gt;
          &lt;data:post.title/&gt;
        &lt;/b:if&gt;
     &lt;/b:if&gt;
      &lt;/h3&gt;
    &lt;/b:if&gt;

    &lt;div class='post-header-line-1'/&gt;

    &lt;div class='post-body entry-content'&gt;
      &lt;data:post.body/&gt;
      &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
    &lt;/div&gt;

    &lt;div class='post-footer'&gt;
    &lt;div class='post-footer-line post-footer-line-1'&gt;&lt;span class='post-author vcard'&gt;
        &lt;b:if cond='data:top.showAuthor'&gt;
          &lt;data:top.authorLabel/&gt;
          &lt;span class='fn'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-comment-link'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-icons'&gt;
        &lt;!-- email post links --&gt;
        &lt;b:if cond='data:post.emailPostUrl'&gt;
          &lt;span class='item-action'&gt;
          &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
              &lt;img alt='' class='icon-action' src='http://www.blogger.com/img/icon18_email.gif'/&gt;
          &lt;/a&gt;
          &lt;/span&gt;
        &lt;/b:if&gt;

        &lt;!-- quickedit pencil --&gt;
        &lt;b:include data='post' name='postQuickEdit'/&gt;
      &lt;/span&gt; &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-2'&gt;&lt;span class='post-labels'&gt;
        &lt;b:if cond='data:post.labels'&gt;
          &lt;data:postLabelsLabel/&gt;
          &lt;b:loop values='data:post.labels' var='label'&gt;
            &lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;,&lt;/b:if&gt;
          &lt;/b:loop&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-3'/&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='postQuickEdit' var='post'&gt;
  &lt;b:if cond='data:post.editUrl'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
        &lt;img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='shareButtons' var='post'&gt;
  &lt;b:if cond='data:top.showEmailButton'&gt;&lt;a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.emailThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showBlogThisButton'&gt;&lt;a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.blogThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showTwitterButton'&gt;&lt;a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToTwitterMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showFacebookButton'&gt;&lt;a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToFacebookMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showOrkutButton'&gt;&lt;a class='goog-inline-block share-button sb-orkut' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=orkut&amp;quot;' expr:title='data:top.shareToOrkutMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToOrkutMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showPinterestButton'&gt;&lt;a class='goog-inline-block share-button sb-pinterest' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=pinterest&amp;quot;' expr:title='data:top.shareToPinterestMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToPinterestMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showDummy'&gt;&lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;&lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='status-message'&gt;
  &lt;b:if cond='data:navMessage'&gt;
  &lt;div class='status-msg-wrap'&gt;
    &lt;div class='status-msg-body'&gt;
      &lt;data:navMessage/&gt;
    &lt;/div&gt;
    &lt;div class='status-msg-border'&gt;
      &lt;div class='status-msg-bg'&gt;
        &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style='clear: both;'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded-comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded_comment_js' var='post'&gt;
  &lt;script async='async' expr:src='data:post.commentSrc' type='text/javascript'/&gt;

  &lt;script type='text/javascript'&gt;
    (function() {
      var items = &lt;data:post.commentJso/&gt;;
      var msgs = &lt;data:post.commentMsgs/&gt;;
      var config = &lt;data:post.commentConfig/&gt;;

// &lt;![CDATA[
      var cursor = null;
      if (items &amp;&amp; items.length &gt; 0) {
        cursor = parseInt(items[items.length - 1].timestamp) + 1;
      }

      var bodyFromEntry = function(entry) {
        if (entry.gd$extendedProperty) {
          for (var k in entry.gd$extendedProperty) {
            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
              return '&lt;span class="deleted-comment"&gt;' + entry.content.$t + '&lt;/span&gt;';
            }
          }
        }
        return entry.content.$t;
      }

      var parse = function(data) {
        cursor = null;
        var comments = [];
        if (data &amp;&amp; data.feed &amp;&amp; data.feed.entry) {
          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
            var comment = {};
            // comment ID, parsed out of the original id format
            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
            comment.id = id ? id[2] : null;
            comment.body = bodyFromEntry(entry);
            comment.timestamp = Date.parse(entry.published.$t) + '';
            if (entry.author &amp;&amp; entry.author.constructor === Array) {
              var auth = entry.author[0];
              if (auth) {
                comment.author = {
                  name: (auth.name ? auth.name.$t : undefined),
                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                };
              }
            }
            if (entry.link) {
              if (entry.link[2]) {
                comment.link = comment.permalink = entry.link[2].href;
              }
              if (entry.link[3]) {
                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                if (pid &amp;&amp; pid[1]) {
                  comment.parentId = pid[1];
                }
              }
            }
            comment.deleteclass = 'item-control blog-admin';
            if (entry.gd$extendedProperty) {
              for (var k in entry.gd$extendedProperty) {
                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {
                  comment.displayTime = entry.gd$extendedProperty[k].value;
                }
              }
            }
            comments.push(comment);
          }
        }
        return comments;
      };

      var paginator = function(callback) {
        if (hasMore()) {
          var url = config.feed + '?alt=json&amp;v=2&amp;orderby=published&amp;reverse=false&amp;max-results=50';
          if (cursor) {
            url += '&amp;published-min=' + new Date(cursor).toISOString();
          }
          window.bloggercomments = function(data) {
            var parsed = parse(data);
            cursor = parsed.length &lt; 50 ? null
                : parseInt(parsed[parsed.length - 1].timestamp) + 1
            callback(parsed);
            window.bloggercomments = null;
          }
          url += '&amp;callback=bloggercomments';
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.getElementsByTagName('head')[0].appendChild(script);
        }
      };
      var hasMore = function() {
        return !!cursor;
      };
      var getMeta = function(key, comment) {
        if ('iswriter' == key) {
          var matches = !!comment.author
              &amp;&amp; comment.author.name == config.authorName
              &amp;&amp; comment.author.profileUrl == config.authorUrl;
          return matches ? 'true' : '';
        } else if ('deletelink' == key) {
          return config.baseUri + '/delete-comment.g?blogID='
               + config.blogId + '&amp;postID=' + comment.id;
        } else if ('deleteclass' == key) {
          return comment.deleteclass;
        }
        return '';
      };

      var replybox = null;
      var replyUrlParts = null;
      var replyParent = undefined;

      var onReply = function(commentId, domId) {
        if (replybox == null) {
          // lazily cache replybox, and adjust to suit this style:
          replybox = document.getElementById('comment-editor');
          if (replybox != null) {
            replybox.height = '250px';
            replybox.style.display = 'block';
            replyUrlParts = replybox.src.split('#');
          }
        }
        if (replybox &amp;&amp; (commentId !== replyParent)) {
          document.getElementById(domId).insertBefore(replybox, null);
          replybox.src = replyUrlParts[0]
              + (commentId ? '&amp;parentID=' + commentId : '')
              + '#' + replyUrlParts[1];
          replyParent = commentId;
        }
      };

      var hash = (window.location.hash || '#').substring(1);
      var startThread, targetComment;
      if (/^comment-form_/.test(hash)) {
        startThread = hash.substring('comment-form_'.length);
      } else if (/^c[0-9]+$/.test(hash)) {
        targetComment = hash.substring(1);
      }

      // Configure commenting API:
      var configJso = {
        'maxDepth': config.maxThreadDepth
      };
      var provider = {
        'id': config.postId,
        'data': items,
        'loadNext': paginator,
        'hasMore': hasMore,
        'getMeta': getMeta,
        'onReply': onReply,
        'rendered': true,
        'initComment': targetComment,
        'initReplyThread': startThread,
        'config': configJso,
        'messages': msgs
      };

      var render = function() {
        if (window.goog &amp;&amp; window.goog.comments) {
          var holder = document.getElementById('comment-holder');
          window.goog.comments.render(holder, provider);
        }
      };

      // render now, or queue to render when library loads:
      if (window.goog &amp;&amp; window.goog.comments) {
        render();
      } else {
        window.goog = window.goog || {};
        window.goog.comments = window.goog.comments || {};
        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
        window.goog.comments.loadQueue.push(render);
      }
    })();
// ]]&gt;
  &lt;/script&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='threaded_comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

    &lt;div class='comments-content'&gt;
      &lt;b:if cond='data:post.embedCommentForm'&gt;
        &lt;b:include data='post' name='threaded_comment_js'/&gt;
      &lt;/b:if&gt;
      &lt;div id='comment-holder'&gt;
         &lt;data:post.commentHtml/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p class='comment-footer'&gt;
      &lt;b:if cond='data:post.allowNewComments'&gt;
        &lt;b:include data='post' name='threaded-comment-form'/&gt;
      &lt;b:else/&gt;
        &lt;data:post.noNewCommentsText/&gt;
      &lt;/b:if&gt;
    &lt;/p&gt;

    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
        &lt;/b:section&gt;
      &lt;/div&gt;

      &lt;div id='sidebar-wrapper'&gt;
        &lt;b:section class='sidebar' id='sidebar' preferred='yes'&gt;
          &lt;b:widget id='HTML2' locked='false' title='About Stephen Cleary' type='HTML'&gt;
            &lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='Image1' locked='false' title='' type='Image'&gt;
            &lt;b:includable id='main'&gt;
    &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
      &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='widget-content'&gt;
      &lt;b:if cond='data:link != &amp;quot;&amp;quot;'&gt;
        &lt;a expr:href='data:link'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_img&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width'/&gt;
        &lt;/a&gt;
      &lt;b:else/&gt;
        &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_img&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width'/&gt;
      &lt;/b:if&gt;
      &lt;br/&gt;
      &lt;b:if cond='data:caption != &amp;quot;&amp;quot;'&gt;
        &lt;span class='caption'&gt;&lt;data:caption/&gt;&lt;/span&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='HTML4' locked='false' title='' type='HTML'&gt;
            &lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='AdSense1' locked='false' title='' type='AdSense'&gt;
            &lt;b:includable id='main'&gt;
  &lt;div class='widget-content'&gt;
    &lt;b:if cond='data:blog.disableAdSenseWidget != &amp;quot;true&amp;quot;'&gt;
      &lt;data:adCode/&gt;
    &lt;/b:if&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='HTML1' locked='false' title='Popular Articles' type='HTML'&gt;
            &lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='HTML3' locked='false' title='Concurrency Cookbook' type='HTML'&gt;
            &lt;b:includable id='main'&gt;
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;data:content/&gt;
  &lt;/div&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
          &lt;b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'&gt;
            &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
  &lt;div id='ArchiveList'&gt;
  &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
    &lt;b:if cond='data:style == &amp;quot;HIERARCHY&amp;quot;'&gt;
     &lt;b:include data='data' name='interval'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;FLAT&amp;quot;'&gt;
      &lt;b:include data='data' name='flat'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;MENU&amp;quot;'&gt;
      &lt;b:include data='data' name='menu'/&gt;
    &lt;/b:if&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='flat' var='data'&gt;
  &lt;ul class='flat'&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;li class='archivedate'&gt;
        &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
      &lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='interval' var='intervalData'&gt;
  &lt;b:loop values='data:intervalData' var='i'&gt;
      &lt;ul class='hierarchy'&gt;
        &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:i.expclass'&gt;
          &lt;b:include data='i' name='toggle'/&gt;
          &lt;a class='post-count-link' expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt;
            &lt;span class='post-count' dir='ltr'&gt;(&lt;data:i.post-count/&gt;)&lt;/span&gt;
          &lt;b:if cond='data:i.data'&gt;
            &lt;b:include data='i.data' name='interval'/&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:i.posts'&gt;
            &lt;b:include data='i.posts' name='posts'/&gt;
          &lt;/b:if&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
  &lt;/b:loop&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='menu' var='data'&gt;
  &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
    &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
    &lt;/b:loop&gt;
  &lt;/select&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='posts' var='posts'&gt;
  &lt;ul class='posts'&gt;
    &lt;b:loop values='data:posts' var='i'&gt;
      &lt;li&gt;&lt;a expr:href='data:i.url'&gt;&lt;data:i.title/&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
            &lt;b:includable id='toggle' var='interval'&gt;
  &lt;b:if cond='data:interval.toggleId'&gt;
  &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy toggle-open'&gt;&amp;#9660;&amp;#160;&lt;/span&gt;
    &lt;/a&gt;
  &lt;b:else/&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy'&gt;
        &lt;b:if cond='data:blog.languageDirection == &amp;quot;rtl&amp;quot;'&gt;
          &amp;#9668;&amp;#160;
        &lt;b:else/&gt;
          &amp;#9658;&amp;#160;
        &lt;/b:if&gt;
      &lt;/span&gt;
    &lt;/a&gt;
  &lt;/b:if&gt;
 &lt;/b:if&gt;
&lt;/b:includable&gt;
          &lt;/b:widget&gt;
        &lt;/b:section&gt;
      &lt;/div&gt;

      &lt;!-- spacer for skins that want sidebar and main to be the same height--&gt;
      &lt;div class='clear'&gt;&amp;#160;&lt;/div&gt;

    &lt;/div&gt; &lt;!-- end content-wrapper --&gt;

    &lt;div id='footer-wrapper'&gt;
      &lt;b:section class='footer' id='footer'/&gt;
    &lt;/div&gt;

  &lt;/div&gt;&lt;/div&gt; &lt;!-- end outer-wrapper --&gt;
&lt;script src='http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.1.min.js'/&gt;
&lt;script&gt;
jQuery.fn.selectText = function () {
    var doc = document
        , element = this[0]
        , range, selection
    ;
    if (doc.body.createTextRange) {
        range = document.body.createTextRange();
        range.moveToElementText(element);
        range.select();
    } else if (window.getSelection) {
        selection = window.getSelection();
        range = document.createRange();
        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);
    }
};
$(function () {
    $(&amp;quot;pre code.csharp&amp;quot;).click(function() {
        $(this).selectText();
    });
});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/template/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/template/default'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_PUBLISHING_MODE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of publishing done for this blog.</title><content type='text'>PUBLISH_MODE_HOSTED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_PUBLISHING_MODE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_ADMIN_PERMISSION</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of administrators' emails for the blog.</title><content type='text'>stephenandmandy@gmail.com,nitoprograms@gmail.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ADMIN_PERMISSION'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_ADULT_CONTENT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog contains adult content</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ADULT_CONTENT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether alternate JS renderings are allowed</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog's Google Analytics account number</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the archive index date format</title><content type='text'>7</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>How frequently this blog should be archived</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_AUTHOR_PERMISSION</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of authors' emails who have permission to publish.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_AUTHOR_PERMISSION'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_BACKLINKS_ALLOWED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comment backlinks on the blog</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_BY_POST_ARCHIVING</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to provide an archive page for each post</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_BY_POST_ARCHIVING'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_ACCESS</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Who can comment</title><content type='text'>ANYONE</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_ACCESS'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_CAPTCHA</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to require commenters to complete a Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_CAPTCHA'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_EMAIL</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of e-mail addresses to send notifications of new comments to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_EMAIL'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_FEED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_FEED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment form location</title><content type='text'>EMBEDDED_IFRAME</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_MESSAGE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment message</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MESSAGE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_MODERATION</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to enable comment moderation</title><content type='text'>DISABLED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MODERATION'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Number of days after which new comments are subject to moderation</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Email address to send notifications of new comments needing moderation to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show profile images in comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENTS_ALLOWED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENTS_ALLOWED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comment time stamp format number</title><content type='text'>23</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to convert line breaks into &lt;br /&gt; tags in post editor</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_CUSTOM_PAGE_NOT_FOUND</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The content served when the requested post or page is not found.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_CUSTOM_ROBOTS_TXT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The custom robots.txt content of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CUSTOM_ROBOTS_TXT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CUSTOM_ROBOTS_TXT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog serves custom robots.txt content to search engines.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_DATE_FORMAT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the date header format</title><content type='text'>6</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DATE_FORMAT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default backlinks mode for posts</title><content type='text'>DEFAULT_NO_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default comment mode for posts</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_DESCRIPTION</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>A description of the blog</title><content type='text'>public Task&amp;lt;object&amp;gt; WordOfGod(); // Is 55:11</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_DESCRIPTION'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_EMAIL_POST_LINKS</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a link for users to e-mail posts</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_EMAIL_POST_LINKS'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_FEED_REDIRECT_URL</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>URL to redirect post feed requests to</title><content type='text'>http://feeds.feedburner.com/NitoPrograms</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_FEED_REDIRECT_URL'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_FLOAT_ALIGNMENT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether float alignment is enabled for the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_LOCALE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Language for this blog</title><content type='text'>en</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_LOCALE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_MAX_NUM</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maximum number of things to show on the main page"</title><content type='text'>7</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_MAX_NUM'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_MAX_UNIT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Unit of things to show on the main page</title><content type='text'>POSTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_MAX_UNIT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_META_DESCRIPTION</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The meta description of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_META_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_META_DESCRIPTION'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_META_DESCRIPTION_ENABLED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog is served with meta descriptions.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_META_DESCRIPTION_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_META_DESCRIPTION_ENABLED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_NAME</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The name of the blog</title><content type='text'>Stephen Cleary (the blog)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_NAME'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_PER_POST_FEED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for per-post comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_PER_POST_FEED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_POST_FEED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog posts</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_POST_FEED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_POST_FEED_FOOTER</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Footer to append to the end of each entry in the post feed</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_POST_FEED_FOOTER'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_POST_TEMPLATE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The template for blog posts</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_POST_TEMPLATE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_PROMOTED</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog can be promoted on Blogger</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_PROMOTED'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_QUICK_EDITING</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Quick Editing is enabled</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_QUICK_EDITING'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_READ_ACCESS_MODE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The access type for the readers of the blog.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_READ_ACCESS_MODE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_READER_PERMISSION</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of emails for users who have permission to read the blog.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_READER_PERMISSION'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_SEARCHABLE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog should be indexed by search engines</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SEARCHABLE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_SEND_EMAIL</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comma separated list of emails to send new blog posts to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SEND_EMAIL'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_SHOW_TITLE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show the title field</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SHOW_TITLE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_SHOW_URL</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a related link box in the post composer</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_SHOW_URL'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_TIME_STAMP_FORMAT</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the time stamp format</title><content type='text'>1</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_TIME_ZONE</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The time zone for this blog</title><content type='text'>America/New_York</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_TIME_ZONE'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.settings.BLOG_USE_LIGHTBOX</id><published>2008-06-20T21:52:00.226-04:00</published><updated>2014-05-16T22:10:30.829-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show images in the Lightbox when clicked</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_USE_LIGHTBOX'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/settings/BLOG_USE_LIGHTBOX'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1859181995861572665</id><published>2014-05-15T12:30:00.000-04:00</published><updated>2014-05-16T14:07:04.065-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task members'/><title type='text'>A Tour of Task, Part 1: Constructors</title><content type='html'>&lt;p&gt;TL;DR: Do not use &lt;code class="csharp"&gt;Task&lt;/code&gt; or &lt;code class="csharp"&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; constructors.&lt;/p&gt;

&lt;p&gt;I actually debated quite a bit on how to start this series! I finally decided on starting with the constructors, even though the &lt;code class="csharp"&gt;Task&lt;/code&gt; constructors are a red herring.&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;div&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-Q73llSSldXw/U3TRd7p1-fI/AAAAAAAALj8/4Hup6iqXw6U/s1600/miniatus-grouper-247578_640.jpg" /&gt;&lt;/div&gt;&lt;div&gt;(not actually a red herring)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class="csharp"&gt;Task&lt;/code&gt; type has a whopping eight constructors:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task(Action);
Task(Action, CancellationToken);
Task(Action, TaskCreationOptions);
Task(Action&amp;lt;Object&amp;gt;, Object);
Task(Action, CancellationToken, TaskCreationOptions);
Task(Action&amp;lt;Object&amp;gt;, Object, CancellationToken);
Task(Action&amp;lt;Object&amp;gt;, Object, TaskCreationOptions);
Task(Action&amp;lt;Object&amp;gt;, Object, CancellationToken, TaskCreationOptions);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The BCL avoids default parameters because they don't work well with &lt;a href="http://haacked.com/archive/2010/08/10/versioning-issues-with-optional-arguments.aspx/"&gt;versioning&lt;/a&gt; and reflection. However, I'm going to rewrite some of the members with optional parameters to reduce the number of overloads that I need to talk about.&lt;/p&gt;

&lt;p&gt;I'm going to call the eight constructors "actual members" because they actually exist. However, these can be reduced to only one "logical member":&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task(Action action, CancellationToken token = &lt;span class="keyword"&gt;new&lt;/span&gt; CancellationToken(), TaskCreationOptions options = TaskCreationOptions.None)
    : &lt;span class="keyword"&gt;this&lt;/span&gt;(_ =&amp;gt; action(), &lt;span class="keyword"&gt;null&lt;/span&gt;, token, options) { }
Task(Action&amp;lt;Object&amp;gt;, Object, CancellationToken = &lt;span class="keyword"&gt;new&lt;/span&gt; CancellationToken(), TaskCreationOptions = TaskCreationOptions.None);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, the &lt;code class="csharp"&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; type has eight actual constructors:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task&amp;lt;TResult&amp;gt;(Func&amp;lt;TResult&amp;gt;);
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;TResult&amp;gt;, CancellationToken);
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;TResult&amp;gt;, TaskCreationOptions);
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;Object, TResult&amp;gt;, Object);
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;TResult&amp;gt;, CancellationToken, TaskCreationOptions);
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;Object, TResult&amp;gt;, Object, CancellationToken);
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;Object, TResult&amp;gt;, Object, TaskCreationOptions);
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;Object, TResult&amp;gt;, Object, CancellationToken, TaskCreationOptions);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which simplify down to a single logical constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task&amp;lt;TResult&amp;gt;(Func&amp;lt;TResult&amp;gt; action, CancellationToken token = &lt;span class="keyword"&gt;new&lt;/span&gt; CancellationToken(), TaskCreationOptions options = TaskCreationOptions.None)
    : &lt;span class="keyword"&gt;base&lt;/span&gt;(_ =&amp;gt; action(), &lt;span class="keyword"&gt;null&lt;/span&gt;, token, options) { }
Task&amp;lt;TResult&amp;gt;(Func&amp;lt;Object, TResult&amp;gt;, Object, CancellationToken, TaskCreationOptions);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, we have 16 actual constructors and two logical constructors.&lt;/p&gt;

&lt;h4&gt;What For?&lt;/h4&gt;

&lt;p&gt;The use case for the task constructors is extremely small.&lt;/p&gt;

&lt;p&gt;Remember that there are two kinds of tasks: Promise Tasks and Delegate Tasks. The task constructors &lt;i&gt;cannot&lt;/i&gt; create Promise Tasks; they only create Delegate Tasks.&lt;/p&gt;

&lt;p&gt;Task constructors should not be used with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;, and they should only rarely be used with parallel programming.&lt;/p&gt;

&lt;p&gt;Parallel programming can be split into two types: &lt;a href="http://msdn.microsoft.com/en-us/library/ff963552.aspx"&gt;data&lt;/a&gt; &lt;a href="http://msdn.microsoft.com/en-us/library/ff963547.aspx"&gt;parallelism&lt;/a&gt; and task parallelism, with the majority of parallel situations calling for data parallelism. Task parallelism can be further split into two types: &lt;a href="http://msdn.microsoft.com/en-us/library/ff963549.aspx"&gt;static task parallelism&lt;/a&gt; (where the number of work items is known at the beginning of the parallel processing) and &lt;a href="http://msdn.microsoft.com/en-us/library/ff963551.aspx"&gt;dynamic task parallelism&lt;/a&gt; (where the number of work items changes while they are being processed). The &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/system.threading.tasks.parallel"&gt;Parallel class&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/dd460688(v=vs.110).aspx"&gt;PLINQ&lt;/a&gt; types in the &lt;a href="http://msdn.microsoft.com/en-us/library/dd460693(v=vs.110).aspx"&gt;Task Parallel Library&lt;/a&gt; provide higher-level constructs for dealing with data parallelism and static task parallelism. The only reason you should ever create a Delegate Task for parallel code is if you are doing dynamic task parallelism. But even then, you &lt;i&gt;almost never&lt;/i&gt; want to use the task constructors! The task constructors create a task that is not ready to run; it has to be scheduled first. This is almost never necessary; in the real world, most tasks should be scheduled immediately. The only reason you'd want to create a task and then &lt;i&gt;not&lt;/i&gt; schedule it is if you wanted to allow the caller to determine which thread the task actually runs on. And even in that scenario, I'd recommend using &lt;code class="csharp"&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt; instead of returning an unscheduled task.&lt;/p&gt;

&lt;p&gt;Let me put that another way: if you are doing dynamic task parallelism and need to construct a task that can run on any thread, and leave that scheduling decision up to another part of the code, and for whatever reason cannot use &lt;code class="csharp"&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt; instead, then (and &lt;i&gt;only&lt;/i&gt; then) you should use a task constructor. I've written countless asynchronous and parallel applications, and I have &lt;b&gt;never&lt;/b&gt; been in this situation.&lt;/p&gt;

&lt;p&gt;Even shorter version: Do Not Use!&lt;/p&gt;

&lt;h4&gt;What Instead?&lt;/h4&gt;

&lt;p&gt;If you're writing &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code, the easiest way to create a Promise Task is to use the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; keyword. If you're wrapping another asynchronous API or event, use &lt;code class="csharp"&gt;Task.Factory.FromAsync&lt;/code&gt; or &lt;code class="csharp"&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;. If you need to run some CPU-bound code and treat it asynchronously, use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. We'll look at all of these options and more in future posts.&lt;/p&gt;

&lt;p&gt;If you're writing parallel code, first try to use &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/system.threading.tasks.parallel"&gt;Parallel&lt;/a&gt; or &lt;a href="http://msdn.microsoft.com/en-us/library/dd460688(v=vs.110).aspx"&gt;PLINQ&lt;/a&gt;. If you actually are doing dynamic task parallelism, use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; or &lt;code class="csharp"&gt;Task.Factory.StartNew&lt;/code&gt;. We'll consider these options as well in future posts.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Sorry that the first post just boiled down to "don't use this", but it is what it is. I'll cover all the constructor arguments such as &lt;code class="csharp"&gt;CancellationToken&lt;/code&gt; later when I cover &lt;code class="csharp"&gt;Task.Factory.StartNew&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think it would be fun to keep a running total of usable members, so here's the results from today's post:&lt;/p&gt;

&lt;table border="0"&gt;
&lt;tr&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Actual Members&lt;/th&gt;&lt;th&gt;Logical Members&lt;/th&gt;&lt;th&gt;Usable for async&lt;/th&gt;&lt;th&gt;Usable for parallel&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Task&lt;/th&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Task&amp;lt;T&amp;gt;&lt;/th&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1859181995861572665/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1859181995861572665'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1859181995861572665'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html' title='A Tour of Task, Part 1: Constructors'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-Q73llSSldXw/U3TRd7p1-fI/AAAAAAAALj8/4Hup6iqXw6U/s72-c/miniatus-grouper-247578_640.jpg' height='72' width='72'/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6760138184967935242</id><published>2014-05-05T08:54:00.000-04:00</published><updated>2014-05-05T08:56:41.974-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Books'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: Concurrency in C# Early Release Ebook Available</title><content type='html'>&lt;p&gt;My editor at O'Reilly was able to get my book into the O'Reilly's Early Release program at the last minute. So, you can buy it today through the Early Release program and get the final eBook when it's completed shortly (it's really just proofreading and formatting at this point).&lt;/p&gt;

&lt;p&gt;Don't forget to use &lt;a href="http://shop.oreilly.com/category/deals/day-against-drm.do"&gt;discount code DRM2014&lt;/a&gt; for 50% off! And thanks to my editor for slipping &lt;a href="http://tinyurl.com/ConcurrencyCookbook"&gt;my book&lt;/a&gt; into the Early Release program so you can get that sale! :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6760138184967935242/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6760138184967935242'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6760138184967935242'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html' title='Announcement: Concurrency in C# Early Release Ebook Available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2462095067454944211</id><published>2014-05-01T14:39:00.000-04:00</published><updated>2014-05-01T14:39:03.482-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: MSDN Article on Async Services</title><content type='html'>&lt;p&gt;My latest MSDN article &lt;a href="http://msdn.microsoft.com/en-us/magazine/dn683795.aspx"&gt;Patterns for Asynchronous MVVM Applications: Services&lt;/a&gt; is online! The title is a slight misnomer, since the article is actually applicable to asynchronous services in &lt;i&gt;any&lt;/i&gt; kind of application (including Console and ASP.NET apps).&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-po_lqTkxvA0/U2KUjEUL5DI/AAAAAAAALgg/A-zm3a45tk4/s1600/dd799403.cover_lrg(en-us,MSDN.10).jpg" /&gt;&lt;/div&gt;

&lt;p&gt;I cover a pretty wide range of topics in a single article. It's kind of like a trimmed-down version of my &lt;a href="http://blog.stephencleary.com/search/label/async%20oop"&gt;async OOP series&lt;/a&gt; from a while ago. Today's MSDN article considers how &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; interacts with inheritance, unit testing, factories, lazy initialization, and constructors.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2462095067454944211/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-msdn-article-on-async.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2462095067454944211'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2462095067454944211'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-msdn-article-on-async.html' title='Announcement: MSDN Article on Async Services'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-po_lqTkxvA0/U2KUjEUL5DI/AAAAAAAALgg/A-zm3a45tk4/s72-c/dd799403.cover_lrg(en-us,MSDN.10).jpg' height='72' width='72'/><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1006372273324474106</id><published>2014-04-28T12:30:00.000-04:00</published><updated>2014-04-28T12:30:00.372-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MVVM/WPF'/><title type='text'>Announcement: Calculated Properties</title><content type='html'>&lt;p&gt;I am pleased to announce the creation of my latest library: &lt;a href="https://github.com/StephenCleary/CalculatedProperties"&gt;calculated properties for C# MVVM apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal of this library is to be as easy-to-use as possible, and to be an actual &lt;i&gt;library&lt;/i&gt; rather than a &lt;i&gt;framework&lt;/i&gt;. Calculated properties should work just fine with MvvmCross, Caliburn.Micro, or any other framework of choice.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1006372273324474106/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1006372273324474106'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1006372273324474106'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html' title='Announcement: Calculated Properties'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4882975809216254701</id><published>2014-04-28T07:40:00.000-04:00</published><updated>2014-04-28T07:40:18.130-04:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>A Tour of Task, Part 1: Constructors</title><content type='html'></content><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/04/a-tour-of-task-part-1-constructors.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4882975809216254701'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4882975809216254701'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6262298736420684770</id><published>2014-04-24T12:30:00.000-04:00</published><updated>2014-05-09T15:42:44.778-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task members'/><title type='text'>A Tour of Task, Part 0: Overview</title><content type='html'>&lt;p&gt;I recently posted a poll on &lt;a href="https://www.youtube.com/watch?v=VqQrUngBDxU"&gt;The Twitter&lt;/a&gt;; here it is with all the responses:&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-wpQPbufSHic/U1kR83AyjrI/AAAAAAAALUI/4i3XPJZjc-A/s1600/Poll.png" /&gt;&lt;/div&gt;

&lt;p&gt;It's unanimous! This post is the first in a series that will take a look at all the &lt;code class="csharp"&gt;Task&lt;/code&gt; members (as of .NET 4.5).&lt;/p&gt;

&lt;h4&gt;A Bit of Task History&lt;/h4&gt;

&lt;p&gt;One of the biggest stumbling blocks to developers learning &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; is actually the &lt;code class="csharp"&gt;Task&lt;/code&gt; type itself. Most developers fall into one of two categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developers who have used &lt;code class="csharp"&gt;Task&lt;/code&gt; and the &lt;a href="http://msdn.microsoft.com/en-us/library/dd460717(v=vs.110).aspx"&gt;TPL (Task Parallel Library)&lt;/a&gt; since it was introduced in .NET 4.0. These developers are familiar with &lt;code class="csharp"&gt;Task&lt;/code&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/ff963553.aspx"&gt;how it is used in parallel processing&lt;/a&gt;. &lt;b&gt;The danger&lt;/b&gt; that these developers face is that &lt;code class="csharp"&gt;Task&lt;/code&gt; (as it is used by the TPL) is pretty much &lt;i&gt;completely different&lt;/i&gt; than &lt;code class="csharp"&gt;Task&lt;/code&gt; (as it is used by &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Developers who have never heard of &lt;code class="csharp"&gt;Task&lt;/code&gt; until &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; came along. To them, &lt;code class="csharp"&gt;Task&lt;/code&gt; is just a part of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; - one more (fairly complicated) thing to learn. "Continuation" is a foreign word. &lt;b&gt;The danger&lt;/b&gt; that these developers face is assuming that every member of &lt;code class="csharp"&gt;Task&lt;/code&gt; is applicable to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; programming, which is most certainly not the case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; team at Microsoft did consider writing their own "Promise" type that would act as an asynchronous task, but the &lt;code class="csharp"&gt;Task&lt;/code&gt; type was too tempting. &lt;code class="csharp"&gt;Task&lt;/code&gt; actually did support promise-style asynchronous tasks (somewhat awkwardly) even in .NET 4.0, and it only took a bit of extension for it to support &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; fully. Also, by merging this "Promise" with the existing &lt;code class="csharp"&gt;Task&lt;/code&gt; type, we end up with a nice unification: it's trivially easy to kick off some operation on a background thread and treat it asynchronously. No conversion from &lt;code class="csharp"&gt;Task&lt;/code&gt; to "Promise" is necessary.&lt;/p&gt;

&lt;p&gt;The downside to using the same type is that it does create some developer confusion. As noted above, developers who have used &lt;code class="csharp"&gt;Task&lt;/code&gt; in the past tend to try to use it the same way in the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; world (which is wrong); and developers who have not used &lt;code class="csharp"&gt;Task&lt;/code&gt; in the past face a bewildering selection of &lt;code class="csharp"&gt;Task&lt;/code&gt; members, almost all of which should not be used in the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; world.&lt;/p&gt;

&lt;p&gt;So, that's how we got to where we are today. This blog series will go through all the various &lt;code class="csharp"&gt;Task&lt;/code&gt; members (yes, &lt;i&gt;all&lt;/i&gt; of them), and explain the purpose behind each one. As we'll see, the vast majority of &lt;code class="csharp"&gt;Task&lt;/code&gt; members have no place in &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code.&lt;/p&gt;

&lt;h4&gt;Two Types of Task&lt;/h4&gt;

&lt;p&gt;There are two types of tasks. The first type is a Delegate Task; this is a task that has code to run. The second type is a Promise Task; this is a task that represents some kind of event or signal. Promise Tasks are often I/O-based signals (e.g., "the HTTP download has completed"), but they can actually represent anything (e.g., "the 10-second timer has expired").&lt;/p&gt;

&lt;p&gt;In the TPL world, most tasks were Delegate Tasks (with some support for Promise Tasks). When code does parallel processing, the various Delegate Tasks are divided up among different threads, which then actually &lt;i&gt;execute&lt;/i&gt; the code in those Delegate Tasks. In the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; world, most tasks are Promise Tasks (with some support for Delegate Tasks). When code does an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; on a Promise Task, &lt;a href="http://blog.stephencleary.com/2013/11/there-is-no-thread.html"&gt;there is no thread&lt;/a&gt; tied up waiting for that promise to complete.&lt;/p&gt;

&lt;p&gt;In the past, I've used the terms "code-based Task" and "event-based Task" to describe the two kinds of tasks. In this series, I will try to use the terms "Delegate Task" and "Promise Task" to distinguish the two.&lt;/p&gt;

&lt;!--

&lt;h4&gt;Historical Task Use Cases&lt;/h4&gt;

&lt;p&gt;Before we dive into the &lt;code class="csharp"&gt;Task&lt;/code&gt; members, I want to briefly describe the use cases for the &lt;code class="csharp"&gt;Task&lt;/code&gt; type in .NET 4.0 code. If you're one of the "never heard of &lt;code class="csharp"&gt;Task&lt;/code&gt;" developers, feel free to skip this section (unless you need to maintain &lt;code class="csharp"&gt;Task&lt;/code&gt;-based .NET 4.0-era code).&lt;p&gt;

&lt;h5&gt;Queue a Delegate to Another Thread&lt;/h5&gt;

&lt;p&gt;Probably the most common use case was just a one-off "queue this work to another thread" kind of call. Usually, the "another thread" was just "some thread pool thread", and the code looks something like this:&lt;/p&gt;



&lt;h5&gt;Promise Tasks&lt;/h5&gt;

&lt;h5&gt;Pipelines&lt;/h5&gt; - ?

&lt;h5&gt;Dynamic Task Parallelism&lt;/h5&gt;

&lt;p&gt;Parallel processing can be broadly divided into &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/dd537608(v=vs.110).aspx"&gt;data parallelism&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/dd537609(v=vs.110).aspx"&gt;task parallelism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Data parallelism is the most common: that's when you have a sequence of values that you need to process in parallel. Data parallelism is handled quite nicely (and exhaustively) by &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/system.threading.tasks.parallel"&gt;&lt;code class="csharp"&gt;Parallel.For&lt;/code&gt;, &lt;code class="csharp"&gt;Parallel.ForEach&lt;/code&gt;&lt;/a&gt;, and &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/dd460688(v=vs.110).aspx"&gt;Parallel LINQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Task parallelism is more rare: that's when you have a number of delegates that you need to execute in parallel. Basic task parallelism is supported by the &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/system.threading.tasks.parallel"&gt;&lt;code class="csharp"&gt;Parallel.Invoke&lt;/code&gt; methods&lt;/a&gt;. That support is only "basic" because you have to know at the beginning of the parallel call how many delegates to schedule. There's another scenario called &lt;a href="http://msdn.microsoft.com/en-us/library/ff963551.aspx"&gt;dynamic task parallelism&lt;/a&gt; that is extremely flexible and enables you to dynamically add more Delegate Tasks to the parallel processing.&lt;/p&gt;

&lt;p&gt;Note how far we got before mentioning Delegate Tasks. The most common parallelism (data parallelism) should be using higher-level abstractions (which do use Delegate Tasks under the covers). The only parallel scenario where you should be dealing with the &lt;code class="csharp"&gt;Task&lt;/code&gt; type directly is the quite rare dynamic task parallelism scenario. I've seen a number of projects in my time that attempted to use &lt;code class="csharp"&gt;Task&lt;/code&gt; directly instead of &lt;code class="csharp"&gt;Parallel&lt;/code&gt; or PLINQ, and ended up way overcomplicated as a result.&lt;/p&gt;

--&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6262298736420684770/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/04/a-tour-of-task-part-0-overview.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6262298736420684770'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6262298736420684770'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/a-tour-of-task-part-0-overview.html' title='A Tour of Task, Part 0: Overview'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-wpQPbufSHic/U1kR83AyjrI/AAAAAAAALUI/4i3XPJZjc-A/s72-c/Poll.png' height='72' width='72'/><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8221701195557924801</id><published>2014-04-17T12:30:00.000-04:00</published><updated>2014-04-17T12:30:00.031-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='Dataflow'/><category scheme='http://www.blogger.com/atom/ns#' term='Books'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: Book</title><content type='html'>&lt;p&gt;I am very pleased to announce that I have finished writing a &lt;b&gt;book!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The title is quite a mouthful: &lt;a href="http://tinyurl.com/ConcurrencyCookbook"&gt;Concurrency in C# Cookbook: Asynchronous, Parallel, and Multithreaded Programming&lt;/a&gt;. The goal of this book is to introduce developers to asynchronous, parallel, and reactive code in a way that is helpful and down-to-earth.&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://tinyurl.com/ConcurrencyCookbook" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-_NoUaSDcWHo/U0_02wpOKHI/AAAAAAAALSk/0r4L8jGH1TQ/s1600/Book.jpg" /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;I have to say that writing this book took a lot more time than I originally thought! I should be able to resume a more normal pace of blogging shortly. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8221701195557924801/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-book.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8221701195557924801'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8221701195557924801'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-book.html' title='Announcement: Book'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-_NoUaSDcWHo/U0_02wpOKHI/AAAAAAAALSk/0r4L8jGH1TQ/s72-c/Book.jpg' height='72' width='72'/><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3432624476188573772</id><published>2014-04-08T12:30:00.000-04:00</published><updated>2014-04-08T12:30:00.897-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MVVM/WPF'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: MSDN "async MVVM" articles</title><content type='html'>&lt;p&gt;Oops, not sure how I missed making this announcement! Sorry for the late notice!&lt;/p&gt;

&lt;p&gt;I have two articles published recently in MSDN magazine, both dealing with patterns for async MVVM applications. The first one is on &lt;a href="http://msdn.microsoft.com/en-us/magazine/dn605875.aspx"&gt;asynchronous MVVM data-binding&lt;/a&gt;, and the second one is on &lt;a href="http://msdn.microsoft.com/en-us/magazine/dn630647.aspx"&gt;asynchronous MVVM commands&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3432624476188573772/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-msdn-async-mvvm-articles.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3432624476188573772'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3432624476188573772'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-msdn-async-mvvm-articles.html' title='Announcement: MSDN &quot;async MVVM&quot; articles'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3097834002628415077</id><published>2014-04-07T12:30:00.000-04:00</published><updated>2014-05-07T16:12:07.968-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: AspNetBackgroundTasks NuGet library</title><content type='html'>&lt;blockquote&gt;&lt;b&gt;Update, 2014-05-07: &lt;/b&gt; This library just won the "shortest lifetime" award. One month after I released this library, &lt;a href="http://msdn.microsoft.com/en-us/library/ms171868(v=vs.110).aspx#v452"&gt;.NET Framework 4.5.2 introduced &lt;code class="csharp"&gt;HostingEnvironment.QueueBackgroundWorkItem&lt;/code&gt;&lt;/a&gt;, which effectively rendered this library obsolete. On .NET 4.5.2, you can use the new API instead of the &lt;code class="csharp"&gt;BackgroundTaskManager.Run&lt;/code&gt; in the AspNetBackgroundTasks library. However, it's still almost always the wrong solution.&lt;/blockquote&gt;

&lt;p&gt;Yielding to popular demand - and against my better judgement - I have created a NuGet package for the code &lt;a href="http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html"&gt;I previously wrote&lt;/a&gt; for handling "fire-and-forget" tasks in ASP.NET.&lt;/p&gt;

&lt;p&gt;Why is this against my better judgement? Because it's almost always the wrong solution, and making the wrong solution easy is digging a pit of failure rather than a pit of success. However, a lot of people want to use it anyway (and many people are actually using &lt;i&gt;worse&lt;/i&gt; solutions because I didn't make this one easy), so I put in plenty of warnings and published it &lt;a href="https://github.com/StephenCleary/AspNetBackgroundTasks"&gt;on GitHub&lt;/a&gt; and &lt;a href="https://www.nuget.org/packages/Nito.AspNetBackgroundTasks/"&gt;on NuGet&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3097834002628415077/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-aspnetbackgroundtasks.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3097834002628415077'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3097834002628415077'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-aspnetbackgroundtasks.html' title='Announcement: AspNetBackgroundTasks NuGet library'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-464295928723139931</id><published>2014-04-04T15:30:00.000-04:00</published><updated>2014-04-04T15:31:07.234-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='Dataflow'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: GRDevDay 2014 slides available</title><content type='html'>&lt;p&gt;This year at &lt;a href="http://grdevday.org/"&gt;GRDevDay 2014&lt;/a&gt; I was honored to present &lt;i&gt;two&lt;/i&gt; sessions.&lt;/p&gt;

&lt;p&gt;The slides and demo code are now available! Please note that there are some hidden slides with additional information that I had to remove for time considerations, so even if you came to the talks, there's some helpful stuff in the slides.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/StephenCleary/Presentations/tree/master/Async%20Servers"&gt;Introduction to async on ASP.NET&lt;/a&gt; was a pretty well-attended talk (~30 people). It covered how asynchronous requests work in ASP.NET, how async/await work in C#, and how async/await work specifically with ASP.NET.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/StephenCleary/Presentations/tree/master/Asynchronous%20Parallel%20Reactive%20-%20HELP!"&gt;Asynchronous? Parallel? Reactive? HELP!&lt;/a&gt; was a &lt;i&gt;very&lt;/i&gt; well-attended talk (~45 people, standing-room only). It was a gentle introduction to various forms of concurrency: parallel processing (using the Parallel class and PLINQ), asynchronous code (using async/await), reactive coding (using Rx), and an overview of TPL Dataflow. If you ever wondered when to use which, take a look at this one.&lt;/p&gt;

&lt;p&gt;I did record both talks, but have not had the time to do post-production. I'll update here and on Twitter when (if) I get around to it. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/464295928723139931/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-grdevday-2014-slides.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/464295928723139931'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/464295928723139931'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-grdevday-2014-slides.html' title='Announcement: GRDevDay 2014 slides available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5685696471092830855</id><published>2014-03-13T12:30:00.000-04:00</published><updated>2014-03-13T12:30:00.737-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>A Cross-Domain Singleton</title><content type='html'>&lt;p&gt;In my current position, I've had to learn a lot more details about two big aspects of the .NET runtime: AppDomains and COM interop. Until about a year ago, I had learned exactly enough of those technologies to pass the Microsoft certification exams, and that was it! I had never used them in production and never intended doing so. At my current job, however, I have no choice, so I've been learning quite a bit about AppDomains and COM interop over the last few months.&lt;/p&gt;

&lt;p&gt;On a side note: blech. I wish I could have remained ignorant. :)&lt;/p&gt;

&lt;p&gt;Anyway, the way our product uses AppDomains, it would benefit from a "cross-AppDomain singleton" for certain lookup operations (including cache). I spent some time playing with this idea over Christmas break, and Googled up several implementations. None of them were quite complete, though; many punted on thread safety, which was an absolute necessity for my scenario.&lt;/p&gt;

&lt;p&gt;So, I wrote my own. Initially I borrowed heavily from other AppDomain-aware singletons, until I had a minor epiphany. Since this was a true application-level singleton, it would never be destroyed, and the correct place to initialize it is &lt;i&gt;in the default AppDomain&lt;/i&gt;. The "default AppDomain" is the first one in a process, and it &lt;a href="http://blogs.msdn.com/b/cbrumme/archive/2003/06/01/51466.aspx"&gt;can never be unloaded&lt;/a&gt;. All non-default AppDomains then request the instance from the default AppDomain. Those other AppDomains can come and go, but the default AppDomain (including all cross-AppDomain singletons) would remain.&lt;/p&gt;

&lt;p&gt;Once I decided to assign all singletons to the default AppDomain, the implementation simplified significantly. The algorithm is different based on whether an instance is requested from the default or a non-default AppDomain.&lt;/p&gt;

&lt;p&gt;When an instance is requested on a non-default AppDomain, it will first check to see if there is a local, cached copy in the current AppDomain. If there is, then it is returned immediately. Otherwise, it will attempt to get the instance from an AppDomain value stored on the default AppDomain. If that value is not found, then it invokes a method on the default AppDomain that just requests the instance.&lt;/p&gt;

&lt;p&gt;When an instance is requested on the default AppDomain, it will first check to see if the instance has been created, and return it immediately if so. Otherwise, it will create a new instance and set that instance as an AppDomain value on the default AppDomain, and then return the instance.&lt;/p&gt;

&lt;p&gt;This implementation is fully threadsafe, using Lazy&amp;lt;T&amp;gt; for all lazy construction. The only drawback to this solution is that it does use a tiny bit of COM interop to a deprecated interface (ICorRuntimeHost); if anyone knows of a better way to get the default AppDomain, I'm all ears!&lt;/p&gt;

&lt;p&gt;Also, I cheated just a little bit to simplify lifetime management. By default, remote proxies will time out if you don't use them for 10 minutes, and this is no good since my singleton type caches the proxies locally for each AppDomain. So, my singleton actually creates a &lt;i&gt;wrapper&lt;/i&gt; around the instance, and caches proxies to that wrapper (and the wrapper proxies never expire). However, this means that each time the code accesses the singleton instance, a new proxy is actually created and returned - so it's ideal for the occasional-access scenario but not so much for the constant-access scenario. If the proxy creation slows you down too much, then you can use the CachedInstance property instead, which will cache the actual (unwrapped) instance; and in that case the responsibility falls back on you to properly handle proxy lifetimes.&lt;/p&gt;

&lt;p&gt;The full public API is quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt; DomainAwareSingleton
{
    &lt;span class="comment"&gt;// A domain-aware singleton. Only one instance of T will exist, belonging to the default AppDomain. All members of this type are threadsafe.&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; Singleton&amp;lt;T&amp;gt; &lt;span class="keyword"&gt;where&lt;/span&gt; T : MarshalByRefObject, &lt;span class="keyword"&gt;new&lt;/span&gt;()
    {
        &lt;span class="comment"&gt;// Gets the process-wide instance.&lt;/span&gt;
        &lt;span class="comment"&gt;// If the current domain is not the default AppDomain, this property returns a new proxy to the actual instance.&lt;/span&gt;
        &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; T Instance { &lt;span class="keyword"&gt;get&lt;/span&gt;; }

        &lt;span class="comment"&gt;// Gets the process-wide instance.&lt;/span&gt;
        &lt;span class="comment"&gt;// If the current domain is not the default AppDomain, this property returns a cached proxy to the actual instance.&lt;/span&gt;
        &lt;span class="comment"&gt;// It is your responsibility to ensure that the cached proxy does not time out; if you don&amp;#39;t know what this means, use Instance instead.&lt;/span&gt;
        &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; T CachedInstance { &lt;span class="keyword"&gt;get&lt;/span&gt;; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the &lt;a href="https://github.com/StephenCleary/CrossDomainSingleton/blob/master/Source/DomainAwareSingleton/Singleton.cs"&gt;code is on GitHub&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5685696471092830855/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/03/a-cross-domain-singleton.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5685696471092830855'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5685696471092830855'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/03/a-cross-domain-singleton.html' title='A Cross-Domain Singleton'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2767646867034459027</id><published>2014-02-27T12:30:00.000-05:00</published><updated>2014-02-27T16:33:17.293-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Guidelines for Lock-free Programming</title><content type='html'>&lt;ol&gt;
&lt;li&gt;Don't.&lt;/li&gt;
&lt;/ol&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2767646867034459027/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html' title='Guidelines for Lock-free Programming'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8380703034345115947</id><published>2014-02-20T12:30:00.000-05:00</published><updated>2014-02-20T12:30:00.450-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Synchronous and Asynchronous Delegate Types</title><content type='html'>&lt;p&gt;Delegate types can be confusing to developers who are learning more about async and await.&lt;/p&gt;

&lt;p&gt;There is a pattern to asynchronous delegate types, but first you must understand how asynchronous methods are related to their synchronous counterparts. When transforming a synchronous method to async, one of the steps is to change the return type. If &lt;code class="csharp"&gt;MyMethod&lt;/code&gt; returns &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;, then &lt;code class="csharp"&gt;MyMethodAsync&lt;/code&gt; should return &lt;code class="csharp"&gt;Task&lt;/code&gt;. Otherwise (that is, if &lt;code class="csharp"&gt;MyMethod&lt;/code&gt; returns &lt;code class="csharp"&gt;T&lt;/code&gt;), then &lt;code class="csharp"&gt;MyMethodAsync&lt;/code&gt; should return &lt;code class="csharp"&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;. This modification of the return type is what makes delegate type translation a bit tricky.&lt;/p&gt;

&lt;!--&lt;blockquote&gt;Actually, if C# had a true "void type" (commonly called "unit" in functional languages), we wouldn't have this problem. But it's too late for that now.&lt;/blockquote&gt;--&gt;

&lt;p&gt;This return-type transformation can also be applied to delegate types. If the delegate is one of the &lt;code class="csharp"&gt;Action&lt;/code&gt; delegate types, then change it to &lt;code class="csharp"&gt;Func&lt;/code&gt; and append a &lt;code class="csharp"&gt;Task&lt;/code&gt; (as the return type). Otherwise (that is, the delegate is already a &lt;code class="csharp"&gt;Func&lt;/code&gt;), change the last type argument from &lt;code class="csharp"&gt;T&lt;/code&gt; to &lt;code class="csharp"&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This a bit complex to describe in words, so here's a little table that lays out several examples. Each synchronous example is paired with its asynchronous counterpart:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Standard Type&lt;/th&gt;&lt;th&gt;Example Lambda&lt;/th&gt;&lt;th&gt;Parameters&lt;/th&gt;&lt;th&gt;Return Value&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class="csharp"&gt;Action&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;() =&amp;gt; { }&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt; { &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Yield(); }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class="csharp"&gt;Func&amp;lt;TResult&amp;gt;&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;Func&amp;lt;Task&amp;lt;TResult&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;() =&amp;gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; 13; }&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt; { &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Yield(); &lt;span class="keyword"&gt;return&lt;/span&gt; 13; }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;TResult&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class="csharp"&gt;Action&amp;lt;TArg1&amp;gt;&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;Func&amp;lt;TArg1, Task&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;x =&amp;gt; { }&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; x =&amp;gt; { &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Yield(); }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;TArg1&lt;/code&gt;&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class="csharp"&gt;Func&amp;lt;TArg1, TResult&amp;gt;&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;Func&amp;lt;TArg1, Task&amp;lt;TResult&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;x =&amp;gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; 13; }&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; x =&amp;gt; { &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Yield(); &lt;span class="keyword"&gt;return&lt;/span&gt; 13; }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;TArg1&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;TResult&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class="csharp"&gt;Action&amp;lt;TArg1, TArg2&amp;gt;&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;Func&amp;lt;TArg1, TArg2, Task&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;(x, y) =&amp;gt; { }&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; (x, y) =&amp;gt; { &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Yield(); }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;TArg1, TArg2&lt;/code&gt;&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class="csharp"&gt;Func&amp;lt;TArg1, TArg2, TResult&amp;gt;&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;Func&amp;lt;TArg1, TArg2, Task&amp;lt;TResult&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;(x, y) =&amp;gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; 13; }&lt;/code&gt;&lt;br/&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; (x, y) =&amp;gt; { &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Yield(); &lt;span class="keyword"&gt;return&lt;/span&gt; 13; }&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;TArg1, TArg2&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class="csharp"&gt;TResult&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The table above ignores &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt; methods, which you &lt;a href="http://msdn.microsoft.com/en-us/magazine/jj991977.aspx"&gt;should be avoiding anyway&lt;/a&gt;. Async void methods are tricky because you &lt;i&gt;can&lt;/i&gt; assign a lambda like &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt; { &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Yield(); }&lt;/code&gt; to a variable of type &lt;code class="csharp"&gt;Action&lt;/code&gt;, even though the &lt;i&gt;natural&lt;/i&gt; type of that lambda is &lt;code class="csharp"&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt;. Stephen Toub has written &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/08/10265476.aspx"&gt;more about the pitfalls of async void lambdas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a closing note, the C# compiler has been updated in VS2012 to correctly perform overload resolution in the presence of async lambdas. So, this kind of method declaration works fine:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task QueueAsync(Action action); &lt;span class="comment"&gt;// Sync, no return value&lt;/span&gt;
Task&amp;lt;T&amp;gt; QueueAsync&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; action); &lt;span class="comment"&gt;// Sync with return value&lt;/span&gt;
Task QueueAsync(Func&amp;lt;Task&amp;gt; action); &lt;span class="comment"&gt;// Async, no return value&lt;/span&gt;
Task&amp;lt;T&amp;gt; QueueAsync&amp;lt;T&amp;gt;(Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; action); &lt;span class="comment"&gt;// Async with return value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8380703034345115947/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/02/synchronous-and-asynchronous-delegate.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8380703034345115947'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8380703034345115947'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/synchronous-and-asynchronous-delegate.html' title='Synchronous and Asynchronous Delegate Types'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4569388941072994202</id><published>2014-01-09T21:07:00.000-05:00</published><updated>2014-01-09T21:07:01.273-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Achievement Unlocked: Speak at CodeMash</title><content type='html'>&lt;p&gt;I'm pleased to say that I'm now a CodeMash speaker! I gave a talk this morning on "Async on the Server." This talk was an introduction to async/await on ASP.NET.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/TechConf/CodeMash2014/tree/master/Async%20on%20the%20Server"&gt;slides are available&lt;/a&gt; on the unofficial CodeMash speaker repo on GitHub. I'll put up another post if the video turns out OK (my video camera is quite old and it was taking non-HD interlaced video).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4569388941072994202/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/01/achievement-unlocked-speak-at-codemash.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4569388941072994202'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4569388941072994202'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/01/achievement-unlocked-speak-at-codemash.html' title='Achievement Unlocked: Speak at CodeMash'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3617586834637343726</id><published>2014-01-02T11:00:00.000-05:00</published><updated>2014-01-02T11:00:00.946-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: Speaking at CodeMash 2014</title><content type='html'>&lt;p&gt;This is just a short blog post to announce that I am speaking at &lt;a href="http://codemash.org/"&gt;CodeMash 2014&lt;/a&gt; in Sandusky, Ohio, on Thursday, January 9th at 11:00am - exactly one week from now (there are always a few last-minute schedule adjustments, so be sure to double-check the time after arriving at the conference).&lt;/p&gt;

&lt;p&gt;My talk is titled "Async on the Server". It will be similar to my &lt;a href="http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html"&gt;talk from ThatConference 2013&lt;/a&gt;, but I'm rewriting it to be much more of an "&lt;i&gt;introduction&lt;/i&gt; to async on ASP.NET" instead of my ThatConference talk which was more like "assuming you already know async, here's all the advanced stuff you need to know to make it work perfectly on any kind of server". I think this may actually be the very first time I've given a beginner-level talk, so we'll see how it goes. :)&lt;/p&gt;

&lt;p&gt;I'm quite excited to have this speaking opportunity, and I hope folks will be able to come to it!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3617586834637343726/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2014/01/announcement-speaking-at-codemash-2014.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3617586834637343726'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3617586834637343726'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/01/announcement-speaking-at-codemash-2014.html' title='Announcement: Speaking at CodeMash 2014'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921</id><published>2013-12-12T12:30:00.000-05:00</published><updated>2014-05-16T22:10:30.851-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure'/><title type='text'>Azure Cache Serialization (with JSON!)</title><content type='html'>&lt;p&gt;I'm building an Azure service that will rely somewhat heavily on Azure in-role caching; this post documents some of my findings.&lt;/p&gt;

&lt;h4&gt;Serialization Options&lt;/h4&gt;

&lt;p&gt;Azure caching is a form of distributed cache, so it uses serialization to store object instances. When you install the NuGet Azure Caching package, you get a .config that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dataCacheClients&amp;gt;
  &amp;lt;dataCacheClient name=&amp;quot;default&amp;quot;&amp;gt;
  &amp;lt;/dataCacheClient&amp;gt;
&amp;lt;/dataCacheClients&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the settings are documented &lt;a href="http://msdn.microsoft.com/en-us/library/windowsazure/jj658973.aspx"&gt;on MSDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the default settings like this, Azure Caching will use &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.serialization.netdatacontractserializer.aspx"&gt;NetDataContractSerializer&lt;/a&gt;. As we'll see, this is not exactly the most efficient setting.&lt;/p&gt;

&lt;p&gt;First, let's consider alternative serializers. You can add a &lt;code&gt;serializationProperties&lt;/code&gt; element to your config and specify &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter.aspx"&gt;BinaryFormatter&lt;/a&gt; as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dataCacheClients&amp;gt;
  &amp;lt;dataCacheClient name=&amp;quot;default&amp;quot;&amp;gt;
    &amp;lt;serializationProperties serializer=&amp;quot;BinaryFormatter&amp;quot; /&amp;gt;
  &amp;lt;/dataCacheClient&amp;gt;
&amp;lt;/dataCacheClients&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also specify a custom serializer as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dataCacheClients&amp;gt;
  &amp;lt;dataCacheClient name=&amp;quot;default&amp;quot;&amp;gt;
    &amp;lt;serializationProperties serializer=&amp;quot;CustomSerializer&amp;quot; customSerializerType=&amp;quot;MyType,MyAssembly&amp;quot; /&amp;gt;
  &amp;lt;/dataCacheClient&amp;gt;
&amp;lt;/dataCacheClients&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's also another knob you can tweak: you can turn on compression (i.e., &lt;code&gt;DeflateStream&lt;/code&gt;) by setting &lt;code&gt;isCompressionEnabled&lt;/code&gt; as such:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dataCacheClients&amp;gt;
  &amp;lt;dataCacheClient name=&amp;quot;default&amp;quot; isCompressionEnabled=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;/dataCacheClient&amp;gt;
&amp;lt;/dataCacheClients&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Under the Covers&lt;/h4&gt;

&lt;p&gt;There are actually seven different serializers that can be used, as of the time of this writing. Each serialized object is prepended with a tiny prefix that identifies the serializer used and whether the object stream is compressed.&lt;/p&gt;

&lt;p&gt;If you specify &lt;code&gt;CustomSerializer&lt;/code&gt; for the serializer type, then your custom serializer is &lt;i&gt;always&lt;/i&gt; used. However, if you're using &lt;code&gt;NetDataContractSerializer&lt;/code&gt; or &lt;code&gt;BinaryFormatter&lt;/code&gt;, then Azure Caching automatically switches to optimized serializers if your objects are already binary arrays (&lt;code&gt;byte[]&lt;/code&gt;), primitive types (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;), or &lt;code&gt;SessionStoreProviderData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the prefix for a custom serializer only indicates that a custom serializer was used; it does not store the actual type of the custom serializer.&lt;/p&gt;

&lt;h4&gt;Changing Serialization Options&lt;/h4&gt;

&lt;p&gt;Since Azure Caching stores a prefix, you can change the &lt;code&gt;isCompressionEnabled&lt;/code&gt; during a rolling upgrade without any problems. Similarly, you can change &lt;code&gt;serializer&lt;/code&gt; back and forth between &lt;code&gt;NetDataContractSerializer&lt;/code&gt; and &lt;code&gt;BinaryFormatter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also change &lt;code&gt;serializer&lt;/code&gt; to &lt;code&gt;CustomSerializer&lt;/code&gt; during a rolling upgrade, but you can't change back. This is because Azure Caching will not use a custom deserializer unless it is configured to use a custom serializer.&lt;/p&gt;

&lt;p&gt;Also, note that once a custom serializer is specified, it is &lt;i&gt;always&lt;/i&gt; used. So your custom serializer should at least have versioning logic built-in; otherwise you won't ever be able to change your custom serialization during a rolling upgrade.&lt;/p&gt;

&lt;h4&gt;Performance&lt;/h4&gt;

&lt;p&gt;I wrote up a simple test to compare these serializers and see what kind of effect compression has. This test only covers the actual serialization used by Azure Caching without actually putting the items in the cache.&lt;/p&gt;

&lt;p&gt;In my Azure service, I'll be mostly storing small custom objects with 3-4 string properties, so that's what I'm testing here. The type looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; MyTypeNSer
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; FirstName { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; LastName { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; Description { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's a matching type called &lt;code class="csharp"&gt;MyTypeYSer&lt;/code&gt; which is identical except it is marked with &lt;code class="csharp"&gt;[Serializable]&lt;/code&gt;, which is required by &lt;code class="csharp"&gt;BinaryFormatter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All instances have &lt;code class="csharp"&gt;FirstName&lt;/code&gt; set to &lt;code class="csharp"&gt;&lt;span class="string"&gt;&amp;quot;Christopher&amp;quot;&lt;/span&gt;&lt;/code&gt;, &lt;code class="csharp"&gt;LastName&lt;/code&gt; set to &lt;code class="csharp"&gt;&lt;span class="string"&gt;&amp;quot;Dombrowski&amp;quot;&lt;/span&gt;&lt;/code&gt;, and &lt;code class="csharp"&gt;Description&lt;/code&gt; set to &lt;code class="csharp"&gt;&lt;span class="string"&gt;&amp;quot;This is a generic string solely for the purpose of searching.&amp;quot;&lt;/span&gt;&lt;/code&gt;. This is representative of the kinds of data I'll be storing in the cache in my project; if your object structure is quite different, then your results may be different as well.&lt;/p&gt;

&lt;p&gt;I ran through serializing with each of the built-in serializers, as well as JSON and BSON (binary JSON) serializers from JSON.NET; and with/without compression for each one. Each test serialized the object instance and then deserialized it, and compared the deserialized object with the original to ensure there were no errors.&lt;/p&gt;

&lt;p&gt;First, the default serializer (&lt;code class="csharp"&gt;NetDataContractSerializer&lt;/code&gt;), which is XML-based. When serialized, the &lt;code class="csharp"&gt;MyTypeNSer&lt;/code&gt; instance took up 521 bytes (312 compressed). The serialized data looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;MyTypeNSer z:Id=&amp;quot;1&amp;quot; z:Type=&amp;quot;AzureCacheSizeTest.MyTypeNSer&amp;quot; z:Assembly=&amp;quot;AzureCacheSizeTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&amp;quot; xmlns=&amp;quot;http://schemas.datacontract.org/2004/07/AzureCacheSizeTest&amp;quot; xmlns:i=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:z=&amp;quot;http://schemas.microsoft.com/2003/10/Serialization/&amp;quot;&amp;gt;&amp;lt;Description z:Id=&amp;quot;2&amp;quot;&amp;gt;This is a generic string solely for the purpose of searching.&amp;lt;/Description&amp;gt;&amp;lt;FirstName z:Id=&amp;quot;3&amp;quot;&amp;gt;Christopher&amp;lt;/FirstName&amp;gt;&amp;lt;LastName z:Id=&amp;quot;4&amp;quot;&amp;gt;Dombrowski&amp;lt;/LastName&amp;gt;&amp;lt;/MyTypeNSer&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During my testing, I discovered that the default serializer acts differently when used on a &lt;code class="csharp"&gt;[Serializable]&lt;/code&gt; type. Instead of serializing the properties directly, it looks like it serializes their backing fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;MyTypeYSer z:Id=&amp;quot;1&amp;quot; z:Type=&amp;quot;AzureCacheSizeTest.MyTypeYSer&amp;quot; z:Assembly=&amp;quot;AzureCacheSizeTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&amp;quot; xmlns=&amp;quot;http://schemas.datacontract.org/2004/07/AzureCacheSizeTest&amp;quot; xmlns:i=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:z=&amp;quot;http://schemas.microsoft.com/2003/10/Serialization/&amp;quot;&amp;gt;&amp;lt;_x003C_Description_x003E_k__BackingField z:Id=&amp;quot;2&amp;quot;&amp;gt;This is a generic string solely for the purpose of searching.&amp;lt;/_x003C_Description_x003E_k__BackingField&amp;gt;&amp;lt;_x003C_FirstName_x003E_k__BackingField z:Id=&amp;quot;3&amp;quot;&amp;gt;Christopher&amp;lt;/_x003C_FirstName_x003E_k__BackingField&amp;gt;&amp;lt;_x003C_LastName_x003E_k__BackingField z:Id=&amp;quot;4&amp;quot;&amp;gt;Dombrowski&amp;lt;/_x003C_LastName_x003E_k__BackingField&amp;gt;&amp;lt;/MyTypeYSer&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case (with automatic backing fields), this bloats the serialized size to 695 bytes (340 compressed). Here's a side-by-side comparison of how the data looks:&lt;/p&gt;

&lt;pre&gt;&lt;code style="word-wrap: normal;"&gt;&amp;lt;MyTypeNSer z:Id=&amp;quot;1&amp;quot; z:Type=&amp;quot;AzureCacheSizeTest.MyTypeNSer&amp;quot; z:Assembly=&amp;quot;AzureCacheSizeTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&amp;quot; xmlns=&amp;quot;http://schemas.datacontract.org/2004/07/AzureCacheSizeTest&amp;quot; xmlns:i=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:z=&amp;quot;http://schemas.microsoft.com/2003/10/Serialization/&amp;quot;&amp;gt;&amp;lt;Description z:Id=&amp;quot;2&amp;quot;&amp;gt;This is a generic string solely for the purpose of searching.&amp;lt;/Description&amp;gt;&amp;lt;FirstName z:Id=&amp;quot;3&amp;quot;&amp;gt;Christopher&amp;lt;/FirstName&amp;gt;&amp;lt;LastName z:Id=&amp;quot;4&amp;quot;&amp;gt;Dombrowski&amp;lt;/LastName&amp;gt;&amp;lt;/MyTypeNSer&amp;gt;
&amp;lt;MyTypeYSer z:Id=&amp;quot;1&amp;quot; z:Type=&amp;quot;AzureCacheSizeTest.MyTypeYSer&amp;quot; z:Assembly=&amp;quot;AzureCacheSizeTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&amp;quot; xmlns=&amp;quot;http://schemas.datacontract.org/2004/07/AzureCacheSizeTest&amp;quot; xmlns:i=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:z=&amp;quot;http://schemas.microsoft.com/2003/10/Serialization/&amp;quot;&amp;gt;&amp;lt;_x003C_Description_x003E_k__BackingField z:Id=&amp;quot;2&amp;quot;&amp;gt;This is a generic string solely for the purpose of searching.&amp;lt;/_x003C_Description_x003E_k__BackingField&amp;gt;&amp;lt;_x003C_FirstName_x003E_k__BackingField z:Id=&amp;quot;3&amp;quot;&amp;gt;Christopher&amp;lt;/_x003C_FirstName_x003E_k__BackingField&amp;gt;&amp;lt;_x003C_LastName_x003E_k__BackingField z:Id=&amp;quot;4&amp;quot;&amp;gt;Dombrowski&amp;lt;/_x003C_LastName_x003E_k__BackingField&amp;gt;&amp;lt;/MyTypeYSer&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up is the &lt;code class="csharp"&gt;BinaryFormatter&lt;/code&gt;. As expected, the binary serializer results in a smaller object size: 325 bytes (229 compressed). The serialized data looks like this (using &lt;code&gt;\xx&lt;/code&gt; for binary hex values):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\00\01\00\00\00\FF\FF\FF\FF\01\00\00\00\00\00\00\00\0C\02\00\00\00IAzureCacheSizeTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\05\01\00\00\00\1DAzureCacheSizeTest.MyTypeYSer\03\00\00\00\1A&amp;lt;FirstName&amp;gt;k__BackingField\19&amp;lt;LastName&amp;gt;k__BackingField\1C&amp;lt;Description&amp;gt;k__BackingField\01\01\01\02\00\00\00\06\03\00\00\00\0BChristopher\06\04\00\00\00\0ADombrowski\06\05\00\00\00=This is a generic string solely for the purpose of searching.\0B&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I wanted to try JSON, since practically any modern Azure service &lt;i&gt;already&lt;/i&gt; has a reference to JSON.NET anyway. JSON performed quite well: 189 bytes (140 compressed). The serialized instance looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;$type&amp;quot;:&amp;quot;AzureCacheSizeTest.MyTypeNSer, AzureCacheSizeTest&amp;quot;,&amp;quot;FirstName&amp;quot;:&amp;quot;Christopher&amp;quot;,&amp;quot;LastName&amp;quot;:&amp;quot;Dombrowski&amp;quot;,&amp;quot;Description&amp;quot;:&amp;quot;This is a generic string solely for the purpose of searching.&amp;quot;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, I was also aware that JSON.NET supports BSON (Binary JSON), so I was curious to see whether there were any further space savings that I could squeeze out. BSON was slightly &lt;i&gt;less&lt;/i&gt; efficient than JSON, weighing in at 197 bytes (152 compressed). As it turns out, BSON is not a "compressed JSON" format as much as it is a "fast and traversable" JSON, as &lt;a href=" http://bsonspec.org/#/faq"&gt;described in their FAQ&lt;/a&gt;. For completeness, here's the same instance as it appears in BSON:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\C5\00\00\00\02$type\002\00\00\00AzureCacheSizeTest.MyTypeNSer, AzureCacheSizeTest\00\02FirstName\00\0C\00\00\00Christopher\00\02LastName\00\0B\00\00\00Dombrowski\00\02Description\00&amp;gt;\00\00\00This is a generic string solely for the purpose of searching.\00\00&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that BSON would perform better than JSON if I was storing more binary data, e.g., profile images of the people. But my use case is just strings, and there JSON wins out.&lt;/p&gt;

&lt;h4&gt;The Graph&lt;/h4&gt;

&lt;p&gt;Here's all the results in a more visual format, from most efficient to least efficient:&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-6Rz4mJM8HKw/Uqch16fqLYI/AAAAAAAAKZo/7EwdycCAX2s/s1600/Serialization+sizes.png" /&gt;&lt;/div&gt;

&lt;h4&gt;Lessons Learned&lt;/h4&gt;

&lt;p&gt;At the very least, you should turn on compression (a 40% savings over the default settings). You can do this at any time, even with a rolling upgrade.&lt;/p&gt;

&lt;p&gt;Also consider compressed &lt;code class="csharp"&gt;BinaryFormatter&lt;/code&gt; (a 55% savings). Unfortunately, &lt;code class="csharp"&gt;BinaryFormatter&lt;/code&gt; does require your types to be &lt;code class="csharp"&gt;[Serializable]&lt;/code&gt;, which can be tedious or impossible. Switching to &lt;code class="csharp"&gt;BinaryFormatter&lt;/code&gt; can also be done with a rolling upgrade.&lt;/p&gt;

&lt;p&gt;For myself, I'm going all-out with a JSON-based custom serializer that handles its own versioning. This offers the most compact representation of the ones I tried (&gt;70%, or 3.5 times smaller). However, once you switch to &lt;code class="csharp"&gt;CustomSerializer&lt;/code&gt;, you can never switch back with a rolling upgrade (you'd need to fully stop your service, clearing the cache, and then start again).&lt;/p&gt;

&lt;h4&gt;Note on JSON and Type Names&lt;/h4&gt;

&lt;p&gt;By default, JSON doesn't store the type names of the objects it's serializing. If the type name isn't stored, the deserializer can't know the type of the serialized object, and it will just create a &lt;code class="csharp"&gt;JObject&lt;/code&gt; and return that.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="http://james.newtonking.com/json/help/index.html?topic=html/SerializationGuide.htm"&gt;instruct JSON.NET to emit type names&lt;/a&gt;. I chose &lt;code class="csharp"&gt;TypeNameHandling.Auto&lt;/code&gt;, which means that the type name is only serialized if it doesn't match the declared type. This meant I also had to call the &lt;code class="csharp"&gt;JsonSerializer.Serialize&lt;/code&gt; overload that took a &lt;code class="csharp"&gt;Type&lt;/code&gt; argument, passing &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;typeof&lt;/span&gt;(&lt;span class="keyword"&gt;object&lt;/span&gt;)&lt;/code&gt;. This sounds weird, but what I'm actually doing is explicitly telling JSON.NET that my instance was declared as type &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;object&lt;/span&gt;&lt;/code&gt; and therefore needs a type name emitted at the root.&lt;/p&gt;

&lt;h4&gt;The Code&lt;/h4&gt;

&lt;p&gt;This is a simple console app &lt;a href="https://gist.github.com/StephenCleary/7890983"&gt;up on Gist&lt;/a&gt; that displays the sizes to the console and trace-writes the actual streams to the debugger.&lt;/p&gt;

&lt;script src="https://gist.github.com/StephenCleary/7890983.js"&gt;&lt;/script&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2320502171131854921/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html#comment-form' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' title='Azure Cache Serialization (with JSON!)'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-6Rz4mJM8HKw/Uqch16fqLYI/AAAAAAAAKZo/7EwdycCAX2s/s72-c/Serialization+sizes.png' height='72' width='72'/><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003</id><published>2013-11-21T12:30:00.000-05:00</published><updated>2013-11-25T08:34:36.983-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Device drivers'/><title type='text'>There Is No Thread</title><content type='html'>&lt;p&gt;This is an essential truth of async in its purest form: &lt;b&gt;There is no thread.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The objectors to this truth are legion. "No," they cry, "if I am awaiting an operation, there &lt;i&gt;must&lt;/i&gt; be a thread that is doing the wait! It's probably a thread pool thread. Or an OS thread! Or something with a device driver..."&lt;/p&gt;

&lt;p&gt;Heed not those cries. If the async operation is pure, then there is no thread.&lt;/p&gt;

&lt;p&gt;The skeptical are not convinced. Let us humor them.&lt;/p&gt;

&lt;p&gt;We shall trace an asynchronous operation all the way to the hardware, paying particular attention to the .NET portion and the device driver portion. We'll have to simplify this description by leaving out some of the middle-layer details, but we shall not stray from the truth.&lt;/p&gt;

&lt;p&gt;Consider a generic "write" operation (to a file, network stream, USB toaster, whatever). Our code is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Button_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, RoutedEventArgs e)
{
  &lt;span class="keyword"&gt;byte&lt;/span&gt;[] data = ...
  &lt;span class="keyword"&gt;await&lt;/span&gt; myDevice.WriteAsync(data, 0, data.Length);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We already know that the UI thread is not blocked during the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;. Question: Is there &lt;i&gt;another thread&lt;/i&gt; that must sacrifice itself on the Altar of Blocking so that the UI thread may live?&lt;/p&gt;

&lt;p&gt;Take my hand. We shall dive deep.&lt;/p&gt;

&lt;p&gt;First stop: the library (e.g., entering the BCL code). Let us assume that &lt;code class="csharp"&gt;WriteAsync&lt;/code&gt; is implemented using the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.overlapped.aspx"&gt;standard P/Invoke asynchronous I/O system in .NET&lt;/a&gt;, which is based on overlapped I/O. So, this starts a Win32 overlapped I/O operation on the device's underlying &lt;code class="csharp"&gt;HANDLE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The OS then turns to the device driver and asks it to begin the write operation. It does so by first constructing an object that represents the write request; this is called an I/O Request Packet (IRP).&lt;/p&gt;

&lt;p&gt;The device driver receives the IRP and issues a command to the device to write out the data. If the device supports Direct Memory Access (DMA), this can be as simple as writing the buffer address to a device register. That's all the device driver can do; it marks the IRP as "pending" and returns to the OS.&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-50L8W1EY_2o/Uo4hUwXgdII/AAAAAAAAKZA/GifKpss4GRg/s1600/Os1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-50L8W1EY_2o/Uo4hUwXgdII/AAAAAAAAKZA/GifKpss4GRg/s1600/Os1.png" /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;The core of the truth is found here: the device driver is not allowed to block while processing an IRP. This means that if the IRP cannot be completed &lt;i&gt;immediately&lt;/i&gt;, then it &lt;b&gt;must&lt;/b&gt; be processed &lt;i&gt;asynchronously&lt;/i&gt;. This is true even for synchronous APIs! At the device driver level, all (non-trivial) requests are asynchronous.&lt;/p&gt;

&lt;blockquote&gt;To quote the &lt;a href="http://www.amazon.com/gp/product/0735648735/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735648735&amp;linkCode=as2&amp;tag=stepheclearys-20"&gt;Tomes&lt;/a&gt; of &lt;a href="http://www.amazon.com/gp/product/0735665877/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735665877&amp;linkCode=as2&amp;tag=stepheclearys-20"&gt;Knowledge&lt;/a&gt;, "Regardless of the type of I/O request, internally I/O operations issued to a driver on behalf of the application are performed asynchronously".&lt;/blockquote&gt;

&lt;p&gt;With the IRP "pending", the OS returns to the library, which returns an incomplete task to the button click event handler, which suspends the async method, and the UI thread continues executing.&lt;/p&gt;

&lt;p&gt;We have followed the request down into the abyss of the system, right out to the physical device.&lt;/p&gt;

&lt;p&gt;The write operation is now "in flight". How many threads are processing it?&lt;/p&gt;

&lt;p&gt;None.&lt;/p&gt;

&lt;p&gt;There is no device driver thread, OS thread, BCL thread, or thread pool thread that is processing that write operation. &lt;b&gt;There is no thread.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Now, let us follow the response from the land of kernel daemons back to the world of mortals.&lt;/p&gt;

&lt;p&gt;Some time after the write request started, the device finishes writing. It notifies the CPU via an interrupt.&lt;/p&gt;

&lt;p&gt;The device driver's Interrupt Service Routine (ISR) responds to the interrupt. An interrupt is a CPU-level event, temporarily seizing control of the CPU away from whatever thread was running. You &lt;i&gt;could&lt;/i&gt; think of an ISR as "borrowing" the currently-running thread, but I prefer to think of ISRs as executing at such a low level that the concept of "thread" doesn't &lt;i&gt;exist&lt;/i&gt; - so they come in "beneath" all threads, so to speak.&lt;/p&gt;

&lt;p&gt;Anyway, the ISR is properly written, so all it does is tell the device "thank you for the interrupt" and queue a Deferred Procedure Call (DPC).&lt;/p&gt;

&lt;p&gt;When the CPU is done being bothered by interrupts, it will get around to its DPCs. DPCs also execute at a level so low that to speak of "threads" is not quite right; like ISRs, DPCs execute directly on the CPU, "beneath" the threading system.&lt;/p&gt;

&lt;p&gt;The DPC takes the IRP representing the write request and marks it as "complete". However, that "completion" status only exists at the OS level; the process has its own memory space that must be notified. So the OS queues a special-kernel-mode Asynchronous Procedure Call (APC) to the thread owning the &lt;code class="csharp"&gt;HANDLE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the library/BCL is using the standard P/Invoke overlapped I/O system, it has already &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.threadpool.bindhandle.aspx"&gt;registered the handle&lt;/a&gt; with the I/O Completion Port (IOCP), which is part of the thread pool. So an I/O thread pool thread is borrowed briefly to execute the APC, which notifies the task that it's complete.&lt;/p&gt;

&lt;p&gt;The task has captured the UI context, so it does not resume the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method directly on the thread pool thread. Instead, it queues the continuation of that method onto the UI context, and the UI thread will resume executing that method when it gets around to it.&lt;/p&gt;

&lt;p&gt;So, we see that there was no thread while the request was in flight. When the request completed, various threads were "borrowed" or had work briefly queued to them. This work is usually on the order of a millisecond or so (e.g., the APC running on the thread pool) down to a microsecond or so (e.g., the ISR). But there is no thread that was blocked, just waiting for that request to complete.&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-Ggy6KD5iwik/Uo4hojuNCxI/AAAAAAAAKZI/POU2AlCLgr0/s1600/Os2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-Ggy6KD5iwik/Uo4hojuNCxI/AAAAAAAAKZI/POU2AlCLgr0/s1600/Os2.png" /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Now, the path that we followed was the "standard" path, somewhat simplified. There are countless variations, but the core truth remains the same.&lt;/p&gt;

&lt;p&gt;The idea that "there must be a thread somewhere &lt;i&gt;processing&lt;/i&gt; the asynchronous operation" is not the truth.&lt;/p&gt;

&lt;p&gt;Free your mind. Do not try to find this "async thread" — that's impossible. Instead, only try to realize the truth:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;There is no thread.&lt;/b&gt;&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8264686406066940003/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html#comment-form' title='10 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' title='There Is No Thread'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-50L8W1EY_2o/Uo4hUwXgdII/AAAAAAAAKZA/GifKpss4GRg/s72-c/Os1.png' height='72' width='72'/><thr:total>10</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-826826208575235625</id><published>2013-11-14T12:30:00.000-05:00</published><updated>2013-11-14T12:30:00.606-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>Announcement: Nito.AsyncEx 2.0.0</title><content type='html'>&lt;p&gt;This is more of a minor/feature change, but one of the bug fixes required an API change, so it is technically considered a major release.&lt;/p&gt;

&lt;p&gt;The big changes in this update are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iOS and Android support! Yay!&lt;/li&gt;
&lt;li&gt;Strong named DLLs.&lt;/li&gt;
&lt;li&gt;Had to change the cancellation token helper APIs to solve a memory leak possibility.&lt;/li&gt;
&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/826826208575235625/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/11/announcement-nitoasyncex-200.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/826826208575235625'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/826826208575235625'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/announcement-nitoasyncex-200.html' title='Announcement: Nito.AsyncEx 2.0.0'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1550856022680509031</id><published>2013-11-11T12:30:00.000-05:00</published><updated>2013-11-11T12:30:00.206-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Announcement: AsyncDiagnostics 1.0.1 Prerelease</title><content type='html'>&lt;p&gt;AsyncDiagnostics has been updated to 1.0.1 (still in prerelease). If you're not sure why you would need it, see the &lt;a href="http://blog.stephencleary.com/2013/05/announcement-async-diagnostics.html"&gt;original announcement post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The major changes in this release:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updated the Microsoft immutable collections library to the latest (official release) version.&lt;/li&gt;
&lt;li&gt;Updated PostSharp to 3.1 (prerelease).&lt;/li&gt;
&lt;li&gt;AsyncDiagnostics has a proper logo, source code, and a readme on &lt;a href="https://github.com/StephenCleary/AsyncDiagnostics"&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The async diagnostics aspect now supports full multitargeting, including methods.&lt;/li&gt;
&lt;li&gt;There should be slightly less compile-time and run-time impact.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take it for a spin and let me know what you think!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1550856022680509031/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/11/announcement-asyncdiagnostics-101.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1550856022680509031'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1550856022680509031'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/announcement-asyncdiagnostics-101.html' title='Announcement: AsyncDiagnostics 1.0.1 Prerelease'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4763346915044720815</id><published>2013-11-08T12:30:00.000-05:00</published><updated>2013-11-12T08:28:05.064-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Task.Run Etiquette Examples: Even in the Complex Case, Don't Use Task.Run in the Implementation</title><content type='html'>&lt;p&gt;Last time, we looked at CPU-bound methods and learned &lt;a href="http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html"&gt;why we shouldn't use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; in the implementation&lt;/a&gt;. Rather, we should use it at the point of the call.&lt;/p&gt;

&lt;p&gt;Today, let's consider a more advanced scenario. Instead of a purely CPU-bound method, let's perform a much more complex operation. We're going to predict the stock market.&lt;/p&gt;

&lt;p&gt;In order to predict the market, our service will need to get some stock quotes from a web service and then perform some very CPU-intensive analysis. During that analysis, the service may need to retrieve more quotes and/or historical data from the web service and then do more calculation.&lt;/p&gt;

&lt;p&gt;So this is a much more complex example with both I/O portions and CPU-bound portions. Here's how the service looks today; it uses synchronous (blocking) I/O calls as well as CPU-intensive analysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; PredictStockMarket()
  {
    &lt;span class="comment"&gt;// Do some I/O first.&lt;/span&gt;
    Thread.Sleep(1000);

    &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;

    &lt;span class="comment"&gt;// Possibly some more I/O here.&lt;/span&gt;
    Thread.Sleep(1000);

    &lt;span class="comment"&gt;// More work.&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;

    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we want to start taking advantage of asynchronous code, so we can replace our blocking I/O with asynchronous I/O. But what do we do with the CPU-bound portions?&lt;/p&gt;

&lt;p&gt;A common mistake is to wrap them in &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; PredictStockMarketAsync()
  {
    &lt;span class="comment"&gt;// Do some I/O first.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Delay(1000);

    &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
      &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
        ;
    });

    &lt;span class="comment"&gt;// Possibly some more I/O here.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Delay(1000);

    &lt;span class="comment"&gt;// More work.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
      &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
        ;
    });

    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problems here are the &lt;a href="http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html"&gt;same problems as last time&lt;/a&gt;. We're still using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; in the implementation, and we get all the problems that come along with that. It's still a fake-asynchronous method.&lt;/p&gt;

&lt;p&gt;Well, the API can't be asynchronous (since it has CPU-bound portions) and it can't be synchronous (since we want to use asynchronous I/O). So, unfortunately there isn't an ideal solution here. To be clear, we &lt;i&gt;are&lt;/i&gt; talking about an extremely rare edge case; the vast majority of services are either asynchronous or CPU-bound, not both.&lt;/p&gt;

&lt;p&gt;I've discussed this scenario with some Microsoft employees. The Roslyn team in particular has encountered this situation, where some of their operations need to combine heavy file I/O with non-trivial CPU usage. (These conversations occurred before I was an MVP, so this information is not under an NDA).&lt;/p&gt;

&lt;p&gt;They concluded that the best solution is to use an asynchronous signature but document the method clearly so that its CPU-bound nature will not be surprising.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
  &lt;span class="comment"&gt;/// This method is CPU-bound!&lt;/span&gt;
  &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; PredictStockMarketAsync()
  {
    &lt;span class="comment"&gt;// Do some I/O first.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Delay(1000);

    &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;

    &lt;span class="comment"&gt;// Possibly some more I/O here.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Delay(1000);

    &lt;span class="comment"&gt;// More work.&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;

    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows UI-based clients to properly use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; to call the service, while ASP.NET clients would just call the method directly.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; MyButton_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
  &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt; myService.PredictStockMarketAsync());
}

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; StockMarketController: Controller
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;gt; IndexAsync()
  {
    &lt;span class="keyword"&gt;var&lt;/span&gt; result = &lt;span class="keyword"&gt;await&lt;/span&gt; myService.PredictStockMarketAsync();
    &lt;span class="keyword"&gt;return&lt;/span&gt; View(result);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Doing CPU-bound work in a method with an asynchronous signature is not ideal, but it does allow every possible client to use the service in the way that makes most sense for them. Each client makes the best use of its own threading situation.&lt;/p&gt;

&lt;p&gt;In conclusion, even in the rare and complex cases, it is still best to &lt;b&gt;use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; at the invocation, not in the implementation&lt;/b&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4763346915044720815/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4763346915044720815'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4763346915044720815'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html' title='Task.Run Etiquette Examples: Even in the Complex Case, Don&apos;t Use Task.Run in the Implementation'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924</id><published>2013-11-07T12:30:00.000-05:00</published><updated>2014-05-16T16:00:11.820-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Task.Run Etiquette Examples: Don't Use Task.Run in the Implementation</title><content type='html'>&lt;p&gt;Last time we looked at &lt;a href="http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html"&gt;using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; for the wrong thing&lt;/a&gt; (code that is not CPU-bound). So let's move on to the proper use case of &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;: CPU-bound code. We start off with some existing code, which synchronously does some heavy calculations.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; CalculateMandelbrot()
  {
    &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}

...

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; MyButton_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
  &lt;span class="comment"&gt;// Blocks UI thread! :(&lt;/span&gt;
  myService.CalculateMandelbrot();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we want to use this from a UI thread, but this method will block our thread. This &lt;b&gt;is&lt;/b&gt; a problem that should be solved using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. Doing these calculations is a CPU-bound operation.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; CalculateMandelbrotAsync()
  {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Task.Run(() =&amp;gt;
    {
      &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
      &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
        ;
      &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
    });
  }
}

...

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; MyButton_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
  &lt;span class="comment"&gt;// Does not block UI thread! Yay!&lt;/span&gt;
  &lt;span class="keyword"&gt;await&lt;/span&gt; myService.CalculateMandelbrotAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first glance, it may look like this solves the problem. And it does solve &lt;i&gt;this&lt;/i&gt; problem, but it does not do it in the best way.&lt;/p&gt;

&lt;p&gt;Let's say that this service is a generic dll that can be used inside any .NET application. It has an API, and &lt;b&gt;APIs are all about etiquette&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;How would an ASP.NET application react to this change?&lt;/p&gt;

&lt;p&gt;Let's introduce a simple ASP.NET MVC controller that returns a view using the (original, synchronous) service.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; CalculateMandelbrot()
  {
    &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}

...

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; MandelbrotController: Controller
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; ActionResult Index()
  {
    &lt;span class="keyword"&gt;var&lt;/span&gt; result = myService.CalculateMandelbrot();
    &lt;span class="keyword"&gt;return&lt;/span&gt; View(result);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so good. When a request comes in, the controller uses the service to (synchronously) calculate the view data. A single request thread is used the entire time during that calculation.&lt;/p&gt;

&lt;p&gt;But the desktop app required a change in the service. It's now &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;, which is "no problem" because ASP.NET MVC naturally supports asynchronous actions.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; CalculateMandelbrotAsync()
  {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Task.Run(() =&amp;gt;
    {
      &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
      &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
        ;
      &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
    });
  }
}

...

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; MandelbrotController: Controller
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;gt; IndexAsync()
  {
    &lt;span class="keyword"&gt;var&lt;/span&gt; result = &lt;span class="keyword"&gt;await&lt;/span&gt; myService.CalculateMandelbrotAsync();
    &lt;span class="keyword"&gt;return&lt;/span&gt; View(result);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And when we do testing, it works! Unfortunately, this change introduced a performance problem.&lt;/p&gt;

&lt;p&gt;With the original (synchronous) code, only one thread was used to process the request, from beginning to end. That's a heavily-optimized ASP.NET scenario. With this &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;, instead of a single request thread, this is what happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The request starts processing on an ASP.NET thread.&lt;/li&gt;
&lt;li&gt;&lt;code class="csharp"&gt;Task.Run&lt;/code&gt; starts a task on the thread pool to do the calculations. The ASP.NET thread pool has to deal with (unexpectedly) losing one of its threads for the duration of this request.&lt;/li&gt;
&lt;li&gt;The original request thread is returned to the ASP.NET thread pool.&lt;/li&gt;
&lt;li&gt;When the calculation is complete, that thread completes the request and is returned to the ASP.NET thread pool. The ASP.NET thread pool has to deal with (unexpectedly) getting another thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will &lt;i&gt;work&lt;/i&gt; correctly, but it's not at all &lt;i&gt;efficient&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;There are (at least) four efficiency problems introduced as soon as you use &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; with &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; in ASP.NET:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extra (unnecessary) thread switching to the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; thread pool thread. Similarly, when that thread finishes the request, it has to enter the request context (which is not an actual thread switch but does have overhead).&lt;/li&gt;
&lt;li&gt;Extra (unnecessary) garbage is created. Asynchronous programming is a tradeoff: you get increased responsiveness at the expense of higher memory usage. In this case, you end up creating more garbage for the asynchronous operations that is totally unnecessary.&lt;/li&gt;
&lt;li&gt;The ASP.NET thread pool heuristics are thrown off by &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; "unexpectedly" borrowing a thread pool thread. I don't have a lot of experience here, but my gut instinct tells me that the heuristics should recover well if the unexpected task is really short and would not handle it as elegantly if the unexpected task lasts more than two seconds.&lt;/li&gt;
&lt;li&gt;ASP.NET is not able to terminate the request early, i.e., if the client disconnects or the request times out. In the synchronous case, ASP.NET knew the request thread and could abort it. In the asynchronous case, ASP.NET is not aware that the secondary thread pool thread is "for" that request. It &lt;i&gt;is&lt;/i&gt; possible to fix this by using cancellation tokens, but that's outside the scope of this blog post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have multiple calls to &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;, then the performance problems are compounded. On a busy server, this kind of implementation can kill scalability.&lt;/p&gt;

&lt;p&gt;That's why one of the principles of ASP.NET is to &lt;b&gt;avoid using thread pool threads&lt;/b&gt; (except for the request thread that ASP.NET gives you, of course). More to the point, this means that &lt;b&gt;ASP.NET applications should avoid &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Whew! OK, so now we know what the problem is with that implementation. The plain fact is that ASP.NET prefers synchronous methods if the operation is CPU-bound. And this is also true for other scenarios: Console applications, background threads in desktop applications, etc. In fact, the only place we really &lt;i&gt;need&lt;/i&gt; an asynchronous calculation is when we call it from the UI thread.&lt;/p&gt;

&lt;p&gt;But watch out! There's another pitfall just ahead...&lt;/p&gt;

&lt;h3&gt;Using Task.Run for Asynchronous Wrappers&lt;/h3&gt;

&lt;p&gt;Let's continue the "Mandelbrot" example. We've learned that some clients prefer asynchronous APIs for CPU-bound code and others prefer synchronous APIs for CPU-bound code.&lt;/p&gt;

&lt;p&gt;So, let's be good API citizens ("APIs are all about etiquette") and keep the new synchronous version along with the asynchronous version. That way there's no breaking changes, right? It's simple enough, and we can even implement it easily so that there's no code duplication!&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; CalculateMandelbrot()
  {
    &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }

  &lt;span class="keyword"&gt;public&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; CalculateMandelbrotAsync()
  {
    &lt;span class="keyword"&gt;return&lt;/span&gt; Task.Run(() =&amp;gt; CalculateMandelbrot());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet. The UI app has its nice asynchronous method, and the ASP.NET app has its original synchronous method. Easy! And there are many other examples where synchronous and asynchronous APIs exist side-by-side, so developers are already used to this! But the fact is that &lt;b&gt;using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; for asynchronous wrappers is a code smell&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The problem with this approach is what is implied by this API design. Consider all the examples where synchronous and asynchronous APIs exist side-by-side, e.g., Entity Framework 6, or the &lt;code class="csharp"&gt;WebClient&lt;/code&gt; class. Notice anything? &lt;i&gt;They're all naturally asynchronous!&lt;/i&gt; Not a single one of them is &lt;i&gt;CPU-bound&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;When a developer sees two methods in an API &lt;code class="csharp"&gt;Method&lt;/code&gt; and &lt;code class="csharp"&gt;MethodAsync&lt;/code&gt;, the convention is that they represent a naturally-asynchronous operation. In other words, the developer expects that &lt;code class="csharp"&gt;MethodAsync&lt;/code&gt; is the "natural" implementation and that &lt;code class="csharp"&gt;Method&lt;/code&gt; is essentially a synchronous (blocking) equivalent of that operation. That API implies that &lt;code class="csharp"&gt;Method&lt;/code&gt; will at some point have the calling thread enter a wait state as it blocks for the naturally-asynchronous operation to complete.&lt;/p&gt;

&lt;p&gt;Let's make this a bit more practical. When a new ASP.NET developer approaches our service API, they'll see &lt;code class="csharp"&gt;CalculateMandelbrot&lt;/code&gt; and &lt;code class="csharp"&gt;CalculateMandelbrotAsync&lt;/code&gt; (and let's pretend that our method names are not so obviously CPU-bound). If they're familiar with asynchronous APIs at all, they'll assume that this calculation is naturally asynchronous. And on ASP.NET, you &lt;i&gt;should&lt;/i&gt; use naturally-asynchronous methods. Therefore, they will choose what they think is the naturally-asynchronous &lt;code class="csharp"&gt;CalculateMandelbrotAsync&lt;/code&gt; method and end up inheriting the performance problems discussed earlier.&lt;/p&gt;

&lt;p&gt;&lt;code class="csharp"&gt;CalculateMandelbrotAsync&lt;/code&gt; is what I call "fake-asynchronous" because it's just a thread pool wrapper around a synchronous operation. But when developers see that API, they assume that it is a naturally-asynchronous operation.&lt;/p&gt;

&lt;p&gt;This is just a brief description and I only covered one facet of this problem. Stephen Toub has an excellent blog post explaining in detail &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/03/24/10287244.aspx"&gt;why you should not write asynchronous wrappers for synchronous methods&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;OK, enough about the &lt;i&gt;wrong&lt;/i&gt; solutions? How do we fix this the &lt;i&gt;right&lt;/i&gt; way???&lt;/h3&gt;

&lt;p&gt;Back up to the original problem for a moment. What is the problem? The UI thread is blocked. How did we solve it? By changing the service. Who needs the asynchronous API? Only the UI thread. Sounds like we just seriously violated the "Separation of Concerns" principle.&lt;/p&gt;

&lt;p&gt;The key here is that the solution does not belong in the service. It belongs in the UI layer itself. Let the UI layer solve its own problems and leave the service out of it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; CalculateMandelbrot()
  {
    &lt;span class="comment"&gt;// Tons of work to do in here!&lt;/span&gt;
    &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 10000000; ++i)
      ;
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}

...

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; MyButton_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
  &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt; myService.CalculateMandelbrot());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the service API is clean (it exposes a synchronous API for a naturally-synchronous, CPU-bound method), it works for all consumers (e.g., ASP.NET), and the &lt;i&gt;UI&lt;/i&gt; layer is responsible for not blocking the &lt;i&gt;UI&lt;/i&gt; thread.&lt;/p&gt;

&lt;p&gt;Conclusion: &lt;b&gt;do not use Task.Run in the &lt;i&gt;implementation&lt;/i&gt; of the method; instead, use Task.Run to &lt;i&gt;call&lt;/i&gt; the method&lt;/b&gt;.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6324871210006331924/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html#comment-form' title='17 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' title='Task.Run Etiquette Examples: Don&apos;t Use Task.Run in the Implementation'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>17</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2396756946080501609</id><published>2013-11-06T12:37:00.000-05:00</published><updated>2013-11-06T13:32:45.080-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Task.Run Etiquette Examples: Don't Use Task.Run for the Wrong Thing</title><content type='html'>&lt;p&gt;I had quite a few comments on &lt;a href="http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html"&gt;my last post&lt;/a&gt; asking for more explicit examples of Correct vs. Incorrect &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; usage.&lt;/p&gt;

&lt;p&gt;First, let's consider the "beginner's error". This is where the user misuses &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; because they want to make their code "asynchronous" but aren't sure how to do it.&lt;/p&gt;

&lt;p&gt;This kind of user starts off with existing code, which usually does some kind of synchronous work (often database access or a web request).&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; RetrieveValue(&lt;span class="keyword"&gt;int&lt;/span&gt; id)
  {
    &lt;span class="comment"&gt;// Do some blocking work.&lt;/span&gt;
    &lt;span class="comment"&gt;// DB access, web request, etc.&lt;/span&gt;
    Thread.Sleep(500);
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They've read a bit about how &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; helps in those areas, and decide to give it a spin. "Let's see if I can figure out this &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; thing. I'll just add an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; and see what happens. Oh, I have to change the return type to &lt;code class="csharp"&gt;Task&lt;/code&gt;, too."&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; RetrieveValueAsync(&lt;span class="keyword"&gt;int&lt;/span&gt; id)
  {
    &lt;span class="comment"&gt;// Do some blocking work.&lt;/span&gt;
    &lt;span class="comment"&gt;// DB access, web request, etc.&lt;/span&gt;
    Thread.Sleep(500);
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;"Now the compiler is complaining that I'm not using &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;. OK, so what can I await? [Google-Fu] Ah, &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; looks promising!"&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; RetrieveValueAsync(&lt;span class="keyword"&gt;int&lt;/span&gt; id)
  {
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
      &lt;span class="comment"&gt;// Do some blocking work.&lt;/span&gt;
      &lt;span class="comment"&gt;// DB access, web request, etc.&lt;/span&gt;
      Thread.Sleep(500);
      &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;"Hey, it worked! My UI thread is no longer blocked! Yay for &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;!"&lt;/p&gt;

&lt;p&gt;Unfortunately, this is a misuse of &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. The problem is that it's not &lt;i&gt;truly&lt;/i&gt; asynchronous. It's still executing blocking work, blocking a thread pool thread the whole time the operation is in progress.&lt;/p&gt;

&lt;p&gt;The proper approach is to &lt;i&gt;change the blocking call to an asynchronous call first&lt;/i&gt; and then &lt;i&gt;allow &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; to grow from there&lt;/i&gt;. So, starting from the same point, we first change the blocking call to an asynchronous call. In the real world, this would be like replacing &lt;code class="csharp"&gt;WebClient&lt;/code&gt; with &lt;code class="csharp"&gt;HttpClient&lt;/code&gt; or converting your Entity Framework queries to be asynchronous. In this example, I'm replacing &lt;code class="csharp"&gt;Thread.Sleep&lt;/code&gt; with &lt;code class="csharp"&gt;Task.Delay&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Warning: bad code!&lt;/span&gt;
&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; RetrieveValue(&lt;span class="keyword"&gt;int&lt;/span&gt; id)
  {
    &lt;span class="comment"&gt;// Converted to nonblocking work.&lt;/span&gt;
    &lt;span class="comment"&gt;// DB access, web request, etc.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Delay(500);
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we're getting a compiler error, and we need to make the method &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; MyService
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; RetrieveValueAsync(&lt;span class="keyword"&gt;int&lt;/span&gt; id)
  {
    &lt;span class="comment"&gt;// Converted to nonblocking work.&lt;/span&gt;
    &lt;span class="comment"&gt;// DB access, web request, etc.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Delay(500);
    &lt;span class="keyword"&gt;return&lt;/span&gt; 42;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we end up with a more correct implementation.&lt;/p&gt;

&lt;p&gt;Note that this was an example of using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; for the &lt;i&gt;wrong thing&lt;/i&gt;. To reiterate a sentence from my last post, &lt;b&gt;use Task.Run to call CPU-bound methods.&lt;/b&gt; Do &lt;i&gt;not&lt;/i&gt; use it just to "provide something awaitable for my async method to use".&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2396756946080501609/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2396756946080501609'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2396756946080501609'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html' title='Task.Run Etiquette Examples: Don&apos;t Use Task.Run for the Wrong Thing'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674</id><published>2013-10-17T12:30:00.000-04:00</published><updated>2014-02-22T10:09:38.530-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Task.Run Etiquette and Proper Usage</title><content type='html'>&lt;p&gt;I have a confession to make: I enjoy etiquette. My wife and I own a good dozen or two etiquette books, ranging from the classic &lt;a href="http://www.amazon.com/gp/product/0061740233/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0061740233&amp;linkCode=as2&amp;tag=stepheclearys-20"&gt;Post&lt;/a&gt; to a &lt;a href="http://www.amazon.com/gp/product/159691274X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=159691274X&amp;linkCode=as2&amp;tag=stepheclearys-20"&gt;more playful Austen-themed guide&lt;/a&gt; as well as several historical books (including an uncut copy of &lt;a href="http://www.amazon.com/gp/product/1163408735/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1163408735&amp;linkCode=as2&amp;tag=stepheclearys-20"&gt;Social Life of Virginia in the Seventeenth Century&lt;/a&gt;). There's a certain nerdy appreciation of knowing how to act (at least, according to &lt;i&gt;somebody...&lt;/i&gt;).&lt;/p&gt;

&lt;p&gt;Many developers are unsure how to properly use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. This confusion is perfectly normal; when you first start using &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;, it's kind of like sitting down at a formal dinner and seeing three forks when you've spent your entire life only using spoons. "When should I use the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; fork? Is this for salad or dessert???"&lt;/p&gt;

&lt;p&gt;The key central theme of all etiquette is to &lt;i&gt;treat others well&lt;/i&gt;. In this case, the "others" are other developers. "Others" will come along and maintain your code; "others" will try to reuse your code in different contexts. As we'll see, treating those "others" well is the key to properly using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, let's think of what &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; is really &lt;i&gt;for&lt;/i&gt; (you wouldn't want to use a fork to eat soup!). &lt;b&gt;The purpose of &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; is to execute CPU-bound code in an asynchronous way.&lt;/b&gt; &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; does this by executing the method on a thread pool thread and returning a &lt;code class="csharp"&gt;Task&lt;/code&gt; representing the completion of that method.&lt;/p&gt;

&lt;p&gt;That sounds so simple, but we've already eliminated a whole slew of poor examples. Many &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; newbies start off by trying to treat asynchronous tasks the same as parallel (TPL) tasks, and this is a major misstep. True, asynchronous tasks and parallel tasks are the same type (&lt;code class="csharp"&gt;Task&lt;/code&gt;, of course), but their &lt;i&gt;purpose&lt;/i&gt; is completely different and thus their &lt;i&gt;proper usage&lt;/i&gt; is also completely different. Developers new to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; begin reading some examples, see these newfangled &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods returning tasks, and (incorrectly) assume that &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; is all about background threads and whatnot. With that initial misunderstanding, the next logical step is to attempt to implement all asynchronous methods using &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; (or &lt;a href="http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html"&gt;even worse&lt;/a&gt;, &lt;code class="csharp"&gt;Task.Factory.StartNew&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I've seen many, many intelligent developers fall into that same mistake.&lt;/p&gt;

&lt;blockquote&gt;-&amp;gt; Want a more detailed discussion? Read &lt;a href="http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html"&gt;Don't Use Task.Run for the Wrong Thing&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;So, the question remains: Where &lt;i&gt;should&lt;/i&gt; I use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; to call CPU-bound methods.&lt;/b&gt; That is all.&lt;/p&gt;

&lt;p&gt;One common mistake is to try to make asynchronous "wrappers" around existing synchronous methods. Stephen Toub has a detailed blog post describing &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/03/24/10287244.aspx"&gt;why this is a bad idea&lt;/a&gt;. I call such methods "fake-asynchronous methods" because they &lt;i&gt;look&lt;/i&gt; asynchronous but are really just faking it by doing synchronous work on a background thread. In general, &lt;b&gt;do not use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; in the implementation of the method; instead, use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; to &lt;i&gt;call&lt;/i&gt; the method.&lt;/b&gt; There are two reasons for this guideline:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Consumers of your code assume that if a method has an asynchronous signature, then it will act truly asynchronously. Faking asynchronicity by just doing synchronous work on a background thread is surprising behavior.&lt;/li&gt;
&lt;li&gt;If your code is ever used on ASP.NET, a fake-asynchronous method leads developers down the wrong path. The goal of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; on the server side is scalability, and fake-asynchronous methods are &lt;i&gt;less&lt;/i&gt; scalable than just using synchronous methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, any code that you want to be reusable should not use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; in its implementation. Consider the developers (including yourself) who will need to consume that code.&lt;/p&gt;

&lt;blockquote&gt;-&amp;gt; Want a more detailed discussion? Read &lt;a href="http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html"&gt;Don't Use Task.Run in the Implementation&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;OK, so let's complicate the question a bit. What if I have a reusable method that uses significant amounts of both I/O &lt;i&gt;and&lt;/i&gt; CPU? Should I use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; for the CPU-bound parts?&lt;/p&gt;

&lt;p&gt;The answer is still no.&lt;/p&gt;

&lt;p&gt;However, in this (uncommon) situation, you do end up with a bit of an awkward solution: an asynchronous method that also does CPU-bound work. In this case, you should document clearly that the method is not fully asynchronous, so that callers know to wrap it in a &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; if necessary. (Remember, it's necessary if it's being called from the UI thread, but not necessary if called from a background thread or ASP.NET).&lt;/p&gt;

&lt;blockquote&gt;-&amp;gt; Want a more detailed discussion? Read &lt;a href="http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html"&gt;Even in the Complex Case, Don't Use Task.Run in the Implementation&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;To conclude, synchronous methods should have a synchronous signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Documentation: This method is CPU-bound (use Task.Run to call from a UI thread).&lt;/span&gt;
&lt;span class="keyword"&gt;void&lt;/span&gt; DoWork();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Asynchronous methods should have an asynchronous signature:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task DoWorkAsync();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And methods that are a &lt;i&gt;mixture&lt;/i&gt; of synchronous and asynchronous work should have an asynchronous signature with documentation pointing out their partially-synchronous nature:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Documentation: This method is CPU-bound (use Task.Run to call from a UI thread).&lt;/span&gt;
Task DoWorkAsync();
&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9136943739327263674/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html#comment-form' title='14 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' title='Task.Run Etiquette and Proper Usage'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>14</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7426788374067872257</id><published>2013-10-10T12:30:00.000-04:00</published><updated>2013-10-10T12:30:00.617-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows Services'/><title type='text'>Managed Services Roundup</title><content type='html'>&lt;p&gt;A &lt;a href="http://blogs.technet.com/b/tip_of_the_day/archive/2013/09/16/9-19-tip-of-the-day-interactive-services-detection.aspx"&gt;recent Tip of the Day&lt;/a&gt; prompted me to update &lt;a href="http://blog.stephencleary.com/2011/05/managed-services-and-uis.html"&gt;one of my Managed Services posts&lt;/a&gt;, and it seems like a good time to write out a quick summary.&lt;/p&gt;

&lt;p&gt;First, what is a "managed service"? We're all familiar with the normal applications that Windows runs; there's the traditional desktop app as well as the newer Win8 apps. These apps interact with the user. But Windows also runs another kind of process: Win32 services. A Win32 service is an application (without a UI) that runs all the time, whether a user is logged on or not. And the .NET (full) framework supports writing Win32 services on .NET - what I call a "managed service."&lt;/p&gt;

&lt;p&gt;I've got a number of &lt;a href="http://blog.stephencleary.com/search/label/Windows%20Services"&gt;resources on my blog for writing managed services&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2009/10/managed-windows-services-basics.html"&gt;An introduction to managed services&lt;/a&gt;, which helps fill in the gaps in the .NET documentation (unfortunately, the MSDN docs are insufficient to actually write a managed service). I also cover the threading model and one common "gotcha" about the default current directory.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2009/10/windows-services-and-network.html"&gt;Services and the network&lt;/a&gt;, where I describe how drive mappings (a &lt;i&gt;per-user&lt;/i&gt; concept) have no place in Win32 services.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2011/05/managed-services-and-uis.html"&gt;Services and user interfaces&lt;/a&gt;, where I explain why services should &lt;i&gt;not&lt;/i&gt; have user interfaces.&lt;/li&gt;
&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7426788374067872257/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/10/managed-services-roundup.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7426788374067872257'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7426788374067872257'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/managed-services-roundup.html' title='Managed Services Roundup'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2596417937654936025</id><published>2013-10-03T12:30:00.001-04:00</published><updated>2013-10-03T12:30:00.190-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>ContinueWith is Dangerous, Too</title><content type='html'>&lt;p&gt;One of my &lt;a href="http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html"&gt;recent posts&lt;/a&gt; dove into why &lt;code class="csharp"&gt;Task.Factory.StartNew&lt;/code&gt; is so dangerous (and why you should use &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; instead).&lt;/p&gt;

&lt;p&gt;Unfortunately, I see developers making the same mistake with &lt;code class="csharp"&gt;Task.ContinueWith&lt;/code&gt;. One of the main problems of &lt;code class="csharp"&gt;StartNew&lt;/code&gt; is that it has a confusing default scheduler. This exact same problem also exists in the &lt;code class="csharp"&gt;ContinueWith&lt;/code&gt; API. Just like &lt;code class="csharp"&gt;StartNew&lt;/code&gt;, &lt;code class="csharp"&gt;ContinueWith&lt;/code&gt; will default to &lt;code class="csharp"&gt;TaskScheduler.Current&lt;/code&gt;, not &lt;code class="csharp"&gt;TaskScheduler.Default&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To avoid the default scheduler issue, &lt;b&gt;you should &lt;i&gt;always&lt;/i&gt; pass an explicit &lt;code class="csharp"&gt;TaskScheduler&lt;/code&gt; to &lt;code class="csharp"&gt;Task.ContinueWith&lt;/code&gt; and &lt;code class="csharp"&gt;Task.Factory.StartNew&lt;/code&gt;&lt;/b&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2596417937654936025/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/10/continuewith-is-dangerous-too.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2596417937654936025'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2596417937654936025'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/continuewith-is-dangerous-too.html' title='ContinueWith is Dangerous, Too'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2934192059265291494</id><published>2013-09-26T12:30:00.000-04:00</published><updated>2013-09-26T12:30:00.052-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task.Run vs BackgroundWorker'/><title type='text'>Task.Run vs BackgroundWorker: Conclusion</title><content type='html'>&lt;p&gt;In this &lt;a href="http://blog.stephencleary.com/search/label/Task.Run%20vs%20BackgroundWorker"&gt;series on Task.Run vs BackgroundWorker&lt;/a&gt;, we've looked at the most common aspects of running background tasks. As a recap, here's the full list of posts in chronological order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-intro.html"&gt;Introduction&lt;/a&gt; - we're only contrasting &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; with &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; for situations that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; was designed for.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html"&gt;Round 1: Basics&lt;/a&gt; - how to run code on a background thread and receive a completion notification marshaled back to the UI thread. The &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code is shorter and simpler with less "ceremony code".&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2013/07/taskrun-vs-backgroundworker-round-2.html"&gt;Round 2: Errors&lt;/a&gt; - how to handle exceptions from the background thread code. The &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code uses the more natural and less error-prone &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;try&lt;/span&gt;/&lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;/code&gt; blocks, and has less error-prone exception propagation.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2013/08/taskrun-vs-backgroundworker-round-3.html"&gt;Round 3: Results&lt;/a&gt; - how to retrieve a result value from the background thread. The &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code uses the more natural &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;/code&gt; statement and the result value is strongly-typed.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html"&gt;Round 4: Cancellation&lt;/a&gt; - how to cancel the background thread. The &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code uses the common cancellation framework, which is simpler, less error-prone, and interoperates more cleanly with other cancellation-aware APIs.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html"&gt;Round 5: Progress Reports&lt;/a&gt; - how to support progress updates from the background thread. The &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code uses a strongly-typed progress report type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I am not planning to cover in this series are more complex situations, which is actually where &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; &lt;i&gt;really&lt;/i&gt; outperforms &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;. For example, nesting one background operation within another is easier with &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. Also, anything like &lt;a href="http://stackoverflow.com/questions/18659124/merging-the-results-of-two-background-workers-upon-completion/18659509#18659509"&gt;waiting for two separate background operations to complete before doing something else&lt;/a&gt; is much easier with &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. Pretty much any time you have to &lt;i&gt;coordinate&lt;/i&gt; background operations, &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code is going to be &lt;i&gt;much&lt;/i&gt; simpler!&lt;/p&gt;

&lt;p&gt;I hope that this series is sufficient to convince you that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; is a type that should not be used in new code. Everything it can do, &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; can do better; and &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; can do a lot of things that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; can't!&lt;/p&gt;

&lt;p&gt;I'll leave you with a "combined" example. The code below starts a cancelable background operation that reports progress, and will either throw an exception or return a value. These are all the basic operations of &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;. One of these uses &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; and the other uses &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. Don't just look at the length of the code; consider all the little nuances of how it works (type safety, how easily the API can be misused, etc). Then ask yourself: which code would I rather maintain?&lt;/p&gt;

&lt;div&gt;
&lt;div style="float:left;"&gt;
&lt;pre&gt;&lt;code class="csharp" style="max-height:none;overflow:visible;"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; BackgroundWorker _bgw;
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; fail = checkBox1.Checked;
    _bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = _bgw;
    bgw.WorkerSupportsCancellation = &lt;span class="keyword"&gt;true&lt;/span&gt;;
    bgw.WorkerReportsProgress = &lt;span class="keyword"&gt;true&lt;/span&gt;;
    bgw.DoWork += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
        {
            bgw.ReportProgress(0, i + &lt;span class="string"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;);
            &lt;span class="keyword"&gt;if&lt;/span&gt; (bgw.CancellationPending)
            {
                args.Cancel = &lt;span class="keyword"&gt;true&lt;/span&gt;;
                &lt;span class="keyword"&gt;return&lt;/span&gt;;
            }
            Thread.Sleep(100);
        }
        &lt;span class="keyword"&gt;if&lt;/span&gt; (fail)
            &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;Requested to fail.&amp;quot;&lt;/span&gt;);
        args.Result = 13;
    };
    bgw.ProgressChanged += (_, args) =&amp;gt;
    {
        label1.Text = (&lt;span class="keyword"&gt;string&lt;/span&gt;)args.UserState;
    };
    bgw.RunWorkerCompleted += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (args.Cancelled)
        {
            label1.Text = &lt;span class="string"&gt;&amp;quot;Cancelled.&amp;quot;&lt;/span&gt;;
        }
        &lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="keyword"&gt;if&lt;/span&gt; (args.Error == &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;var&lt;/span&gt; result = (&lt;span class="keyword"&gt;int&lt;/span&gt;)args.Result;
            label1.Text = &lt;span class="string"&gt;&amp;quot;Completed: &amp;quot;&lt;/span&gt; + result;
        }
        &lt;span class="keyword"&gt;else&lt;/span&gt;
        {
            label1.Text = args.Error.GetType().Name + &lt;span class="string"&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + args.Error.Message;
        }
    };
    bgw.RunWorkerAsync();
}
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; cancelButton1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (_bgw != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        _bgw.CancelAsync();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div style="float:right;"&gt;
&lt;pre&gt;&lt;code class="csharp" style="max-height:none;overflow:visible;"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; CancellationTokenSource _cts;
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; fail = checkBox1.Checked;
    _cts = &lt;span class="keyword"&gt;new&lt;/span&gt; CancellationTokenSource();
    &lt;span class="keyword"&gt;var&lt;/span&gt; token = _cts.Token;
    &lt;span class="keyword"&gt;var&lt;/span&gt; progressHandler = &lt;span class="keyword"&gt;new&lt;/span&gt; Progress&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;value&lt;/span&gt; =&amp;gt;
    {
        label2.Text = &lt;span class="keyword"&gt;value&lt;/span&gt;;
    });
    &lt;span class="keyword"&gt;var&lt;/span&gt; progress = progressHandler &lt;span class="keyword"&gt;as&lt;/span&gt; IProgress&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;;
    &lt;span class="keyword"&gt;try&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; result = &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
        {
            &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
            {
                &lt;span class="keyword"&gt;if&lt;/span&gt; (progress != &lt;span class="keyword"&gt;null&lt;/span&gt;)
                    progress.Report(i + &lt;span class="string"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;);
                token.ThrowIfCancellationRequested();
                Thread.Sleep(100);
            }
            &lt;span class="keyword"&gt;if&lt;/span&gt; (fail)
                &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;Requested to fail.&amp;quot;&lt;/span&gt;);
            &lt;span class="keyword"&gt;return&lt;/span&gt; 13;
        });
        label2.Text = &lt;span class="string"&gt;&amp;quot;Completed: &amp;quot;&lt;/span&gt; + result;
    }
    &lt;span class="keyword"&gt;catch&lt;/span&gt; (OperationCanceledException)
    {
        label2.Text = &lt;span class="string"&gt;&amp;quot;Cancelled.&amp;quot;&lt;/span&gt;;
    }
    &lt;span class="keyword"&gt;catch&lt;/span&gt; (Exception ex)
    {
        label2.Text = ex.GetType().Name + &lt;span class="string"&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + ex.Message;
    }
}
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; cancelButton2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (_cts != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        _cts.Cancel();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2934192059265291494/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html' title='Task.Run vs BackgroundWorker: Conclusion'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6941052529541429485</id><published>2013-09-19T12:30:00.000-04:00</published><updated>2013-09-19T12:30:00.738-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task.Run vs BackgroundWorker'/><title type='text'>Task.Run vs BackgroundWorker, Round 5: Reporting Progress</title><content type='html'>&lt;h3&gt;~ Ready? ~&lt;/h3&gt;

&lt;p&gt;When you have a lengthly background operation, it's considered polite to give some kind of progress notification to the user (if possible). This usually takes the form of a percentage, with some optional extra information (e.g., the name of the current file being processed).&lt;/p&gt;

&lt;p&gt;We'll take the same operation as last time (sleep for 100ms 100 times, for a total of 10 seconds), and this time we'll report progress at each iteration. Since we'll be updating the UI with our progress information, we want each progress update to be raised in the UI context.&lt;/p&gt;

&lt;h3&gt;~ Fight! ~&lt;/h3&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;p&gt;&lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; has built-in support for progress reporting, and even automatically marshals to the UI thread. Like last time, we have to first set the &lt;code class="csharp"&gt;BackgroundWorker.WorkerSupportsProgress&lt;/code&gt; property to allow progress reports. Then, the &lt;code class="csharp"&gt;DoWork&lt;/code&gt; method can call the &lt;code class="csharp"&gt;BackgroundWorker.ReportProgress&lt;/code&gt; method, which raises the &lt;code class="csharp"&gt;BackgroundWorker.ProgressChanged&lt;/code&gt; event.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    bgw.WorkerReportsProgress = &lt;span class="keyword"&gt;true&lt;/span&gt;;
    bgw.DoWork += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
        {
            bgw.ReportProgress(i);
            Thread.Sleep(100);
        }
    };
    bgw.ProgressChanged += (_, args) =&amp;gt;
    {
        label1.Text = args.ProgressPercentage.ToString();
    };
    bgw.RunWorkerCompleted += (_, args) =&amp;gt;
    {
        label1.Text = &lt;span class="string"&gt;&amp;quot;Completed.&amp;quot;&lt;/span&gt;;
    };
    bgw.RunWorkerAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like last time, this approach works but is rather convoluted. Again, we see the &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; type having too many responsibilities: it has the enabling property, the method to report progress, and the event that is raised when the progress changes.&lt;/p&gt;

&lt;h4&gt;Task.Run&lt;/h4&gt;

&lt;p&gt;The new &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; support also introduces a pattern for progress reporting in asynchronous methods: the caller optionally creates an implementation of &lt;code class="csharp"&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt; (usually an instance of &lt;code class="csharp"&gt;Progress&amp;lt;T&amp;gt;&lt;/code&gt;), and that instance is passed into the asynchronous method. The method then sends progress reports to its &lt;code class="csharp"&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt; instance (if it is not &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;null&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; progressHandler = &lt;span class="keyword"&gt;new&lt;/span&gt; Progress&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;value&lt;/span&gt; =&amp;gt;
    {
        label2.Text = &lt;span class="keyword"&gt;value&lt;/span&gt;.ToString();
    });
    &lt;span class="keyword"&gt;var&lt;/span&gt; progress = progressHandler &lt;span class="keyword"&gt;as&lt;/span&gt; IProgress&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
        &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (progress != &lt;span class="keyword"&gt;null&lt;/span&gt;)
                progress.Report(i);
            Thread.Sleep(100);
        }
    });
    label2.Text = &lt;span class="string"&gt;&amp;quot;Completed.&amp;quot;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we end up here is also somewhat convoluted. Normally, the &lt;code class="csharp"&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt; is a method parameter, but for these examples I'm trying to keep everything in the same method. Also, in this example there's no need to check &lt;code class="csharp"&gt;progress != &lt;span class="keyword"&gt;null&lt;/span&gt;&lt;/code&gt;, but that is standard practice for asynchronous code so I'm including it here.&lt;/p&gt;

&lt;p&gt;OK, so the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code is not a &lt;i&gt;lot&lt;/i&gt; better than &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;. It is better, though; it's a bit shorter, and the types definitely have better separation of concerns. So far, I'd way it's winning by technicalities instead of by a knockout.&lt;/p&gt;

&lt;p&gt;Let's take the stakes a bit higher. Let's say we want to report strings instead of an integer percentage. Furthermore, let's pretend we're doing an operation where the percent complete is difficult to compute, so instead we'll report strings that describe the current stage of the operation.&lt;/p&gt;

&lt;h3&gt;~ Fight! ~&lt;/h3&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;p&gt;&lt;code class="csharp"&gt;BackgroundWorker.ReportProgress&lt;/code&gt; takes an optional second argument, which is a custom "progress report" instance. This is then available to the progress changed handler as &lt;code class="csharp"&gt;ProgressChangedEventArgs.UserState&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    bgw.WorkerReportsProgress = &lt;span class="keyword"&gt;true&lt;/span&gt;;
    bgw.DoWork += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
        {
            bgw.ReportProgress(0, &lt;span class="string"&gt;&amp;quot;Stage &amp;quot;&lt;/span&gt; + i);
            Thread.Sleep(100);
        }
    };
    bgw.ProgressChanged += (_, args) =&amp;gt;
    {
        label1.Text = (&lt;span class="keyword"&gt;string&lt;/span&gt;)args.UserState;
    };
    bgw.RunWorkerCompleted += (_, args) =&amp;gt;
    {
        label1.Text = &lt;span class="string"&gt;&amp;quot;Completed.&amp;quot;&lt;/span&gt;;
    };
    bgw.RunWorkerAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a couple of drawbacks to the way &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; reports custom progress types. The first is that it is untyped (we just get an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;object&lt;/span&gt;&lt;/code&gt; instance, which we cast to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;string&lt;/span&gt;&lt;/code&gt;). The second is that we &lt;i&gt;must&lt;/i&gt; pass back a "percent complete", even if there is no way to calculate a meaningful value for that parameter. You can, of course, just pass zero and document that the caller should ignore that value.&lt;/p&gt;

&lt;h4&gt;Task.Run&lt;/h4&gt;

&lt;p&gt;The &lt;code class="csharp"&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code class="csharp"&gt;Progress&amp;lt;T&amp;gt;&lt;/code&gt; types allow any type for &lt;code class="csharp"&gt;T&lt;/code&gt;, so changing the progress report type from &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;/code&gt; to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;string&lt;/span&gt;&lt;/code&gt; is quite straightforward:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; progressHandler = &lt;span class="keyword"&gt;new&lt;/span&gt; Progress&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;value&lt;/span&gt; =&amp;gt;
    {
        label2.Text = &lt;span class="keyword"&gt;value&lt;/span&gt;;
    });
    &lt;span class="keyword"&gt;var&lt;/span&gt; progress = progressHandler &lt;span class="keyword"&gt;as&lt;/span&gt; IProgress&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;;
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
        &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (progress != &lt;span class="keyword"&gt;null&lt;/span&gt;)
                progress.Report(&lt;span class="string"&gt;&amp;quot;Stage &amp;quot;&lt;/span&gt; + i);
            Thread.Sleep(100);
        }
    });
    label2.Text = &lt;span class="string"&gt;&amp;quot;Completed.&amp;quot;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Discussion&lt;/h4&gt;

&lt;p&gt;I must conclude again that this round goes to &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;. The &lt;code class="csharp"&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code class="csharp"&gt;Progress&amp;lt;T&amp;gt;&lt;/code&gt; types are strongly typed, have better separation of concerns, and they easily allow any type of custom progress report.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6941052529541429485/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6941052529541429485'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6941052529541429485'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html' title='Task.Run vs BackgroundWorker, Round 5: Reporting Progress'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5145229067457449312</id><published>2013-09-12T12:30:00.000-04:00</published><updated>2014-05-16T16:03:37.594-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task.Run vs BackgroundWorker'/><title type='text'>Task.Run vs BackgroundWorker, Round 4: Cancellation</title><content type='html'>&lt;h3&gt;~ Ready? ~&lt;/h3&gt;

&lt;p&gt;Cancellation is a common requirement for background tasks, especially when those tasks are consuming resources (like the CPU). In this round, we'll be looking at the built-in cancellation support offered by &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; and &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For our example, the background operation is just to sleep 100 times, 100ms at a time, for a total of 10 seconds. A second button is used to cancel the operation.&lt;/p&gt;

&lt;h3&gt;~ Fight! ~&lt;/h3&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;p&gt;&lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; has its own, unique way of doing cancellation. First, when constructing the BGW instance, be sure to set &lt;code class="csharp"&gt;BackgroundWorker.WorkerSupportsCancellation&lt;/code&gt; to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt;. Then, the calling code can request the worker to cancel by calling &lt;code class="csharp"&gt;BackgroundWorker.CancelAsync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class="csharp"&gt;CancelAsync&lt;/code&gt; sets &lt;code class="csharp"&gt;BackgroundWorker.CancellationPending&lt;/code&gt; to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt;. The &lt;code class="csharp"&gt;DoWork&lt;/code&gt; handler should periodically check &lt;code class="csharp"&gt;CancellationPending&lt;/code&gt;, and when it detects cancellation, it should set &lt;code class="csharp"&gt;DoWorkEventArgs.Cancel&lt;/code&gt; to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt;. The calling code can check whether cancellation happened by reading &lt;code class="csharp"&gt;RunWorkerCompletedEventArgs.Cancelled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; BackgroundWorker _bgw;
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    _bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = _bgw;
    bgw.WorkerSupportsCancellation = &lt;span class="keyword"&gt;true&lt;/span&gt;;
    bgw.DoWork += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (bgw.CancellationPending)
            {
                args.Cancel = &lt;span class="keyword"&gt;true&lt;/span&gt;;
                &lt;span class="keyword"&gt;return&lt;/span&gt;;
            }
            Thread.Sleep(100);
        }
    };
    bgw.RunWorkerCompleted += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (args.Cancelled)
            MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Cancelled.&amp;quot;&lt;/span&gt;);
        &lt;span class="keyword"&gt;else&lt;/span&gt;
            MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Completed.&amp;quot;&lt;/span&gt;);
    };
    bgw.RunWorkerAsync();
}
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; cancelButton1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (_bgw != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        _bgw.CancelAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the biggest drawbacks to cancellation support in &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; is that it's just plain convoluted. Even when I was using &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; regularly, every time I had to support cancellation, I had to look up how to do it. It's just too complex to remember easily.&lt;/p&gt;

&lt;p&gt;Another minor drawback is how cancellation is observed in &lt;code class="csharp"&gt;RunWorkerCompleted&lt;/code&gt;; it can be easy to overlook the fact that the operation was cancelled. &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; had a similar problem with &lt;a href="http://blog.stephencleary.com/2013/07/taskrun-vs-backgroundworker-round-2.html"&gt;error handling&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Task.Run&lt;/h4&gt;

&lt;p&gt;&lt;code class="csharp"&gt;Task.Run&lt;/code&gt; uses the same &lt;a href="http://msdn.microsoft.com/en-us/library/dd997364.aspx"&gt;cooperative cancellation model&lt;/a&gt; used by the rest of the .NET 4.0 framework. We note once again that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; was passed over when other types were updated to use &lt;code class="csharp"&gt;CancellationToken&lt;/code&gt; - maybe that should tell us something...&lt;/p&gt;

&lt;p&gt;Since &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; uses the same cancellation support as every other modern API, it's much easier to remember. Also, it's easier to implement:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; CancellationTokenSource _cts;
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    _cts = &lt;span class="keyword"&gt;new&lt;/span&gt; CancellationTokenSource();
    &lt;span class="keyword"&gt;var&lt;/span&gt; token = _cts.Token;
    &lt;span class="keyword"&gt;try&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
        {
            &lt;span class="keyword"&gt;for&lt;/span&gt; (&lt;span class="keyword"&gt;int&lt;/span&gt; i = 0; i != 100; ++i)
            {
                token.ThrowIfCancellationRequested();
                Thread.Sleep(100);
            }
        });
        MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Completed.&amp;quot;&lt;/span&gt;);
    }
    &lt;span class="keyword"&gt;catch&lt;/span&gt; (OperationCanceledException)
    {
        MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Cancelled.&amp;quot;&lt;/span&gt;);
    }
}
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; cancelButton2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (_cts != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        _cts.Cancel();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compared to the &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; code, the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code has fewer moving pieces, so it's simpler and shorter. Another benefit of the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; approach is that it treats cancellation as an exceptional condition. This means you can't ignore it accidentally and continue on thinking that the operation completed. It also allows you to propagate cancellation very naturally.&lt;/p&gt;

&lt;p&gt;There's yet another advantage to the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; approach, that is rather subtle. A lot of thought went into the &lt;code class="csharp"&gt;CancellationTokenSource&lt;/code&gt;/&lt;code class="csharp"&gt;CancellationToken&lt;/code&gt; design, and it shows. The operation that supports cancellation only knows about the &lt;code class="csharp"&gt;CancellationToken&lt;/code&gt;; it doesn't need to know its own &lt;code class="csharp"&gt;Task&lt;/code&gt; or even the &lt;code class="csharp"&gt;CancellationTokenSource&lt;/code&gt;; all it has is the &lt;i&gt;token&lt;/i&gt;, which only allows it to &lt;i&gt;react&lt;/i&gt; to cancellation. This is a much cleaner design than the &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; approach, where the &lt;code class="csharp"&gt;DoWork&lt;/code&gt; handler &lt;i&gt;has&lt;/i&gt; to interact with its own &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; instance.&lt;/p&gt;

&lt;h4&gt;Discussion&lt;/h4&gt;

&lt;p&gt;Once again, &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; wins this round. Should that really be a surprise at this point? This time, the benefits of &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; are shorter code, simpler code, using common types, and a well-designed API that encourages separation of concerns.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5145229067457449312/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5145229067457449312'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5145229067457449312'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html' title='Task.Run vs BackgroundWorker, Round 4: Cancellation'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8443136385993799052</id><published>2013-08-29T12:30:00.000-04:00</published><updated>2013-09-24T14:08:42.854-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>StartNew is Dangerous</title><content type='html'>&lt;p&gt;I see a lot of code on blogs and in SO questions that use Task.Factory.StartNew to spin up work on a background thread. Stephen Toub has an &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"&gt;excellent blog article that explains why Task.Run is better than Task.Factory.StartNew&lt;/a&gt;, but I think a lot of people just haven't read it (or don't understand it). So, I've taken the same arguments, added some more forceful language, and we'll see how this goes. :)&lt;/p&gt;

&lt;p&gt;StartNew does offer many more options than Task.Run, but it is quite dangerous, as we'll see. You should prefer Task.Run over Task.Factory.StartNew in async code.&lt;/p&gt;

&lt;h4&gt;Why Use Task.Factory.StartNew?&lt;/h4&gt;

&lt;p&gt;There are only four reasons that you would &lt;i&gt;ever&lt;/i&gt; want to use Task.Factory.StartNew in async code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need a task that represents only the first (synchronous) part of an asynchronous method, instead of a task representing the entire method.&lt;/li&gt;
&lt;li&gt;You need to specify a custom TaskScheduler, instead of using the thread pool scheduler.&lt;/li&gt;
&lt;li&gt;You need to specify custom TaskCreationOptions.&lt;/li&gt;
&lt;li&gt;You need to pass a state object to the delegate to reduce memory pressure from lambda variable capture.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's consider each of these in turn.&lt;/p&gt;

&lt;p&gt;1. &lt;i&gt;You need a task that represents only the first (synchronous) part of an asynchronous method, instead of a task representing the entire method.&lt;/i&gt; This can be useful if you're writing something like a task scheduler. In which case, you should ask yourself why you're writing Yet Another Task Scheduler in the first place. The vast majority of the time, you want a task that represents the entire asynchronous method instead of just the first bit.&lt;/p&gt;

&lt;p&gt;2. &lt;i&gt;You need to specify a custom TaskScheduler, instead of using the thread pool scheduler.&lt;/i&gt; If you need to pass a specialized TaskScheduler to StartNew, then reconsider your API design. There are better ways of creating tasks for a specific context (e.g., TaskFactory).&lt;/p&gt;

&lt;p&gt;3. &lt;i&gt;You need to specify custom TaskCreationOptions.&lt;/i&gt; Let's consider &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskcreationoptions.aspx"&gt;each of the options&lt;/a&gt;. AttachedToParent shouldn't be used in async tasks, so that's out. DenyChildAttach should &lt;i&gt;always&lt;/i&gt; be used with async tasks (hint: if you didn't already know that, then StartNew isn't the tool you need). DenyChildAttach is passed by Task.Run. HideScheduler might be useful in some really obscure scheduling scenarios but in general should be avoided for async tasks. That only leaves LongRunning and PreferFairness, which are both optimization hints that &lt;b&gt;should only be specified after application profiling&lt;/b&gt;. I often see LongRunning misused in particular. In the vast majority of situations, the threadpool will adjust to any long-running task in 0.5 seconds - &lt;i&gt;without&lt;/i&gt; the LongRunning flag. Most likely, you don't really need it.&lt;/p&gt;

&lt;p&gt;4. &lt;i&gt;You need to pass a state object to the delegate to reduce memory pressure from lambda variable capture.&lt;/i&gt; Again, avoid the premature optimization. You should discover that you need this after doing memory profiling.&lt;/p&gt;

&lt;p&gt;Now, I'm not saying to &lt;i&gt;never&lt;/i&gt; use Task.Factory.StartNew. If you're writing a low-level, general-purpose async library, then there are some rare situations where you do want to use StartNew. But for the vast majority of async code, Task.Factory.StartNew is a mistake.&lt;/p&gt;

&lt;blockquote&gt;As a side note, the context of this discussion is &lt;i&gt;async code&lt;/i&gt;. If you're writing &lt;i&gt;parallel code&lt;/i&gt; (e.g., &lt;a href="http://msdn.microsoft.com/en-us/library/ff963551.aspx"&gt;dynamic task-based parallelism&lt;/a&gt;), then StartNew is the tool you want to use.&lt;/blockquote&gt;

&lt;h4&gt;Why Not to Use Task.Factory.StartNew?&lt;/h4&gt;

&lt;p&gt;We've covered some (very obscure) situations where Task.Factory.StartNew could be useful. Now, let's take a look at why you &lt;i&gt;shouldn't&lt;/i&gt; use Task.Factory.StartNew:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does not understand async delegates.&lt;/li&gt;
&lt;li&gt;Confusing default scheduler.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's consider each of these in turn.&lt;/p&gt;

&lt;p&gt;1. &lt;i&gt;Does not understand async delegates.&lt;/i&gt; This is actually the same as point 1 in the reasons why you &lt;i&gt;would&lt;/i&gt; want to use StartNew. The problem is that when you pass an async delegate to StartNew, it's natural to assume that the returned task represents that delegate. However, since StartNew does not understand async delegates, what that task actually represents is just the beginning of that delegate. This is one of the first pitfalls that coders encounter when using StartNew in async code.&lt;/p&gt;

&lt;p&gt;2. &lt;i&gt;Confusing default scheduler.&lt;/i&gt; OK, trick question time: in the code below, what thread does the method "A" run on?&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task.Factory.StartNew(A);

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; A() { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, you know it's a trick question, eh? If you answered "a thread pool thread", I'm sorry, but that's not correct. "A" will run on whatever TaskScheduler is currently executing! OK, so let's give a bit of context to the question: in the code below, what thread does the method "A" run on?&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Form1_Load(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    Task.Factory.StartNew(A);
}

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; A() { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, "A" &lt;i&gt;will&lt;/i&gt; run on a thread pool thread! But it's important to understand &lt;i&gt;why&lt;/i&gt;: Task.Factory.StartNew will first examine the current TaskScheduler. There is none, so it uses the thread pool TaskScheduler. Easy enough for the simple case, but let's consider a more realistic example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Form1_Load(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    Compute(3);
}

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Compute(&lt;span class="keyword"&gt;int&lt;/span&gt; counter)
{
    &lt;span class="comment"&gt;// If we&amp;#39;re done computing, just return.&lt;/span&gt;
    &lt;span class="keyword"&gt;if&lt;/span&gt; (counter == 0)
        &lt;span class="keyword"&gt;return&lt;/span&gt;;

    &lt;span class="keyword"&gt;var&lt;/span&gt; ui = TaskScheduler.FromCurrentSynchronizationContext();
    Task.Factory.StartNew(() =&amp;gt; A(counter))
        .ContinueWith(t =&amp;gt;
        {
            Text = t.Result.ToString(); &lt;span class="comment"&gt;// Update UI with results.&lt;/span&gt;

            &lt;span class="comment"&gt;// Continue working.&lt;/span&gt;
            Compute(counter - 1);
        }, ui);
}

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; A(&lt;span class="keyword"&gt;int&lt;/span&gt; &lt;span class="keyword"&gt;value&lt;/span&gt;)
{
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;value&lt;/span&gt;; &lt;span class="comment"&gt;// CPU-intensive work.&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a bit more complex, but it uses a pattern common in older code that used tasks before async was introduced. The "Compute" method first checks to see if it's done computing; if it is, then it returns. If there's more work to do, then it throws "A" onto the thread pool to do the CPU-intensive calculations. "Compute" also registers a continuation, so that when "A" is complete, it will marshal back to the UI thread, update the UI with the results so far, and then continue computing.&lt;/p&gt;

&lt;p&gt;Now, the question returns: what thread does "A" run on? Go ahead and walk through it; you should have enough knowledge at this point to figure out the answer.&lt;/p&gt;

&lt;p&gt;Ready? The method "A" runs on a thread pool thread the first time, and then it runs on the UI thread the last two times.&lt;/p&gt;

&lt;p&gt;Here's why: the first time through "Compute", there's no task scheduler and StartNew schedules "A" to a thread pool thread. However, when the first continuation runs, it &lt;i&gt;is&lt;/i&gt; running inside a task scheduler: the TaskScheduler.FromCurrentSynchronizationContext, which is the UI task scheduler. So when "Compute" executes the &lt;i&gt;second&lt;/i&gt; time, there &lt;i&gt;is&lt;/i&gt; a current task scheduler &lt;i&gt;which is picked up by StartNew&lt;/i&gt;, and StartNew schedules "A" to that task scheduler (i.e., the UI thread). The same thing happens the third time through.&lt;/p&gt;

&lt;p&gt;This is some pretty dangerous and unexpected behavior, IMO. In fact, many software teams have implemented rules for their source that &lt;i&gt;disallow StartNew unless you pass an explicit TaskScheduler&lt;/i&gt;. And I think that's a great idea.&lt;/p&gt;

&lt;p&gt;Unfortunately, the only overloads for StartNew that take a TaskScheduler also require you to specify the CancellationToken and TaskCreationOptions. This means that in order to use Task.Factory.StartNew to reliably, predictably queue work to the thread pool, you have to use an overload like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Task.Factory.StartNew(A, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And really, that's kind of ridiculous. Just use &lt;code class="csharp"&gt;Task.Run(() =&amp;gt; A());&lt;/code&gt;.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8443136385993799052/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8443136385993799052'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8443136385993799052'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html' title='StartNew is Dangerous'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1614444551356512575</id><published>2013-08-13T00:52:00.000-04:00</published><updated>2014-05-16T16:06:21.757-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows Services'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Slides Available: ThatConference 2013</title><content type='html'>&lt;p&gt;I have &lt;a href="http://ge.tt/9cG0uko/v/0?c"&gt;uploaded the slides&lt;/a&gt; for the talk I gave this morning at ThatConference 2013, entitled "Making the Best of the Short Bunk: Scaling Your Servers with Async/Await". This was a highly technical async/await talk that focused specifically on the server side.&lt;/p&gt;

&lt;p&gt;This talk specifically was &lt;i&gt;not&lt;/i&gt; an intro to async/await. If you need an intro, I recommend starting with my &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;intro blog post&lt;/a&gt; and following up with the links at the bottom (in particular, don't ignore the MSDN docs; they're actually quite good!). An intermediate-level followup is my MSDN article &lt;a href="http://msdn.microsoft.com/en-us/magazine/jj991977.aspx"&gt;Best Practices in Asynchronous Programming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The server-side async/await talk that I gave today did assume about that level of knowledge, and dove into the details of how async and await are used on the server side (mostly ASP.NET, but a lot of the information and techniques apply to any kind of server).&lt;/p&gt;

&lt;p&gt;I decided to upload the full PowerPoint file instead of just the slides, so you have access to all my notes and stuff. If you attended the talk, you'll find that I skipped the last section (ran out of time); the last section is an overview of various frameworks and libraries describing their current level of async support. Thanks to all who came, and let me know if you have any questions!&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/25539988" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px;" allowfullscreen="1" webkitallowfullscreen="1" mozallowfullscreen="1"&gt; &lt;/iframe&gt;
&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1614444551356512575/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html' title='Slides Available: ThatConference 2013'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-647096907799911527</id><published>2013-08-01T12:30:00.000-04:00</published><updated>2013-08-01T12:30:00.758-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task.Run vs BackgroundWorker'/><title type='text'>Task.Run vs BackgroundWorker, Round 3: Returning Results</title><content type='html'>&lt;h3&gt;~ Ready? ~&lt;/h3&gt;

&lt;p&gt;When you perform a background operation - that is, some actual CPU work that you push off to a background thread - it's usually done to calculate some result. Today we're looking at how &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; and &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; handle returning results.&lt;/p&gt;

&lt;h3&gt;~ Fight! ~&lt;/h3&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;p&gt;It's pretty straightforward to return values from a &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;; just set the &lt;code class="csharp"&gt;DoWorkEventArgs.Result&lt;/code&gt; property and then you can pick up the results from &lt;code class="csharp"&gt;RunWorkerCompletedEventArgs.Result&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    bgw.DoWork += (_, args) =&amp;gt;
    {
        Thread.Sleep(1000);
        args.Result = 13;
    };
    bgw.RunWorkerCompleted += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; result = (&lt;span class="keyword"&gt;int&lt;/span&gt;)args.Result;
        MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Result is &amp;quot;&lt;/span&gt; + result);
    };
    bgw.RunWorkerAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The biggest awkwardness caused by this code is the loss of type information of the result. Both &lt;code class="csharp"&gt;DoWorkEventArgs.Result&lt;/code&gt; and &lt;code class="csharp"&gt;RunWorkerCompletedEventArgs.Result&lt;/code&gt; are of type &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;object&lt;/span&gt;&lt;/code&gt;, so you have to cast it to the correct type when retrieving the result.&lt;/p&gt;

&lt;h4&gt;Task.Run&lt;/h4&gt;

&lt;p&gt;The lambda passed to &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; can simply return a value:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; result = &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
        Thread.Sleep(1000);
        &lt;span class="keyword"&gt;return&lt;/span&gt; 13;
    });
    MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Result is &amp;quot;&lt;/span&gt; + result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Discussion&lt;/h4&gt;

&lt;p&gt;The &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code uses the natural &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;/code&gt; syntax, is strongly typed, and is more concise than &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;. This round clearly goes to &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/647096907799911527/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/08/taskrun-vs-backgroundworker-round-3.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/647096907799911527'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/647096907799911527'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/taskrun-vs-backgroundworker-round-3.html' title='Task.Run vs BackgroundWorker, Round 3: Returning Results'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3451978703748027956</id><published>2013-07-26T12:30:00.000-04:00</published><updated>2013-07-26T12:30:00.272-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task.Run vs BackgroundWorker'/><title type='text'>Task.Run vs BackgroundWorker, Round 2: Error Handling</title><content type='html'>&lt;h3&gt;~ Ready? ~&lt;/h3&gt;

&lt;p&gt;Proper error handling is necessary for any application. When you consider various solutions for a problem, don't forget to consider error handling as well! All too often I have seen developers use an inappropriate solution because it was easier in the "success" case. Just as one example: the last few years I've seen many developers use &lt;code class="csharp"&gt;ThreadPool.QueueUserWorkItem&lt;/code&gt; for background operations; after all, (they think), it's really simple - I can just toss a delegate onto the thread pool! It is true that for the "success" case it's easier to use &lt;code class="csharp"&gt;ThreadPool.QueueUserWorkItem&lt;/code&gt; than &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;, but what about for the "failure" case? What happens when the delegate throws an exception? Hint: it's not pretty, and the code they have to write to catch the exception and marshal it to another thread is way more complex than the same code using &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, the lesson here is that you need to consider error handling when looking at options. We'll look at optional characteristics later in this series (cancellation, progress reporting, etc), but proper error handling is not optional; it is required.&lt;/p&gt;

&lt;h3&gt;~ Fight! ~&lt;/h3&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;p&gt;The &lt;code class="csharp"&gt;DoWork&lt;/code&gt; event can throw exceptions, which are automatically caught and placed on the &lt;code class="csharp"&gt;Error&lt;/code&gt; property of the arguments passed to &lt;code class="csharp"&gt;RunWorkerCompleted&lt;/code&gt;. The code is not too bad:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    bgw.DoWork += (_, __) =&amp;gt;
    {
        Thread.Sleep(1000);
        &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;Hi!&amp;quot;&lt;/span&gt;);
    };
    bgw.RunWorkerCompleted += (_, args) =&amp;gt;
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (args.Error != &lt;span class="keyword"&gt;null&lt;/span&gt;)
            MessageBox.Show(args.Error.Message);
    };
    bgw.RunWorkerAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Task.Run&lt;/h4&gt;

&lt;p&gt;&lt;code class="csharp"&gt;Task.Run&lt;/code&gt; will also capture any exceptions and place them on the returned &lt;code class="csharp"&gt;Task&lt;/code&gt;. When the task is awaited, the exceptions are propagated. This means that you can use the normal try/catch blocks to handle exceptions:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;try&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
        {
            Thread.Sleep(1000);
            &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;Hi!&amp;quot;&lt;/span&gt;);
        });
    }
    &lt;span class="keyword"&gt;catch&lt;/span&gt; (Exception ex)
    {
        MessageBox.Show(ex.Message);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Discussion&lt;/h4&gt;

&lt;p&gt;Personally, I prefer the try/catch system because it is more familiar to developers than &lt;code class="csharp"&gt;RunWorkerCompletedEventArgs&lt;/code&gt;. Also, it's easy to overlook the exception in &lt;code class="csharp"&gt;BackgroundWorker.RunWorkerCompleted&lt;/code&gt;; there's no possible way to overlook an exception thrown by &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Let's make the example a little more realistic. Instead of displaying the exception to the user, let's allow it to propagate through the continuation. This is a realistic way to handle unexpected exceptions at this level in the code.&lt;/p&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;p&gt;There's a pretty good "gotcha" when propagating exceptions. If you just re-throw them, then you lose the original stack trace. .NET 4.5 introduced the &lt;code class="csharp"&gt;ExceptionDispatchInfo&lt;/code&gt; type which can preserve the original stack trace; you just have to remember to use it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    bgw.DoWork += (_, __) =&amp;gt;
    {
        Thread.Sleep(1000);
        &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;Hi!&amp;quot;&lt;/span&gt;);
    };
    bgw.RunWorkerCompleted += (_, args) =&amp;gt; ExceptionDispatchInfo.Capture(args.Error).Throw();
    bgw.RunWorkerAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Task.Run&lt;/h4&gt;

&lt;p&gt;Since &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; will correctly preserve the stack trace for propagated exceptions, the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code is quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
        Thread.Sleep(1000);
        &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;Hi!&amp;quot;&lt;/span&gt;);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Discussion&lt;/h4&gt;

&lt;p&gt;Whether handling the exception immediately, or propagating the exception, the &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; code is cleaner and less error-prone than the &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; code.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3451978703748027956/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/07/taskrun-vs-backgroundworker-round-2.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3451978703748027956'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3451978703748027956'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/07/taskrun-vs-backgroundworker-round-2.html' title='Task.Run vs BackgroundWorker, Round 2: Error Handling'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6344569383679684686</id><published>2013-05-17T12:30:00.000-04:00</published><updated>2013-05-18T11:59:16.814-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: Async Diagnostics</title><content type='html'>&lt;p&gt;It is with greatest pleasure that I announce the public (pre)release of Async Diagnostics.&lt;/p&gt;

&lt;p&gt;Currently, diagnostics can be a bit... difficult... when dealing with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code. In particular, the call stack is not very useful for diagnostics in asynchronous code.&lt;/p&gt;

&lt;h4&gt;A Brief Digression on Call Stacks and Causality Stacks&lt;/h4&gt;

&lt;p&gt;I'll cut to the chase: the call stack is about &lt;i&gt;where you're going next&lt;/i&gt;, not &lt;i&gt;where you came from&lt;/i&gt;. This means that you should not look to the call stack to find out how your code got into that situation. What you &lt;i&gt;really&lt;/i&gt; want is a "causality stack".&lt;/p&gt;

&lt;p&gt;This is counter-intuitive to many developers because in the synchronous world, the call stack &lt;i&gt;is&lt;/i&gt; the causality stack. But in the asynchronous world, they are very different. Eric Lippert has some great SO answers (&lt;a href="http://stackoverflow.com/a/15368508/263693"&gt;1&lt;/a&gt;, &lt;a href="http://stackoverflow.com/a/6597522/263693"&gt;2&lt;/a&gt;) that clarify what the call stack &lt;i&gt;really&lt;/i&gt; is.&lt;/p&gt;

&lt;p&gt;There's also a recent &lt;a href="http://msdn.microsoft.com/en-us/magazine/jj891052.aspx"&gt;MSDN article&lt;/a&gt; that explains why call stacks aren't causality stacks. That article includes a fairly involved way to build causality chains that works for Windows Store applications but does not properly handle fork/join scenarios (e.g., &lt;code class="csharp"&gt;Task.WhenAll&lt;/code&gt;).&lt;/p&gt;

&lt;h4&gt;Introducing Async Diagnostics&lt;/h4&gt;

&lt;p&gt;You can now &lt;a href="https://nuget.org/packages/Nito.AsyncEx.AsyncDiagnostics/"&gt;download a library&lt;/a&gt; into your project from NuGet, follow the simple instructions, and you'll get asynchronous diagnostic (causality) stacks for all exceptions thrown in (or through) your assembly.&lt;/p&gt;

&lt;h4&gt;Example&lt;/h4&gt;

&lt;p&gt;Consider the following example program. It has reasonably realistic asynchronous method usage; the &lt;code class="csharp"&gt;MainAsync&lt;/code&gt; method calls the &lt;code class="csharp"&gt;MyMethodAsync&lt;/code&gt; method, which is overloaded to allow cancellation. &lt;code class="csharp"&gt;MyMethodAsync&lt;/code&gt; in turn spins up a couple of parallel asynchronous tasks and waits for them both to complete. One of these tasks will throw an exception.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;

&lt;span class="keyword"&gt;class&lt;/span&gt; Program
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        MainAsync(args).Wait();
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task MainAsync(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="keyword"&gt;try&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;await&lt;/span&gt; MyMethodAsync(&lt;span class="string"&gt;&amp;quot;I&amp;#39;m an asynchronous exception! Locate me if you can!&amp;quot;&lt;/span&gt;);
        }
        &lt;span class="keyword"&gt;catch&lt;/span&gt; (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            Console.ReadKey();
        }
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; Task MyMethodAsync(&lt;span class="keyword"&gt;string&lt;/span&gt; message)
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; MyMethodAsync(message, CancellationToken.None);
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task MyMethodAsync(&lt;span class="keyword"&gt;string&lt;/span&gt; message, CancellationToken token)
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; task1 = Task.Delay(1000);
        &lt;span class="keyword"&gt;var&lt;/span&gt; task2 = Task.Run(() =&amp;gt; { &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(message); }); &lt;span class="comment"&gt;// (line 33)&lt;/span&gt;
        &lt;span class="keyword"&gt;await&lt;/span&gt; Task.WhenAll(task1, task2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this program, you'll see output like this:&lt;/p&gt;

&lt;pre&gt;
System.InvalidOperationException: I&amp;#39;m an asynchronous exception! Locate me if you can!
   at Program.&amp;lt;&amp;gt;c__DisplayClass4.&amp;lt;MyMethodAsync&amp;gt;b__3() in e:\work_\projects\ConsoleApplication8\ConsoleApplication8\Program.cs:line 33
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Program.&amp;lt;MyMethodAsync&amp;gt;d__6.MoveNext() in e:\work_\projects\ConsoleApplication8\ConsoleApplication8\Program.cs:line 34
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Program.&amp;lt;MainAsync&amp;gt;d__0.MoveNext() in e:\work_\projects\ConsoleApplication8\ConsoleApplication8\Program.cs:line 16
&lt;/pre&gt;

&lt;p&gt;If you're familiar with mangled call stacks, you can see from the first entry that the exception was raised from a lambda expression in &lt;code class="csharp"&gt;MyMethodAsync&lt;/code&gt;, and you even get the file name and line number. But the real question is: &lt;i&gt;how did the program get in this state?&lt;/i&gt; You can often answer that question by answering the closely related questions: &lt;i&gt;what called this method, and what called the calling method, etc?&lt;/i&gt; A regular call stack just isn't sufficient to answer those questions for asynchronous code. You need a causality stack.&lt;/p&gt;

&lt;p&gt;First, add the &lt;a href="https://nuget.org/packages/Nito.AsyncEx.AsyncDiagnostics/"&gt;Nito.AsyncEx.AsyncDiagnostics&lt;/a&gt; package to the solution. Be sure to include Prerelease packages:&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;img border="0" src="http://1.bp.blogspot.com/-qdxJAfQ1684/UY7aEPUd-xI/AAAAAAAAIq0/GPgoVuzi8TA/s1600/AsyncDiagnostics.NuGet.png" /&gt;
&lt;/div&gt;

&lt;p&gt;Once it's installed, it'll bring up some installation/usage instructions. First, in one of your source files, apply the &lt;code class="csharp"&gt;AsyncDiagnosticAspect&lt;/code&gt; to your assembly. Then, locate the place where you display or log your exceptions, and change &lt;code class="csharp"&gt;ToString&lt;/code&gt; to &lt;code class="csharp"&gt;ToAsyncDiagnosticString&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;
&lt;span class="highlight"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; Nito.AsyncEx.AsyncDiagnostics;&lt;/span&gt;

&lt;span class="highlight"&gt;[assembly: AsyncDiagnosticAspect]&lt;/span&gt;

&lt;span class="keyword"&gt;class&lt;/span&gt; Program
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        MainAsync(args).Wait();
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task MainAsync(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="keyword"&gt;try&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;await&lt;/span&gt; MyMethodAsync(&lt;span class="string"&gt;&amp;quot;I&amp;#39;m an asynchronous exception! Locate me if you can!&amp;quot;&lt;/span&gt;);
        }
        &lt;span class="keyword"&gt;catch&lt;/span&gt; (Exception ex)
        {
            Console.WriteLine(ex.&lt;span class="highlight"&gt;ToAsyncDiagnosticString&lt;/span&gt;());
            Console.ReadKey();
        }
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; Task MyMethodAsync(&lt;span class="keyword"&gt;string&lt;/span&gt; message)
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; MyMethodAsync(message, CancellationToken.None);
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task MyMethodAsync(&lt;span class="keyword"&gt;string&lt;/span&gt; message, CancellationToken token)
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; task1 = Task.Delay(1000);
        &lt;span class="keyword"&gt;var&lt;/span&gt; task2 = Task.Run(() =&amp;gt; { &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(message); });
        &lt;span class="keyword"&gt;await&lt;/span&gt; Task.WhenAll(task1, task2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With these few changes, the new output is the same, except for some additional information printed at the end of the exception stack trace:&lt;/p&gt;

&lt;pre&gt;
System.InvalidOperationException: I&amp;#39;m an asynchronous exception! Locate me if you can!
   at Program.&amp;lt;&amp;gt;c__DisplayClass4.&amp;lt;MyMethodAsync&amp;gt;b__3() in e:\work_\projects\ConsoleApplication8\ConsoleApplication8\Program.cs:line 36
   at System.Threading.Tasks.Task`1.InnerInvoke()
   at System.Threading.Tasks.Task.Execute()
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Program.&amp;lt;MyMethodAsync&amp;gt;d__6.&amp;lt;MoveNext&amp;gt;z__OriginalMethod() in e:\work_\projects\ConsoleApplication8\ConsoleApplication8\Program.cs:line 37
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Program.&amp;lt;MainAsync&amp;gt;d__0.&amp;lt;MoveNext&amp;gt;z__OriginalMethod() in e:\work_\projects\ConsoleApplication8\ConsoleApplication8\Program.cs:line 19
Logical stack:
   async Program.MyMethodAsync(String message, CancellationToken token)
   Program.MyMethodAsync(String message)
   async Program.MainAsync(String[] args)
   Program.Main(String[] args)
&lt;/pre&gt;

&lt;p&gt;Now there's a nice "logical stack" stuck on the end of the exception dump. Unlike the exception call stack, the "logical stack" is actually a causality stack, which is much more useful when debugging asynchronous code. As you can see, the logical stack leads us directly to the location of the exception, and (more importantly) shows &lt;i&gt;how we got there&lt;/i&gt;.&lt;/p&gt;

&lt;blockquote&gt;Side note: the original exception details are included in &lt;code class="csharp"&gt;ToAsyncDiagnosticString&lt;/code&gt; because it does contain some information that is &lt;i&gt;not&lt;/i&gt; tracked by the async diagnostic stack. For example, you can look at the top frame in the (synchronous) call stack (&lt;code&gt;Program.&amp;lt;&amp;gt;c__DisplayClass4.&amp;lt;MyMethodAsync&amp;gt;b__3()&lt;/code&gt;) and infer that in fact the exception is thrown from a lambda expression and not directly from &lt;code class="csharp"&gt;MyMethodAsync&lt;/code&gt;. The synchronous call stack also includes other information such as file names and line numbers that is not (currently) included in the logical stack.&lt;/blockquote&gt;

&lt;p&gt;Ready to go one step further? You can tie into the diagnostic stack and add whatever additional data you want:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;
&lt;span class="keyword"&gt;using&lt;/span&gt; Nito.AsyncEx.AsyncDiagnostics;

[assembly: AsyncDiagnosticAspect]

&lt;span class="keyword"&gt;class&lt;/span&gt; Program
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        MainAsync(args).Wait();
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task MainAsync(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="keyword"&gt;try&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;await&lt;/span&gt; MyMethodAsync(&lt;span class="string"&gt;&amp;quot;I&amp;#39;m an asynchronous exception! Locate me if you can!&amp;quot;&lt;/span&gt;);
        }
        &lt;span class="keyword"&gt;catch&lt;/span&gt; (Exception ex)
        {
            Console.WriteLine(ex.ToAsyncDiagnosticString());
            Console.ReadKey();
        }
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; Task MyMethodAsync(&lt;span class="keyword"&gt;string&lt;/span&gt; message)
    {
        &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; (AsyncDiagnosticStack.Enter(&lt;span class="string"&gt;&amp;quot;  My message is: &amp;quot;&lt;/span&gt; + message))&lt;/span&gt;
        &lt;span class="highlight"&gt;{&lt;/span&gt;
            &lt;span class="keyword"&gt;return&lt;/span&gt; MyMethodAsync(message, CancellationToken.None);
        &lt;span class="highlight"&gt;}&lt;/span&gt;
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; Task MyMethodAsync(&lt;span class="keyword"&gt;string&lt;/span&gt; message, CancellationToken token)
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; task1 = Task.Delay(1000);
        &lt;span class="keyword"&gt;var&lt;/span&gt; task2 = Task.Run(() =&amp;gt; { &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(message); });
        &lt;span class="keyword"&gt;await&lt;/span&gt; Task.WhenAll(task1, task2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And whatever string you give it gets included in the logical stack:&lt;/p&gt;

&lt;pre&gt;
Logical stack:
   async Program.MyMethodAsync(String message, CancellationToken token)
     My message is: I'm an asynchronous exception! Locate me if you can!
   Program.MyMethodAsync(String message)
   async Program.MainAsync(String[] args)
   Program.Main(String[] args)
&lt;/pre&gt;

&lt;h4&gt;Limitations&lt;/h4&gt;

&lt;p&gt;Async Diagnostics only works on the full .NET framework. So it's great for WPF or ASP.NET apps, but won't work for Windows Store, Phone, or Silverlight.&lt;/p&gt;

&lt;p&gt;Async Diagnostics works best when you build in Debug mode. In Release mode, the compiler may inline method calls, and then they don't show up in the logical stack. However, any data you explicitly add to the diagnostic stack will always be included.&lt;/p&gt;

&lt;p&gt;Async Diagnostics requires full trust. There is no support for partial trust.&lt;/p&gt;

&lt;p&gt;There is a definite runtime impact. Your code will certainly run slower with async diagnostics active. Currently, there is no way to turn async diagnostics on or off at runtime; it is a compile-time-only option. However, you can reduce the runtime impact by only applying &lt;code class="csharp"&gt;AsyncDiagnosticAspect&lt;/code&gt; to certain types or namespaces (either by placing the attribute only on the type(s) that need it or by using &lt;a href="http://doc.postsharp.net/postsharp-3.0/##PostSharp-3.0.chm/html/1B05CE59-61DE-4043-8E7C-12C130B1ACBB.htm"&gt;PostSharp multicasting&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;I do attempt to minimize the runtime impact of Async Diagnostics. I do as much processing as possible at compile time. At runtime, I use immutable collections exclusively to maximize memory sharing. However, the runtime impact is still non-trivial. It is &lt;i&gt;possible&lt;/i&gt; to leave Async Diagnostics on in production, but you'll want to do performance testing before making that decision.&lt;/blockquote&gt;

&lt;p&gt;&lt;code class="csharp"&gt;AsyncDiagnosticAspect&lt;/code&gt; may be applied to assemblies or types. It does &lt;i&gt;not&lt;/i&gt; work correctly when multicast onto methods. I expect this will be fixed after PostSharp 3.1 is released.&lt;/p&gt;

&lt;p&gt;Async Diagnostics currently requires a paid version of PostSharp (Professional or higher). If you don't have a PostSharp Professional license, you can evaluate it for free for 45 days. I expect PostSharp 3.1 will allow Async Diagnostics to work with the Community (free) version of PostSharp.&lt;/p&gt;

&lt;h4&gt;How It Works&lt;/h4&gt;

&lt;p&gt;It's actually quite simple. Async Diagnostics is &lt;a href="http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html"&gt;an implicit async context containing a stack of strings (very similar to the example in this blog post)&lt;/a&gt; and uses &lt;a href="http://www.postsharp.net/"&gt;PostSharp&lt;/a&gt; to inject pushes and pops into your methods at compile time.&lt;/p&gt;

&lt;h4&gt;Error Logging Frameworks&lt;/h4&gt;

&lt;p&gt;Async Diagnostics works by capturing the diagnostic stack at the time the exception is thrown, and placing it on the &lt;code class="csharp"&gt;Exception.Data&lt;/code&gt; dictionary. Many error logging frameworks ignore the &lt;code class="csharp"&gt;Data&lt;/code&gt; property, but if you Google around you'll find some solutions for &lt;a href="http://stackoverflow.com/a/7791660/263693"&gt;log4net&lt;/a&gt; and hacks for &lt;a href="http://stackoverflow.com/a/9406947/263693"&gt;ELMAH&lt;/a&gt; and &lt;a href="http://blog.paulhadfield.net/2011/10/nlog-updating-exceptionlayoutrenderer.html"&gt;nLog&lt;/a&gt;. As of this writing, Microsoft's Enterprise Library is the only logging framework I know of that does include &lt;code class="csharp"&gt;Data&lt;/code&gt; values by default.&lt;/p&gt;

&lt;h4&gt;Call to Action&lt;/h4&gt;

&lt;p&gt;Please download Async Diagnostics and take it for a spin! I've run a number of tests but haven't tried it on really complex code bases. Let me know (in the &lt;a href="https://nitoasyncex.codeplex.com/discussions"&gt;AsyncEx library discussions&lt;/a&gt;) if it doesn't work!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6344569383679684686/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-async-diagnostics.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6344569383679684686'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6344569383679684686'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-async-diagnostics.html' title='Announcement: Async Diagnostics'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-qdxJAfQ1684/UY7aEPUd-xI/AAAAAAAAIq0/GPgoVuzi8TA/s72-c/AsyncDiagnostics.NuGet.png' height='72' width='72'/><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2767529211373934289</id><published>2013-05-16T12:30:00.000-04:00</published><updated>2013-05-16T12:30:02.422-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: C# MVP</title><content type='html'>&lt;p&gt;On the "personal achievement" side of things, I'm pleased to announce that I've been given the Microsoft Most Valuable Professional award for C#.&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;img border="0" src="http://3.bp.blogspot.com/-uPK1egp6leE/UY039RiXvqI/AAAAAAAAIqQ/_93jyeWqrp4/s320/P5101269+2.jpg" /&gt;
&lt;/div&gt;

&lt;p&gt;I've read about the MVP award before (both good and bad), and I thought I'd write out my own perspective of what it is and is not. (I'm just talking about the "programmer" MVPs here, e.g., C#, VB, etc., not the "user" MVPs, e.g., Excel).&lt;/p&gt;

&lt;h4&gt;It's Not: A Certification&lt;/h4&gt;

&lt;p&gt;A certification is something you earn. I hold a number of Microsoft certifications, which I earned by practicing and studying and then passing exams. Certifications (attempt to) measure a skill set, and achieving a certification indicates that one has those skills.&lt;/p&gt;

&lt;p&gt;The MVP award is different. The MVP award is given to people who have had an impact on technical communities through their willingness to help others. It's a much fuzzier definition; there's no specific set of actions that anyone can do that are guaranteed to "earn" them an MVP.&lt;/p&gt;

&lt;p&gt;Another difference is that there's no limit to the number of certifications. Every person in the world could decide to get a Windows Store Apps certification, and that would be fine.&lt;/p&gt;

&lt;p&gt;In contrast, there is a definite limit to the number of MVPs. As of now, there's only about 3,800 MVPs worldwide. Also, the MVP award is a yearly award, so if an MVP stops contributing to the technical community, then they may not get their MVP status renewed the following year.&lt;/p&gt;

&lt;h4&gt;It's Not: A Super Programmer Designation&lt;/h4&gt;

&lt;p&gt;Being an MVP actually has little to do with being a great developer. A lot of other people have criticized the MVP program for letting in less-than-stellar developers (and in some cases, &lt;i&gt;non-&lt;/i&gt;developers). But that seems fine to me; the primary filter for being an MVP is not programming prowess; it's how much you help &lt;i&gt;other&lt;/i&gt; developers.&lt;/p&gt;

&lt;h4&gt;It's Not: A Way to Control Microsoft&lt;/h4&gt;

&lt;p&gt;If you read some of the writings out there by former MVPs, you'll find that a number of them think the program is useless because MVPs don't get to drive the decisions at Microsoft. It is true that MVPs have (slightly) more access to Microsoft personnel than average developers, and (at least in the past) some Microsoft product groups have invited feedback from MVPs, but that doesn't mean that the MVPs control the decisions. At the end of the day, Microsoft will do what they think is best for Microsoft.&lt;/p&gt;

&lt;p&gt;Similarly, MVPs have access to a lot of NDA information, but Microsoft does not share &lt;i&gt;everything&lt;/i&gt; with its MVPs. MVP leaks are a historical fact, and when Microsoft has a game it's playing close to the chest, &lt;i&gt;of course&lt;/i&gt; they don't release the details to MVPs before the hand is played out. In the past this has caused some hurt feelings among MVPs, since they were purposely kept in the dark for strategic reasons.&lt;/p&gt;

&lt;p&gt;My take on this is simple: an MVP award does not entitle the holders to any secret information or influence on product development. If you &lt;i&gt;do&lt;/i&gt; get this as part of your MVP, bully for you and make good use of it! But if not, well, you're just not entitled to it. Every MVP area (e.g., C# vs F# vs Windows Phone vs Azure) is different and interacts with its MVPs differently; some have access to NDA material, some have input on product design, some get advance warning of game-changers. Others don't.&lt;/p&gt;

&lt;h4&gt;It Is: A Recognition&lt;/h4&gt;

&lt;p&gt;The MVP award is primarily a recognition for work you've already done over the previous year. It doesn't really come with any guarantees; it's just recognizing work that's already been done.&lt;/p&gt;

&lt;p&gt;Personally, I was honored to receive the MVP award. For the last few years I've thought it would be nice to be an MVP, but I decided I would never nominate myself, nor would I ask (or hint) for anyone else to nominate me. Rather, I'd just be myself and let the chips fall where they may. I still have no idea who nominated me as an MVP, but thank you, whoever you are.&lt;/p&gt;

&lt;p&gt;A nice side effect of the MVP award is that I get a lot of really cool toys; a lot of the popular tools provide free MVP licenses, and this really lets me explore a lot of things I've only read about. IntelliTrace, here I come! :)&lt;/p&gt;

&lt;h4&gt;It's Not: Mensa&lt;/h4&gt;

&lt;p&gt;I just have to include this point because I literally laughed out loud while unpacking my MVP award.&lt;/p&gt;

&lt;p&gt;The photo at the beginning of this post is my actual (physical) MVP award. The circular year part comes off, like so:&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;img border="0" src="http://1.bp.blogspot.com/-Kp63LseBLng/UY04Kr2SyQI/AAAAAAAAIqY/vlsoTVhSjTg/s320/P5101271+2.jpg" /&gt;
&lt;/div&gt;

&lt;p&gt;I assume this is done so that the big, heavy part of the award is only given once and if you are still an MVP next year they only send you another little circular part.&lt;/p&gt;

&lt;p&gt;Just in case any MVPs couldn't figure out how to assemble the award, Microsoft was kind enough to include instructions:&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;a href="http://2.bp.blogspot.com/-pT3mK8Tho7U/UY05C1kmOHI/AAAAAAAAIqk/ardy8Bk4cP0/s1600/MVP+Instructions.png" imageanchor="1" &gt;&lt;img border="0" src="http://2.bp.blogspot.com/-pT3mK8Tho7U/UY05C1kmOHI/AAAAAAAAIqk/ardy8Bk4cP0/s320/MVP+Instructions.png" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Apparently, the Microsoft MVP program ain't exactly Mensa. ;)&lt;/p&gt;






</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2767529211373934289/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-c-mvp.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2767529211373934289'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2767529211373934289'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-c-mvp.html' title='Announcement: C# MVP'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-uPK1egp6leE/UY039RiXvqI/AAAAAAAAIqQ/_93jyeWqrp4/s72-c/P5101269+2.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-985754114390138695</id><published>2013-05-15T12:30:00.000-04:00</published><updated>2013-05-15T12:30:01.216-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: AsyncEx Stable Release</title><content type='html'>&lt;p&gt;A lot of my posts have to do with asynchronous code one way or another. Along the way, I've compiled a lot of useful helper classes into a &lt;a href="https://nitoasyncex.codeplex.com/"&gt;library called Nito.AsyncEx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I am pleased to announce that the first public, official release of AsyncEx has gone live. &lt;a href="http://nuget.org/packages/Nito.AsyncEx"&gt;Try it out&lt;/a&gt; and see what you think! (And go ahead and yell at me if it's broken).&lt;/p&gt;

&lt;h4&gt;Release Notes&lt;/h4&gt;

&lt;p&gt;With this first stable release of AsyncEx, I restructured the DLL and NuGet packages slightly (details on the &lt;a href="https://nitoasyncex.codeplex.com/"&gt;library homepage&lt;/a&gt;). I also had to make some difficult decisions about cutting some of the APIs that were most likely to change in the future.&lt;/p&gt;

&lt;h5&gt;Redesigned Features&lt;/h5&gt;

&lt;p&gt;These types have gone through a redesign since the last prerelease:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The old &lt;code class="csharp"&gt;AsyncWaitQueue&lt;/code&gt; (which was possibly the worst API I've ever written) was completely reworked into a properly-designed &lt;code class="csharp"&gt;IAsyncWaitQueue&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class="csharp"&gt;TaskCompletionNotifier&lt;/code&gt; has also been redesigned and renamed to &lt;code class="csharp"&gt;NotifyTaskCompletion&lt;/code&gt;. This was more of a minor correction in the design.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Semantic Changes&lt;/h5&gt;

&lt;p&gt;The &lt;code class="csharp"&gt;AsyncFactory FromApm&lt;/code&gt; methods now propagate exceptions directly from &lt;code class="csharp"&gt;Begin*&lt;/code&gt; methods. This matches &lt;code class="csharp"&gt;TaskFactory.FromAsync&lt;/code&gt; behavior, so it should be less surprising for new adopters.&lt;/p&gt;

&lt;h5&gt;Moving Stuff Around&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Moved synchronous task extensions (e.g., &lt;code class="csharp"&gt;Task.WaitAndUnwrapException&lt;/code&gt;) into namespace &lt;code class="csharp"&gt;Nito.AsyncEx.Synchronous&lt;/code&gt; because they are normally not needed.&lt;/li&gt;
&lt;li&gt;Moved dataflow support into a separate &lt;a href="https://nuget.org/packages/Nito.AsyncEx.Dataflow/"&gt;Nito.AsyncEx.Dataflow NuGet package&lt;/a&gt;. So if you upgrade and all your dataflow support breaks, you'll need to download the new NuGet package.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Removed and Probably Not Coming Back&lt;/h5&gt;

&lt;p&gt;The awaitable interfaces (&lt;code class="csharp"&gt;IAwaitable&lt;/code&gt;, &lt;code class="csharp"&gt;IAwaiter&lt;/code&gt;, and friends) have been removed. They are only helpful (but not required) in some advanced custom awaitable situations and they don't properly support &lt;code class="csharp"&gt;ICriticalNotifyCompletion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class="csharp"&gt;TaskFactory.With&lt;/code&gt; has also been removed. While this API makes sense, it just isn't that helpful.&lt;/p&gt;

&lt;h5&gt;Removed but Will Probably Come Back after They Bake a Bit More&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Custom types derived from &lt;code class="csharp"&gt;Task&lt;/code&gt; (&lt;code class="csharp"&gt;TaskBase&lt;/code&gt;, &lt;code class="csharp"&gt;TaskBaseWithCompletion&lt;/code&gt;). These are useful conceptually but need some more API work and testing.&lt;/li&gt;
&lt;li&gt;ETW tracing. All ETW tracing has been disabled for this release; I'm working on making the ETW tracing more consistent across all types. ETW tracing will definitely be supported in a future release.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;New features&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Added several more CancellationTokenHelpers: &lt;code class="csharp"&gt;None&lt;/code&gt;, &lt;code class="csharp"&gt;Canceled&lt;/code&gt;, and &lt;code class="csharp"&gt;Timeout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finished &lt;code class="csharp"&gt;Task.Then&lt;/code&gt; implementations.&lt;/li&gt;
&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/985754114390138695/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-asyncex-stable-release.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/985754114390138695'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/985754114390138695'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-asyncex-stable-release.html' title='Announcement: AsyncEx Stable Release'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3190220040160900365</id><published>2013-05-14T12:30:00.000-04:00</published><updated>2013-05-14T12:30:03.379-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: Speaking at ThatConference</title><content type='html'>&lt;p&gt;I have been chosen to speak at &lt;a href="http://www.thatconference.com/"&gt;ThatConference&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I'm a little nervous since I have not attended ThatConference before, but I have been to CodeMash twice so that counts for something, right?&lt;/p&gt;

&lt;p&gt;My session is &lt;a href="http://www.thatconference.com/Sessions/session_630"&gt;Scaling Your Servers with Async/Await&lt;/a&gt;. I'll be covering all kinds of helpful information on developing with async/await on the server side. Most async/await talks focus on the client side - and don't me wrong, async/await is certainly needed for client apps! - but server-side async is often overlooked or put on the back burner. I'll be addressing server-side async from concepts to best practices to diagnostics.&lt;/p&gt;

&lt;p&gt;I'm really excited for my talk, and I hope to see you there!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3190220040160900365/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3190220040160900365'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3190220040160900365'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html' title='Announcement: Speaking at ThatConference'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4859810279977687682</id><published>2013-05-13T12:30:00.000-04:00</published><updated>2013-05-13T12:30:02.647-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Announcements'/><title type='text'>Announcement: Over 200 Posts!</title><content type='html'>&lt;p&gt;This is the first post of an "announcement week". It just so happens that I have a few announcements to make, so this week instead of my regular posts I'll be posting only announcements.&lt;/p&gt;

&lt;p&gt;The first announcement is this: I've reached over 200 posts on my blog! (This post is actually number 208). I hardly ever look at my blog stats, but I thought today I'll make an exception since this is sort of a blog post that's about this blog...&lt;/p&gt;

&lt;p&gt;All together, my blog has had more than 400,000 pageviews since I published my &lt;a href="http://blog.stephencleary.com/2008/06/interop-on-64-bit-platforms.html"&gt;first post&lt;/a&gt; in June of '08.&lt;/p&gt;

&lt;p&gt;The vast majority of my readers come from Google or Stack Overflow, which means that they won't actually see this message. Thanks to those of you who &lt;i&gt;are&lt;/i&gt; reading this! :)&lt;/p&gt;

&lt;p&gt;The all-time "most famous" posts are currently:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The (quite old) &lt;a href="http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html"&gt;Reporting Progress from Tasks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;My &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;Async and Await Intro&lt;/a&gt; (of course).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html"&gt;Detection of Half-Open (Dropped) Connections&lt;/a&gt;, part of my TCP/IP .NET Sockets FAQ.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, if you look at recent trends, &lt;a href="http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html"&gt;Reporting Progress from Tasks&lt;/a&gt; is heading down in the rankings while &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;Async and Await&lt;/a&gt; is coming up fast. So I'd expect the all-time rankings to change soon.&lt;/p&gt;

&lt;p&gt;I'd like to close with a big "thank you" to all my readers out there! If you're reading this, you're probably a "regular", so &lt;i&gt;special&lt;/i&gt; thanks to you for putting up with my crazy talk on a regular basis! :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4859810279977687682/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-over-200-posts.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4859810279977687682'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4859810279977687682'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-over-200-posts.html' title='Announcement: Over 200 Posts!'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764</id><published>2013-05-09T12:30:00.000-04:00</published><updated>2013-05-09T12:30:02.749-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task.Run vs BackgroundWorker'/><title type='text'>Task.Run vs BackgroundWorker, Round 1: The Basic Pattern</title><content type='html'>&lt;h3&gt;~ Ready? ~&lt;/h3&gt;

&lt;p&gt;I'm going to just use a simple Windows Forms framework for my test code. WinForms is a pretty common denominator for most developers; just keep in mind that both &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; and &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; are using &lt;code class="csharp"&gt;SynchronizationContext&lt;/code&gt; underneath, so these same principles apply regardless of platform (WPF, Windows Store, MonoTouch, MonoDroid, Windows Phone, Silverlight, ASP.NET, etc). I'm just using WinForms because it's simple and pretty much everyone knows it.&lt;/p&gt;

&lt;h4&gt;The Basic Pattern: Do Work&lt;/h4&gt;

&lt;p&gt;The core problem that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; originally solved was the need to &lt;i&gt;execute synchronous code on a background thread&lt;/i&gt;. If you're using &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; for asynchronous or parallel work then just stop; you're not using the right tool in the first place. The core problem for &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; is to execute synchronous code on a background thread.&lt;/p&gt;

&lt;p&gt;Our example (synchronous) action is just going to sleep for a second.&lt;/p&gt;

&lt;h4&gt;The Basic Pattern: Completion&lt;/h4&gt;

&lt;p&gt;In almost every real-world scenario, we also want to be notified when the background operation has completed. Also, most of the time, we want our "handle the completion" code to run on the original context (e.g., a UI context so we could update the UI). It would be best if this marshaling back to the UI thread could be automatic.&lt;/p&gt;

&lt;p&gt;Our example completion code will just toss up a message box.&lt;/p&gt;

&lt;h3&gt;~ Fight! ~&lt;/h3&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button1_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; bgw = &lt;span class="keyword"&gt;new&lt;/span&gt; BackgroundWorker();
    bgw.DoWork += (_, __) =&amp;gt;
    {
        Thread.Sleep(1000);
    };
    bgw.RunWorkerCompleted += (_, __) =&amp;gt;
    {
        MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Hi from the UI thread!&amp;quot;&lt;/span&gt;);
    };
    bgw.RunWorkerAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Task.Run&lt;/h4&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; button2_Click(&lt;span class="keyword"&gt;object&lt;/span&gt; sender, EventArgs e)
{
    &lt;span class="keyword"&gt;await&lt;/span&gt; Task.Run(() =&amp;gt;
    {
        Thread.Sleep(1000);
    });
    MessageBox.Show(&lt;span class="string"&gt;&amp;quot;Hi from the UI thread!&amp;quot;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Discussion&lt;/h4&gt;

&lt;p&gt;Both of these are pretty straightforward. Both of them will marshal our &lt;code class="csharp"&gt;MessageBox.Show&lt;/code&gt; back to the UI thread, so we don't have to worry about it.&lt;/p&gt;

&lt;p&gt;The &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; code does suffer from more "ceremony", since it has to deal with events. It's also a bit awkward in that you have to wire up your events first and then explicitly start the work going. The equivalent &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; is simpler - not a &lt;i&gt;lot&lt;/i&gt; simpler, but simpler nonetheless.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1158385741537792764/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html#comment-form' title='7 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' title='Task.Run vs BackgroundWorker, Round 1: The Basic Pattern'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1123119858238306608</id><published>2013-05-02T12:30:00.000-04:00</published><updated>2013-05-03T17:58:21.927-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Task.Run vs BackgroundWorker'/><title type='text'>Task.Run vs BackgroundWorker: Intro</title><content type='html'>&lt;p&gt;This is an introductory post for a new series that I'll be doing comparing &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; to &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; (in an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; style). I always recommend &lt;code class="csharp"&gt;Task.Run&lt;/code&gt;, and I have already written &lt;a href="http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html"&gt;a long post describing why&lt;/a&gt;, but I still see some developers resisting the New Way of Doing Things (TM). So this will be a short series where I'll compare the code side-by-side in different scenarios and show why I think &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; is superior in every way.&lt;/p&gt;

&lt;p&gt;To be clear, this series will show supported scenarios that both &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; and &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; Task.Run&lt;/code&gt; were designed for. I won't be picking on any scenarios that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; doesn't support. Except today. :)&lt;/p&gt;

&lt;h4&gt;Scenarios Not Supported by BackgroundWorker&lt;/h4&gt;

&lt;p&gt;One of the design problems of &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; is that the semantics get surprising when nesting; if you create (and start) a &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; from within another &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt;, the events on the inner &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; are raised on the thread pool. I explain why this happens in my &lt;a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx"&gt;SynchronizationContext article&lt;/a&gt;, complete with pretty pictures (don't laugh! I worked hard on those!).&lt;/p&gt;

&lt;p&gt;A similar problem is that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; doesn't work well with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code. An &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; DoWork&lt;/code&gt; handler will exit early, causing the &lt;code class="csharp"&gt;RunWorkerCompleted&lt;/code&gt; to fire before the method is completed.&lt;/p&gt;

&lt;p&gt;Also, it's difficult to call &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code from within a (properly synchronous) &lt;code class="csharp"&gt;DoWork&lt;/code&gt;; you either have to call &lt;code class="csharp"&gt;Task.Wait&lt;/code&gt; or establish your own &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-friendly synchronization context (e.g., &lt;a href="https://nitoasyncex.codeplex.com/wikipage?title=AsyncContext"&gt;AsyncContext&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; does support these scenarios: nesting, &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; delegates, and calling &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code are all perfectly natural.&lt;/p&gt;

&lt;p&gt;This is really just because the design of &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; is dated. It was fine for its time, but it was obviously skipped over when Microsoft was updating the BCL with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; support. That should tell us something.&lt;/p&gt;

&lt;p&gt;As we go through this series, I hope to convince other developers that &lt;code class="csharp"&gt;BackgroundWorker&lt;/code&gt; really is dead at this point and should not be used for new development. In every situation, a solution based on &lt;code class="csharp"&gt;Task.Run&lt;/code&gt; will produce cleaner code.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1123119858238306608/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-intro.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1123119858238306608'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1123119858238306608'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-intro.html' title='Task.Run vs BackgroundWorker: Intro'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6311204348916241166</id><published>2013-04-25T12:30:00.000-04:00</published><updated>2013-05-06T19:54:23.233-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><title type='text'>Recursive (Re-entrant) Locks</title><content type='html'>&lt;p&gt;Time for another potentially-controversial subject: recursive locks, also known as re-entrant locks or recursive mutexes.&lt;/p&gt;

&lt;h4&gt;Recursive Locks: Definition&lt;/h4&gt;

&lt;p&gt;A "recursive" lock is one that, when locked, will first determine &lt;i&gt;whether it is already held&lt;/i&gt;, and if it is, it will simply allow the code to acquire it recursively. Recursive locks usually use a reference counting mechanism so that they can be acquired several times and then released several times, but the lock is only actually &lt;i&gt;unlocked&lt;/i&gt; when it has been released as many times as it has been acquired.&lt;/p&gt;

&lt;p&gt;Traditionally, recursive locks have been the default on Microsoft platforms. The &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;lock&lt;/span&gt;&lt;/code&gt; statement, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Monitor&lt;/span&gt;&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Mutex&lt;/span&gt;&lt;/code&gt;, and &lt;code class="csharp"&gt;&lt;span class="type"&gt;ReaderWriterLock&lt;/span&gt;&lt;/code&gt; are all recursive. However, newer types are starting to change this; &lt;code class="csharp"&gt;&lt;span class="type"&gt;SpinLock&lt;/span&gt;&lt;/code&gt; is not recursive, and &lt;code class="csharp"&gt;&lt;span class="type"&gt;ReaderWriterLockSlim&lt;/span&gt;&lt;/code&gt; is not recursive by default (it does provide recursion as an option).&lt;/p&gt;

&lt;p&gt;If you Google around for opinions, you'll find some programmers are adamantly in favor of recursive locks, and other programmers are just as adamantly opposed to them. It's actually kind of funny to see how heated the arguments can get, since this is a topic that's hard to explain to "outsiders"; it's hard for a non-techie spouse to understand how strongly we geeks feel about this topic.&lt;/p&gt;

&lt;!--

&lt;h4&gt;Background&lt;/h4&gt;

&lt;p&gt;Regardless of where you stand on the recursion issue, I hope everyone can agree on the following fundamental principles of locks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The purpose of a "lock" is to read or update a well-defined set of shared data in a way that appears atomic to the rest of the program. There are other coordination primitives that serve other purposes (e.g., "signals" for notifying the rest of the program of an event), but the core purpose of a &lt;i&gt;lock&lt;/i&gt; is to protect mutable shared state.&lt;/li&gt;
&lt;li&gt;You should hold a lock only as long as you need it.&lt;/li&gt;
&lt;li&gt;Don't block while holding a lock.&lt;/li&gt;
&lt;li&gt;Never, ever, &lt;i&gt;ever&lt;/i&gt; call end-user code while holding a lock. This includes delegate invocation, raising events, dynamic invocation, virtual method invocation, etc. Since end-user code is outside your control, it can cause a deadlock by waiting for some other thread that is attempting to take the lock you're holding.&lt;/li&gt;
&lt;li&gt;If you ever have a situation where you need to hold more than one lock at a time, those locks should &lt;i&gt;always&lt;/i&gt; be acquired in the same order everywhere in your program. In other words, define and document your lock hierarchy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most programmers with a few years of multithreading experience tend to gravitate towards these principles. You can find many similar lists via Google.&lt;/p&gt;

--&gt;

&lt;h4&gt;Joining the Controversy&lt;/h4&gt;

&lt;p&gt;Recursive locks are bad.&lt;/p&gt;

&lt;p&gt;Oh yeah, I &lt;i&gt;did&lt;/i&gt; just go there. I'll lay out my reasoning in the remainder of this blog post. But before I go further, I should point out where I'm coming from. A lot of the pro-recursive crowd claims that the anti-recursionists are just "theorists" and that recursive locks make for easier coding. I am an anti-recursionist who is definitely not a theorist: I've written many, many real-world multithreaded programs and have used recursive locks and have &lt;i&gt;experienced their shortcomings&lt;/i&gt;. So my anti-recursive stand is the direct result of being in the trenches, not an ivory tower.&lt;/p&gt;

&lt;p&gt;There are several reasons why I think recursive locks are a poor choice in general, and only one situation where I think they could possibly be helpful (I've never been in that situation, but they could &lt;i&gt;theoretically&lt;/i&gt; be useful there).&lt;/p&gt;

&lt;h4&gt;Inconsistent Invariants&lt;/h4&gt;

&lt;p&gt;The number one argument against recursive locks is one of &lt;i&gt;inconsistency&lt;/i&gt;. The entire purpose of a "lock" is to protect shared mutable state so that reads and writes appear atomic. In other words, the state is &lt;i&gt;consistent&lt;/i&gt; whenever the lock is unlocked; while the lock is locked (held) by a section of code, the state may be &lt;i&gt;inconsistent&lt;/i&gt;. Another way of saying this is that while the lock is held, it's possible that invariants will not hold; acquiring a lock temporarily suspends all contractural invariants until the time the lock is released.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; A()
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    ...
  }
}

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; B()
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    ...
    A();
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consider a simple example that is the most common argument for recursive locks: you have an existing method &lt;code class="csharp"&gt;A&lt;/code&gt; that takes a lock, performs some operations, and then releases the lock. Now you need to write a method &lt;code class="csharp"&gt;B&lt;/code&gt; that takes the lock, performs some operations (including the operations done by &lt;code class="csharp"&gt;A&lt;/code&gt;), and then releases the lock. It's natural from a code-reuse perspective to simply have &lt;code class="csharp"&gt;B&lt;/code&gt; call &lt;code class="csharp"&gt;A&lt;/code&gt;. Recursive locks permit this kind of code reuse.&lt;/p&gt;

&lt;p&gt;And that's a mistake.&lt;/p&gt;

&lt;p&gt;When you are reading code, lock acquisition and lock release are semantic barriers. It's natural to assume that invariants hold when the lock is released, but that assumption fails when you are dealing with recursive locks. If &lt;code class="csharp"&gt;B&lt;/code&gt; calls &lt;code class="csharp"&gt;A&lt;/code&gt;, then &lt;code class="csharp"&gt;A&lt;/code&gt; can no longer be sure if the invariants hold when it acquires its lock, and it also cannot be sure if the invariants hold when it releases its lock.&lt;/p&gt;

&lt;p&gt;The non-recursive approach would first refactor &lt;code class="csharp"&gt;A&lt;/code&gt; into a new private method &lt;code class="csharp"&gt;C&lt;/code&gt; that is clearly documented (often with a naming convention as well) to assume that it is called while under lock. Then both &lt;code class="csharp"&gt;A&lt;/code&gt; and &lt;code class="csharp"&gt;B&lt;/code&gt; call &lt;code class="csharp"&gt;C&lt;/code&gt; while holding the lock.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; A()
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    C_UnderLock();
  }
}

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; B()
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    ...
    C_UnderLock();
    ...
  }
}

&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; C_UnderLock()
{
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Escalating Dependencies&lt;/h4&gt;

&lt;p&gt;The argument I'm making sounds silly for really simple examples, but it starts to hit home as soon as your program gets more complex. This is because you can no longer fully understand a method in isolation; you have to also consider all the other methods using the same lock that may call it or that it calls (usually all the other methods in the class). In order to ensure the semantics are correct, you now have to hold an entire class in your head instead of a single method.&lt;/p&gt;

&lt;p&gt;You end up with "escalating dependencies": every method now depends on the &lt;i&gt;internals&lt;/i&gt; of other methods. Each time another method is added, the inter-dependencies have to be considered for &lt;i&gt;all&lt;/i&gt; existing methods. The overall complexity grows quadratically.&lt;/p&gt;

&lt;p&gt;Consider the &lt;code class="csharp"&gt;A&lt;/code&gt; and &lt;code class="csharp"&gt;B&lt;/code&gt; scenario again, this time from a maintenance perspective. If someone is working on &lt;code class="csharp"&gt;A&lt;/code&gt;, they have to be very careful which invariants they violate while holding their lock, because &lt;code class="csharp"&gt;B&lt;/code&gt; is depending on some subset of those invariants. If someone is working on &lt;code class="csharp"&gt;B&lt;/code&gt;, they have to be very careful which invariants they depend on, because any number of methods may be calling that method with only a subset of the invariants holding.&lt;/p&gt;

&lt;p&gt;We end up with a problem: each method is no longer responsible for its own correctness. Methods with recursive locks are depending on the internals of other methods. If you use non-recursive locks (by refactoring into &lt;code class="csharp"&gt;C&lt;/code&gt;), then you still have some method interdependence but it's much reduced. Any method that calls &lt;code class="csharp"&gt;C&lt;/code&gt; does of course have to depend on its internals (which should be thoroughly documented), but that's all. When you use recursive locking it's a free-for-all: every method depends on the internals of all other methods that have access to the lock. When method &lt;code class="csharp"&gt;C&lt;/code&gt; needs to change, it's a simple matter to verify that all its callers are still correct. With recursive locking, whenever any method changes, you have to verify all methods it calls (and all the methods they call, etc), as well as all methods that call it (and all the methods that call them, etc).&lt;/p&gt;

&lt;p&gt;So, by using a recursive lock, a developer may save himself from writing a method and about 7 lines of code. But in return, he inherits a maintenance problem. Totally not a good tradeoff.&lt;/p&gt;

&lt;h4&gt;Schizophrenic Code&lt;/h4&gt;

&lt;p&gt;Let's try to make our recursive-locking methods all good citizens; that is, any of them can be called while their lock is not held &lt;i&gt;or&lt;/i&gt; while it is held. This quickly leads to schizophrenic code in all but the most trivial examples.&lt;/p&gt;

&lt;p&gt;Schizophrenic code is code that &lt;i&gt;does not know&lt;/i&gt; (until runtime) how it's executing. It adjusts its behavior at runtime depending on whether or not it is already synchronized. The problem is that it's extremely difficult to verify that both behaviors are simultaneously correct. This kind of code is the fastest path to mental instability.&lt;/p&gt;

&lt;p&gt;One lesson I have learned through years of multithreaded debugging is this: you should know (at compile-time) where each line of your code is going to execute. This is similar to the old &lt;code class="csharp"&gt;&lt;span class="type"&gt;ISynchronizeInvoke&lt;/span&gt;.InvokeRequired&lt;/code&gt; / &lt;code class="csharp"&gt;&lt;span class="type"&gt;Dispatcher&lt;/span&gt;.CheckAccess&lt;/code&gt; / &lt;code class="csharp"&gt;&lt;span class="type"&gt;CoreDispatcher&lt;/span&gt;.HasThreadAccess&lt;/code&gt; properties: &lt;b&gt;these should never be used!&lt;/b&gt; Your code should &lt;i&gt;already know&lt;/i&gt; where it's executing. It's far easier to maintain and debug code that is not schizophrenic.&lt;/p&gt;

&lt;h4&gt;Uncertainty about Lock State&lt;/h4&gt;

&lt;p&gt;Another problem with recursive locks is that a method can never be sure whether its lock is unlocked. It may already be locked before the method acquires it, and it may still be locked after the method releases it.&lt;/p&gt;

&lt;p&gt;One example that is brought up to support recursive locks is a synchronized collection, where the &lt;code class="csharp"&gt;AddRange&lt;/code&gt; method can call the &lt;code class="csharp"&gt;Add&lt;/code&gt; method directly. To understand the problem with &lt;i&gt;uncertainty&lt;/i&gt;, consider the methods under maintenance; we're going to add support for &lt;code class="csharp"&gt;&lt;span class="type"&gt;INotifyCollectionChanged&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Add(T item)
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    ... &lt;span class="comment"&gt;// add the item&lt;/span&gt;
  }
}

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; AddRange(&lt;span class="type"&gt;IEnumerable&lt;/span&gt;&amp;lt;T&amp;gt; items)
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; item &lt;span class="keyword"&gt;in&lt;/span&gt; items)
      Add(item);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems straightforward: &lt;code class="csharp"&gt;AddRange&lt;/code&gt; will still acquire the lock and add its items (by calling &lt;code class="csharp"&gt;Add&lt;/code&gt;). &lt;code class="csharp"&gt;Add&lt;/code&gt; will acquire the lock, add its item, release the lock, and then invoke &lt;code class="csharp"&gt;CollectionChanged&lt;/code&gt;. There's now a deadlock issue where there wasn't one before - a kind of deadlock that will not be found by unit testing (or most any other kind of testing). Can you see it?&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Add(T item)
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    ... &lt;span class="comment"&gt;// add the item&lt;/span&gt;
  }
  RaiseNotifyCollectionChanged(item);
}

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; AddRange(&lt;span class="type"&gt;IEnumerable&lt;/span&gt;&amp;lt;T&amp;gt; items)
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; item &lt;span class="keyword"&gt;in&lt;/span&gt; items)
      Add(item);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem? Raising events like &lt;code class="csharp"&gt;CollectionChanged&lt;/code&gt; is one way to invoke end-user code, and this should never, ever be done while holding a lock. In this case, the &lt;code class="csharp"&gt;Add&lt;/code&gt; method releases its lock before raising the event, but it &lt;i&gt;can't be sure&lt;/i&gt; that the lock is actually &lt;i&gt;unlocked&lt;/i&gt;. It may be, or it may be not (grrr schizophrenic locks!). And in fact, &lt;code class="csharp"&gt;AddRange&lt;/code&gt; is in the same boat; it has no idea if it's being called by &lt;i&gt;another&lt;/i&gt; method while the lock is held (grrr escalating dependencies!).&lt;/p&gt;

&lt;p&gt;So here's a question for you: is the maintainer of the code going to catch this?&lt;/p&gt;

&lt;p&gt;The fix is clear: refactor to make your locks non-recursive, but that's only an option &lt;b&gt;if&lt;/b&gt; the problem is even noticed in the first place. The big question is whether anyone would catch that this change introduced a deadlock condition. Maintenance is often done "a long way away" from the original code (in terms of time and people), &lt;i&gt;and&lt;/i&gt; you've got the escalating dependencies issue; both of these together greatly reduce the odds that recursively-locking code will remain correct over time.&lt;/p&gt;

&lt;h4&gt;Recursive Other-Things&lt;/h4&gt;

&lt;p&gt;Another problem with recursive locks is that it doesn't translate well to other coordination primitives that are conceptually related. Take a semaphore for example; semaphores can be used in various ways, but for our example we'll just use them as locks that permit a &lt;i&gt;certain number&lt;/i&gt; of acquisitions instead of just one.&lt;/p&gt;

&lt;p&gt;The problem with our "multi-lock" is that semaphores don't natively support recursion. If one method acquires the semaphore and calls another method that also acquires the semaphore, then &lt;i&gt;two&lt;/i&gt; locks are held rather than one. This may work for a while (while the number of acquisitions on the call stack is short) and then deadlock unexpectedly. Should a "multi-lock" support recursion?&lt;/p&gt;

&lt;p&gt;How about recursive reader-writer locks? If there's a limit to the number of simultaneous reader locks, should a recursive reader lock count as multiple reader locks or a single reference-counted reader lock? If a reader lock is acquired and then a writer lock, should it be permitted or should it throw an exception?&lt;/p&gt;

&lt;p&gt;Once you start looking at other types of coordination primitives, the semantics of "recursion" become a lot less clear.&lt;/p&gt;

&lt;h4&gt;A Fun Case for Condition Variables&lt;/h4&gt;

&lt;p&gt;Condition variables are not directly exposed in the .NET BCL, unfortunately, so many readers of this blog will not be familiar with the term. Essentially, a condition variable is a coordination primitive that enables a method to first acquire a lock, do some processing, then wait for a &lt;i&gt;condition&lt;/i&gt; (releasing the lock while waiting, and re-acquiring it when the waiting is done), do some more processing, and then release the lock.&lt;/p&gt;

&lt;p&gt;The .NET &lt;code class="csharp"&gt;&lt;span class="type"&gt;Monitor&lt;/span&gt;&lt;/code&gt; class is essentially a lock with a single condition variable, and Wikipedia has a &lt;a href="http://en.wikipedia.org/wiki/Monitor_(synchronization)"&gt;good description of monitors and condition variables&lt;/a&gt;. Condition variables are also useful on their own; the classic example is a &lt;a href="http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-2-more.html"&gt;bounded producer/consumer queue, which is built from one lock and two condition variables&lt;/a&gt;. But for the purposes of this discussion, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Monitor&lt;/span&gt;&lt;/code&gt; will do fine.&lt;/p&gt;

&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;Monitor&lt;/span&gt;&lt;/code&gt; is a recursive lock, so let's consider the scenario where &lt;code class="csharp"&gt;B&lt;/code&gt; calls &lt;code class="csharp"&gt;A&lt;/code&gt;. This time, &lt;code class="csharp"&gt;A&lt;/code&gt; is going to wait for a condition (e.g., &lt;code class="csharp"&gt;&lt;span class="type"&gt;Monitor&lt;/span&gt;.Wait&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; A()
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    ...
    Monitor.Wait(_mutex);
    ...
  }
}

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; B()
{
  &lt;span class="keyword"&gt;lock&lt;/span&gt; (_mutex)
  {
    ...
    A();
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, what happens in that wait? The monitor (condition variable) unlocks the lock during the wait. It can't just &lt;i&gt;release&lt;/i&gt; the lock because it's a recursive lock, so it has to unlock it &lt;i&gt;all the way&lt;/i&gt;. Then, after the wait completes, it re-acquires the lock that many times. This is all documented behavior, and it's the only reasonable way a recursive lock can work with a condition variable.&lt;/p&gt;

&lt;p&gt;But what about &lt;code class="csharp"&gt;B&lt;/code&gt;? As far as it's concerned, it acquires the lock, calls &lt;code class="csharp"&gt;A&lt;/code&gt;, and then releases the lock. It doesn't even know that when it called &lt;code class="csharp"&gt;A&lt;/code&gt;, its lock was temporarily released and then re-acquired. &lt;i&gt;Any other code&lt;/i&gt; could have run in that time! So that means that &lt;code class="csharp"&gt;B&lt;/code&gt; has to ensure that all invariants are ready for the lock to be released before it calls &lt;code class="csharp"&gt;A&lt;/code&gt;, and when &lt;code class="csharp"&gt;A&lt;/code&gt; returns, it has to re-check &lt;i&gt;everything&lt;/i&gt; since any of the state could have changed (not just the state affected by &lt;code class="csharp"&gt;A&lt;/code&gt;). Even worse, &lt;code class="csharp"&gt;B&lt;/code&gt; has to know the internals of &lt;code class="csharp"&gt;A&lt;/code&gt; just to &lt;i&gt;find out&lt;/i&gt; that it has to do this!&lt;/p&gt;

&lt;p&gt;Blech.&lt;/p&gt;

&lt;p&gt;Yeah, that pretty much sums up how I feel about recursive locks: blech.&lt;/p&gt;

&lt;h4&gt;The One Use Case&lt;/h4&gt;

&lt;p&gt;I have to admit that recursive locks get a bad reputation because people use them where they &lt;i&gt;shouldn't be used&lt;/i&gt;. All the examples so far have been cases where the code is easier to &lt;i&gt;write&lt;/i&gt; using recursive locks, but there are &lt;i&gt;verification&lt;/i&gt; and &lt;i&gt;maintenance&lt;/i&gt; issues that can overwhelm you later. However, there is one use case where recursive locks are OK. In fact, it's the reason recursive locks were invented in the first place.&lt;/p&gt;

&lt;p&gt;Recursive locks are useful in recursive algorithms.&lt;/p&gt;

&lt;p&gt;Allow me to rephrase that: recursive locks are useful in recursive algorithms with parallel characteristics where fine-grained locking of a shared data structure is required for performance reasons.&lt;/p&gt;

&lt;p&gt;In other words: hardly ever.&lt;/p&gt;

&lt;p&gt;In my own experience, I've never needed them.&lt;/p&gt;

&lt;h4&gt;But Recursive Locks Just Make Sense!&lt;/h4&gt;

&lt;p&gt;Let's step back and reconsider the definition of recursive locks. At the beginning of this blog post, I stated:&lt;/p&gt;

&lt;blockquote&gt;A "recursive" lock is one that, when locked, will first determine &lt;i&gt;whether it is already held&lt;/i&gt;&lt;/blockquote&gt;

&lt;p&gt;Already held... &lt;i&gt;by what?&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;I purposely left out part of that definition, because I wanted to cover this section last.&lt;/p&gt;

&lt;p&gt;One way of thinking is that a lock can be held by a &lt;i&gt;thread&lt;/i&gt;. Developers use locks to exclude other &lt;i&gt;threads&lt;/i&gt;. A &lt;i&gt;thread&lt;/i&gt; uses locks to keep other &lt;i&gt;threads&lt;/i&gt; from interfering with the shared state. All the &lt;i&gt;threads&lt;/i&gt; see the shared state mutate atomically.&lt;/p&gt;

&lt;p&gt;With this perspective, a recursive lock is perfectly natural; if a &lt;i&gt;thread&lt;/i&gt; already has access, then &lt;i&gt;of course&lt;/i&gt; it should be able to re-acquire the same lock!&lt;/p&gt;

&lt;p&gt;This perspective comes from the many definitions of "lock" that are all written from an operating system perspective. To the OS, that's exactly what the lock does: it blocks other &lt;i&gt;threads&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;But an experienced multithreaded programmer does not have this perspective at all. We embrace an alternate way of thinking: that a lock can be held by a &lt;i&gt;block of code&lt;/i&gt; (at a given level of abstraction). Developers use locks to exclude other &lt;i&gt;blocks of code&lt;/i&gt;. One &lt;i&gt;block of code&lt;/i&gt; uses locks to keep other &lt;i&gt;blocks of code&lt;/i&gt; from interfering with the shared state. Etc.&lt;/p&gt;

&lt;p&gt;With this perspective, a recursive lock makes no sense at all. The fact that you're considering a recursive lock indicates that you're using the same lock at two different levels of abstraction in your code (or what &lt;i&gt;should be&lt;/i&gt; two different levels of abstraction).&lt;/p&gt;

&lt;p&gt;Like many developers, I was taught the classical (thread) definition in school, and my first multithreaded programs used coarse-grained locking to coordinate threads. After a few years of minimizing the code under lock and restricting lock visibility, I just sort of gravitated to the alternate (block of code) definition.&lt;/p&gt;

&lt;p&gt;In fact, you &lt;i&gt;have&lt;/i&gt; to embrace the alternate definition in order to consider new types of locks such as &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx"&gt;asynchronous locks&lt;/a&gt;, which &lt;i&gt;cannot&lt;/i&gt; be tied to a thread.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Well, I originally meant this all to be a lead-in to asynchronous recursive locks, but I ended up too long-winded. I'll have to talk about asynchronous recursive locks another time. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6311204348916241166/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6311204348916241166'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6311204348916241166'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html' title='Recursive (Re-entrant) Locks'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1455694138350933293</id><published>2013-04-18T12:30:00.000-04:00</published><updated>2013-04-18T12:30:01.345-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>UI Guidelines for Async</title><content type='html'>&lt;p&gt;So far, a lot of attention has been paid on &lt;i&gt;how&lt;/i&gt; to use &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;, but there is little guidance on &lt;i&gt;when&lt;/i&gt; to push operations off the UI thread.&lt;/p&gt;

&lt;p&gt;I've collected a couple of quotes here that are applicable. They're not much, but they're all we have in the form of official guidance.&lt;/p&gt;

&lt;h4&gt;The 50ms Rule&lt;/h4&gt;

&lt;p&gt;Operations should be made asynchronous if they "could take longer than 50 milliseconds to execute" (Jason Olson, &lt;a href="http://blogs.msdn.com/b/windowsappdev/archive/2012/03/20/keeping-apps-fast-and-fluid-with-asynchrony-in-the-windows-runtime.aspx"&gt;Keeping apps fast and fluid with asynchrony in the Windows Runtime&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is the rule that Microsoft followed with the WinRT APIs; anything taking less than 50ms is considered "fast" and close enough to "immediate" that they do not require an asynchronous API. I also recommend this rule be applied to any synchronous blocks of code; if they are likely to take more than 50ms, push them onto the thread pool via &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Run&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;The Hundred Continuations Per Second Rule&lt;/h4&gt;

&lt;p&gt;It's usually a good idea to use &lt;code class="csharp"&gt;ConfigureAwait(&lt;span class="keyword"&gt;false&lt;/span&gt;)&lt;/code&gt; in your library code, and only run continuations on the UI thread if they actually need a UI context. But how many continuations can the UI thread really be expected to handle?&lt;/p&gt;

&lt;p&gt;At least on the WinRT platform, "the guidance is that just a hundred or so awaits resuming on the UI thread per second will be fine, but a thousand per second will be bad" (Lucian Wischik, &lt;a href="http://blogs.msdn.com/b/lucian/archive/2013/02/18/talk-the-new-async-design-patterns.aspx"&gt;Async Design Patterns&lt;/a&gt;). Naturally, this is assuming that the continuations do not block for any substantial period of time.&lt;/p&gt;

&lt;h4&gt;Caveats&lt;/h4&gt;

&lt;p&gt;It's difficult to lay down any kind of firm guidance. It's easy to have a situation where the 4-core 8-GB developer's machine handles a thousand continuations on the UI thread easily, but that old XP laptop your client has isn't going to hack it. With WinRT, the hardware is at least somewhat constrained, so the above rules have a stronger meaning on that platform. In the real world, you'll have to test with realistic clients and derive your own numbers.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1455694138350933293/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1455694138350933293'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1455694138350933293'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html' title='UI Guidelines for Async'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7278365983033813064</id><published>2013-04-11T12:30:00.000-04:00</published><updated>2013-04-11T12:30:00.634-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>CancellationToken Behavior with AsyncEx Coordination Primitives</title><content type='html'>&lt;p&gt;Today I'm going to talk a little bit about some behavior that I standardized on for the asynchronous coordination primitives in my AsyncEx library. I'll first review what's currently available in the BCL and then describe my approach.&lt;/p&gt;

&lt;h4&gt;Waiting on SemaphoreSlim&lt;/h4&gt;

&lt;p&gt;The only built-in .NET asynchronous-compatible coordination primitive (as of .NET 4.5) is &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.semaphoreslim.aspx"&gt;SemaphoreSlim&lt;/a&gt;. This type can be used by both synchronous and asynchronous code, which is a very interesting aspect. What I'm looking at today is all the different ways to &lt;i&gt;wait&lt;/i&gt; for a semaphore to be available (and I'm just going to consider asynchronous code).&lt;/p&gt;

&lt;p&gt;First, there's the obvious &lt;a href="http://msdn.microsoft.com/en-us/library/hh462805.aspx"&gt;Task WaitAsync()&lt;/a&gt; method for an &lt;b&gt;unconditional wait&lt;/b&gt;. This is the most commonly-used type of wait: the code knows it needs to acquire the semaphore and it will wait however long it takes until the semaphore is available.&lt;/p&gt;

&lt;p&gt;Next, there's a couple of overloads for timeouts. &lt;a href="http://msdn.microsoft.com/en-us/library/hh462740.aspx"&gt;Task&amp;lt;bool&amp;gt; WaitAsync(int)&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/hh462723.aspx"&gt;Task&amp;lt;bool&amp;gt; WaitAsync(TimeSpan)&lt;/a&gt; both do an (asynchronous) &lt;b&gt;timed wait&lt;/b&gt;, which will return &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;false&lt;/span&gt;&lt;/code&gt; if the wait ran out of time before it was granted access.&lt;/p&gt;

&lt;p&gt;There's an overload taking a cancellation token, &lt;a href="http://msdn.microsoft.com/en-us/library/hh462773.aspx"&gt;Task WaitAsync(CancellationToken)&lt;/a&gt;. This performs a &lt;b&gt;cancelable wait&lt;/b&gt;, where some event can interrupt the wait if it determines that the code doesn't need that semaphore anymore. If a wait is canceled, the wait task is canceled (instead of returning &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;false&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can also have cancelable timed waits, via the &lt;a href="http://msdn.microsoft.com/en-us/library/hh462846.aspx"&gt;Task&amp;lt;bool&amp;gt; WaitAsync(int, CancellationToken)&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/hh462788.aspx"&gt;Task&amp;lt;bool&amp;gt; WaitAsync(TimeSpan, CancellationToken)&lt;/a&gt;. These overloads will cancel their tasks if the cancellation token fires, and return &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;false&lt;/span&gt;&lt;/code&gt; if they hit the timeout.&lt;/p&gt;

&lt;p&gt;Finally, there's one other important kind of wait you can do: an &lt;b&gt;atomic wait&lt;/b&gt;, where you immediately (synchronously) acquire the semaphore if it is available. Asynchronous code can use &lt;a href="http://msdn.microsoft.com/en-us/library/dd289488.aspx"&gt;bool Wait(int)&lt;/a&gt; and pass zero to perform an atomic wait. This is logically similar to &lt;code class="csharp"&gt;&lt;span class="type"&gt;Monitor&lt;/span&gt;.TryEnter&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Waiting on AsyncSemaphore&lt;/h4&gt;

&lt;p&gt;I'll skip right to the punchline. There are only two wait overloads in the &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncSemaphore&lt;/span&gt;&lt;/code&gt; class: &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt; WaitAsync()&lt;/code&gt; and &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt; WaitAsync(&lt;span class="type"&gt;CancellationToken&lt;/span&gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;b&gt;unconditional wait&lt;/b&gt; uses the same obvious method: &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt; WaitAsync()&lt;/code&gt; (which is shorthand for &lt;code class="csharp"&gt;WaitAsync(&lt;span class="type"&gt;CancellationToken&lt;/span&gt;.None)&lt;/code&gt;). The other overload &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt; WaitAsync(&lt;span class="type"&gt;CancellationToken&lt;/span&gt;)&lt;/code&gt; handles everything else.&lt;/p&gt;

&lt;p&gt;To do a &lt;b&gt;timed wait&lt;/b&gt;, create a cancellation token to cancel the wait (e.g., using &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationTokenSource&lt;/span&gt;.CancellationTokenSource(&lt;span class="type"&gt;TimeSpan&lt;/span&gt;)&lt;/code&gt; or &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationTokenHelpers&lt;/span&gt;.Timeout(&lt;span class="type"&gt;TimeSpan&lt;/span&gt;)&lt;/code&gt;) and pass it to &lt;code class="csharp"&gt;WaitAsync&lt;/code&gt;. When the timer expires, the wait is canceled.&lt;/p&gt;

&lt;p&gt;Of course, a &lt;b&gt;cancelable wait&lt;/b&gt; can just pass in its &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationToken&lt;/span&gt;&lt;/code&gt;. Cancelable timed waits can use chained cancellation tokens (via &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationTokenSource&lt;/span&gt;.CreateLinkedTokenSource&lt;/code&gt; or &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationTokenHelpers&lt;/span&gt;.Normalize&lt;/code&gt;), and they can follow up with &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationToken&lt;/span&gt;.IsCancellationRequested&lt;/code&gt; if it's important to distinguish &lt;i&gt;why&lt;/i&gt; the wait was canceled.&lt;/p&gt;

&lt;p&gt;That just leaves the &lt;b&gt;atomic wait&lt;/b&gt;, and this is where the "interesting design" comes in. If you pass in a token that is &lt;i&gt;already canceled&lt;/i&gt;, then &lt;code class="csharp"&gt;WaitAsync&lt;/code&gt; will always return synchronously: a successfully completed task if the semaphore is available, otherwise a canceled task. This gives you the "TryLock" kind of behavior, but this also means that if you have a regular cancellation token, it will not result in a canceled task if the semaphore is available.&lt;/p&gt;

&lt;p&gt;This special behavior is supported for every kind of "wait" in AsyncEx where atomic waits make sense and that modifies state: &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncSemaphore&lt;/span&gt;.WaitAsync&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncLock&lt;/span&gt;.LockAsync&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncAutoResetEvent&lt;/span&gt;.WaitAsync&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncMonitor&lt;/span&gt;.EnterAsync&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncReaderWriterLock&lt;/span&gt;.WriterLockAsync&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncReaderWriterLock&lt;/span&gt;.ReaderLockAsync&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncReaderWriterLock&lt;/span&gt;.UpgradeableReaderLockAsync&lt;/code&gt;, and &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncReaderWriterLock&lt;/span&gt;.&lt;span class="type"&gt;UpgradeableReaderKey&lt;/span&gt;.UpgradeAsync&lt;/code&gt;.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7278365983033813064/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7278365983033813064'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7278365983033813064'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html' title='CancellationToken Behavior with AsyncEx Coordination Primitives'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878</id><published>2013-04-04T12:30:00.000-04:00</published><updated>2013-04-04T12:30:01.473-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Implicit Async Context ("AsyncLocal")</title><content type='html'>&lt;p&gt;Occasionally, someone will ask about support for some kind of implicit "context" that will flow with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code. The most common use case is for logging, where you can maintain a stack of logical operations so every time you log you capture (and log) the state of that stack (e.g., &lt;a href="http://msdn.microsoft.com/en-us/library/1fxyt46s.aspx"&gt;CorrelationManager&lt;/a&gt; for &lt;code class="csharp"&gt;&lt;span class="type"&gt;TraceSource&lt;/span&gt;&lt;/code&gt;, or the Nested Diagnostic Context for log4net). &lt;a href="http://msmvps.com/blogs/jon_skeet/archive/2010/11/08/the-importance-of-context-and-a-question-of-explicitness.aspx"&gt;Jon Skeet has a great blog entry on this kind of implicit "context" with several possible uses&lt;/a&gt;.&lt;/p&gt;

&lt;!--
&lt;p&gt;If you're on ASP.NET, you can use &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpContext&lt;/span&gt;.Current.Items&lt;/code&gt;, which does flow by default with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code. (Of course, this is not a recommended design, for code separation and testability reasons). You could also &lt;a href="http://connectedproperties.codeplex.com/"&gt;attach properties&lt;/a&gt; to other &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt; instances, as long as you kept the &lt;a href="http://blog.stephencleary.com/2009/09/another-synchronizationcontext-gotcha.html"&gt;limitations of such an approach&lt;/a&gt; in mind. But neither &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpContext&lt;/span&gt;&lt;/code&gt; nor &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt; will get you a solution that works everywhere, even in 
the thread pool context.&lt;/p&gt;
--&gt;

&lt;!--

&lt;h4&gt;Solution A: (Ab)Use Classes&lt;/h4&gt;

&lt;p&gt;As I kept bringing up in my &lt;a href="http://blog.stephencleary.com/search/label/async%20oop"&gt;async OOP series&lt;/a&gt;, &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code is &lt;i&gt;functional&lt;/i&gt; in nature rather than object-oriented. The natural representation of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods is purely as (static) methods without actual class instances.&lt;/p&gt;

&lt;p&gt;If your &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code is "pure" (just methods), then you can (ab)use classes to create a container for those methods, and the instance properties of that class become the implicit "context" for those methods. Something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;AsyncMethodsWithContext&lt;/span&gt;
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; implicitContextValue;

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; EntryLevelAsync()
    {
        implicitContextValue = 13;
        &lt;span class="keyword"&gt;await&lt;/span&gt; PrivateAsync();
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; PrivateAsync()
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(implicitContextValue);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is good from an overhead perspective: it's very efficient. However, it's not so good from a design perspective (it forces all your &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods that share the same context into the same class, whether or not they should be logically grouped). Also, there is only one copy of the implicit state. In a fork/join scenario (e.g., &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll&lt;/code&gt;), it's often useful to have the implicit state "cloned" to each sub-operation so they each get their own local copy of the state. Here's an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;AsyncMethodsWithContext&lt;/span&gt;
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;ConcurrentStack&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; stack = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ConcurrentStack&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; EntryLevelAsync()
    {
        stack.Push(13);
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(PrivateAsync(5), PrivateAsync(7));
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; PrivateAsync(&lt;span class="keyword"&gt;int&lt;/span&gt; localValue)
    {
        stack.Push(localValue);
        &lt;span class="comment"&gt;// What&amp;#39;s the value of the stack here?&lt;/span&gt;
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(10);
        &lt;span class="comment"&gt;// What&amp;#39;s the value of the stack here?&lt;/span&gt;
        &lt;span class="keyword"&gt;int&lt;/span&gt; local;
        stack.TryPop(&lt;span class="keyword"&gt;out&lt;/span&gt; local);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this simple example, we want to keep an implicit stack. &lt;code class="csharp"&gt;EntryLevelAsync&lt;/code&gt; pushes 13, and each &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt; pushes a 5 or 7 (and pops it when done). This kind of approach works fine for linear &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code (where you &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; one operation at a time), but this example is using &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, let's consider the values on the stack. When &lt;code class="csharp"&gt;EntryLevelAsync&lt;/code&gt; calls the first &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt;, it pushes a 5, and the stack is &lt;code&gt;{5, 13}&lt;/code&gt;. The first &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt; yields at its &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; and &lt;code class="csharp"&gt;EntryLevelAsync&lt;/code&gt; calls the second &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt;. It pushes a 7, and the stack is &lt;code&gt;{7, 5, 13}&lt;/code&gt;. At this point our stack is diverging from the actual call stack: the second &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt; is not expecting the 5 in the stack.&lt;/p&gt;

&lt;p&gt;It gets more complex as the methods resume. Either &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt; may complete first, so if the first &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt; completes first, it will pop 7 off the stack (remember, it pushed 5), and the second &lt;code class="csharp"&gt;PrivateAsync&lt;/code&gt; will pop 5 off the stack (when it pushed 7).&lt;/p&gt;

&lt;p&gt;This stack confusion is due to the implicit state being shared instead of copied in a fork/join scenario. You can of course do the copying manually (creating a new instance of &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncMethodsWithContext&lt;/span&gt;&lt;/code&gt;), but that detracts from the &lt;i&gt;implicitness&lt;/i&gt; of our "implicit context."&lt;/p&gt;

&lt;p&gt;So, this solution works well for a limited set of situations: if grouping your methods like this works for your design and if your implicit state can be shared without issues, then I'd recommend just using instance fields.&lt;/p&gt;

--&gt;

&lt;h4&gt;Logical CallContext&lt;/h4&gt;

&lt;p&gt;There is a solution for this problem: the "logical call context", which you can access by &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.remoting.messaging.callcontext.logicalgetdata.aspx"&gt;CallContext.LogicalGetData&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.remoting.messaging.callcontext.logicalsetdata.aspx"&gt;CallContext.LogicalSetData&lt;/a&gt;. The regular call context (&lt;code class="csharp"&gt;&lt;span class="type"&gt;CallContext&lt;/span&gt;.GetData&lt;/code&gt; and &lt;code class="csharp"&gt;&lt;span class="type"&gt;CallContext&lt;/span&gt;.SetData&lt;/code&gt;) acts just like thread-local storage, which of course doesn't work for &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Here's how logical call context works with asynchronous code.&lt;/p&gt;

&lt;p&gt;Logical call context data flows with &lt;code class="csharp"&gt;&lt;span class="type"&gt;ExecutionContext&lt;/span&gt;&lt;/code&gt;. This means that it's not affected by &lt;code class="csharp"&gt;ConfigureAwait(continueOnCapturedContext: &lt;span class="keyword"&gt;false&lt;/span&gt;)&lt;/code&gt;; you can't "opt-out" of the logical call context. So the logical call context at the beginning of an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method will &lt;i&gt;always&lt;/i&gt; flow through to its continuations.&lt;/p&gt;

&lt;p&gt;When an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method starts, it notifies its logical call context to activate copy-on-write behavior. This means the current logical call context is not actually changed, but it is marked so that if your code does call &lt;code class="csharp"&gt;&lt;span class="type"&gt;CallContext&lt;/span&gt;.LogicalSetData&lt;/code&gt;, the logical call context data is copied into a new current logical call context before it is changed. &lt;b&gt;Note: the copy-on-write behavior of logical call contexts is only available on .NET 4.5.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This "copying" of the logical call context data is a &lt;i&gt;shallow&lt;/i&gt; copy. You can think of the logical call context data as an &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDictionary&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;, &lt;span class="keyword"&gt;object&lt;/span&gt;&amp;gt;&lt;/code&gt; of name/value pairs. When it's copied, it creates a new dictionary and copies all the name/value pairs into the new dictionary. Both dictionaries then refer to all the same actual object instances; there's no "deep cloning" of any of your data being done.&lt;/p&gt;

&lt;p&gt;Because the references are shared, it's important not to mutate any values retrieved from the logical call context. If you need to change a logical call context value, update the actual value using &lt;code class="csharp"&gt;&lt;span class="type"&gt;CallContext&lt;/span&gt;.LogicalSetData&lt;/code&gt;. &lt;b&gt;You should only use immutable types as logical call context data values.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Also note that the design is heavily optimized for the common case: when there is no logical call context data at all. When you start adding "implicit context", you're going to start adding overhead. Probably not too much, though, since everything is shallow-copied at worst.&lt;/p&gt;

&lt;p&gt;As a final note, remember that you can end up sharing data two different ways: .NET before 4.5 did not have the copy-on-write behavior, and the copies are shallow. For &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code, any sharing of data like this will get you in trouble as soon as you start doing fork/join (e.g., &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll&lt;/code&gt;). So follow the two rules: &lt;b&gt;only .NET 4.5&lt;/b&gt; and &lt;b&gt;immutable data&lt;/b&gt;!&lt;/p&gt;

&lt;h4&gt;An Example&lt;/h4&gt;

&lt;p&gt;Let's take a simple example. We want to keep an implicit stack of logical operations, and when we call our "log" method we want to output the stack as part of that log.&lt;/p&gt;

&lt;p&gt;First, let's define a strongly-typed accessor for the logical call context data we'll be using. Remember, we're only storing immutable data, so we'll use the new &lt;a href="https://nuget.org/packages/Microsoft.Bcl.Immutable"&gt;immutable collections&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;partial&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyStack&lt;/span&gt;
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; name = &lt;span class="type"&gt;Guid&lt;/span&gt;.NewGuid().ToString(&lt;span class="string"&gt;&amp;quot;N&amp;quot;&lt;/span&gt;);

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;ImmutableStack&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt; CurrentContext
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;var&lt;/span&gt; ret = &lt;span class="type"&gt;CallContext&lt;/span&gt;.LogicalGetData(name) &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="type"&gt;ImmutableStack&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;;
            &lt;span class="keyword"&gt;return&lt;/span&gt; ret ?? &lt;span class="type"&gt;ImmutableStack&lt;/span&gt;.Create&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;();
        }

        &lt;span class="keyword"&gt;set&lt;/span&gt;
        {
            &lt;span class="type"&gt;CallContext&lt;/span&gt;.LogicalSetData(name, &lt;span class="keyword"&gt;value&lt;/span&gt;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so good. Now we have a strongly-typed property we can use to get (or update) the current stack. Next we'll start defining our public API. We want the ability to "push" a string onto the stack, and get back a disposable that will pop that string back off the stack when disposed. Simple enough:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;partial&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyStack&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;IDisposable&lt;/span&gt; Push([&lt;span class="type"&gt;CallerMemberName&lt;/span&gt;] &lt;span class="keyword"&gt;string&lt;/span&gt; context = "")
    {
        CurrentContext = CurrentContext.Push(context);
        &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;PopWhenDisposed&lt;/span&gt;();
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Pop()
    {
        CurrentContext = CurrentContext.Pop();
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;PopWhenDisposed&lt;/span&gt; : &lt;span class="type"&gt;IDisposable&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; disposed;

        &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (disposed)
                &lt;span class="keyword"&gt;return&lt;/span&gt;;
            Pop();
            disposed = &lt;span class="keyword"&gt;true&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final part of our public API is a method that returns the current stack. I'll just return it as a string:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;partial&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyStack&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; CurrentStack
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt;.Join(&lt;span class="string"&gt;&amp;quot; &amp;quot;&lt;/span&gt;, CurrentContext.Reverse());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let's turn our attention to the code that will be using &lt;code class="csharp"&gt;&lt;span class="type"&gt;MyStack&lt;/span&gt;&lt;/code&gt;. First, our "log" method:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;partial&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;Program&lt;/span&gt;
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Log(&lt;span class="keyword"&gt;string&lt;/span&gt; message)
    {
        &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(&lt;span class="type"&gt;MyStack&lt;/span&gt;.CurrentStack + &lt;span class="string"&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + message);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, that was pretty easy.&lt;/p&gt;

&lt;p&gt;Our test code is going to be a bit more complex. First, I'm going to push a "Main" value onto the stack that will last for the entire program. Then, I'll start two separate (concurrent) pieces of work called "1" and "2". Each of those are going to log when they start and finish, and they'll each do some more work called "A" and "B" (sequentially). So we should end up with some interleaving of this output from "1":&lt;/p&gt;

&lt;pre&gt;Main 1: &amp;lt;SomeWork&amp;gt;
Main 1 A: &amp;lt;MoreWork&amp;gt;
Main 1 A: &amp;lt;/MoreWork&amp;gt;
Main 1 B: &amp;lt;MoreWork&amp;gt;
Main 1 B: &amp;lt;/MoreWork&amp;gt;
Main 1: &amp;lt;/SomeWork&amp;gt;
&lt;/pre&gt;

&lt;p&gt;with this output from "2":&lt;/p&gt;

&lt;pre&gt;Main 2: &amp;lt;SomeWork&amp;gt;
Main 2 A: &amp;lt;MoreWork&amp;gt;
Main 2 A: &amp;lt;/MoreWork&amp;gt;
Main 2 B: &amp;lt;MoreWork&amp;gt;
Main 2 B: &amp;lt;/MoreWork&amp;gt;
Main 2: &amp;lt;/SomeWork&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Remember, "1" and "2" are concurrent, so there's no one right answer for the output. As long as all the messages above are present and in the correct (relative) order, it's acceptable.&lt;/p&gt;

&lt;p&gt;The code, without further ado:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;partial&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; Program
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="keyword"&gt;using&lt;/span&gt; (&lt;span class="type"&gt;MyStack&lt;/span&gt;.Push(&lt;span class="string"&gt;&amp;quot;Main&amp;quot;&lt;/span&gt;))
        {
            &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(SomeWork(&lt;span class="string"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;), SomeWork(&lt;span class="string"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)).Wait();
        }

        &lt;span class="type"&gt;Console&lt;/span&gt;.ReadKey();
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; SomeWork(&lt;span class="keyword"&gt;string&lt;/span&gt; stackName)
    {
        &lt;span class="keyword"&gt;using&lt;/span&gt; (&lt;span class="type"&gt;MyStack&lt;/span&gt;.Push(stackName))
        {
            Log(&lt;span class="string"&gt;&amp;quot;&amp;lt;SomeWork&amp;gt;&amp;quot;&lt;/span&gt;);
            &lt;span class="keyword"&gt;await&lt;/span&gt; MoreWork(&lt;span class="string"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;);
            &lt;span class="keyword"&gt;await&lt;/span&gt; MoreWork(&lt;span class="string"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;);
            Log(&lt;span class="string"&gt;&amp;quot;&amp;lt;/SomeWork&amp;gt;&amp;quot;&lt;/span&gt;);
        }
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; MoreWork(&lt;span class="keyword"&gt;string&lt;/span&gt; stackName)
    {
        &lt;span class="keyword"&gt;using&lt;/span&gt; (&lt;span class="type"&gt;MyStack&lt;/span&gt;.Push(stackName))
        {
            Log(&lt;span class="string"&gt;&amp;quot;&amp;lt;MoreWork&amp;gt;&amp;quot;&lt;/span&gt;);
            &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(10);
            Log(&lt;span class="string"&gt;&amp;quot;&amp;lt;/MoreWork&amp;gt;&amp;quot;&lt;/span&gt;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One sample run from my machine is:&lt;/p&gt;

&lt;pre&gt;Main 1: &amp;lt;SomeWork&amp;gt;
Main 1 A: &amp;lt;MoreWork&amp;gt;
Main 2: &amp;lt;SomeWork&amp;gt;
Main 2 A: &amp;lt;MoreWork&amp;gt;
Main 2 A: &amp;lt;/MoreWork&amp;gt;
Main 1 A: &amp;lt;/MoreWork&amp;gt;
Main 1 B: &amp;lt;MoreWork&amp;gt;
Main 2 B: &amp;lt;MoreWork&amp;gt;
Main 2 B: &amp;lt;/MoreWork&amp;gt;
Main 2: &amp;lt;/SomeWork&amp;gt;
Main 1 B: &amp;lt;/MoreWork&amp;gt;
Main 1: &amp;lt;/SomeWork&amp;gt;
&lt;/pre&gt;

&lt;p&gt;If you sort out the "1" and the "2" messages, you'll see that each set is in the correct order and that the stacks are nicely laid out as expected.&lt;/p&gt;

&lt;p&gt;Similar code will compile targeting .NET 4.0 (with &lt;a href="http://nuget.org/packages/Microsoft.Bcl.Async/"&gt;Microsoft.Bcl.Async&lt;/a&gt;); however, it will &lt;i&gt;not&lt;/i&gt; work correctly (unless it happens to run on .NET 4.5) because the logical call context is not copied at the right time. In that situation, different parts of different &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods will end up sharing the same stack (and overwriting each other's stack).&lt;/p&gt;

&lt;p&gt;As a final reminder: this will work &lt;b&gt;only on .NET 4.5&lt;/b&gt; and it only works because we &lt;b&gt;stored immutable data&lt;/b&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1633479932453323878/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html#comment-form' title='15 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' title='Implicit Async Context (&quot;AsyncLocal&quot;)'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>15</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2972835943038696033</id><published>2013-03-28T12:30:00.000-04:00</published><updated>2013-03-28T12:30:00.863-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>Task.CurrentId in Async Methods</title><content type='html'>&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId&lt;/code&gt; returns the identifier of the &lt;i&gt;currently executing&lt;/i&gt; &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt;, or &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;null&lt;/span&gt;&lt;/code&gt; if there is no currently executing &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt;. So, what is &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId&lt;/code&gt; in an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method?&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;Program&lt;/span&gt;
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; beforeYield, afterYield, mainAsync;

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; task = MainAsync();
        task.Wait();
        mainAsync = task.Id.ToString();

        &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(beforeYield + &lt;span class="string"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + afterYield + &lt;span class="string"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + mainAsync);
        &lt;span class="type"&gt;Console&lt;/span&gt;.ReadKey();
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; MainAsync()
    {
        beforeYield =&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.HasValue ? &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.ToString() : &lt;span class="string"&gt;&amp;quot;null&amp;quot;&lt;/span&gt;;
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Yield();
        afterYield =&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.HasValue ? &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.ToString() : &lt;span class="string"&gt;&amp;quot;null&amp;quot;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this program is &lt;code&gt;null,null,1&lt;/code&gt;. A lot of developers are surprised at this; after all, when you return a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; from an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method, doesn't that &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; represent the complete method? Yes, it does &lt;i&gt;conceptually&lt;/i&gt; represent the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method, but it does not &lt;i&gt;literally execute&lt;/i&gt; the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In fact, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; instances returned from &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods are not &lt;i&gt;executed&lt;/i&gt; at all; under the hood, they are &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskCompletionSource&lt;/span&gt;&amp;lt;TResult&amp;gt;&lt;/code&gt;-style (event-based) tasks, not delegate (code-based) tasks. (For more information on the differences, see my blog post on &lt;a href="http://blog.stephencleary.com/2012/02/creating-tasks.html"&gt;creating tasks&lt;/a&gt; or Stephen Toub's blog post on &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx"&gt;the nature of TaskCompletionSource&lt;/a&gt;). So &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId&lt;/code&gt; returns &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;null&lt;/span&gt;&lt;/code&gt; because there is no task actually &lt;i&gt;executing&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;As a reminder, code-based tasks are usually started with &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Run&lt;/code&gt; to toss work onto the thread pool, or &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskFactory&lt;/span&gt;.StartNew&lt;/code&gt; to specify a scheduler where the task will run. But you can still end up surprised when you schedule an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method. Consider the modified program:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;Program&lt;/span&gt;
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; beforeYield, afterYield, taskRun;

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; task = &lt;span class="highlight"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Run(() =&amp;gt;&lt;/span&gt; MainAsync()&lt;span class="highlight"&gt;)&lt;/span&gt;;
        task.Wait();
        taskRun = task.Id.ToString();

        &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(beforeYield + &lt;span class="string"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + afterYield + &lt;span class="string"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + taskRun);
        &lt;span class="type"&gt;Console&lt;/span&gt;.ReadKey();
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; MainAsync()
    {
        beforeYield = &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.HasValue ? &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.ToString() : &lt;span class="string"&gt;&amp;quot;null&amp;quot;&lt;/span&gt;;
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Yield();
        afterYield = &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.HasValue ? &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.ToString() : &lt;span class="string"&gt;&amp;quot;null&amp;quot;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this program is &lt;code&gt;1,null,2&lt;/code&gt;. That pesky &lt;code&gt;null&lt;/code&gt; is still there! The &lt;code&gt;null&lt;/code&gt; comes into play because the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method is first executed as an actual task on the thread pool. However, after its &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;, it resumes as a regular delegate on the thread pool (not an actual task).&lt;/p&gt;

&lt;p&gt;Note that this is an implementation detail. I'm not aware of any documentation stating that the first part of a thread pool &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method runs as a task and the rest of it never will. It's likely that this behavior is just the result of the easiest and most efficient implementation.&lt;/p&gt;

&lt;p&gt;I do make a different choice for my &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncContext"&gt;AsyncContext&lt;/a&gt; type. I started off with a design similar to the thread pool task scheduler (executing bare &lt;code class="csharp"&gt;&lt;span class="type"&gt;Action&lt;/span&gt;&lt;/code&gt; delegates), but I found the code simplified quite nicely if I treated &lt;i&gt;everything&lt;/i&gt; as a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt;. So this program will always use tasks:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;
&lt;span class="keyword"&gt;using&lt;/span&gt; Nito.AsyncEx;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;Program&lt;/span&gt;
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; beforeYield, afterYield;

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="type"&gt;AsyncContext&lt;/span&gt;.Run(() =&amp;gt; MainAsync());

        &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(beforeYield + &lt;span class="string"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + afterYield);
        &lt;span class="type"&gt;Console&lt;/span&gt;.ReadKey();
    }

    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; MainAsync()
    {
        beforeYield = &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.HasValue ? &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.ToString() : &lt;span class="string"&gt;&amp;quot;null&amp;quot;&lt;/span&gt;;
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Yield();
        afterYield = &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.HasValue ? &lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId.ToString() : &lt;span class="string"&gt;&amp;quot;null&amp;quot;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output of this program is &lt;code&gt;1,2&lt;/code&gt;, because &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncContext&lt;/span&gt;&lt;/code&gt; wraps &lt;i&gt;everything&lt;/i&gt; into a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; before executing it, including &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method continuations.&lt;/p&gt;

&lt;p&gt;Note that this is also an implementation detail. Please do not depend on this behavior.&lt;/p&gt;

&lt;p&gt;In conclusion, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId&lt;/code&gt; can be a bit tricky, especially within &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods. Personally, I find it best to only use &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId&lt;/code&gt; in &lt;i&gt;parallel&lt;/i&gt; code and not in &lt;i&gt;asynchronous&lt;/i&gt; code.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2972835943038696033/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/03/taskcurrentid-in-async-methods.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2972835943038696033'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2972835943038696033'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/taskcurrentid-in-async-methods.html' title='Task.CurrentId in Async Methods'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4788387714061041210</id><published>2013-03-21T12:30:00.000-04:00</published><updated>2014-05-16T16:07:36.969-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>A Few Words on Task.Id (and TaskScheduler.Id)</title><content type='html'>&lt;p&gt;There are some &lt;code class="csharp"&gt;Id&lt;/code&gt; properties in TPL types (notably &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Id&lt;/code&gt; and &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskScheduler&lt;/span&gt;.Id&lt;/code&gt;); these "identifiers" follow the same pattern. I believe their primary use case is for &lt;a href="http://msdn.microsoft.com/en-us/library/ee517329.aspx"&gt;ETW events&lt;/a&gt;, though they may have other uses.&lt;/p&gt;

&lt;h4&gt;Generated On-Demand&lt;/h4&gt;

&lt;p&gt;Identifiers are generated on-demand. So if you don't read the properties and don't have ETW tracing on, then your tasks (and task schedulers) won't actually &lt;i&gt;have&lt;/i&gt; identifiers. They generate them right when they need them.&lt;/p&gt;

&lt;h4&gt;Invalid/Unassigned Value&lt;/h4&gt;

&lt;p&gt;The value &lt;code class="csharp"&gt;0&lt;/code&gt; is never used. This is technically undocumented, but it's pretty safe to assume. The ETW events all produce plain &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;/code&gt;s for task and task scheduler identifiers, and &lt;a href="http://msdn.microsoft.com/en-us/library/ee517329.aspx"&gt;some ETW events&lt;/a&gt; need a value for "none" (e.g., &lt;code class="csharp"&gt;OriginatingTaskId&lt;/code&gt; needs to support a value meaning "there was no originating task").&lt;/p&gt;

&lt;p&gt;This means you'll never actually see a zero value as an identifier. A task (or task scheduler) can internally have a zero identifier (meaning "unassigned") but will generate an actual identifier if that value is ever read.&lt;/p&gt;

&lt;p&gt;Incidentally, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId&lt;/code&gt; is a bit different than &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskScheduler&lt;/span&gt;.Current.Id&lt;/code&gt;. &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.CurrentId&lt;/code&gt; will return &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;null&lt;/span&gt;&lt;/code&gt; when there is no task currently executing. &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskScheduler&lt;/span&gt;.Current.Id&lt;/code&gt; will return the (real) identifier of the "current" &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskScheduler&lt;/span&gt;&lt;/code&gt;; if there's no task executing, the "current" scheduler is the default (thread pool) scheduler.&lt;/p&gt;

&lt;p&gt;But either way, you won't see a zero value.&lt;/p&gt;

&lt;h4&gt;Per-Type&lt;/h4&gt;

&lt;p&gt;Identifiers have meaning only for a particular type. For example, the first assigned &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; identifier is one, and the first assigned &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskScheduler&lt;/span&gt;&lt;/code&gt; identifier is one. So the identifier "one" has no meaning by itself; the identifiers are not allocated from a shared pool or anything like that.&lt;/p&gt;

&lt;h4&gt;Not Quite Unique&lt;/h4&gt;

&lt;p&gt;The "identifiers" are not unique. They're pretty close (they'll repeat very rarely), but they're not actually &lt;i&gt;unique&lt;/i&gt;.&lt;/p&gt;

&lt;blockquote&gt;The MSDN documentation states the identifiers are unique. The MSDN documentation is wrong.&lt;/blockquote&gt;

&lt;p&gt;This can be easily proven with a simple test (also on &lt;a href="https://gist.github.com/StephenCleary/5108676"&gt;gist&lt;/a&gt;) where we first create one &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; and then repeatedly create additional &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; instances until we find one where the identifiers are the same (though the task instances are different):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;

&lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;Program&lt;/span&gt;
{
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main(&lt;span class="keyword"&gt;string&lt;/span&gt;[] args)
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; task = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;TaskCompletionSource&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;object&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;null&lt;/span&gt;).Task;
        &lt;span class="keyword"&gt;var&lt;/span&gt; taskId = task.Id;

        &lt;span class="type"&gt;Task&lt;/span&gt; other;
        &lt;span class="keyword"&gt;do&lt;/span&gt;
        {
            other = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;TaskCompletionSource&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;object&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;null&lt;/span&gt;).Task;
            &lt;span class="keyword"&gt;if&lt;/span&gt; (other.Id == 0)
                &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(&lt;span class="string"&gt;&amp;quot;Saw Id of 0!&amp;quot;&lt;/span&gt;);
        } &lt;span class="keyword"&gt;while&lt;/span&gt; (other.Id != task.Id);

       &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(&lt;span class="string"&gt;&amp;quot;Id collision!&amp;quot;&lt;/span&gt;);
       &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(&lt;span class="string"&gt;&amp;quot;  task.Id == other.Id: &amp;quot;&lt;/span&gt; + (task.Id == other.Id));
       &lt;span class="type"&gt;Console&lt;/span&gt;.WriteLine(&lt;span class="string"&gt;&amp;quot;  task == other: &amp;quot;&lt;/span&gt; + (task == other));
       &lt;span class="type"&gt;Console&lt;/span&gt;.ReadKey();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This program takes about 3 minutes on my machine to observe an identifier collision. The output is:&lt;/p&gt;

&lt;pre&gt;Id collision!
  task.Id == other.Id: True
  task == other: False&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;Saw Id of 0!&lt;/code&gt; is &lt;i&gt;not&lt;/i&gt; in the output; the task identifiers worked their way through all possible &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;/code&gt; values but skipped over zero.&lt;/p&gt;

&lt;p&gt;Probably no one will write a program that has four billion &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; instances simultaneously, but it's not uncommon for a few &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; instances to be long-lived and most of them short-lived. So if you have a long-lived &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; instance in a long-running program, be aware that its identifier may be reused while the long-lived task is still alive. Note that this &lt;i&gt;is&lt;/i&gt; the common case! The example program above illustrates this: it only has one long-lived task; all the other tasks are eligible for garbage collection shortly after they're created.&lt;/p&gt;

&lt;p&gt;So, be aware that identifiers are not strictly unique. Some developers have attempted to "attach" data to a task using a concurrent dictionary with task identifiers as the key. But this will not work for most long-running programs.&lt;/p&gt;

&lt;blockquote&gt;When developers try to attach data to tasks, they're usually trying to figure out some kind of "ambient context" for asynchronous operations. We'll cover the correct way to do that in a few weeks. If you really, seriously do need to attach data to tasks and you can't derive from &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; for whatever reason, you can use &lt;a href="http://connectedproperties.codeplex.com/"&gt;Connected Properties&lt;/a&gt;.&lt;/blockquote&gt;

&lt;h4&gt;Identifiers in Nito.AsyncEx&lt;/h4&gt;

&lt;p&gt;I have a number of types in my &lt;a href="http://nitoasyncex.codeplex.com"&gt;AsyncEx library&lt;/a&gt; where I need a similar sort of semi-unique identifier (primarily for logging purposes). So I follow the same pattern as the built-in framework identifiers: generated on demand, zero as an invalid/unassigned value, and allocated by-type. I use a &lt;a href="http://nitoasyncex.codeplex.com/SourceControl/changeset/view/f74db7311ea1#Source/Nito.AsyncEx (NET4, Win8, SL4, WP75)/Internal/IdManager.cs"&gt;helper class called IdManager&lt;/a&gt; (not exposed in the public API) to satisfy this pattern.&lt;/p&gt;

&lt;p&gt;You're welcome to use this type in your own code if you need to. The design may appear a little unusual to .NET developers because it uses a &lt;i&gt;generic tag type&lt;/i&gt;. Conceptually, &lt;code class="csharp"&gt;&lt;span class="type"&gt;IdManager&lt;/span&gt;&amp;lt;Tag&amp;gt;&lt;/code&gt; actually defines a &lt;i&gt;set&lt;/i&gt; of types, each with their own "namespace" for identifiers. The generic parameter &lt;code class="csharp"&gt;Tag&lt;/code&gt; is completely unused by &lt;code class="csharp"&gt;&lt;span class="type"&gt;IdManager&lt;/span&gt;&amp;lt;Tag&amp;gt;&lt;/code&gt;; its only purpose is to partition the static members.&lt;/p&gt;

&lt;p&gt;This is a common code pattern in C++, a language which has much greater support for generic programming than C#. This kind of pattern is not at all common in the .NET world, and in fact StyleCop will complain about this class. But it makes perfect sense if you think about generic arguments as actual &lt;i&gt;arguments&lt;/i&gt; that you pass to the &lt;i&gt;type&lt;/i&gt;.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4788387714061041210/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/03/a-few-words-on-taskid-and.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4788387714061041210'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4788387714061041210'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/a-few-words-on-taskid-and.html' title='A Few Words on Task.Id (and TaskScheduler.Id)'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8807581262990647475</id><published>2013-03-14T12:30:00.000-04:00</published><updated>2013-03-14T12:30:00.609-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><title type='text'>Async OOP 7: Design</title><content type='html'>&lt;p&gt;I'd like to conclude this &lt;a href="http://blog.stephencleary.com/search/label/async%20oop"&gt;little Async/OOP series&lt;/a&gt; by circling back around to &lt;i&gt;design&lt;/i&gt;. Most of the Async/OOP series has been looking at best practices in real-world situations; today's post is a bit more theoretical and definitely more controversial. :)&lt;/p&gt;

&lt;p&gt;I started out the &lt;a href="http://blog.stephencleary.com/2013/01/async-oop-0-introduction.html"&gt;introductory post&lt;/a&gt; talking about functional programming. All of the problems that we've had to solve in the Async/OOP series are due to asynchronous code being naturally functional, and how to get that to play well with OOP design (and in a mostly-OOP language). Today I'm going to step away from OOP and think about how &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; C# code would look if we embraced the functional nature of asynchronous code.&lt;/p&gt;

&lt;p&gt;Personally, I have written some asynchronous components that are functional rather than OOP. This does not make sense all the time, though. I find that if the &lt;i&gt;process&lt;/i&gt; dominates your design, then a functional implementation is well-suited. OTOH, if your &lt;i&gt;state&lt;/i&gt; dominates your design, then OOP would be a much better choice. Also, most programmers are well-versed in OOP but are leery of (or not familiar with) functional programming.&lt;/p&gt;

&lt;p&gt;Without further ado... Functional programming in C# is most naturally expressed in static methods of static classes. You could argue that static classes are just workarounds for the lack of freestanding functions, but I find them useful as containers. Since all your core methods will be static, they could in theory go in any static class. To keep the code organized, I find it helpful to group methods by &lt;i&gt;purpose&lt;/i&gt;. This is not the same as grouping them by &lt;i&gt;type&lt;/i&gt; (in an OOP design).&lt;/p&gt;

&lt;p&gt;You can pass state and data around in a functional program. So each functional method can take state as arguments and produce state as output. It's useful to have these state representations be immutable (and, strictly speaking, a pure functional program would &lt;i&gt;always&lt;/i&gt; use immutable types).&lt;/p&gt;

&lt;p&gt;If we allow in just a bit of OOP, we can get some interesting benefits. Instead of using a static class, define an interface with a concrete implementation. It's still functional programming, because every method in that implementation does not change any state in its instance; if it weren't for the interface, those methods could be static methods. This gives us a layer of abstraction for a section of our functional code; you can use this for mocking, etc. This is where the "grouping by purpose" really helps.&lt;/p&gt;

&lt;p&gt;That's all I have to say today: just some semi-random ramblings about functional design. Which I don't have much experience in, so take this with a hefty grain of salt! :)&lt;/p&gt;

&lt;p&gt;As a closing note, I'll point out that the functional nature of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods really helps them work well as extension methods. Many types can be made &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-friendly by nothing more than a few (functional) extension methods in a static class. If that's all you need to do, then that's all you &lt;i&gt;should&lt;/i&gt; do!&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8807581262990647475/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/03/async-oop-7-design.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8807581262990647475'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8807581262990647475'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/async-oop-7-design.html' title='Async OOP 7: Design'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-389438791210640740</id><published>2013-03-07T12:30:00.000-05:00</published><updated>2013-03-07T12:30:00.984-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><title type='text'>Async OOP 6: Disposal</title><content type='html'>&lt;p&gt;Instance disposal, like instance construction, poses an interesting problem when designing &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-ready types. The question that usually comes up is: how should I handle disposal if my type has asynchronous operations in progress? There are two common options, either (or both) of which may be appropriate for different situations.&lt;/p&gt;

&lt;h4&gt;Option 1: Dispose Means Cancel&lt;/h4&gt;

&lt;p&gt;Historically, disposing a resource on Windows while there are outstanding operations on that resource causes those operations to complete in a canceled state. Translating this pattern into the .NET &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; world means that each &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDisposable&lt;/span&gt;&lt;/code&gt; type should have a private &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationTokenSource&lt;/span&gt;&lt;/code&gt; that is canceled when &lt;code class="csharp"&gt;Dispose&lt;/code&gt; is called. Internally, every asynchronous operation would use that private &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationToken&lt;/span&gt;&lt;/code&gt; while also allowing the user to supply their own &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationToken&lt;/span&gt;&lt;/code&gt; (this is easy to do using &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=CancellationTokenHelpers"&gt;CancellationTokenHelpers.Normalize&lt;/a&gt; or &lt;a href="http://msdn.microsoft.com/en-us/library/dd642252.aspx"&gt;CancellationTokenSource.CreateLinkedTokenSource&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This approach has a synchronous &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDisposable&lt;/span&gt;.Dispose&lt;/code&gt; method that can return before the asynchronous operations complete. The asynchronous operations then encounter a race condition: if they were about to complete, then they may complete successfully, faulted, &lt;i&gt;or&lt;/i&gt; canceled. This race condition is almost always benign, so you usually don't have to worry about it.&lt;/p&gt;

&lt;p&gt;For some situations this works out just fine (e.g., &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpClient&lt;/span&gt;&lt;/code&gt; uses this approach). But some situations cannot accept the fact that &lt;code class="csharp"&gt;Dispose&lt;/code&gt; returns with operations still in flight; sometimes you &lt;i&gt;need&lt;/i&gt; to know when the resource is free, and tracking all the operations all the time would be too messy.&lt;/p&gt;

&lt;h4&gt;Option 2: Asynchronous Disposal (Completion)&lt;/h4&gt;

&lt;p&gt;You can use this approach when you need asynchronous disposal; "dispose" becomes an asynchronous operation. You can't use &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDisposable&lt;/span&gt;.Dispose&lt;/code&gt; for this, since &lt;code class="csharp"&gt;Dispose&lt;/code&gt; must be a synchronous method (OK, technically you could block in &lt;code class="csharp"&gt;Dispose&lt;/code&gt;, but that's a hack that will cause other problems). Once again, you can turn to Microsoft to see how they handled this situation. As usual, Stephen Toub has been there, done that, and designed the T-shirt.&lt;/p&gt;

&lt;blockquote&gt;Terminology note: I use the term "asynchronous disposal" for what should really be called "completion" (an asynchronous operation). "Asynchronous disposal" has &lt;i&gt;nothing&lt;/i&gt; to do with &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDisposable&lt;/span&gt;&lt;/code&gt;. However, I'm sticking with the "asynchronous disposal" term to reduce confusion. E.g., I can say "when the disposal completes" rather than "when the completion completes".&lt;/blockquote&gt;

&lt;p&gt;Consider &lt;a href="http://msdn.microsoft.com/en-us/library/hh194868.aspx"&gt;ConcurrentExclusiveSchedulerPair&lt;/a&gt;. This is a pair of &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; schedulers; it's responsible for queueing tasks to run. The scheduler pair instance itself supports asynchronous "disposal"; the semantics are that once "disposal" is requested, no new tasks are accepted by the scheduler pair. However, the already-queued tasks are not canceled; the "disposal" is considered complete once those already-queued tasks have been run.&lt;/p&gt;

&lt;p&gt;This permits a nice, clean, &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-friendly shutdown. The "asynchronous dispose" API for &lt;code class="csharp"&gt;&lt;span class="type"&gt;ConcurrentExclusiveSchedulerPair&lt;/span&gt;&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;ConcurrentExclusiveSchedulerPair&lt;/span&gt;
{
  &lt;span class="comment"&gt;// Informs the scheduler pair that it should not accept any more tasks.&lt;/span&gt;
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Complete();

  &lt;span class="comment"&gt;// Gets a Task that will complete when the scheduler has completed processing.&lt;/span&gt;
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; Completion { &lt;span class="keyword"&gt;get&lt;/span&gt;; }

  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This pattern is similar to the &lt;a href="http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html"&gt;asynchronous initialization pattern&lt;/a&gt; covered earlier in this series. With asynchronous initialization, the operation is started in the constructor and the &lt;code class="csharp"&gt;Initialization&lt;/code&gt; property is used to detect the completion of (and get the results of) the asynchronous initialization. With asynchronous disposal, the operation is started by invoking &lt;code class="csharp"&gt;Complete&lt;/code&gt; and the &lt;code class="csharp"&gt;Completion&lt;/code&gt; property is used to detect the completion of (and get the results of) the asynchronous disposal. In both cases, the tasks are properties on the instance because they pertain strongly to the instance; this is a better design than returning a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; from the &lt;code class="csharp"&gt;Complete&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The next example takes this pattern a bit further. Blocks in a &lt;a href="http://msdn.microsoft.com/en-us/library/hh228603.aspx"&gt;TPL Dataflow&lt;/a&gt; mesh support a clean, cooperative, asynchronous shutdown. Similar to the task scheduler example, dataflow blocks stop receiving input when completion is requested, and will (eventually) complete once all queued data has been processed. Dataflow blocks have an additional twist: as well as completing normally, they can complete in a faulted state. In this case, the dataflow block will stop receiving input and drop all its queued data; however, if there's a piece of data &lt;i&gt;currently&lt;/i&gt; being processed, it will gracefully wait for that processing to complete.&lt;/p&gt;

&lt;p&gt;Dataflow blocks have this kind of API:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;interface&lt;/span&gt; &lt;span class="type"&gt;IDataflowBlock&lt;/span&gt;
{
  &lt;span class="comment"&gt;// Signals to the IDataflowBlock that it should not accept any more messages.&lt;/span&gt;
  &lt;span class="keyword"&gt;void&lt;/span&gt; Complete();

  &lt;span class="comment"&gt;// Causes the IDataflowBlock to complete in a Faulted state.&lt;/span&gt;
  &lt;span class="keyword"&gt;void&lt;/span&gt; Fault(&lt;span class="type"&gt;Exception&lt;/span&gt; exception);

  &lt;span class="comment"&gt;// Gets a Task that represents the asynchronous operation and completion of the dataflow block.&lt;/span&gt;
  &lt;span class="type"&gt;Task&lt;/span&gt; Completion { &lt;span class="keyword"&gt;get&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;Aside: Interestingly, these are the &lt;i&gt;only&lt;/i&gt; members of &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDataflowBlock&lt;/span&gt;&lt;/code&gt;. I &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/tpldataflow/thread/102885d5-67c0-4287-b5d0-98b8bb5420d8"&gt;asked Stephen Toub&lt;/a&gt; about this, and he said that they did consider naming this interface something like &lt;code class="csharp"&gt;&lt;span class="type"&gt;IAsyncCompletable&lt;/span&gt;&lt;/code&gt;, but that the &lt;code class="csharp"&gt;Complete&lt;/code&gt; and &lt;code class="csharp"&gt;Fault&lt;/code&gt; members don't always make sense for all types.&lt;/blockquote&gt;

&lt;p&gt;So, if you need to support "asynchronous disposal", I recommend following this same pattern. Just like the &lt;a href="http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html"&gt;asynchronous initialization pattern&lt;/a&gt;, you may want to define your own marker interface if you have implementations that &lt;i&gt;might&lt;/i&gt; need asynchronous disposal.&lt;/p&gt;

&lt;p&gt;Types with asynchronous disposal should have at least the &lt;code class="csharp"&gt;Completion&lt;/code&gt; member, and most likely the &lt;code class="csharp"&gt;Complete&lt;/code&gt; member. Only add the &lt;code class="csharp"&gt;Fault&lt;/code&gt; member if it really makes sense for your type. As a final note, instance-level &lt;i&gt;cancellation&lt;/i&gt; is handled by passing a &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationToken&lt;/span&gt;&lt;/code&gt; into the constructor; there's no existing examples of a &lt;code class="csharp"&gt;Cancel&lt;/code&gt; member for asynchronous disposal. If you do need "external" cancellation like this, consider implementing &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDisposable&lt;/span&gt;&lt;/code&gt; with cancellation semantics (as described above) in addition to the standard asynchronous disposal API.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/389438791210640740/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/03/async-oop-6-disposal.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/389438791210640740'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/389438791210640740'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/async-oop-6-disposal.html' title='Async OOP 6: Disposal'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5273401515195471663</id><published>2013-03-02T21:57:00.002-05:00</published><updated>2013-03-02T21:57:58.401-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>GRDevDay Slides and Code</title><content type='html'>&lt;p&gt;I had a wonderful time at &lt;a href="http://grdevday.org"&gt;GRDevDay&lt;/a&gt; today! The &lt;a href="https://speakerdeck.com/stephencleary/intermediate-async"&gt;slides&lt;/a&gt; and &lt;a href="https://github.com/StephenCleary/Presentations-IntermediateAsync"&gt;sources&lt;/a&gt; for my "Intermediate Async" talk are now available.&lt;/p&gt;

&lt;p&gt;Special thanks go out to the few, brave souls who were willing to come to my talk. :) And of course the incredible GRDevDay team and the great sponsors who keep this conference so inexpensive!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5273401515195471663/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/03/grdevday-slides-and-code.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5273401515195471663'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5273401515195471663'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/grdevday-slides-and-code.html' title='GRDevDay Slides and Code'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5123248118800934093</id><published>2013-03-01T14:56:00.000-05:00</published><updated>2013-03-01T14:56:10.537-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>MSDN Article and GRDevDay</title><content type='html'>&lt;p&gt;We interrupt this blog series to bring you a special announcement.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/magazine/jj991977.aspx"&gt;My MSDN Magazine article "Best Practices in Asynchronous Programming" has been published&lt;/a&gt;. I'm not sure what's up with the MSDN Magazine table CSS; the layout looks rather poor IMO.&lt;/p&gt;

&lt;p&gt;Anyway, please check it out, &lt;i&gt;especially&lt;/i&gt; if you are attending my "Intermediate Async" talk &lt;a href="http://grdevday.org/"&gt;tomorrow at GRDevDay&lt;/a&gt;! Tomorrow we'll be delving to a level of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; that AFAIK has never been presented, starting with a gentle overview of TPL Dataflow and then diving pretty deep into the implementation of &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncLock&lt;/span&gt;&lt;/code&gt;, exploring some new concepts and pointing out pitfalls as we go.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5123248118800934093/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/03/msdn-article-and-grdevday.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5123248118800934093'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5123248118800934093'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/msdn-article-and-grdevday.html' title='MSDN Article and GRDevDay'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8214861811488829137</id><published>2013-02-28T12:30:00.000-05:00</published><updated>2013-02-28T12:30:02.703-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Async OOP 5: Events</title><content type='html'>&lt;p&gt;This post is going to deal with asynchronous event handlers. More specifically, how to design objects that will allow asynchronous event handlers.&lt;/p&gt;

&lt;p&gt;For the vast majority of events, asynchronous event handlers work normally and we don't have to do anything special. Consider the classic &lt;code class="csharp"&gt;&lt;span class="type"&gt;Button&lt;/span&gt;.Click&lt;/code&gt; as a reasonable example: the producer of the event (&lt;code class="csharp"&gt;&lt;span class="type"&gt;Button&lt;/span&gt;&lt;/code&gt;) just raises the event normally, which starts calling the event subscribers one at a time. If there is an asynchronous handler, it will return early and the producer continues with the next event subscriber. Eventually, the asynchronous handler continues, usually returning to its original context, so it won't overlap the execution of any other event subscriber. In effect, asynchronous event handlers (usually) just get divided into a few actual events that each move the handler along a bit. This works perfectly well for the vast majority of events.&lt;/p&gt;

&lt;p&gt;However, there's another class of events where this won't work. If the producer takes some special action when the event is completed, then the event is not really an &lt;i&gt;event&lt;/i&gt; - it's a &lt;i&gt;command&lt;/i&gt;. For example, the &lt;code class="csharp"&gt;&lt;span class="type"&gt;Application&lt;/span&gt;.Suspending&lt;/code&gt; event in Windows Store applications is an event that is raised when the application is being suspended; when the event handler returns, Windows assumes that the application is done preparing to be suspended. An asynchronous handler for this kind of "command-style event" isn't going to work well: the handler will return early and Windows will suspend the application, preventing the rest of the handler from executing.&lt;/p&gt;

&lt;p&gt;Other examples exist, too: ASP.NET has page lifecycle "events", and when those handlers return, the page moves to the next step in the lifecycle. Class designs that implement the visitor pattern can also suffer from early returns - and this is true whether the visitor type is implemented using actual events or virtual methods that act like events. Some types just use (misuse?) events as implementations, e.g., &lt;code class="csharp"&gt;&lt;span class="type"&gt;BackgroundWorker&lt;/span&gt;.DoWork&lt;/code&gt;. In each of these situations, asynchronous event handlers are not going to behave as expected.&lt;/p&gt;

&lt;p&gt;Normal events are &lt;i&gt;notifications&lt;/i&gt; - the producer doesn't care whether there's a handler and there's no special semantic meaning to the completion of the event handlers. Normal events work fine if they're broadcasted, with no result returning to the producer. Other events are &lt;i&gt;commands&lt;/i&gt; - the producer takes some action when the event handlers have completed. Command events with asynchronous handlers need to report some kind of completion or result back to the producer so that it knows the event handler has completed.&lt;/p&gt;

&lt;h4&gt;The WinRT Solution: Deferrals&lt;/h4&gt;

&lt;p&gt;With that background in mind, let's look at how WinRT solves this problem. For command-style events, the event producer must wait for a signal before considering the event handled. In the case of multiple asynchronous handlers, the producer must wait for &lt;i&gt;all&lt;/i&gt; handlers to signal before considering the event handled. Also, it would be nice to solve this problem in a way that adds no overhead for synchronous event handlers.&lt;/p&gt;

&lt;p&gt;WinRT introduces the concept of a "deferral" for command-style events. An asynchronous handler acquires a deferral before its first &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;, and notifies that deferral when the handler is complete. Synchronous handlers do not need to acquire deferrals. WinRT does not provide a "deferral manager" type for implementing our own command-style events, so we'll have to make our own.&lt;/p&gt;

&lt;p&gt;There's already a type in my &lt;a href="http://nitoasyncex.codeplex.com"&gt;AsyncEx&lt;/a&gt; library with much of the functionality we need: &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncCountdownEvent"&gt;AsyncCountdownEvent&lt;/a&gt;. We increment the count whenever a handler acquires a deferral and signal the count whenever a deferral is completed. To prevent race conditions, we also need to increment the count before invoking the handlers and signal the count when all the handlers have returned.&lt;/p&gt;

&lt;p&gt;There is one difference in the design of WinRT deferrals and my deferral manager: WinRT provides different interfaces and implementations for each different deferral scenario (i.e., &lt;code class="csharp"&gt;&lt;span class="type"&gt;SuspendingDeferral&lt;/span&gt;&lt;/code&gt; has no relation to &lt;code class="csharp"&gt;&lt;span class="type"&gt;BackgroundTaskDeferral&lt;/span&gt;&lt;/code&gt;). Since a "deferral" only has one possible action (&lt;code class="csharp"&gt;Complete&lt;/code&gt;), and since this action should &lt;i&gt;always&lt;/i&gt; be done regardless of exceptions, I chose to represent deferrals as &lt;code class="csharp"&gt;&lt;span class="type"&gt;IDisposable&lt;/span&gt;&lt;/code&gt;. This allows asynchronous event handlers to use a &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt;&lt;/code&gt; block in their implementation.&lt;/p&gt;

&lt;p&gt;Compared to the design, the code is actually quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;DeferralManager&lt;/span&gt;
{
  &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncCountdownEvent&lt;/span&gt; _count = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncCountdownEvent&lt;/span&gt;(1);

  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;IDisposable&lt;/span&gt; GetDeferral()
  {
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;Deferral&lt;/span&gt;(_count);
  }

  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; SignalAndWaitAsync()
  {
    _count.Signal();
    &lt;span class="keyword"&gt;return&lt;/span&gt; _count.WaitAsync();
  }

  &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;Deferral&lt;/span&gt; : &lt;span class="type"&gt;IDisposable&lt;/span&gt;
  {
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="type"&gt;AsyncCountdownEvent&lt;/span&gt; _count;

    &lt;span class="keyword"&gt;public&lt;/span&gt; Deferral(&lt;span class="type"&gt;AsyncCountdownEvent&lt;/span&gt; count)
    {
      _count = count;
      _count.AddCount();
    }

    &lt;span class="keyword"&gt;void&lt;/span&gt; &lt;span class="type"&gt;IDisposable&lt;/span&gt;.Dispose()
    {
      &lt;span class="keyword"&gt;if&lt;/span&gt; (_count == &lt;span class="keyword"&gt;null&lt;/span&gt;)
        &lt;span class="keyword"&gt;return&lt;/span&gt;;
      _count.Signal();
      _count = &lt;span class="keyword"&gt;null&lt;/span&gt;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;The &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=DeferralManager"&gt;DeferralManager in the AsyncEx library&lt;/a&gt; is almost identical to this code, except that it lazy-creates the asynchronous countdown event. This minimizes overhead if all the handlers are synchronous.&lt;/blockquote&gt;

&lt;p&gt;Once you have a &lt;code class="csharp"&gt;&lt;span class="type"&gt;DeferralManager&lt;/span&gt;&lt;/code&gt;, you can extend your "command-style" event arguments type as such:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyEventArgs&lt;/span&gt; : &lt;span class="type"&gt;EventArgs&lt;/span&gt;
{
  &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;DeferralManager&lt;/span&gt; deferrals = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DeferralManager&lt;/span&gt;();

  ... &lt;span class="comment"&gt;// Your own constructors and properties.&lt;/span&gt;

  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;IDisposable&lt;/span&gt; GetDeferral()
  {
    &lt;span class="keyword"&gt;return&lt;/span&gt; deferrals.GetDeferral();
  }

  &lt;span class="keyword"&gt;internal&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; WaitForDeferralsAsync()
  {
    &lt;span class="keyword"&gt;return&lt;/span&gt; deferrals.SignalAndWaitAsync();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, each time you raise the event, use code similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; RaiseMyEventAsync()
{
  &lt;span class="keyword"&gt;var&lt;/span&gt; handler = MyEvent;
  &lt;span class="keyword"&gt;if&lt;/span&gt; (handler == &lt;span class="keyword"&gt;null&lt;/span&gt;)
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.FromResult&amp;lt;&lt;span class="keyword"&gt;object&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;null&lt;/span&gt;); &lt;span class="comment"&gt;// or TaskConstants.Completed&lt;/span&gt;

  &lt;span class="keyword"&gt;var&lt;/span&gt; args = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;MyEventArgs&lt;/span&gt;(...);
  handler(args);
  &lt;span class="keyword"&gt;return&lt;/span&gt; args.WaitForDeferralsAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One final note: ensure that your event arguments type (&lt;code class="csharp"&gt;&lt;span class="type"&gt;MyEventArgs&lt;/span&gt;&lt;/code&gt;) supports concurrent access. If there are multiple asynchronous handlers, they all will share a reference to the same event arguments instance. Ideally, all the properties on that type should be immutable.&lt;/p&gt;

&lt;h4&gt;The Task-Returning Delegate Solution&lt;/h4&gt;

&lt;p&gt;I think deferrals are a perfectly acceptable solution. It's the solution that was chosen for WinRT, so it's one that programmers will be familiar with.&lt;/p&gt;

&lt;p&gt;However, there's another solution that should work as well: make your event handler delegate type return &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; instead of &lt;code class="csharp"&gt;&lt;span class="type"&gt;void&lt;/span&gt;&lt;/code&gt;. This is not as evil as it first appears; it's true that event handlers are supposed to return &lt;code class="csharp"&gt;&lt;span class="type"&gt;void&lt;/span&gt;&lt;/code&gt;, but &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; is the &lt;code class="csharp"&gt;&lt;span class="type"&gt;async&lt;/span&gt;&lt;/code&gt; equivalent of &lt;code class="csharp"&gt;&lt;span class="type"&gt;void&lt;/span&gt;&lt;/code&gt;, so the event handler delegate type still &lt;i&gt;logically&lt;/i&gt; returns &lt;code class="csharp"&gt;&lt;span class="type"&gt;void&lt;/span&gt;&lt;/code&gt;, even though it doesn't &lt;i&gt;literally&lt;/i&gt; return &lt;code class="csharp"&gt;&lt;span class="type"&gt;void&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you take this approach, you could use &lt;code class="csharp"&gt;&lt;span class="type"&gt;Delegate&lt;/span&gt;.GetInvocationList&lt;/code&gt; to invoke each handler individually and &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll&lt;/code&gt; to detect when they have all completed.&lt;/p&gt;

&lt;p&gt;The advantage of this approach is that there's no need for deferrals (or any explicit code) in the event handlers. The disadvantage is that &lt;i&gt;all&lt;/i&gt; event handlers are forced to have an asynchronous signature; this means synchronous event handlers would have to return &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.FromResult&amp;lt;&lt;span class="keyword"&gt;object&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;null&lt;/span&gt;)&lt;/code&gt; or some such. This is both awkward and inefficient.&lt;/p&gt;

&lt;h4&gt;The SynchronizationContext Solution&lt;/h4&gt;

&lt;p&gt;OK, I suppose there is a third solution, if you &lt;i&gt;really&lt;/i&gt; want to go there.&lt;/p&gt;

&lt;p&gt;Consider the example of ASP.NET page lifecycle events. With this example, it would have been a lot of work to add deferrals to the existing events, and that solution would probably bring up backwards-compatibility issues. So ASP.NET took a different approach: they integrated their events with the ASP.NET &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx"&gt;Feb 2011 MSDN article&lt;/a&gt; describes how &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods interact with &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt;; at that time &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; was in a CTP stage, but that interaction did not change when &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; was released in VS2012. To summarize: &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt; methods call &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;.OperationStarted&lt;/code&gt; at the beginning of the method and &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;.OperationCompleted&lt;/code&gt; at the end of the method. The ASP.NET &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt; uses these methods to keep track of how many operations are currently in progress.&lt;/p&gt;

&lt;p&gt;So, the ASP.NET page lifecycle events use this information: after raising each event, the ASP.NET runtime (asynchronously) waits until the operation count returns to its previous level. At that point, it knows that any &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; event handlers have run to completion.&lt;/p&gt;

&lt;p&gt;But don't do that. Yes, it's cool, and very clever. But having your component override the &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt; for your event handlers is almost certainly a bad idea. It makes sense for ASP.NET because ASP.NET is a platform, not a library.&lt;/p&gt;

&lt;h4&gt;You Should Use Deferrals&lt;/h4&gt;

&lt;p&gt;I recommend using deferrals. It's what programmers are expecting these days. I just mentioned these other solutions for the sake of completeness.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8214861811488829137/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html' title='Async OOP 5: Events'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9201592541097135772</id><published>2013-01-31T12:30:00.000-05:00</published><updated>2013-05-17T11:10:52.138-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><title type='text'>Async OOP 4: State</title><content type='html'>&lt;p&gt;It's been said that OOP is essentially the combining of &lt;i&gt;behavior&lt;/i&gt; and &lt;i&gt;state&lt;/i&gt;. Asynchronous code has no problem expressing &lt;i&gt;behavior&lt;/i&gt;; it is functional in nature, after all. When you design asynchronous objects, most of the problems that arise are due to &lt;i&gt;state&lt;/i&gt;.&lt;/p&gt;

&lt;h4&gt;Exposed State&lt;/h4&gt;

&lt;p&gt;As we discussed last week, properties should represent the &lt;i&gt;current state&lt;/i&gt; of an object. This can cause a problem regarding semantics: what is the "current state" of an object that has an asynchronous operation in progress?&lt;/p&gt;

&lt;p&gt;One familiar example of this problem is &lt;code class="csharp"&gt;&lt;span class="type"&gt;Stream&lt;/span&gt;.Position&lt;/code&gt;, which represents the current offset of the stream "pointer". When you call &lt;code class="csharp"&gt;Read&lt;/code&gt; or &lt;code class="csharp"&gt;Write&lt;/code&gt;, the actual reading/writing is done and &lt;code class="csharp"&gt;Position&lt;/code&gt; is updated to reflect the new position, all before the &lt;code class="csharp"&gt;Read&lt;/code&gt; or &lt;code class="csharp"&gt;Write&lt;/code&gt; method returns.&lt;/p&gt;

&lt;p&gt;Now, consider &lt;code class="csharp"&gt;ReadAsync&lt;/code&gt; and &lt;code class="csharp"&gt;WriteAsync&lt;/code&gt;: when is &lt;code class="csharp"&gt;Position&lt;/code&gt; updated? When the reading/writing is complete, or before it actually happens? If it happens before, is it updated synchronously or could it happen after the actual &lt;code class="csharp"&gt;ReadAsync&lt;/code&gt; or &lt;code class="csharp"&gt;WriteAsync&lt;/code&gt; method returns?&lt;/p&gt;

&lt;blockquote&gt;As a side note, this problem affects all asynchronous code, not just &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code. The same questions about &lt;code class="csharp"&gt;ReadAsync&lt;/code&gt; can be asked about &lt;code class="csharp"&gt;BeginRead&lt;/code&gt;.&lt;/blockquote&gt;

&lt;p&gt;This is a great example of how a property that &lt;i&gt;exposes state&lt;/i&gt; has perfectly clear semantics for synchronous code, but no obviously correct semantics for asynchronous code. It's not the end of the world - you just need to think about your entire API when &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-enabling your types, and &lt;i&gt;document the semantics you choose&lt;/i&gt;.&lt;/p&gt;

&lt;h4&gt;Hidden State&lt;/h4&gt;

&lt;p&gt;Hidden state is state that can impact asynchronous operations, even if that state isn't exposed through properties. &lt;code class="csharp"&gt;&lt;span class="type"&gt;Stream&lt;/span&gt;.Position&lt;/code&gt; only causes problems if the code needs to use that property; hidden state impacts other asynchronous operations.&lt;/p&gt;

&lt;p&gt;A prominent example of hidden state is in &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpWebRequest&lt;/span&gt;&lt;/code&gt;, which can only perform one HTTP request at a time. There is no indication that a request is in progress; if you attempt to start a second asynchronous request, you'll receive an &lt;code class="csharp"&gt;&lt;span class="type"&gt;InvalidOperationException&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpClient&lt;/span&gt;&lt;/code&gt; improves the situation; a single &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpClient&lt;/span&gt;&lt;/code&gt; instance supports multiple simultaneous HTTP requests. There are still a few state-related problems (e.g., you can't set &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpClient&lt;/span&gt;.Timeout&lt;/code&gt; once a request is in progress), but it does reduce the impact of hidden state when compared to &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpWebRequest&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I am generally against hidden state from an API design perspective, but implementation is often easier if you do allow hidden state. In these cases, I prefer to have both a lower-level type (like &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpWebRequest&lt;/span&gt;&lt;/code&gt;) with well-documented hidden state and then have a higher-level type (like &lt;code class="csharp"&gt;&lt;span class="type"&gt;HttpClient&lt;/span&gt;&lt;/code&gt;) without hidden state.&lt;/p&gt;

&lt;h4&gt;Output State&lt;/h4&gt;

&lt;p&gt;There's another kind of "state" that should be addressed: when &lt;i&gt;changes&lt;/i&gt; to state are treated as &lt;i&gt;output&lt;/i&gt; and used to update other state (usually including the UI, if you're using MVVM or a similar system). In this case, you have data-bound properties that notify listeners when they change.&lt;/p&gt;

&lt;p&gt;I don't have much to add to &lt;a href="/2013/01/async-oop-3-properties.html"&gt;last week's discussion of data-bound properties&lt;/a&gt;. Just keep in mind that updates should be done on the UI context, and that properties should always represent the &lt;i&gt;current state&lt;/i&gt;. So you may need an "indeterminate" or "unknown" value to start with (e.g., &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;null&lt;/span&gt;&lt;/code&gt;), which can be asynchronously updated.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9201592541097135772/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-4-state.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9201592541097135772'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9201592541097135772'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-4-state.html' title='Async OOP 4: State'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9120756909831278299</id><published>2013-01-24T12:30:00.000-05:00</published><updated>2013-09-27T08:14:37.174-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><title type='text'>Async OOP 3: Properties</title><content type='html'>&lt;p&gt;Unlike &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; constructors, &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; properties could be added to the language without much difficulty (well, property &lt;i&gt;getters&lt;/i&gt; could, at least). Properties are just syntactic sugar for getter and setter methods, and it wouldn't be a huge leap to make these methods &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;. However, &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; properties are not allowed.&lt;/p&gt;

&lt;p&gt;This is a purposeful design decision, because "asynchronous properties" is an oxymoron. Property getters should return current values; they should not be kicking off background operations. Also, the semantics behind an "asynchronous setter" are not at all clear.&lt;/p&gt;

&lt;p&gt;Usually, when someone wants an "asynchronous property", what they really want is one of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An asynchronous operation that returns a value.&lt;/li&gt;
&lt;li&gt;A value that is expensive to create, but should be cached for future use.&lt;/li&gt;
&lt;li&gt;A value that can be used in data-binding but which must be calculated or retrieved asynchronously.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll look at each of these in turn.&lt;/p&gt;

&lt;h4&gt;Asynchronous Operations&lt;/h4&gt;

&lt;p&gt;If your "property" needs to be asynchronously evaluated every time it's accessed, then you're really talking about an asynchronous operation.The best solution is to change the property to an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method. Semantically, it shouldn't be a property.&lt;/p&gt;

&lt;p&gt;It &lt;i&gt;is&lt;/i&gt; possible to have a property return a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt; just by returning the result of an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; GetMyProperty()
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
        &lt;span class="keyword"&gt;return&lt;/span&gt; 13;
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; MyProperty
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; GetMyProperty(); }
    }
}

...

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; TestAsyncProperty()
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; t = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;();
    &lt;span class="keyword"&gt;var&lt;/span&gt; result = &lt;span class="keyword"&gt;await&lt;/span&gt; t.MyProperty;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, I do not recommend this approach. If every access to a property is going to kick off a new asynchronous operation, then that "property" should really be a &lt;i&gt;method&lt;/i&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; GetMyProperty()
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
        &lt;span class="keyword"&gt;return&lt;/span&gt; 13;
    }
}

...

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; TestAsyncProperty()
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; t = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;();
    &lt;span class="keyword"&gt;var&lt;/span&gt; result = &lt;span class="keyword"&gt;await&lt;/span&gt; t.GetMyProperty();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Personally, I think the asynchronous method makes it clearer that a new asynchronous operation is initiated every time.&lt;/p&gt;

&lt;h4&gt;Cached Values&lt;/h4&gt;

&lt;p&gt;In this case, you only want the asynchronous operation executed once: the first time it's requested. After the operation completes, the result of the operation should be cached and returned immediately.&lt;/p&gt;

&lt;p&gt;The easiest solution for this is to use &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncLazy"&gt;available in the AsyncEx library&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; MyClass()
    {
        MyProperty = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt;
        {
            &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
            &lt;span class="keyword"&gt;return&lt;/span&gt; 13;
        });
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; MyProperty { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
}

...

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; TestAsyncProperty()
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; t = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;();
    &lt;span class="keyword"&gt;var&lt;/span&gt; result = &lt;span class="keyword"&gt;await&lt;/span&gt; t.MyProperty;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, I find the property syntax acceptable, since there's only one actual asynchronous operation and every method waiting on it will wait on the same operation.&lt;/p&gt;

&lt;h4&gt;Data-Bound Values&lt;/h4&gt;

&lt;p&gt;Data binding requires immediate (synchronous) results, and it can only deal with a limited set of types. Data binding will not give awaitable types any special treatment, so the type of an "asynchronous property" used for data binding must be the type of the result of the asynchronous operation (e.g., &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;/code&gt; instead of &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For this to work, the data-bound value must be initially set to some default or "unknown" value, and the type can implement &lt;code class="csharp"&gt;&lt;span class="type"&gt;INotifyPropertyChanged&lt;/span&gt;&lt;/code&gt; to let the data binding know when the asynchronous value has been determined.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt; : &lt;span class="type"&gt;INotifyPropertyChanged&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;event&lt;/span&gt; &lt;span class="type"&gt;PropertyChangedEventHandler&lt;/span&gt; PropertyChanged;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; OnPropertyChanged([&lt;span class="type"&gt;CallerMemberName&lt;/span&gt;] &lt;span class="keyword"&gt;string&lt;/span&gt; propertyName = &lt;span class="keyword"&gt;null&lt;/span&gt;)
    {
        &lt;span class="type"&gt;PropertyChangedEventHandler&lt;/span&gt; handler = PropertyChanged;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (handler != &lt;span class="keyword"&gt;null&lt;/span&gt;) handler(&lt;span class="keyword"&gt;this&lt;/span&gt;, &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;PropertyChangedEventArgs&lt;/span&gt;(propertyName));
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt;? myProperty;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt;? MyProperty
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; myProperty; }
        &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;set&lt;/span&gt;
        {
            myProperty = &lt;span class="keyword"&gt;value&lt;/span&gt;;
            OnPropertyChanged();
        }
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; InitializeAsync()
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
        MyProperty = 13;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example code above, I'm assuming that the code constructing a &lt;code class="csharp"&gt;&lt;span class="type"&gt;MyClass&lt;/span&gt;&lt;/code&gt; will call its &lt;code class="csharp"&gt;InitializeAsync&lt;/code&gt; method. Alternatively, if this instance is contained in an enclosing data bound instance, you could wrap the construction and &lt;code class="csharp"&gt;InitializeAsync&lt;/code&gt; into an asynchronous factory method &lt;a href="/2013/01/async-oop-2-constructors.html"&gt;as we discussed last time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If your property value is simply the result of a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;TResult&amp;gt;&lt;/code&gt;, then you can use the &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=NotifyTaskCompletion"&gt;NotifyTaskCompletion type in the AsyncEx library&lt;/a&gt; to make this even easier:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt; : &lt;span class="type"&gt;INotifyPropertyChanged&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;INotifyTaskCompletion&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;?&amp;gt; MyProperty { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;set&lt;/span&gt;; }

    &lt;span class="keyword"&gt;public&lt;/span&gt; MyClass()
    {
      MyProperty = &lt;span class="type"&gt;NotifyTaskCompletion&lt;/span&gt;.Create(GetValueAsync());
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;?&amp;gt; GetValueAsync()
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
        &lt;span class="keyword"&gt;return&lt;/span&gt; 13;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, you can databind to &lt;code class="csharp"&gt;MyProperty.Result&lt;/code&gt;, which will be initialized to the default value (&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;null&lt;/span&gt;&lt;/code&gt;). When the &lt;code class="csharp"&gt;GetValueAsync&lt;/code&gt; task completes, &lt;code class="csharp"&gt;MyProperty.Result&lt;/code&gt; will be updated to the result value (&lt;code class="csharp"&gt;13&lt;/code&gt;). &lt;code class="csharp"&gt;&lt;span class="type"&gt;NotifyTaskCompletion&lt;/span&gt;&lt;/code&gt; implements &lt;code class="csharp"&gt;&lt;span class="type"&gt;INotifyPropertyChanged&lt;/span&gt;&lt;/code&gt;, so this change will be picked up automatically by the data binding.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9120756909831278299/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9120756909831278299'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9120756909831278299'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html' title='Async OOP 3: Properties'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8380075727181515053</id><published>2013-01-17T12:30:00.000-05:00</published><updated>2013-11-19T06:53:46.258-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><title type='text'>Async OOP 2: Constructors</title><content type='html'>&lt;p&gt;Asynchronous construction poses an interesting problem. It would be useful to be able to use &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; in a constructor, but this would mean that the constructor would have to return a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt; representing a value that will be constructed in the future, instead of a constructed value. This kind of concept would be very difficult to work into the existing language.&lt;/p&gt;

&lt;p&gt;The bottom line is that &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; constructors are not allowed, so let's explore some alternatives.&lt;/p&gt;

&lt;h4&gt;Factory Pattern&lt;/h4&gt;

&lt;p&gt;Constructors cannot be &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;, but static methods can. It's pretty easy to have a static creation method, making the type its own factory:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;
{
  &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="type"&gt;MyData&lt;/span&gt; asyncData;
  &lt;span class="keyword"&gt;private&lt;/span&gt; MyClass() { ... }

  &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;MyClass&lt;/span&gt;&amp;gt; InitializeAsync()
  {
    asyncData = &lt;span class="keyword"&gt;await&lt;/span&gt; GetDataAsync();
    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;this&lt;/span&gt;;
  }

  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;MyClass&lt;/span&gt;&amp;gt; CreateAsync()
  {
    &lt;span class="keyword"&gt;var&lt;/span&gt; ret = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;();
    &lt;span class="keyword"&gt;return&lt;/span&gt; ret.InitializeAsync();
  }
}

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; UseMyClassAsync()
{
  &lt;span class="type"&gt;MyClass&lt;/span&gt; instance = &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;.CreateAsync();
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's possible to have &lt;code class="csharp"&gt;Create&lt;/code&gt; do all the initialization work, but I prefer to have the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; InitializeAsync&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The factory method is the most common approach to asynchronous construction, but there are other approaches that are useful in some situations.&lt;/p&gt;

&lt;h4&gt;AsyncLazy (for Resources)&lt;/h4&gt;

&lt;p&gt;If the instance you're creating is a &lt;i&gt;shared resource&lt;/i&gt;, then you can use &lt;a href="/2012/08/asynchronous-lazy-initialization.html"&gt;asynchronous lazy initialization&lt;/a&gt; to create your shared instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;MyResource&lt;/span&gt;&amp;gt; resource = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;MyResource&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt;
{
  &lt;span class="keyword"&gt;var&lt;/span&gt; data = &lt;span class="keyword"&gt;await&lt;/span&gt; GetResource();
  &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;MyResource&lt;/span&gt;(data);
});

&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; UseResourceAsync()
{
  &lt;span class="type"&gt;MyResource&lt;/span&gt; res = &lt;span class="keyword"&gt;await&lt;/span&gt; resource;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is a great fit for &lt;i&gt;resources&lt;/i&gt;; in this example, &lt;code class="csharp"&gt;resource&lt;/code&gt; will start being constructed the first time it's &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;ed. Any other methods that &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; it will tie into the same construction, and when the construction is complete, all waiters are released. Any &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;s after the construction is complete continue immediately since the value is already available.&lt;/p&gt;

&lt;p&gt;This approach does &lt;i&gt;not&lt;/i&gt; work well if the instance is not used as a shared resource. If the instance is not a shared resource, you should another approach instead.&lt;/p&gt;

&lt;h4&gt;The Asynchronous Initialization Pattern&lt;/h4&gt;

&lt;p&gt;The best approaches to asynchronous construction have already been covered: asynchronous factory methods and &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. These are the best approaches because you never expose an uninitialized instance.&lt;/p&gt;

&lt;p&gt;However, there are times when you really &lt;i&gt;need&lt;/i&gt; a constructor, e.g., when some other component is using reflection to create an instance of your type. This includes data binding, IoC and DI frameworks, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Activator&lt;/span&gt;.CreateInstance&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;In these cases, you &lt;i&gt;must&lt;/i&gt; return an uninitialized instance, but you can mitigate this by applying a common pattern: each object that needs asynchronous initialization will expose a property &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt; Initialization { &lt;span class="keyword"&gt;get&lt;/span&gt;; }&lt;/code&gt; that will contain the results of the asynchronous initialization.&lt;/p&gt;

&lt;h5&gt;The Pattern&lt;/h5&gt;

&lt;p&gt;If you want to treat asynchronous initialization as an implementation detail, you can (optionally) define a "marker" interface for types that use asynchronous initialization:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// Marks a type as requiring asynchronous initialization and provides the result of that initialization.&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;interface&lt;/span&gt; &lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;
{
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// The result of the asynchronous initialization of this instance.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="type"&gt;Task&lt;/span&gt; Initialization { &lt;span class="keyword"&gt;get&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The pattern for asynchronous initialization then looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyFundamentalType&lt;/span&gt; : &lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; MyFundamentalType()
    {
        Initialization = InitializeAsync();
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; Initialization { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;set&lt;/span&gt;; }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; InitializeAsync()
    {
        &lt;span class="comment"&gt;// Asynchronously initialize this instance.&lt;/span&gt;
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This pattern is quite simple, but it gives us some important semantics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The initialization is started in the constructor (when we call &lt;code class="csharp"&gt;InitializeAsync&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The completion of the initialization is exposed (via the &lt;code class="csharp"&gt;Initialization&lt;/code&gt; property).&lt;/li&gt;
&lt;li&gt;Any exceptions raised from the asynchronous initialization will be captured and placed on the &lt;code class="csharp"&gt;Initialization&lt;/code&gt; property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An instance of this type can be (manually) constructed like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; myInstance = &lt;span class="keyword"&gt;new&lt;/span&gt; MyFundamentalType();
&lt;span class="comment"&gt;// Danger: the instance is not initialized here!&lt;/span&gt;
&lt;span class="keyword"&gt;await&lt;/span&gt; myInstance.Initialization;
&lt;span class="comment"&gt;// OK: the instance is initialized now.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Composing with Asynchronous Initialization&lt;/h5&gt;

&lt;p&gt;It's easy to create another type that depends on this fundamental type (i.e., asynchronous composition):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyComposedType&lt;/span&gt; : &lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;
{
    &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;MyFundamentalType&lt;/span&gt; _fundamental;&lt;/span&gt;

    &lt;span class="keyword"&gt;public&lt;/span&gt; MyComposedType(&lt;span class="highlight"&gt;&lt;span class="type"&gt;MyFundamentalType&lt;/span&gt; fundamental&lt;/span&gt;)
    {
        &lt;span class="highlight"&gt;_fundamental = fundamental;&lt;/span&gt;
        Initialization = InitializeAsync();
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; Initialization { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;set&lt;/span&gt;; }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; InitializeAsync()
    {
        &lt;span class="highlight"&gt;&lt;span class="comment"&gt;// Asynchronously wait for the fundamental instance to initialize.&lt;/span&gt;&lt;/span&gt;
        &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt; _fundamental.Initialization;&lt;/span&gt;

        &lt;span class="comment"&gt;// Do our own initialization (synchronous or asynchronous).&lt;/span&gt;
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main difference is that we wait for all of our components to initialize before we proceed with our initialization. Alternatively, you could proceed with some initialization and only wait on particular components when you need those particular ones to complete. However, every component should be initialized by the end of &lt;code class="csharp"&gt;InitializeAsync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a few key semantics that we get from this pattern when composing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A composed type's initialization isn't complete until all its components' initializations are complete.&lt;/li&gt;
&lt;li&gt;Any errors from component initializations are surfaced up through the composed type.&lt;/li&gt;
&lt;li&gt;A composed type supports asynchronous initialization, and can be composed in turn just like any other type supporting asynchronous initialization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, if you're using the &lt;code class="csharp"&gt;&lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;&lt;/code&gt; "marker" interface, you can test for that and asynchronously initialize instances that are provided to you by IoC/DI. This slightly complicates your &lt;code class="csharp"&gt;InitializeAsync&lt;/code&gt; but allows you to treat asynchronous initialization as an implementation detail. For example, if &lt;code class="csharp"&gt;_fundamental&lt;/code&gt; is of type &lt;code class="csharp"&gt;&lt;span class="type"&gt;IMyFundamentalType&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; InitializeAsync()
{
    &lt;span class="comment"&gt;// Asynchronously wait for the fundamental instance to initialize if necessary.&lt;/span&gt;
    &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; asyncFundamental = _fundamental &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;;&lt;/span&gt;
    &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; (asyncFundamental != &lt;span class="keyword"&gt;null&lt;/span&gt;)&lt;/span&gt;
    &lt;span class="highlight"&gt;    &lt;span class="keyword"&gt;await&lt;/span&gt; asyncFundamental.Initialization;&lt;/span&gt;

    &lt;span class="comment"&gt;// Do our own initialization (synchronous or asynchronous).&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Top-Level Handling&lt;/h5&gt;

&lt;p&gt;We've covered how to write "fundamental" types with asynchronous initialization and how to "compose" them into other types with asynchronous initialization. Eventually, you'll need to consume the high-level types that support asynchronous initialization.&lt;/p&gt;

&lt;p&gt;In many dynamic-creation scenarios (such as IoC/DI/&lt;code class="csharp"&gt;&lt;span class="type"&gt;Activator&lt;/span&gt;.CreateInstance&lt;/code&gt;), you can just check for &lt;code class="csharp"&gt;&lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;&lt;/code&gt; and initialize it directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;object&lt;/span&gt; myInstance = ...;
&lt;span class="keyword"&gt;var&lt;/span&gt; asyncInstance = myInstance &lt;span class="keyword"&gt;as&lt;/span&gt; &lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;;
&lt;span class="keyword"&gt;if&lt;/span&gt; (asyncInstance != &lt;span class="keyword"&gt;null&lt;/span&gt;)
    &lt;span class="keyword"&gt;await&lt;/span&gt; asyncInstance.Initialization;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you're creating a type by data binding, or using IoC/DI to inject your view models into your view's data context, then you don't really have a place where you interact with the top-level instance. Data binding will take care of updating the UI when the initialization completes &lt;i&gt;unless the initialization fails&lt;/i&gt;, so you'll need to surface failures. Unfortunately, &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; does not implement &lt;code class="csharp"&gt;&lt;span class="type"&gt;INotifyPropertyChanged&lt;/span&gt;&lt;/code&gt;, so the task completion is not surfaced automatically. You can use a type like &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=NotifyTaskCompletion"&gt;NotifyTaskCompletion type in the AsyncEx library&lt;/a&gt; to make this easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyViewModel&lt;/span&gt; : &lt;span class="type"&gt;INotifyPropertyChanged&lt;/span&gt;, &lt;span class="type"&gt;IAsyncInitialization&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; MyViewModel()
    {
        InitializationNotifier = &lt;span class="type"&gt;NotifyTaskCompletion&lt;/span&gt;.Create(InitializeAsync());
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;INotifyTaskCompletion&lt;/span&gt; InitializationNotifier { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; Initialization { &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; InitializationNotifier.Task; } }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; InitializeAsync()
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(100); &lt;span class="comment"&gt;// asynchronous initialization&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your data-binding code can use paths like &lt;code class="csharp"&gt;InitializationNotifier.IsCompleted&lt;/code&gt; and &lt;code class="csharp"&gt;InitializationNotifier.ErrorMessage&lt;/code&gt; to respond to the completion of the initialization task.&lt;/p&gt;

&lt;h5&gt;Asynchronous Initialization: Conclusion&lt;/h5&gt;

&lt;p&gt;I do prefer the asynchronous factory approach over the asynchronous initialization pattern. The asynchronous initialization pattern &lt;i&gt;does&lt;/i&gt; expose instances before they are initialized, and depends on the programmer to correctly use &lt;code class="csharp"&gt;Initialization&lt;/code&gt;. But there are some situations where you can't use asynchronous factory methods, and asynchronous initialization is a decent workaround.&lt;/p&gt;

&lt;h4&gt;What NOT To Do&lt;/h4&gt;

&lt;p&gt;Here's an example of what &lt;b&gt;not&lt;/b&gt; to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt;
{
  &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="type"&gt;MyData&lt;/span&gt; asyncData;
  &lt;span class="keyword"&gt;public&lt;/span&gt; MyClass()
  {
    InitializeAsync();
  }

  &lt;span class="comment"&gt;// BAD CODE!!&lt;/span&gt;
  &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; InitializeAsync()
  {
    asyncData = &lt;span class="keyword"&gt;await&lt;/span&gt; GetDataAsync();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first glance, this seems like a reasonable approach: you get a regular constructor that kicks off an asynchronous operation; however, there are several drawbacks that are due to the use of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first problem is that when the constructor completes, the instance is still being asynchronously initialized, and there isn't an obvious way to determine when the asynchronous initialization has completed.&lt;/p&gt;

&lt;p&gt;The second problem is with error handling: any exceptions raised from &lt;code class="csharp"&gt;InitializeAsync&lt;/code&gt; will be thrown directly on the &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt; that was current when the instance was constructed. The exception won't get caught by any &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;/code&gt; clauses surrounding the object construction. Most applications treat this as a fatal error.&lt;/p&gt;

&lt;p&gt;The first two solutions in this post (asynchronous factory method and &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncLazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;) do not have these problems. They do not provide an instance until it has been asynchronously initialized, and exception handling is more natural. The third solution (asynchronous initialization) does return an instance before it has been initialized (which I don't like), but it mitigates this by providing a standard way to detect when initialization has completed as well as reasonable exception handling.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8380075727181515053/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8380075727181515053'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8380075727181515053'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html' title='Async OOP 2: Constructors'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7749312206131433142</id><published>2013-01-10T12:30:00.000-05:00</published><updated>2013-05-21T16:00:37.221-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><title type='text'>Async OOP 1: Inheritance and Interfaces</title><content type='html'>&lt;p&gt;Before we dive all the way into "asynchronous OOP", let's address one fairly common question: how does one deal with inheritance of asynchronous methods? What about an "asynchronous interface"?&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; does work well with inheritance (and interfaces). Remember that &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; is an implementation detail, so interfaces can't be defined with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;. To define an asynchronous method in an interface, you just need to define a method with the same signature, minus the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;interface&lt;/span&gt; &lt;span class="type"&gt;IMyInterface&lt;/span&gt;
{
  &lt;span class="type"&gt;Task&lt;/span&gt; MyMethodAsync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then implement it using &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyClass&lt;/span&gt; : &lt;span class="type"&gt;IMyInterface&lt;/span&gt;
{
  &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; MyMethodAsync()
  {
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have an implementation that &lt;i&gt;isn't&lt;/i&gt; &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;, you can use &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskCompletionSource&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt; or one of its shorthand forms such as &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.FromResult&lt;/code&gt; to implement the asynchronous method signature synchronously.&lt;/p&gt;

&lt;p&gt;Similarly, if you have a base class method that returns &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt; or &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt; (which may be asynchronous or synchronous), you can override it with an asynchronous or synchronous method.&lt;/p&gt;

&lt;p&gt;Next time, we'll take a look at asynchronous constructors.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7749312206131433142/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-1-inheritance-and-interfaces.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7749312206131433142'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7749312206131433142'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-1-inheritance-and-interfaces.html' title='Async OOP 1: Inheritance and Interfaces'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8241448833228290935</id><published>2013-01-03T12:30:00.000-05:00</published><updated>2013-05-17T11:09:50.526-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='async oop'/><title type='text'>Async OOP 0: Introduction</title><content type='html'>&lt;p&gt;As programmers adopt &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;, eventually they come across problems trying to fit asynchronous code into OOP (&lt;i&gt;classical&lt;/i&gt; OOP, that is). The root cause of this is that asynchronous code is naturally functional. And by "functional", I don't mean "working". I mean the style of programming where &lt;i&gt;behavior&lt;/i&gt; is paramount and &lt;i&gt;state&lt;/i&gt; is minimized.&lt;/p&gt;

&lt;p&gt;This is the first in a &lt;a href="/search/label/async%20oop"&gt;series of posts&lt;/a&gt; that will examine combining &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; with OOP.&lt;/p&gt;

&lt;h4&gt;Async is Functional&lt;/h4&gt;

&lt;p&gt;Historically, &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; can trace its roots (or at least one major root) back to F#'s asynchronous workflows, but this is not what is dictating the functional nature of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;All&lt;/i&gt; asynchronous code is functional by nature. I used to teach asynchronous programming (in C++, then in C#, well before &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;), and one of the key pieces of advice for writing asynchronous code is: "you have to turn your mind inside out." That's regular-person-speak for "think functionally, not procedurally."&lt;/p&gt;

&lt;p&gt;The major breakthrough with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; is that you can still think procedurally while programming asynchronously. This makes asynchronous methods easier to write and understand. However, under the covers, asynchronous code is still functional in nature; and this causes some problems when people try to force &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; methods into classical OOP designs.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8241448833228290935/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-0-introduction.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8241448833228290935'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8241448833228290935'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-0-introduction.html' title='Async OOP 0: Introduction'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3334971307928185199</id><published>2012-12-27T12:30:00.000-05:00</published><updated>2013-09-10T13:52:41.806-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>Async Producer-Consumer Queue 3: More Flexibility</title><content type='html'>&lt;p&gt;&lt;a href="/2012/12/async-producer-consumer-queue-2-more.html"&gt;Last time&lt;/a&gt; we implemented an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-compatible producer/consumer queue using portable &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-ready synchronization primitives. This time, we'll give up some of that portability but increase flexibility: we'll build an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-compatible producer/consumer collection that can be used as a queue (FIFO), stack (LIFO), or bag (unordered).&lt;/p&gt;

&lt;p&gt;The BCL has already done some of the hard work for us here. The &lt;a href="http://msdn.microsoft.com/en-us/library/dd267312.aspx"&gt;BlockingCollection&lt;/a&gt; type provides a wrapper around any kind of &lt;a href="http://msdn.microsoft.com/en-us/library/dd287147.aspx"&gt;IProducerConsumerCollection&lt;/a&gt;, including &lt;a href="http://msdn.microsoft.com/en-us/library/dd267265.aspx"&gt;ConcurrentQueue&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/dd267331.aspx"&gt;ConcurrentStack&lt;/a&gt;, and &lt;a href="http://msdn.microsoft.com/en-us/library/dd381779.aspx"&gt;ConcurrentBag&lt;/a&gt;. Our goal is to create the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-compatible equivalent of &lt;code class="csharp"&gt;&lt;span class="type"&gt;BlockingCollection&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Actually, it's pretty simple. It's almost exactly like &lt;a href="/2012/12/async-producer-consumer-queue-2-more.html"&gt;our last implementation&lt;/a&gt;, which wrapped a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Queue&lt;/span&gt;&lt;/code&gt;. This time, we wrap an &lt;code class="csharp"&gt;&lt;span class="type"&gt;IProducerConsumerCollection&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;AsyncCollection&lt;/span&gt;&amp;lt;T&amp;gt;
{
    &lt;span class="comment"&gt;// The underlying collection of items.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;IProducerConsumerCollection&lt;/span&gt;&amp;lt;T&amp;gt; collection;

    &lt;span class="comment"&gt;// The maximum number of items allowed.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; maxCount;

    &lt;span class="comment"&gt;// Synchronization primitives.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncLock&lt;/span&gt; mutex;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt; notFull;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt; notEmpty;

    &lt;span class="keyword"&gt;public&lt;/span&gt; AsyncCollection(&lt;span class="type"&gt;IProducerConsumerCollection&lt;/span&gt;&amp;lt;T&amp;gt; collection = &lt;span class="keyword"&gt;null&lt;/span&gt;, &lt;span class="keyword"&gt;int&lt;/span&gt; maxCount = &lt;span class="keyword"&gt;int&lt;/span&gt;.MaxValue)
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (maxCount &amp;lt;= 0)
            &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ArgumentOutOfRangeException&lt;/span&gt;(&lt;span class="string"&gt;&amp;quot;maxCount&amp;quot;&lt;/span&gt;, &lt;span class="string"&gt;&amp;quot;The maximum count must be greater than zero.&amp;quot;&lt;/span&gt;);
        &lt;span class="keyword"&gt;this&lt;/span&gt;.collection = collection ?? &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ConcurrentQueue&lt;/span&gt;&amp;lt;T&amp;gt;();
        &lt;span class="keyword"&gt;this&lt;/span&gt;.maxCount = maxCount;

        mutex = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncLock&lt;/span&gt;();
        notFull = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt;(mutex);
        notEmpty = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt;(mutex);
    }

    &lt;span class="comment"&gt;// Convenience properties to make the code a bit clearer.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; Empty { &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; collection.Count == 0; } }
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; Full { &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; collection.Count == maxCount; } }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; AddAsync(T item)
    {
        &lt;span class="keyword"&gt;using&lt;/span&gt; (&lt;span class="keyword"&gt;await&lt;/span&gt; mutex.LockAsync())
        {
            &lt;span class="keyword"&gt;while&lt;/span&gt; (Full)
                &lt;span class="keyword"&gt;await&lt;/span&gt; notFull.WaitAsync();

            &lt;span class="keyword"&gt;if&lt;/span&gt; (!collection.TryAdd(item))
                &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;The underlying collection refused the item.&amp;quot;&lt;/span&gt;);
            notEmpty.NotifyOne();
        }
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;T&amp;gt; TakeAsync()
    {
        &lt;span class="keyword"&gt;using&lt;/span&gt; (&lt;span class="keyword"&gt;await&lt;/span&gt; mutex.LockAsync())
        {
            &lt;span class="keyword"&gt;while&lt;/span&gt; (Empty)
                &lt;span class="keyword"&gt;await&lt;/span&gt; notEmpty.WaitAsync();

            T ret;
            &lt;span class="keyword"&gt;if&lt;/span&gt; (!collection.TryTake(&lt;span class="keyword"&gt;out&lt;/span&gt; ret))
                &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; InvalidOperationException(&lt;span class="string"&gt;&amp;quot;The underlying collection refused to provide an item.&amp;quot;&lt;/span&gt;);
            notFull.NotifyOne();
            &lt;span class="keyword"&gt;return&lt;/span&gt; ret;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have an &lt;code class="csharp"&gt;&lt;span class="type"&gt;AsyncCollection&lt;/span&gt;&lt;/code&gt; that can be used as a front for many different kinds of collections.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3334971307928185199/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-3-more.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3334971307928185199'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3334971307928185199'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-3-more.html' title='Async Producer-Consumer Queue 3: More Flexibility'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4941921752221936379</id><published>2012-12-20T12:30:00.000-05:00</published><updated>2013-05-17T11:08:52.163-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><title type='text'>Async Producer-Consumer Queue 2: More Portability</title><content type='html'>&lt;p&gt;In my &lt;a href="/2012/11/async-producerconsumer-queue-using.html"&gt;last Dataflow post&lt;/a&gt;, I implemented an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-compatible producer/consumer queue using &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. While this approach works, it's limited to platforms that Dataflow supports (as of the time of this writing: .NET 4.5, .NET 4.0, Windows Store, and Portable net45+win8).&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://nuget.org/packages/Microsoft.Bcl.Async"&gt;Microsoft.Bcl.Async&lt;/a&gt; package extends &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; support to .NET 4.5/4.0, Windows Store, Silverlight 5/4, Windows Phone 8.0/7.5, and portable libraries targeting any subset of these. Today we'll build an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-compatible producer/consumer queue that is supported on all those same platforms. This would be useful, e.g., for a portable library that had to target both Windows Store and Windows Phone.&lt;/p&gt;

&lt;p&gt;Traditional producer/consumer queues are easily built using locks and condition variables (or monitors). I want the ability to throttle the queue with a maximum number of elements, so my implementation will use one lock and two condition variables. One condition variable will be signaled when the queue is not full (releasing a producer), and the other condition variable will be signaled when the queue is not empty (releasing a consumer).&lt;/p&gt;

&lt;p&gt;Here's a simple implementation using &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-compatible synchronization primitives from &lt;a href="http://nitoasyncex.codeplex.com/"&gt;AsyncEx&lt;/a&gt; (which supports all the same targets as Microsoft.Bcl.Async):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;AsyncProducerConsumerQueue&lt;/span&gt;&amp;lt;T&amp;gt;
{
    &lt;span class="comment"&gt;// The underlying queue of items.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;Queue&lt;/span&gt;&amp;lt;T&amp;gt; queue;

    &lt;span class="comment"&gt;// The maximum number of items allowed.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; maxCount;

    &lt;span class="comment"&gt;// Synchronization primitives.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncLock&lt;/span&gt; mutex;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt; notFull;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt; notEmpty;

    &lt;span class="keyword"&gt;public&lt;/span&gt; AsyncProducerConsumerQueue(&lt;span class="keyword"&gt;int&lt;/span&gt; maxCount = &lt;span class="keyword"&gt;int&lt;/span&gt;.MaxValue)
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (maxCount &amp;lt;= 0)
            &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ArgumentOutOfRangeException&lt;/span&gt;(&lt;span class="string"&gt;&amp;quot;maxCount&amp;quot;&lt;/span&gt;, &lt;span class="string"&gt;&amp;quot;The maximum count must be greater than zero.&amp;quot;&lt;/span&gt;);
        queue = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;Queue&lt;/span&gt;&amp;lt;T&amp;gt;();
        &lt;span class="keyword"&gt;this&lt;/span&gt;.maxCount = maxCount;

        mutex = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncLock&lt;/span&gt;();
        notFull = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt;(mutex);
        notEmpty = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncConditionVariable&lt;/span&gt;(mutex);
    }

    &lt;span class="comment"&gt;// Convenience properties to make the code a bit clearer.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; Empty { &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; queue.Count == 0; } }
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; Full { &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; queue.Count == maxCount; } }

    &lt;span class="type"&gt;Task&lt;/span&gt; EnqueueAsync(T item)
    {
        &lt;span class="keyword"&gt;using&lt;/span&gt; (&lt;span class="keyword"&gt;await&lt;/span&gt; mutex.LockAsync())
        {
            &lt;span class="keyword"&gt;while&lt;/span&gt; (Full)
                &lt;span class="keyword"&gt;await&lt;/span&gt; notFull.WaitAsync();

            queue.Add(item);
            notEmpty.NotifyOne();
        }
    }

    &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;T&amp;gt; DequeueAsync()
    {
        &lt;span class="keyword"&gt;using&lt;/span&gt; (&lt;span class="keyword"&gt;await&lt;/span&gt; mutex.LockAsync())
        {
            &lt;span class="keyword"&gt;while&lt;/span&gt; (Empty)
                &lt;span class="keyword"&gt;await&lt;/span&gt; notEmpty.WaitAsync();

            &lt;span class="keyword"&gt;var&lt;/span&gt; ret = queue.Remove();
            notFull.NotifyOne();
            &lt;span class="keyword"&gt;return&lt;/span&gt; ret;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of this is boilerplate. The interesting parts are in &lt;code class="csharp"&gt;EnqueueAsync&lt;/code&gt; and &lt;code class="csharp"&gt;DequeueAsync&lt;/code&gt;. They both parallel each other: take the lock, wait until their operation can be performed, perform the operation, and notify the other side that the other condition is met.&lt;/p&gt;

&lt;p&gt;One question that comes up with condition variables is &lt;b&gt;why use a while loop instead of just an if statement?&lt;/b&gt; It's actually because the condition may not be true by the time the method resumes! Consider this sequence of events (keeping in mind that &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncConditionVariable"&gt;waiting on a condition variable temporarily releases the lock, and re-acquires it after the condition variable is signaled&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One producer is attempting to enqueue an item to a full queue. It waits on the &lt;code class="csharp"&gt;notFull&lt;/code&gt; condition variable.&lt;/li&gt;
&lt;li&gt;A consumer takes an item from the queue, signaling &lt;code class="csharp"&gt;notFull&lt;/code&gt; and releasing the lock.&lt;/li&gt;
&lt;li&gt;The producer is signaled and is about to re-acquire the lock when it is suspended.&lt;/li&gt;
&lt;li&gt;Another producer calls &lt;code class="csharp"&gt;EnqueueAsync&lt;/code&gt;, takes the lock, sees that the queue is not full, enqueues its item, and completes, releasing the lock.&lt;/li&gt;
&lt;li&gt;The original producer resumes execution and re-acquires the lock. However, the queue is now full again.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a very unlikely scenario, but it &lt;i&gt;is&lt;/i&gt; possible. For this reason, condition variables are almost always used with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;/code&gt; loops. There may be occasional situations where an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;if&lt;/span&gt;&lt;/code&gt; statement would suffice (e.g., if there is only one producer and it only produced one item at a time), but it's barely an optimization at all. It's safer to always use &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;/code&gt; loops with condition variables.&lt;/p&gt;

&lt;p&gt;There is an implementation of this type in the &lt;a href="http://nitoasyncex.codeplex.com"&gt;AsyncEx library&lt;/a&gt; which is more complex than the simple version in this blog post. The AsyncEx version includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full cancellation support.&lt;/li&gt;
&lt;li&gt;Marking a queue as "complete for adding". Any attempt to enqueue to a queue that is complete for adding will fail. Attempts to dequeue from a queue that is complete for adding will also fail once the queue is empty.&lt;/li&gt;
&lt;li&gt;The ability to attempt an enqueue/dequeue to/from multiple queues simultaneously, with only one enqueue/dequeue actually taking place.&lt;/li&gt;
&lt;li&gt;&lt;code class="csharp"&gt;Try*&lt;/code&gt; variants for all operations.&lt;/li&gt;
&lt;/ul&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4941921752221936379/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-2-more.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4941921752221936379'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4941921752221936379'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-2-more.html' title='Async Producer-Consumer Queue 2: More Portability'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597</id><published>2012-12-13T12:30:00.000-05:00</published><updated>2014-05-07T16:10:41.055-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Returning Early from ASP.NET Requests</title><content type='html'>&lt;blockquote&gt;&lt;b&gt;Update, 2014-05-07: &lt;/b&gt; The &lt;a href="http://msdn.microsoft.com/en-us/library/ms171868(v=vs.110).aspx#v452"&gt;.NET Framework 4.5.2 introduced &lt;code class="csharp"&gt;HostingEnvironment.QueueBackgroundWorkItem&lt;/code&gt;&lt;/a&gt;, which effectively rendered the code below obsolete. On .NET 4.5.2, you can use the new API instead of the &lt;code class="csharp"&gt;BackgroundTaskManager.Run&lt;/code&gt; described below. However, the same safety warnings apply.&lt;/blockquote&gt;

&lt;p&gt;I have great reservations about writing this blog post. Pretty much everything I'm going to describe here is a bad idea and you should strongly avoid putting it into production, but there &lt;i&gt;are&lt;/i&gt; just a few situations where this technique can be really helpful.&lt;/p&gt;

&lt;p&gt;As I described in &lt;a href="http://blog.stephencleary.com/2012/08/async-doesnt-change-http-protocol.html"&gt;Async Doesn't Change the HTTP Protocol&lt;/a&gt;, in the ASP.NET worldview you only get one "response" for each "request". You can't return early just by using an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;. However, in some situations you have enough information to generate the response but the actual request processing may take some more time. That's were today's solution comes in.&lt;/p&gt;

&lt;h4&gt;Not Recommended&lt;/h4&gt;

&lt;p&gt;The solution in this blog post is not recommended. Before putting it into production, you &lt;b&gt;need&lt;/b&gt; to understand &lt;b&gt;why&lt;/b&gt; it's not recommended.&lt;/p&gt;

&lt;p&gt;ASP.NET executes your web site (or web application) in an AppDomain, separated from other web sites (or web applications) on the same server. There are &lt;a href="http://blogs.msdn.com/b/tess/archive/2006/08/02/asp-net-case-study-lost-session-variables-and-appdomain-recycles.aspx"&gt;many&lt;/a&gt; &lt;a href="http://blogs.msdn.com/b/johan/archive/2007/05/16/common-reasons-why-your-application-pool-may-unexpectedly-recycle.aspx"&gt;reasons&lt;/a&gt; why this AppDomain may be shut down; modern versions of IIS &lt;a href="http://www.iis.net/configreference/system.applicationhost/applicationpools/add/recycling"&gt;recycle the entire process&lt;/a&gt; every 29 hours by default just to keep things clean. Also, you have to take into consideration unmanaged shutdowns: hard drive failures, hurricanes, etc.&lt;/p&gt;

&lt;p&gt;Consider what happens if you generate (and return) the response but you're still working on the request. If you lose your AppDomain for any reason, that in-progress work is &lt;i&gt;lost&lt;/i&gt;. The client thinks it was completed, but it really wasn't. As long as the request is incomplete, the responsibility is on the client. When you complete the request (by sending a response), you have accepted the full responsibility of that request. If you haven't already committed the changes, you need to be absolutely sure that they &lt;i&gt;will&lt;/i&gt; be committed.&lt;/p&gt;

&lt;h4&gt;Proper Solutions&lt;/h4&gt;

&lt;p&gt;The correct solutions are all complicated: you need to put the additional work in a safe place, like an Azure queue, database, or persistent messaging system (Azure message bus, MSMQ, WebSphere MQ, etc). And each of those solutions brings a whole scope of additional work: setup and configuration, dead-letter queues, poison messages, etc.&lt;/p&gt;

&lt;p&gt;But that's the correct way to do it, because &lt;i&gt;you can't drop the ball!&lt;/i&gt; You store the additional work in the safe place and then return a response after the work is safely stored. Personally, I like distributed systems (like Azure queues) because it's not just safely stored on the hard drive - it's safely stored on &lt;i&gt;six&lt;/i&gt; hard drives, three of which are in a &lt;i&gt;different geographic location.&lt;/i&gt; This gives you more protection from more problems (like hard drive failures and hurricanes).&lt;/p&gt;

&lt;h4&gt;The Improper "Solution"&lt;/h4&gt;

&lt;p&gt;The &lt;i&gt;unsafe&lt;/i&gt; way to do it is to keep the work in memory. The simple way to do this is to just toss the work into &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Run&lt;/code&gt;. Unfortunately, ASP.NET has no idea if you have queued work like this, and it will feel free to take down your AppDomain when it thinks it's idle.&lt;/p&gt;

&lt;p&gt;The &lt;i&gt;slightly safer but still unsafe&lt;/i&gt; way to do it is to keep the work in memory but register it with ASP.NET so that it will notify you when your AppDomain is going away. The code in this blog post uses &lt;a href="http://haacked.com/archive/2011/10/16/the-dangers-of-implementing-recurring-background-tasks-in-asp-net.aspx"&gt;the technique described by Phil Haack&lt;/a&gt; to register work with the ASP.NET runtime. It's important to note the &lt;b&gt;limitations&lt;/b&gt; of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default, you only have 30 seconds total from the time the notification goes out to the time the AppDomain is yanked out from under you.&lt;/li&gt;
&lt;li&gt;You &lt;i&gt;may&lt;/i&gt; not get notification at all. In an unmanaged shutdown (e.g., power loss), all bets are off.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still, this approach &lt;i&gt;can&lt;/i&gt; be useful in a limited set of scenarios, so with great reservation let's take a look at the code. &lt;b&gt;Update 2014-04: A newer version of this code is now &lt;a href="https://github.com/StephenCleary/AspNetBackgroundTasks"&gt;on GitHub.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading.Tasks;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Web.Hosting;
&lt;span class="keyword"&gt;using&lt;/span&gt; Nito.AsyncEx;

&lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// A type that tracks background operations and notifies ASP.NET that they are still in progress.&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt; : &lt;span class="type"&gt;IRegisteredObject&lt;/span&gt;
{
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// A cancellation token that is set when ASP.NET is shutting down the app domain.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;CancellationTokenSource&lt;/span&gt; shutdown;

    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// A countdown event that is incremented each time a task is registered and decremented each time it completes. When it reaches zero, we are ready to shut down the app domain. &lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;AsyncCountdownEvent&lt;/span&gt; count;

    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// A task that completes after &amp;lt;see cref=&amp;quot;count&amp;quot;/&amp;gt; reaches zero and the object has been unregistered.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; done;

    &lt;span class="keyword"&gt;private&lt;/span&gt; BackgroundTaskManager()
    {
        &lt;span class="comment"&gt;// Start the count at 1 and decrement it when ASP.NET notifies us we&amp;#39;re shutting down.&lt;/span&gt;
        shutdown = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;CancellationTokenSource&lt;/span&gt;();
        count = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AsyncCountdownEvent&lt;/span&gt;(1);
        shutdown.Token.Register(() =&amp;gt; count.Signal(), useSynchronizationContext: &lt;span class="keyword"&gt;false&lt;/span&gt;);

        &lt;span class="comment"&gt;// Register the object and unregister it when the count reaches zero.&lt;/span&gt;
        &lt;span class="type"&gt;HostingEnvironment&lt;/span&gt;.RegisterObject(&lt;span class="keyword"&gt;this&lt;/span&gt;);
        done = count.WaitAsync().ContinueWith(_ =&amp;gt; &lt;span class="type"&gt;HostingEnvironment&lt;/span&gt;.UnregisterObject(&lt;span class="keyword"&gt;this&lt;/span&gt;), &lt;span class="type"&gt;TaskContinuationOptions&lt;/span&gt;.ExecuteSynchronously);
    }

    &lt;span class="keyword"&gt;void&lt;/span&gt; &lt;span class="type"&gt;IRegisteredObject&lt;/span&gt;.Stop(&lt;span class="keyword"&gt;bool&lt;/span&gt; immediate)
    {
        shutdown.Cancel();
        &lt;span class="keyword"&gt;if&lt;/span&gt; (immediate)
            done.Wait();
    }

    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Registers a task with the ASP.NET runtime.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to register.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Register(&lt;span class="type"&gt;Task&lt;/span&gt; task)
    {
        count.AddCount();
        task.ContinueWith(_ =&amp;gt; count.Signal(), &lt;span class="type"&gt;TaskContinuationOptions&lt;/span&gt;.ExecuteSynchronously);
    }

    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// The background task manager for this app domain.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;readonly&lt;/span&gt; &lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt; instance = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt;();

    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Gets a cancellation token that is set when ASP.NET is shutting down the app domain.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;CancellationToken&lt;/span&gt; Shutdown { &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; instance.shutdown.Token; } }
    
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Executes an &amp;lt;c&amp;gt;async&amp;lt;/c&amp;gt; background operation, registering it with ASP.NET.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;operation&amp;quot;&amp;gt;The background operation.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Run(&lt;span class="type"&gt;Func&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;Task&lt;/span&gt;&amp;gt; operation)
    {
        instance.Register(&lt;span class="type"&gt;Task&lt;/span&gt;.Run(operation));
    }

    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Executes a background operation, registering it with ASP.NET.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;operation&amp;quot;&amp;gt;The background operation.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Run(&lt;span class="type"&gt;Action&lt;/span&gt; operation)
    {
        instance.Register(&lt;span class="type"&gt;Task&lt;/span&gt;.Run(operation));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt;&lt;/code&gt; is a singleton that keeps track of background operations. It uses an &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncCountdownEvent"&gt;AsyncCountdownEvent&lt;/a&gt; from &lt;a href="http://nitoasyncex.codeplex.com/"&gt;AsyncEx&lt;/a&gt; as a counter of background operations (plus an extra count that is decremented when ASP.NET notifies us that the AppDomain is going down).&lt;/p&gt;

&lt;p&gt;You can queue synchronous or asynchronous work by calling &lt;code class="csharp"&gt;Run&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt;.Run(() =&amp;gt;
{
    &lt;span class="type"&gt;Thread&lt;/span&gt;.Sleep(20000);
});
&lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt;.Run(&lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt;
{
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(20000);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt;&lt;/code&gt; also publishes a &lt;code class="csharp"&gt;&lt;span class="type"&gt;CancellationToken&lt;/span&gt;&lt;/code&gt; that is canceled when ASP.NET notifies us that our AppDomain is shutting down. &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code can use this to abort processing (when it is safe to do so):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt;.Run(&lt;span class="keyword"&gt;async&lt;/span&gt; () =&amp;gt;
{
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.Delay(20000, &lt;span class="type"&gt;BackgroundTaskManager&lt;/span&gt;.Shutdown);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One important note about background operations: &lt;b&gt;exceptions are ignored!&lt;/b&gt; So if you want to catch errors and toss a "hail Mary" to ETW or the Event Log, you'll need to do so with a &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;try&lt;/span&gt; ... &lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;/code&gt; inside each operation. In the example above, if the AppDomain is recycled while the operation is doing the delay, the cancellation exception will be raised from the operation and then it will be ignored.&lt;/p&gt;

&lt;p&gt;As a final reminder, do &lt;b&gt;not&lt;/b&gt; put critical processing in a background operation like this. It works fine for the "easy" case (ASP.NET gets a gentle request to shut down the AppDomain and nicely notifies the background operations, which all complete or cancel well within the timeout window), but it can fall down if anything goes wrong (IIS is killed, or the background operations continue too long due to another process hogging the CPU, or there's a power outage, etc).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4189020452189248597/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html#comment-form' title='21 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' title='Returning Early from ASP.NET Requests'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>21</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7053437012462397768</id><published>2012-12-06T12:30:00.000-05:00</published><updated>2013-05-17T11:08:09.159-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Don't Block in Asynchronous Code</title><content type='html'>&lt;p&gt;One of my most famous blog posts is &lt;a href="http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html"&gt;Don't Block on Asynchronous Code&lt;/a&gt;, which took an in-depth look at how a synchronous method could deadlock if it blocked on asynchronous code (e.g., using &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Wait&lt;/code&gt; or &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Result&lt;/code&gt;). This is a fairly common beginner's mistake.&lt;/p&gt;

&lt;p&gt;Recently, I came across another deadlock situation: in some cases, an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method may deadlock if it blocks on a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;&lt;/code&gt;. I found this behavior surprising and &lt;a href="https://connect.microsoft.com/VisualStudio/feedback/details/769322/waiting-on-task-can-deadlock-in-free-threaded-context"&gt;reported it as a bug&lt;/a&gt;. I suspect it won't be fixed because it's a very uncommon situation and the easiest fix would have a negative impact on performance for &lt;i&gt;all&lt;/i&gt; &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; code.&lt;/p&gt;

&lt;blockquote&gt;This deadlock scenario is due to an undocumented implementation detail. This post is accurate as of the initial release of .NET 4.5 in 2012. Microsoft may change this behavior in the future.&lt;/blockquote&gt;

&lt;p&gt;This code will deadlock in a free-threaded context (e.g., a Console application, unit test, or &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Run&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Creates a new task on the thread pool and waits for it.&lt;/span&gt;
&lt;span class="comment"&gt;// This method will deadlock if called in a free-threaded context.&lt;/span&gt;
&lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; Test()
{
  &lt;span class="comment"&gt;// Indicates the task has been started and is ready.&lt;/span&gt;
  &lt;span class="keyword"&gt;var&lt;/span&gt; taskReady = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;TaskCompletionSource&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;object&lt;/span&gt;&amp;gt;();

  &lt;span class="comment"&gt;// Start the task, running on a thread pool thread.&lt;/span&gt;
  &lt;span class="keyword"&gt;var&lt;/span&gt; task = &lt;span class="type"&gt;Task&lt;/span&gt;.Run(() =&amp;gt;
  {
    &lt;span class="comment"&gt;// Spend a bit of time getting ready.&lt;/span&gt;
    &lt;span class="type"&gt;Thread&lt;/span&gt;.Sleep(100);

    &lt;span class="comment"&gt;// Let the Test method know we&amp;#39;ve been started and are ready.&lt;/span&gt;
    taskReady.SetResult(&lt;span class="keyword"&gt;null&lt;/span&gt;);

    &lt;span class="comment"&gt;// Spend a bit more time doing nothing in particular.&lt;/span&gt;
    &lt;span class="type"&gt;Thread&lt;/span&gt;.Sleep(100);
  });

  &lt;span class="comment"&gt;// Wait for the task to be started and ready.&lt;/span&gt;
  &lt;span class="keyword"&gt;await&lt;/span&gt; taskReady.Task;

  &lt;span class="comment"&gt;// Block until the task is completed.&lt;/span&gt;
  task.Wait();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do you see the problem? I didn't.&lt;/p&gt;

&lt;p&gt;The deadlock is due to an optimization in the implementation of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;: &lt;b&gt;an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method's continuation is scheduled with &lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskContinuationOptions&lt;/span&gt;.ExecuteSynchronously&lt;/code&gt;&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;So, stepping through the example code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We kick off a task running on the thread pool. So far, so good.&lt;/li&gt;
&lt;li&gt;The thread pool task does a bit of "work". This is just to make sure &lt;code class="csharp"&gt;taskReady&lt;/code&gt; is awaited before we call &lt;code class="csharp"&gt;SetResult&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Meanwhile, the &lt;code class="csharp"&gt;Test&lt;/code&gt; method continues running and awaits &lt;code class="csharp"&gt;taskReady&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After a short time, the thread pool task completes its "work" and invokes &lt;code class="csharp"&gt;SetResult&lt;/code&gt;. This is where things get interesting! &lt;code class="csharp"&gt;Test&lt;/code&gt; is &lt;i&gt;already awaiting&lt;/i&gt; &lt;code class="csharp"&gt;taskReady&lt;/code&gt; &lt;b&gt;and&lt;/b&gt; its continuation is expecting to run in a thread pool context. In this case, &lt;code class="csharp"&gt;SetResult&lt;/code&gt; will &lt;i&gt;not&lt;/i&gt; asynchronously schedule the continuation; it will execute it directly.&lt;/li&gt;
&lt;li&gt;The &lt;code class="csharp"&gt;Test&lt;/code&gt; method continues execution, only it's no longer independent from the thread pool task. Instead, &lt;code class="csharp"&gt;Test&lt;/code&gt; is executing on that same thread pool thread. So when we proceed to &lt;code class="csharp"&gt;Wait&lt;/code&gt; on the thread pool task, we are blocking on something that we're supposed to be completing.&lt;/li&gt;
&lt;li&gt;As a result, the last &lt;code class="csharp"&gt;Sleep&lt;/code&gt; never actually runs. The thread pool task never completes, and &lt;code class="csharp"&gt;Test&lt;/code&gt; never completes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you place this same method in a GUI project or ASP.NET project, you won't see a deadlock. The difference is in step 4: the continuation must be run in the captured &lt;code class="csharp"&gt;&lt;span class="type"&gt;SynchronizationContext&lt;/span&gt;&lt;/code&gt;, but it's being scheduled by a thread pool thread; so in this case &lt;code class="csharp"&gt;SetResult&lt;/code&gt; will schedule the continuation to run asynchronously instead of executing it directly.&lt;/p&gt;

&lt;p&gt;One fun twist to this scenario is that if we use &lt;code class="csharp"&gt;ConfigureAwait&lt;/code&gt;, then the method will &lt;i&gt;consistently&lt;/i&gt; deadlock, regardless of its initial context:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Creates a new task on the thread pool and waits for it.&lt;/span&gt;
&lt;span class="comment"&gt;// This method will always deadlock.&lt;/span&gt;
&lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; Test()
{
  &lt;span class="comment"&gt;// Indicates the task has been started and is ready.&lt;/span&gt;
  &lt;span class="keyword"&gt;var&lt;/span&gt; taskReady = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;TaskCompletionSource&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;object&lt;/span&gt;&amp;gt;();

  &lt;span class="comment"&gt;// Start the task, running on a thread pool thread.&lt;/span&gt;
  &lt;span class="keyword"&gt;var&lt;/span&gt; task = &lt;span class="type"&gt;Task&lt;/span&gt;.Run(() =&amp;gt;
  {
    &lt;span class="comment"&gt;// Spend a bit of time getting ready.&lt;/span&gt;
    &lt;span class="type"&gt;Thread&lt;/span&gt;.Sleep(100);

    &lt;span class="comment"&gt;// Let the Test method know we&amp;#39;ve been started and are ready.&lt;/span&gt;
    taskReady.SetResult(&lt;span class="keyword"&gt;null&lt;/span&gt;);

    &lt;span class="comment"&gt;// Spend a bit more time doing nothing in particular.&lt;/span&gt;
    &lt;span class="type"&gt;Thread&lt;/span&gt;.Sleep(100);
  });

  &lt;span class="comment"&gt;// Wait for the task to be started and ready.&lt;/span&gt;
  &lt;span class="keyword"&gt;await&lt;/span&gt; taskReady.Task&lt;span class="highlight"&gt;.ConfigureAwait(continueOnCapturedContext: &lt;span class="keyword"&gt;false&lt;/span&gt;)&lt;/span&gt;;

  &lt;span class="comment"&gt;// Block until the task is completed.&lt;/span&gt;
  task.Wait();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most people would not write code like this. It's very unnatural to call &lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.Wait&lt;/code&gt; in an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method; the natural code would use &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; instead. I only came across this behavior while writing unit tests for my &lt;a href="http://nitoasyncex.codeplex.com/"&gt;AsyncEx&lt;/a&gt; library; these unit tests can get pretty complex and can involve a mixture of synchronous and asynchronous code.&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;img border="0" height="317" width="298" src="http://1.bp.blogspot.com/-DTcbqCj8MC4/ULq-q935DKI/AAAAAAAAHoU/T7mXwVAUieA/s1600/Method%2Bno%2BBlocking.png" /&gt;&lt;/div&gt;

&lt;p&gt;In conclusion, we already knew &lt;a href="http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html"&gt;not to block &lt;b&gt;on&lt;/b&gt; asynchronous code&lt;/a&gt;; now we know not to block &lt;b&gt;in&lt;/b&gt; asynchronous code either!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7053437012462397768/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/12/dont-block-in-asynchronous-code.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7053437012462397768'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7053437012462397768'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/dont-block-in-asynchronous-code.html' title='Don&apos;t Block in Asynchronous Code'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-DTcbqCj8MC4/ULq-q935DKI/AAAAAAAAHoU/T7mXwVAUieA/s72-c/Method%2Bno%2BBlocking.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8683353737054453315</id><published>2012-11-15T12:30:00.000-05:00</published><updated>2014-05-07T20:45:56.923-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='NuGet'/><title type='text'>Portable Class Library Enlightenment / Adaptation</title><content type='html'>&lt;blockquote&gt;&lt;b&gt;Update, 2014-05-07: &lt;/b&gt;I have been giving it a lot of thought, and I have decided that the &lt;a href="http://log.paulbetts.org/the-bait-and-switch-pcl-trick/"&gt;Bait-and-Switch approach&lt;/a&gt; described by Paul Betts is a better solution than the one described below. This blog post is retained for historical purposes.&lt;/blockquote&gt;

&lt;p&gt;I have a long-standing interest in &lt;a href="http://msdn.microsoft.com/en-us/library/gg597391.aspx"&gt;portable class libraries (PCL)&lt;/a&gt;, because most of my open-source contributions are widely-applicable libraries (including &lt;a href="http://comparers.codeplex.com/"&gt;Comparers&lt;/a&gt;, &lt;a href="http://arraysegments.codeplex.com/"&gt;ArraySegments&lt;/a&gt;, and of course &lt;a href="http://nitoasyncex.codeplex.com/"&gt;AsyncEx&lt;/a&gt;). This post is an explanation of a technique that I learned from Rx; it's useful for any PCL that is actually a &lt;i&gt;library&lt;/i&gt; (i.e., not a portable &lt;i&gt;application&lt;/i&gt;).&lt;/p&gt;

&lt;blockquote&gt;Portable class libraries are awesome. Now that NuGet supports them, every library writer should join in!&lt;/blockquote&gt;

&lt;h4&gt;The Problem&lt;/h4&gt;

&lt;p&gt;Portable Class Libraries enable you to create a single binary that runs on several (.NET) platforms. Unfortunately, it uses the "least common denominator" approach, which means your PCL is greatly constrained in what it can do. In order to "step outside" these restrictions, you need some way for a platform-specific assembly to provide functionality to your PCL core. The obvious answer is to use inversion of control, but how are the (platform-specific) implementations created and passed to your portable code?&lt;/p&gt;

&lt;h4&gt;Possible Solutions&lt;/h4&gt;

&lt;p&gt;There are several ways to do this. &lt;a href="http://blogs.msdn.com/b/dsplaisted/archive/2012/08/27/how-to-make-portable-class-libraries-work-for-you.aspx"&gt;Daniel Plaisted has a great blog post&lt;/a&gt; that gives an overview of different solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Manual dependency injection (passing interface implementations into constructors). Daniel's classic "Disentaglement" demo uses this approach as he describes &lt;a href="http://channel9.msdn.com/Events/Build/2012/3-004"&gt;in his //build/ talk&lt;/a&gt;. This is OK if your PCL just has a few large classes (e.g., ViewModels) which are always the "entry point" to your PCL. It's not so good if your PCL is more of a generic library.&lt;/li&gt;
&lt;li&gt;Real dependency injection. The disadvantage to this approach is that it restricts all users of a PCL to a specific DI provider.&lt;/li&gt;
&lt;li&gt;Service locator (static variables holding the interface implementations). This approach is described in &lt;a href="http://msdn.microsoft.com/en-us/library/gg597391.aspx"&gt;the official MSDN documentation (section "Platform Abstraction")&lt;/a&gt;. This requires all code using the PCL to "wire up" its own implementations.&lt;/li&gt;
&lt;li&gt;Platform enlightenment / adaptation libraries (extra assemblies loaded via reflection). This is the approach described in this blog post.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first three approaches depend on the &lt;i&gt;consumer&lt;/i&gt; of the library implementing the platform services (or at least instantiating them) and providing them to the portable library:&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;img border="0" height="427" width="384" src="http://2.bp.blogspot.com/-3JWoBwx4RlQ/UJwzuTsWRVI/AAAAAAAAHm0/eCz3C3M6kF0/s1600/Blog.png" /&gt;
&lt;/div&gt;

&lt;p&gt;This is fine if your PCL is just the core of a portable &lt;i&gt;application&lt;/i&gt;, like Daniel's "Disentanglement" application, where the PCL contains the logic but its "entry points" are just a handful of ViewModels.&lt;/p&gt;

&lt;p&gt;But I'm not a fan of this. When I distribute a library, I want users to just add it via NuGet and start using it; requiring "startup" code is a big barrier to adoption.&lt;/p&gt;

&lt;p&gt;AFAIK, the Rx team was the first to solve this problem. They describe their "Platform Enlightenment" approach well &lt;a href="http://blogs.msdn.com/b/rxteam/archive/2012/08/15/reactive-extensions-v2-0-has-arrived.aspx"&gt;on their blog (section "Intermezzo - The refactored API surface")&lt;/a&gt;. Members of the PCL team have referred to this technique as "Platform Adaptation".&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;img border="0" height="395" width="484" src="http://3.bp.blogspot.com/-N-9KacyqmB8/UJw7vF_cs4I/AAAAAAAAHnU/ASLl4mL2ptg/s1600/Blog%2B3.png" /&gt;
&lt;/div&gt;

&lt;p&gt;The "dashed arrow" in the diagram above means that the user application has a reference to the platform services library, but does not actually use it. The "magic arrow" does not exist at compile time (so there's no actual reference there); this will be explained later.&lt;/p&gt;

&lt;h4&gt;Enabling Enlightenment / Adaptation&lt;/h4&gt;

&lt;p&gt;You &lt;i&gt;could&lt;/i&gt; choose to have all your "platform services" defined in a single interface, but I think it's cleaner to group your platform services into multiple interfaces. In my code, I call these platform services "enlightenments". Each "enlightenment" is an interface that has a platform-specific implementation &lt;b&gt;and&lt;/b&gt; a default implementation.&lt;/p&gt;

&lt;p&gt;Let's start out with a simple enlightenment called "Bob". We'll create a portable class library (called "MyLibrary") that will act as our Portable Core and define the "Bob" enlightenment interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// Provides Bob-related services.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;interface&lt;/span&gt; &lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt;
{
    &lt;span class="comment"&gt;/// Says &amp;quot;hi&amp;quot;&lt;/span&gt;
    &lt;span class="keyword"&gt;string&lt;/span&gt; SayHi();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;As an aside, my enlightenment-related types are mostly &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&lt;/code&gt;, but they are within a special namespace, which indicates to end-users that they are not part of the normal API.&lt;/blockquote&gt;

&lt;p&gt;Multiple enlightenment types means that it's useful to have an "enlightenment provider" (also platform-specific, with a default backup), which just creates instances of the enlightenments. The &lt;code class="csharp"&gt;&lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;&lt;/code&gt; type is defined in the Portable Core:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// An enlightenment provider, which creates enlightenments on demand.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;interface&lt;/span&gt; &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;
{
    &lt;span class="comment"&gt;/// Creates an enlightenment of the specified type.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of enlightenment to create.&amp;lt;/typeparam&amp;gt;&lt;/span&gt;
    T CreateEnlightenment&amp;lt;T&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To consume the enlightenments, I use an "enlightenment manager" type, which I just call &lt;code class="csharp"&gt;&lt;span class="type"&gt;Enlightenment&lt;/span&gt;&lt;/code&gt; (also defined in the Portable Core):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// Provides static members to access enlightenments.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;Enlightenment&lt;/span&gt;
{
    &lt;span class="comment"&gt;/// Loads the &amp;lt;c&amp;gt;PlatformEnlightenmentProvider&amp;lt;/c&amp;gt; if it can be found; otherwise, returns an instance of &amp;lt;see cref=&amp;quot;DefaultEnlightenmentProvider&amp;quot;/&amp;gt;.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt; CreateProvider();

    &lt;span class="comment"&gt;/// Cached instance of the platform enlightenment provider. This is an instance of the default enlightenment provider if the platform couldn&amp;#39;t be found.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt; platform;

    &lt;span class="comment"&gt;/// Returns the platform enlightenment provider, if it could be found; otherwise, returns the default enlightenment provider.&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt; Platform
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (platform == &lt;span class="keyword"&gt;null&lt;/span&gt;)
                &lt;span class="type"&gt;Interlocked&lt;/span&gt;.CompareExchange(&lt;span class="keyword"&gt;ref&lt;/span&gt; platform, CreateProvider(), &lt;span class="keyword"&gt;null&lt;/span&gt;);
            &lt;span class="keyword"&gt;return&lt;/span&gt; platform;
        }
    }

    &lt;span class="comment"&gt;/// Cached instance of the Bob enlightenment.&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt; bob;

    &lt;span class="comment"&gt;/// Returns the Bob enlightenment.&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt; Bob
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (bob == &lt;span class="keyword"&gt;null&lt;/span&gt;)
                &lt;span class="type"&gt;Interlocked&lt;/span&gt;.CompareExchange(&lt;span class="keyword"&gt;ref&lt;/span&gt; bob, Platform.CreateEnlightenment&amp;lt;&lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt;&amp;gt;(), &lt;span class="keyword"&gt;null&lt;/span&gt;);
            &lt;span class="keyword"&gt;return&lt;/span&gt; bob;
        }
    }

    ... &lt;span class="comment"&gt;// Other enlightenments just like Bob&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(We'll come back to the implementation of &lt;code class="csharp"&gt;CreateProvider&lt;/code&gt; in a moment).&lt;/p&gt;

&lt;p&gt;This setup means that from within my PCL Core, I can consume enlightenments easily:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;MyPortableClass&lt;/span&gt;
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; MyPortableClass()
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; word = &lt;span class="type"&gt;Enlightenment&lt;/span&gt;.Bob.SayHi();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that my enlightenment manager implementation is forcing some assumptions on both the enlightenment provider &lt;i&gt;and&lt;/i&gt; every enlightenment: they are conceptually singletons, except that they &lt;i&gt;can&lt;/i&gt; be constructed multiple times (due to race conditions); in that case, only one instance will be used and all extra instances will be discarded. These are not difficult assumptions to satisfy, but you do need to be aware of them.&lt;/p&gt;

&lt;h5&gt;The Default Provider&lt;/h5&gt;

&lt;p&gt;Having a default implementation is important! If an application developer removes your platform-specific assembly from their project's references, then you will end up at runtime with just your PCL core, and you need to handle that scenario gracefully.&lt;/p&gt;

&lt;p&gt;In this case, you'll need a default provider to step in and provide some kind of reasonable default behavior. I'm not a big fan of &lt;code class="csharp"&gt;&lt;span class="type"&gt;NotSupportedException&lt;/span&gt;&lt;/code&gt;, and I recommend avoiding it as much as possible, but in these cases it may just be necessary.&lt;/p&gt;

&lt;p&gt;For our simple "Bob" enlightenment, let's just return an empty string as our default behavior. Again in the Portable Core:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// The default enlightenment provider, used when the platform enlightenment provider could not be found.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;DefaultEnlightenmentProvider&lt;/span&gt; : &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;
{
    T &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;.CreateEnlightenment&amp;lt;T&amp;gt;()
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; type = &lt;span class="keyword"&gt;typeof&lt;/span&gt;(T);
        &lt;span class="keyword"&gt;if&lt;/span&gt; (type == &lt;span class="keyword"&gt;typeof&lt;/span&gt;(IBobEnlightenment))
            &lt;span class="keyword"&gt;return&lt;/span&gt; (T)(&lt;span class="keyword"&gt;object&lt;/span&gt;)&lt;span class="keyword"&gt;new&lt;/span&gt; BobEnlightenment();
        ... &lt;span class="comment"&gt;// other enlightenments.&lt;/span&gt;

        &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; NotImplementedException();
    }

    &lt;span class="comment"&gt;/// The default Bob enlightenment, which does nothing.&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;BobEnlightenment&lt;/span&gt; : &lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;string&lt;/span&gt; &lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt;.SayHi()
        {
            &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt;.Empty;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually, there's some form of reflection going on in a default enlightenment instead of being this simple.&lt;/p&gt;

&lt;h5&gt;The Platform Providers&lt;/h5&gt;

&lt;p&gt;At this point, we create providers for each of the platforms that need one. So let's assume that "Bob" wants to say hi from a specific provider, like .NET 4.5.&lt;/p&gt;

&lt;p&gt;First, we create a .NET 4.5 assembly. I usually name the &lt;i&gt;project&lt;/i&gt; something like "MyLibrary.Enlightenment (NET45)" but ensure the assembly name is just "MyLibrary.Enlightenment". Then we reference our portable core and define the platform-specific enlightenment provider and enlightenments:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// The platform enlightenment provider for .NET 4.5.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;EnlightenmentProvider&lt;/span&gt; : &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;
{
    T &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;.CreateEnlightenment&amp;lt;T&amp;gt;()
    {
        &lt;span class="keyword"&gt;var&lt;/span&gt; type = &lt;span class="keyword"&gt;typeof&lt;/span&gt;(T);
        &lt;span class="keyword"&gt;if&lt;/span&gt; (type == &lt;span class="keyword"&gt;typeof&lt;/span&gt;(&lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt;))
            &lt;span class="keyword"&gt;return&lt;/span&gt; (T)(&lt;span class="keyword"&gt;object&lt;/span&gt;)&lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;BobEnlightenment&lt;/span&gt;();
        ... &lt;span class="comment"&gt;// other enlightenments.&lt;/span&gt;

        &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;NotImplementedException&lt;/span&gt;();
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;BobEnlightenment&lt;/span&gt; : &lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;string&lt;/span&gt; &lt;span class="type"&gt;IBobEnlightenment&lt;/span&gt;.SayHi()
        {
            &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="string"&gt;&amp;quot;Hello from .NET 4.5!&amp;quot;&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;The Secret Sauce&lt;/h5&gt;

&lt;p&gt;Now, let's take a look at that &lt;code class="csharp"&gt;CreateProvider&lt;/code&gt; method in the &lt;code class="csharp"&gt;&lt;span class="type"&gt;Enlightenment&lt;/span&gt;&lt;/code&gt; class. This is the "magic arrow" from my diagram:&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;img border="0" height="395" width="484" src="http://3.bp.blogspot.com/-N-9KacyqmB8/UJw7vF_cs4I/AAAAAAAAHnU/ASLl4mL2ptg/s1600/Blog%2B3.png" /&gt;
&lt;/div&gt;

&lt;p&gt;What we want to do is determine which assembly contains the platform-specific enlightenment provider, and create an instance of that type.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt; CreateProvider()
{
    &lt;span class="comment"&gt;// Starting from our core assembly, determine the matching enlightenment assembly (with the same version/strong name if applicable)&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; enlightenmentAssemblyName = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;AssemblyName&lt;/span&gt;(&lt;span class="keyword"&gt;typeof&lt;/span&gt;(&lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;).Assembly.FullName)
    {
        Name = &lt;span class="string"&gt;&amp;quot;MyLibrary.Enlightenment&amp;quot;&lt;/span&gt;,
    };

    &lt;span class="comment"&gt;// Attempt to load the enlightenment provider from that assembly.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; enlightenmentProviderType = &lt;span class="type"&gt;Type&lt;/span&gt;.GetType(&lt;span class="string"&gt;&amp;quot;MyLibrary.Internal.PlatformEnlightenment.EnlightenmentProvider, &amp;quot;&lt;/span&gt; + enlightenmentAssemblyName.FullName, &lt;span class="keyword"&gt;false&lt;/span&gt;);

    &lt;span class="keyword"&gt;if&lt;/span&gt; (enlightenmentProviderType == &lt;span class="keyword"&gt;null&lt;/span&gt;)
        &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DefaultEnlightenmentProvider&lt;/span&gt;();
    &lt;span class="keyword"&gt;else&lt;/span&gt;
        &lt;span class="keyword"&gt;return&lt;/span&gt; (&lt;span class="type"&gt;IEnlightenmentProvider&lt;/span&gt;)&lt;span class="type"&gt;Activator&lt;/span&gt;.CreateInstance(enlightenmentProviderType);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;Distribution Notes&lt;/h5&gt;

&lt;p&gt;NuGet is my distribution mechanism of choice. With the ability to &lt;a href="http://docs.nuget.org/docs/release-notes/nuget-2.0"&gt;group dependencies by target frameworks&lt;/a&gt; and with &lt;a href="http://docs.nuget.org/docs/release-notes/nuget-2.1"&gt;full support for portable libraries&lt;/a&gt; (including grouping dependencies by portable targets), you have a very flexible system for distributing a portable library. It's easy to create a single package that contains your portable core along with all its platform enlightenments.&lt;/p&gt;

&lt;p&gt;Both the portable core assembly and the appropriate platform enlightenment assembly should be included when the package is installed into a project for a specific platform. Only include the portable core assembly when the package is installed into a portable library project. This enables others to create portable libraries dependent on your portable library; when their portable library is installed into a project for a specific platform, your package will bring in your enlightenment assembly at that time.&lt;/p&gt;

&lt;p&gt;Here's a very simple example, if MyLibrary had a portable core supporting .NET 4.5 and Windows Store, with different enlightenment assemblies for each:&lt;/p&gt;

&lt;pre&gt;&lt;code class="xml"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;package&amp;gt;
 &amp;lt;metadata&amp;gt;
  &amp;lt;id&amp;gt;MyLibrary&amp;lt;/id&amp;gt;
 &amp;lt;/metadata&amp;gt;
 &amp;lt;files&amp;gt;
  &amp;lt;!-- .NET 4.5 --&amp;gt;
  &amp;lt;!-- Core + Enlightenment --&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary\bin\Release\MyLibrary.dll&amp;quot; target=&amp;quot;lib\net45&amp;quot; /&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary\bin\Release\MyLibrary.xml&amp;quot; target=&amp;quot;lib\net45&amp;quot; /&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary.Enlightenment (NET45)\bin\Release\MyLibrary.Enlightenment.dll&amp;quot; target=&amp;quot;lib\net45&amp;quot; /&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary.Enlightenment (NET45)\bin\Release\MyLibrary.Enlightenment.xml&amp;quot; target=&amp;quot;lib\net45&amp;quot; /&amp;gt;

  &amp;lt;!-- Windows Store --&amp;gt;
  &amp;lt;!-- Core + Enlightenment --&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary\bin\Release\MyLibrary.dll&amp;quot; target=&amp;quot;lib\win8&amp;quot; /&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary\bin\Release\MyLibrary.xml&amp;quot; target=&amp;quot;lib\win8&amp;quot; /&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary.Enlightenment (Win8)\bin\Release\MyLibrary.Enlightenment.dll&amp;quot; target=&amp;quot;lib\win8&amp;quot; /&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary.Enlightenment (Win8)\bin\Release\MyLibrary.Enlightenment.xml&amp;quot; target=&amp;quot;lib\win8&amp;quot; /&amp;gt;

  &amp;lt;!-- Portable libraries: .NET 4.5, Windows Store --&amp;gt;
  &amp;lt;!-- Core, no Enlightenment --&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary\bin\Release\MyLibrary.dll&amp;quot; target=&amp;quot;lib\portable-net45+win8&amp;quot; /&amp;gt;
  &amp;lt;file src=&amp;quot;MyLibrary\bin\Release\MyLibrary.xml&amp;quot; target=&amp;quot;lib\portable-net45+win8&amp;quot; /&amp;gt;
 &amp;lt;/files&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;It's Best to Be Sure&lt;/h5&gt;

&lt;p&gt;Our &lt;code class="csharp"&gt;CreateProvider&lt;/code&gt; should be able to load the enlightenment in normal situations. But we all know how other developers can mess things up, right? ;)  What if they're doing some funky assembly loading from subdirectories so that we can't find the enlightenment?&lt;/p&gt;

&lt;p&gt;We can provide some level of assurance by allowing a single line of "startup" code. Of course, this is optional; &lt;code class="csharp"&gt;CreateProvider&lt;/code&gt; does not &lt;i&gt;need&lt;/i&gt; it in most cases, and we always have the default enlightenments to fall back on.&lt;/p&gt;

&lt;p&gt;In each of my platform enlightenment assemblies, I define a single method in a normal namespace (i.e., not hidden from the user):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// Verifies platform enlightenment.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; &lt;span class="type"&gt;EnlightenmentVerification&lt;/span&gt;
{
    &lt;span class="comment"&gt;/// Returns a value indicating whether the correct platform enlightenment provider has been loaded.&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; EnsureLoaded()
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="type"&gt;Enlightenment&lt;/span&gt;.Platform &lt;span class="keyword"&gt;is&lt;/span&gt; &lt;span class="type"&gt;EnlightenmentProvider&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method simply checks to make sure its platform enlightenment is the one being used. Just to be sure.&lt;/p&gt;

&lt;h4&gt;Tips&lt;/h4&gt;

&lt;p&gt;Use as many enlightenments as you need. I have a total of six enlightenments for my AsyncEx library. Some of them are nearly as simple as the "Bob" enlightenment; others are more complex.&lt;/p&gt;

&lt;p&gt;If a platform would just use the default enlightenments anyway, then there's no point in creating a platform enlightenment provider for it.&lt;/p&gt;

&lt;p&gt;Only enlighten the behavior you need. My &lt;code class="csharp"&gt;&lt;span class="type"&gt;Lazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt; enlightenment only has one constructor and two properties; it only supports one thread safety mode and is allowed to invoke its factory while holding a lock. This is significantly simpler than the Microsoft &lt;code class="csharp"&gt;&lt;span class="type"&gt;Lazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;, but my Portable Core doesn't need any more than that.&lt;/p&gt;

&lt;p&gt;I make my default enlightenments accessible to other enlightenment providers (they're public nested classes). This enables a platform to decide to implement some enlightenments but return the default enlightenment for others.&lt;/p&gt;

&lt;p&gt;Most default enlightenments need to use reflection. It's best to use reflection only on startup and cache delegates for future use. I use the "compile &lt;code class="csharp"&gt;&lt;span class="type"&gt;Expression&lt;/span&gt;&lt;/code&gt; to a delegate" technique &lt;a href="http://stackoverflow.com/questions/7932259/efficient-use-of-reflection-in-c-sharp/7932574#7932574"&gt;described by Eric Lippert in this SO answer&lt;/a&gt;. Just be sure to watch your exceptions when doing the reflection!&lt;/p&gt;

&lt;p&gt;Speaking of reflection, spend some time thinking about whether you &lt;i&gt;want&lt;/i&gt; to upgrade behavior or not. This is particularly true for .NET 4.5, which is an in-place upgrade to .NET 4.0. As one example, I have an exception enlightenment on .NET 4.0 that will upgrade to &lt;code class="csharp"&gt;&lt;span class="type"&gt;ExceptionDispatchInfo&lt;/span&gt;&lt;/code&gt; via reflection if it's running on .NET 4.5; since the .NET 4.0 equivalent is a hack, I always upgrade if I can. On the other hand, I have a tracing enlightenment on .NET 4.5 using ETW, but the tracing enlightenment on .NET 4.0 will use &lt;code class="csharp"&gt;&lt;span class="type"&gt;TraceSource&lt;/span&gt;&lt;/code&gt; even if .NET 4.5 is present; this ensures the end user always knows where to look for trace output based on their &lt;i&gt;target&lt;/i&gt; platform, not what's available at &lt;i&gt;runtime&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Enlightenment assemblies can be difficult to test if they use reflection for upgrades. Ideally, you would test a combination of &lt;i&gt;target&lt;/i&gt; platforms with &lt;i&gt;runtime&lt;/i&gt; capabilities, and do that testing for both the platform-specific enlightenments and default enlightenments. Consider a distributed testing system.&lt;/p&gt;

&lt;p&gt;If you use enlightenments the way I've described in this blog post, keep in mind that they are conceptually singletons. This means that if you're enlightening a &lt;i&gt;type&lt;/i&gt; (e.g., &lt;code class="csharp"&gt;&lt;span class="type"&gt;Lazy&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;), you first need to define a portable &lt;i&gt;interface&lt;/i&gt; and then have your enlightenment act as a &lt;i&gt;factory&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;It's perfectly fine to have your platform enlightenment assemblies be portable libraries themselves. My AsyncEx library uses the same portable assembly for enlightenment on .NET 4.5 and Windows Store.&lt;/p&gt;

&lt;p&gt;If you're modifying an existing library to have a portable core, you should keep open to refactoring. In particular, if you implement interfaces that aren't available on some of your target platforms, those types may be a better fit for a "slightly less portable" additional assembly. I did this with the Dataflow types in my AsyncEx library; I have a "fully portable" core (Nito.AsyncEx.dll) and a "less portable" additional assembly (Nito.AsyncEx.Dataflow.dll). This is mostly transparent to users (at compile time) because both assemblies are distributed in the same NuGet package.&lt;/p&gt;

&lt;h4&gt;References&lt;/h4&gt;

&lt;p&gt;Daniel Plaisted's blog post &lt;a href="http://blogs.msdn.com/b/dsplaisted/archive/2012/08/27/how-to-make-portable-class-libraries-work-for-you.aspx"&gt;How to Make Portable Class Libraries Work for You&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://blogs.msdn.com/b/rxteam/archive/2012/08/15/reactive-extensions-v2-0-has-arrived.aspx"&gt;original Rx team blog post describes their "Platform Enlightenment" (section "Intermezzo - The refactored API surface")&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://pclcontrib.codeplex.com/SourceControl/changeset/view/82200"&gt;Portable Class Libraries Contrib project has a "Platform Adaptation" implementation (under Source/Portable.Runtime/Adaptation)&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8683353737054453315/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8683353737054453315'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8683353737054453315'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html' title='Portable Class Library Enlightenment / Adaptation'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-3JWoBwx4RlQ/UJwzuTsWRVI/AAAAAAAAHm0/eCz3C3M6kF0/s72-c/Blog.png' height='72' width='72'/><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4014749956412457433</id><published>2012-11-08T13:00:00.000-05:00</published><updated>2012-11-08T13:00:04.788-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Personal'/><title type='text'>And I'm Back!</title><content type='html'>&lt;p&gt;I've been out of touch the last month. A whole lot of stuff going on!&lt;/p&gt;

&lt;p&gt;I gave notice at my last job and spent a crazy amount of time training my replacements, taking three weeks instead of the customary two. I hadn't realized I had so many responsibilities: I was the sole developer/maintainer for 6 .NET libraries, 11 .NET applications, 16 firmware projects, and a bit of miscellaneous IT (running the Mercurial server)! Wow.&lt;/p&gt;

&lt;p&gt;Then, shortly after I started at my new job, my son was in the hospital for a week (unfortunately cancelling our anniversary trip), and then my wife and I took a birthday trip to Canada the next week. Good thing my new boss is a patient guy!&lt;/p&gt;

&lt;p&gt;Oh, and I refinanced my house somewhere in there, too.&lt;/p&gt;

&lt;p&gt;Anyway, I've resumed "normal" life - more or less - this last week or so, and will hopefully be able to resume blogging with some regularity.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4014749956412457433/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/11/and-im-back.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4014749956412457433'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4014749956412457433'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/and-im-back.html' title='And I&apos;m Back!'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526</id><published>2012-11-08T12:30:00.000-05:00</published><updated>2012-11-08T12:30:03.618-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async Producer/Consumer Queue using Dataflow</title><content type='html'>&lt;p&gt;Today we'll build on what we learned about Dataflow to build an async-compatible producer/consumer queue.&lt;/p&gt;

&lt;p&gt;A &lt;i&gt;producer/consumer queue&lt;/i&gt; is a classic problem in multithreading: you have one (or more) "producers" which are producing data, you have one (or more) "consumers" which are consuming data, and you need some kind of data structure that will receive data from the producer(s) and provide it to the consumer(s).&lt;/p&gt;

&lt;p&gt;Using TPL Dataflow, this is incredibly easy: a &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt; is an async-ready producer/consumer queue. We'll start with the simple example of a single producer and consumer, and build from there.&lt;/p&gt;

&lt;p&gt;Our producer can just enqueue a sequence of values, and then mark the queue as complete:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Produce(&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; queue, &lt;span class="type"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; values)
{
    &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; &lt;span class="keyword"&gt;value&lt;/span&gt; &lt;span class="keyword"&gt;in&lt;/span&gt; values)
    {
        queue.Post(&lt;span class="keyword"&gt;value&lt;/span&gt;);
    }

    queue.Complete();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, the consumer can just await until a value is ready in the queue, and then add it to its collection of received values. Note that this works only if we have a single consumer; if we have multiple consumers, then they would all see the output available, but they wouldn't all be able to receive it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;&amp;gt; Consume(&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; queue)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; ret = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;List&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();
    &lt;span class="keyword"&gt;while&lt;/span&gt; (&lt;span class="keyword"&gt;await&lt;/span&gt; queue.OutputAvailableAsync())
    {
        ret.Add(&lt;span class="keyword"&gt;await&lt;/span&gt; queue.ReceiveAsync());
    }

    &lt;span class="keyword"&gt;return&lt;/span&gt; ret;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can wrap these up in a simple unit test:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;[&lt;span class="type"&gt;TestMethod&lt;/span&gt;]
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; ConsumerReceivesCorrectValues()
{
    &lt;span class="comment"&gt;// Define the mesh.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();

    &lt;span class="comment"&gt;// Start the producer and consumer.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; values = &lt;span class="type"&gt;Enumerable&lt;/span&gt;.Range(0, 10);
    Produce(queue, values);
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumer = Consume(queue);

    &lt;span class="comment"&gt;// Wait for everything to complete.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(consumer, queue.Completion);

    &lt;span class="comment"&gt;// Ensure the consumer got what the producer sent (in the correct order).&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; results = &lt;span class="keyword"&gt;await&lt;/span&gt; consumer;
    &lt;span class="type"&gt;Assert&lt;/span&gt;.IsTrue(results.SequenceEqual(values));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Throttling&lt;/h4&gt;

&lt;p&gt;A common requirement for producer/consumer queues is a throttling restriction. We don't want to run out of memory if the producers can produce data items faster than consumers can consume them!&lt;/p&gt;

&lt;p&gt;First, we need to change our producer. &lt;code class="csharp"&gt;Post&lt;/code&gt; will (synchronously) block once the throttling threshold is reached, so we'll switch to the asynchronous &lt;code class="csharp"&gt;SendAsync&lt;/code&gt; (and make the producer itself asynchronous):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;&lt;/span&gt; Produce(&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; queue, &lt;span class="type"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; values)
{
    &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; &lt;span class="keyword"&gt;value&lt;/span&gt; &lt;span class="keyword"&gt;in&lt;/span&gt; values)
    {
        &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt; queue.SendAsync&lt;/span&gt;(&lt;span class="keyword"&gt;value&lt;/span&gt;);
    }

    queue.Complete();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dataflow blocks have built-in support for throttling, so adding this to the mesh is rather easy once we have an asynchronous producer. We can say there should never be more than 5 data items in the queue, and it's a one-line change (the line that defines the mesh):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;[&lt;span class="type"&gt;TestMethod&lt;/span&gt;]
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; ConsumerReceivesCorrectValues()
{
    &lt;span class="comment"&gt;// Define the mesh.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(&lt;span class="highlight"&gt;&lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DataflowBlockOptions&lt;/span&gt; { BoundedCapacity = 5, }&lt;/span&gt;);

    &lt;span class="comment"&gt;// Start the producer and consumer.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; values = &lt;span class="type"&gt;Enumerable&lt;/span&gt;.Range(0, 10);
    &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; producer = Produce&lt;/span&gt;(queue, values);
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumer = Consume(queue);

    &lt;span class="comment"&gt;// Wait for everything to complete.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(&lt;span class="highlight"&gt;producer, &lt;/span&gt;consumer, queue.Completion);

    &lt;span class="comment"&gt;// Ensure the consumer got what the producer sent (in the correct order).&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; results = &lt;span class="keyword"&gt;await&lt;/span&gt; consumer;
    &lt;span class="type"&gt;Assert&lt;/span&gt;.IsTrue(results.SequenceEqual(values));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Multiple Producers&lt;/h4&gt;

&lt;p&gt;We can have multiple producers pushing data to the same queue (or any dataflow mesh). The only thing we have to change is when the block is completed.&lt;/p&gt;

&lt;p&gt;First, we remove the block completion from the producers:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; Produce(&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; queue, &lt;span class="type"&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; values)
{
    &lt;span class="keyword"&gt;foreach&lt;/span&gt; (&lt;span class="keyword"&gt;var&lt;/span&gt; &lt;span class="keyword"&gt;value&lt;/span&gt; &lt;span class="keyword"&gt;in&lt;/span&gt; values)
    {
        &lt;span class="keyword"&gt;await&lt;/span&gt; queue.SendAsync(&lt;span class="keyword"&gt;value&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can write a simple "producer manager" method that will complete the queue when all producers complete:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; ProduceAll(&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; queue)
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; producer1 = Produce(queue, Enumerable.Range(0, 10));
    &lt;span class="keyword"&gt;var&lt;/span&gt; producer2 = Produce(queue, Enumerable.Range(10, 10));
    &lt;span class="keyword"&gt;var&lt;/span&gt; producer3 = Produce(queue, Enumerable.Range(20, 10));
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(producer1, producer2, producer3);
    queue.Complete();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The updated test looks like this (note that because we have three independent producers, the order of results is no longer guaranteed):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;[&lt;span class="type"&gt;TestMethod&lt;/span&gt;]
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; ConsumerReceivesCorrectValues()
{
    &lt;span class="comment"&gt;// Define the mesh.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DataflowBlockOptions&lt;/span&gt; { BoundedCapacity = 5, });

    &lt;span class="comment"&gt;// Start the producers and consumer.&lt;/span&gt;
    &lt;span class="highlight"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; producers = ProduceAll(queue);&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumer = Consume(queue);

    &lt;span class="comment"&gt;// Wait for everything to complete.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(producers, consumer, queue.Completion);

    &lt;span class="comment"&gt;// Ensure the consumer got what the producer sent.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; results = &lt;span class="keyword"&gt;await&lt;/span&gt; consumer;
    &lt;span class="type"&gt;Assert&lt;/span&gt;.IsTrue(results.&lt;span class="highlight"&gt;OrderBy(x =&amp;gt; x)&lt;/span&gt;.SequenceEqual(Enumerable.Range(0, 30)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Multiple Consumers&lt;/h4&gt;

&lt;p&gt;The consumer side of this example does &lt;i&gt;work,&lt;/i&gt; but it's not done in a TPL Dataflowish sort of way. It starts to get more complicated when we consider multiple consumers, because there's no &lt;code class="csharp"&gt;TryReceiveAsync&lt;/code&gt; available on our block.&lt;/p&gt;

&lt;p&gt;Instead of fighting the flow, let's change our consumer side to be TPL Dataflowish. Specifically, we're going to replace the consumer &lt;i&gt;method&lt;/i&gt; with a dataflow &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;[&lt;span class="type"&gt;TestMethod&lt;/span&gt;]
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; ConsumerReceivesCorrectValues()
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; results = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;List&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();

    &lt;span class="comment"&gt;// Define the mesh.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DataflowBlockOptions&lt;/span&gt; { BoundedCapacity = 5, });
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumerOptions = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ExecutionDataflowBlockOptions&lt;/span&gt; { BoundedCapacity = 1, };
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumer = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ActionBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(x =&amp;gt; results.Add(x), consumerOptions);
    queue.LinkTo(consumer, &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DataflowLinkOptions&lt;/span&gt; { PropagateCompletion = &lt;span class="keyword"&gt;true&lt;/span&gt;, });

    &lt;span class="comment"&gt;// Start the producers.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; producers = ProduceAll(queue);

    &lt;span class="comment"&gt;// Wait for everything to complete.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(producers, consumer.Completion);

    &lt;span class="comment"&gt;// Ensure the consumer got what the producer sent.&lt;/span&gt;
    &lt;span class="type"&gt;Assert&lt;/span&gt;.IsTrue(results.OrderBy(x =&amp;gt; x).SequenceEqual(&lt;span class="type"&gt;Enumerable&lt;/span&gt;.Range(0, 30)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we set the &lt;code class="csharp"&gt;&lt;span class="type"&gt;ExecutionDataflowBlockOptions&lt;/span&gt;.BoundedCapacity&lt;/code&gt; for the consumer block to &lt;code class="csharp"&gt;1&lt;/code&gt;. This is necessary if we want to maintain throttling. Without this set, the producers could produce tons of data items which pass through the queue block and get buffered up in the consumer block (making our queue throttling meaningless).&lt;/p&gt;

&lt;p&gt;Now that we have a consumer block, it's much more straightforward to add multiple consumers:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;[&lt;span class="type"&gt;TestMethod&lt;/span&gt;]
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;async&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt; ConsumerReceivesCorrectValues()
{
    &lt;span class="keyword"&gt;var&lt;/span&gt; results1 = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;List&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();
    &lt;span class="keyword"&gt;var&lt;/span&gt; results2 = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;List&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();
    &lt;span class="keyword"&gt;var&lt;/span&gt; results3 = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;List&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();

    &lt;span class="comment"&gt;// Define the mesh.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; queue = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(&lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DataflowBlockOptions&lt;/span&gt; { BoundedCapacity = 5, });
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumerOptions = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ExecutionDataflowBlockOptions&lt;/span&gt; { BoundedCapacity = 1, };
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumer1 = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ActionBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(x =&amp;gt; results1.Add(x), consumerOptions);
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumer2 = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ActionBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(x =&amp;gt; results2.Add(x), consumerOptions);
    &lt;span class="keyword"&gt;var&lt;/span&gt; consumer3 = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ActionBlock&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;(x =&amp;gt; results3.Add(x), consumerOptions);
    &lt;span class="keyword"&gt;var&lt;/span&gt; linkOptions = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;DataflowLinkOptions&lt;/span&gt; { PropagateCompletion = &lt;span class="keyword"&gt;true&lt;/span&gt;, };
    queue.LinkTo(consumer1, linkOptions);
    queue.LinkTo(consumer2, linkOptions);
    queue.LinkTo(consumer3, linkOptions);

    &lt;span class="comment"&gt;// Start the producers.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; producers = ProduceAll(queue);

    &lt;span class="comment"&gt;// Wait for everything to complete.&lt;/span&gt;
    &lt;span class="keyword"&gt;await&lt;/span&gt; &lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll(producers, consumer1.Completion, consumer2.Completion, consumer3.Completion);

    &lt;span class="comment"&gt;// Ensure the consumer got what the producer sent.&lt;/span&gt;
    &lt;span class="keyword"&gt;var&lt;/span&gt; results = results1.Concat(results2).Concat(results3);
    &lt;span class="type"&gt;Assert&lt;/span&gt;.IsTrue(results.OrderBy(x =&amp;gt; x).SequenceEqual(&lt;span class="type"&gt;Enumerable&lt;/span&gt;.Range(0, 30)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code class="csharp"&gt;&lt;span class="type"&gt;ExecutionDataflowBlockOptions&lt;/span&gt;.BoundedCapacity&lt;/code&gt; is now performing another important function: in addition to maintaining the throttling, it is performing load balancing. If this is left at the default value (&lt;code class="csharp"&gt;&lt;span class="type"&gt;DataflowBlockOptions&lt;/span&gt;.Unbounded&lt;/code&gt;), then all of the data items will end up in the first consumer, which will buffer them up until it can process them. With the buffer limited to a single data item, the queue will offer its item to the next consumer when the first consumer is busy.&lt;/p&gt;

&lt;p&gt;In summary, we just reviewed two scenarios where we should set &lt;code class="csharp"&gt;BoundedCapacity&lt;/code&gt; to a low number: when we want to maintain throttling throughout a pipeline, and when we have a "T" in our dataflow mesh.&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5761697404967100526/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html#comment-form' title='7 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' title='Async Producer/Consumer Queue using Dataflow'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9137239316956902527</id><published>2012-10-04T12:30:00.000-04:00</published><updated>2013-05-17T11:07:26.915-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='Dataflow'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Introduction to Dataflow, Part 3</title><content type='html'>&lt;p&gt;So far in this series, we've covered &lt;a href="http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html"&gt;an introduction to some Dataflow concepts&lt;/a&gt; and &lt;a href="http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-2.html"&gt;some of the Dataflow blocks that are available&lt;/a&gt;. Today we'll look at some of the details to consider when building dataflow meshes.&lt;/p&gt;

&lt;h4&gt;Completing Blocks&lt;/h4&gt;

&lt;p&gt;I mentioned in &lt;a href="http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html"&gt;my first Dataflow post&lt;/a&gt; that completion can be handled by calling &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.idataflowblock.complete.aspx"&gt;&lt;code class="csharp"&gt;Complete&lt;/code&gt;&lt;/a&gt;, which will eventually cause the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.idataflowblock.completion.aspx"&gt;&lt;code class="csharp"&gt;Completion&lt;/code&gt;&lt;/a&gt; task to complete. This is the way to indicate successful completion. In a pipeline-style dataflow mesh, you can easily propagate this completion by ensuring the links have their &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowlinkoptions.propagatecompletion.aspx"&gt;&lt;code class="csharp"&gt;PropagateCompletion&lt;/code&gt;&lt;/a&gt; option set to &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also complete a block with an error indication. To do this, call the block's &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.idataflowblock.fault.aspx"&gt;&lt;code class="csharp"&gt;Fault&lt;/code&gt;&lt;/a&gt; method. This will drop all currently-buffered items and cause the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.idataflowblock.completion.aspx"&gt;&lt;code class="csharp"&gt;Completion&lt;/code&gt;&lt;/a&gt; task to complete in a faulted state. However, if you propagate completion, then each block will wrap the previous block's fault in an &lt;code class="csharp"&gt;&lt;span class="type"&gt;AggregateException&lt;/span&gt;&lt;/code&gt;. In a pipeline mesh, this can leave you with a deeply nested exception coming out of the last block.&lt;/p&gt;

&lt;p&gt;Finally, you can also cancel a block. Cancellation has similar semantics to faulting: when you cancel a block, it will drop all of its currently-buffered items and then its &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.idataflowblock.completion.aspx"&gt;&lt;code class="csharp"&gt;Completion&lt;/code&gt;&lt;/a&gt; task will complete in a canceled state. To cancel a block, you must set a &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblockoptions.cancellationtoken.aspx"&gt;&lt;code class="csharp"&gt;CancellationToken&lt;/code&gt; in the options when constructing the block&lt;/a&gt;. Cancellation is most useful when shutting down an entire dataflow mesh.&lt;/p&gt;

&lt;h4&gt;Block Options: Parallel Processing&lt;/h4&gt;

&lt;p&gt;As I discussed &lt;a href="http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-2.html"&gt;last time&lt;/a&gt;, different blocks have different task configurations. Most blocks have at least one task that will spin up to push output data further along in the mesh, and some blocks have other tasks that do processing of the data - most notably &lt;a href="http://msdn.microsoft.com/en-us/library/hh194684.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/hh194782.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformBlock&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, and &lt;a href="http://msdn.microsoft.com/en-us/library/hh194784.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformManyBlock&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By default, each block will not process more than one item at a time. Each block is independent of other blocks, so one block may process one item while another block is processing another item, but each block limits itself to a single item at once. This behavior can be changed by setting &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.executiondataflowblockoptions.maxdegreeofparallelism.aspx"&gt;&lt;code class="csharp"&gt;MaxDegreeOfParallelism&lt;/code&gt; in the options when constructing the block&lt;/a&gt;. When this is set to a value other than one, the "processing" blocks may process items using multiple tasks at once. The block will take care of ordering the results, so you don't have to worry about parallel processing messing up the sequencing of the data.&lt;/p&gt;

&lt;h4&gt;Block Options: Synchronization&lt;/h4&gt;

&lt;p&gt;By default, each block is independent of other blocks, so one block may process one item while another block is processing another item. This provides some natural parallelism to the mesh as a whole. However, there are some cases where the processing done by one block must be exclusive to the processing done by another block. In these cases, you can specify the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblockoptions.taskscheduler.aspx"&gt;&lt;code class="csharp"&gt;TaskScheduler&lt;/code&gt; in the options when constructing the block&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is where the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.concurrentexclusiveschedulerpair.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;ConcurrentExclusiveSchedulerPair&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; type (which I have &lt;a href="http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html"&gt;blogged about before&lt;/a&gt;) is really useful. By applying the exclusive (or concurrent) scheduler to certain blocks in your dataflow, you can synchronize different parts of your mesh while allowing the rest of your mesh to benefit from the natural parallelism inherent in the default task scheduler.&lt;/p&gt;

&lt;p&gt;Remember the standard caveat for &lt;code class="csharp"&gt;&lt;span class="type"&gt;ConcurrentExclusiveSchedulerPair&lt;/span&gt;&lt;/code&gt;: it only applies &lt;i&gt;while the task was executing&lt;/i&gt;. If the block is using an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; method, it is not considered "in" the scheduler while it is &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt;ing.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code class="csharp"&gt;TaskScheduler&lt;/code&gt; option to execute a block's actions on a specific context captured by &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskscheduler.fromcurrentsynchronizationcontext.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;TaskScheduler&lt;/span&gt;.FromCurrentSynchronizationContext&lt;/code&gt;&lt;/a&gt;. E.g., an &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt; at the end of a mesh to update a user interface.&lt;/p&gt;

&lt;h4&gt;Block Options: Throttling Data&lt;/h4&gt;

&lt;p&gt;Almost every block has at least one buffer. If your dataflow is getting its source data from I/O, you'll probably want to limit the buffering that goes on. Remember: different computers have different performance characteristics, and your computer may have a bottleneck in one part of your mesh while a client computer may have a bottleneck in a different part of your mesh. So, whenever you are looking at a potentially large amount of data, you should consider throttling the data buffers.&lt;/p&gt;

&lt;p&gt;Each buffer can be limited by setting the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblockoptions.boundedcapacity.aspx"&gt;&lt;code class="csharp"&gt;BoundedCapacity&lt;/code&gt; in the options when constructing the block&lt;/a&gt;. But the story doesn't end there: you often need to limit &lt;i&gt;all&lt;/i&gt; the following buffers in your mesh. A good understanding of the blocks and how they work is necessary to properly throttle data. Later in this series we'll do some simple throttling of a producer/consumer queue, but for your own meshes you should thoroughly read and understand the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=14782"&gt;Introduction to TPL Dataflow document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Data throttling should be used when the data is coming from I/O, but there's another important scenario as well: if you have a "T" in your dataflow mesh, you may need to set &lt;code class="csharp"&gt;BoundedCapacity&lt;/code&gt; to do load balancing. By default, any block will greedily buffer any data offered to it, so if you have (unfiltered) output going to multiple blocks, you'll want to limit their buffers. We'll look at an example of this a little later in this series.&lt;/p&gt;

&lt;h4&gt;Block Options: Throttling CPU Usage&lt;/h4&gt;

&lt;p&gt;By default, the "processing" blocks spin up one task (or several tasks if you've enabled parallelism) on the thread pool (or a specified scheduler if you're using synchronization). This task will continue running in a loop as long as there is data available. This behavior is efficient, but it can cause some fairness issues if the data is continuous.&lt;/p&gt;

&lt;p&gt;To mitigate this, you can set &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblockoptions.maxmessagespertask.aspx"&gt;&lt;code class="csharp"&gt;MaxMessagesPerTask&lt;/code&gt; in the options when constructing the block&lt;/a&gt;. As the name implies, this value specifies the number of data items that an individual task will process. If there are more data items, the task will be recycled to continue processing. This is less efficient but more fair to other tasks in the system.&lt;/p&gt;

&lt;h4&gt;Further information&lt;/h4&gt;

&lt;p&gt;This introductory series on Dataflow is just scratching the surface. The resources below have much more information.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=14782"&gt;Document: Introduction to TPL Dataflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2011/12/05/10244302.aspx"&gt;Document: Guide to Implementing Custom TPL Dataflow Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://social.msdn.microsoft.com/Forums/en/tpldataflow/threads"&gt;TPL Dataflow forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9137239316956902527/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/10/introduction-to-dataflow-part-3.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9137239316956902527'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9137239316956902527'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/10/introduction-to-dataflow-part-3.html' title='Introduction to Dataflow, Part 3'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1617808717365458599</id><published>2012-09-27T12:30:00.000-04:00</published><updated>2013-05-17T11:06:53.942-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='Dataflow'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Introduction to Dataflow, Part 2</title><content type='html'>&lt;p&gt;&lt;a href="http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html"&gt;Last time&lt;/a&gt;, we learned some basic concepts in the TPL Dataflow library. Today, let's look at some blocks in more detail.&lt;/p&gt;

&lt;h4&gt;BufferBlock: A Queue&lt;/h4&gt;

&lt;p&gt;One of the simplest blocks is just a basic FIFO buffer, &lt;a href="http://msdn.microsoft.com/en-us/library/hh160414.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;. The data that comes in is the data that goes out.&lt;/p&gt;

&lt;p&gt;With a block this simple, you might wonder why you would even need it. &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt; is useful on its own as an &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;-compatible queue. It's also useful in a dataflow mesh when combined with different options (such as throttling) that we'll cover in next week's post.&lt;/p&gt;

&lt;p&gt;And, of course, it's a great block to start playing with when you're learning TPL Dataflow.&lt;/p&gt;

&lt;h4&gt;ActionBlock: Foreach&lt;/h4&gt;

&lt;p&gt;Possibly even simpler than &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/hh194684.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; is just an input buffer combined with a processing task, which executes a delegate for each input item. Conceptually, it's like running a "foreach" loop over the data passing through the block.&lt;/p&gt;

&lt;p&gt;A very useful feature of &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt; is that its delegate may be &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;. By default, the &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt; will run the delegate to completion for one data item at a time. (We'll take a look next week at how to change these defaults).&lt;/p&gt;

&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt; does not provide any output data items. They are "pushed" to its own delegate, not to another block. As such, it represents the end of a dataflow mesh (unless your delegate posts or sends the data to another block, but that would be unusual).&lt;/p&gt;

&lt;h4&gt;NullTarget: /dev/null&lt;/h4&gt;

&lt;p&gt;OK, &lt;a href="http://msdn.microsoft.com/en-us/library/hh462765.aspx"&gt;&lt;code class="csharp"&gt;NullTarget&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; has got to be the simplest block. It just accepts all data items and ignores them.&lt;/p&gt;

&lt;p&gt;So why would you use it? Imagine you have a &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt; linked to an &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;, but you &lt;a href="http://msdn.microsoft.com/en-us/library/hh160311.aspx"&gt;applied a filter when you called &lt;code class="csharp"&gt;LinkTo&lt;/code&gt;&lt;/a&gt;. If a data item came along not matching the filter, the &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt; would refuse to take it, but then the &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt; would hold onto it. The data item would stick there, gumming up the whole system. An easy way to fix this is to link the &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt; to a second block (&lt;code class="csharp"&gt;NullTarget&lt;/code&gt;), which would get any leftover data items (the ones rejected by the &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;), and ignore them.&lt;/p&gt;

&lt;h4&gt;TransformBlock: Select&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh194782.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformBlock&lt;/span&gt;&amp;lt;TInput, TOutput&amp;gt;&lt;/code&gt;&lt;/a&gt; is like a LINQ &lt;code class="csharp"&gt;Select&lt;/code&gt; method: conceptually, it is a one-to-one mapping for data items.&lt;/p&gt;

&lt;p&gt;You define the mapping function yourself in a delegate. Like &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;, this delegate may be &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;. Also like &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformBlock&lt;/span&gt;&lt;/code&gt; will only process one item at a time by default.&lt;/p&gt;

&lt;p&gt;Unlike &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;, &lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformBlock&lt;/span&gt;&lt;/code&gt; does provide an output. So it actually has two buffers (data that has not been processed, and data that has been processed) and two tasks (one to process the data, and one to push data to the next block).&lt;/p&gt;

&lt;h4&gt;TransformManyBlock: SelectMany&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh194784.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformManyBlock&lt;/span&gt;&amp;lt;TInput, TOutput&amp;gt;&lt;/code&gt;&lt;/a&gt; is very similar to &lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformBlock&lt;/span&gt;&lt;/code&gt;, except it's a one-to-n mapping for data items. So it's like LINQ's &lt;code class="csharp"&gt;SelectMany&lt;/code&gt;, where a single input item may result in zero, one, or any number of output items. The results of this mapping are "flattened", just like LINQ's &lt;code class="csharp"&gt;SelectMany&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, you define the mapping function in a delegate, which may be &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt;. And &lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformManyBlock&lt;/span&gt;&lt;/code&gt; also processes only one input item at a time by default.&lt;/p&gt;

&lt;p&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformManyBlock&lt;/span&gt;&lt;/code&gt; has a similar internal structure to &lt;code class="csharp"&gt;&lt;span class="type"&gt;TransformBlock&lt;/span&gt;&lt;/code&gt;: two buffers and two tasks. The only real difference between the two is that the mapping delegate returns a collection of items, which are inserted individually into the output buffer.&lt;/p&gt;

&lt;h4&gt;Advanced Block Types&lt;/h4&gt;

&lt;p&gt;The blocks described above are a good starting point for playing around with TPL Dataflow, but the library offers much more (which I won't be covering in these intro posts):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh194820.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;WriteOnceBlock&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Memorizes its first data item and passes out copies of it as its output. Ignores all other data items.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh194745.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BatchBlock&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Groups a certain number of sequential data items into collections of data items.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh160447.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BroadcastBlock&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; - Passes out copies of data items as its output. This block is just like &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt; except that a &lt;code class="csharp"&gt;&lt;span class="type"&gt;BufferBlock&lt;/span&gt;&lt;/code&gt; will only send a particular data item to a single block; &lt;code class="csharp"&gt;&lt;span class="type"&gt;BroadcastBlock&lt;/span&gt;&lt;/code&gt; will copy the item and send the copies to every block that it's linked to.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh194869.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;JoinBlock&lt;/span&gt;&amp;lt;T1, T2&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/hh160286.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;JoinBlock&lt;/span&gt;&amp;lt;T1, T2, T3&amp;gt;&lt;/code&gt;&lt;/a&gt; - Collects two or three inputs and combines them into a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Tuple&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/hh194683.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BatchedJoinBlock&lt;/span&gt;&amp;lt;T1, T2&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/hh160326.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;BatchedJoinBlock&lt;/span&gt;&amp;lt;T1, T2, T3&amp;gt;&lt;/code&gt;&lt;/a&gt; - Collects a certain number of total items from two or three inputs and groups them into a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Tuple&lt;/span&gt;&lt;/code&gt; of collections of data items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please read the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=14782"&gt;official "Introduction to TPL Dataflow" document&lt;/a&gt; for more details on these block types; that document covers information like the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.groupingdataflowblockoptions.greedy.aspx"&gt;option for greedy behavior&lt;/a&gt;, which is important for some batching and joining scenarios. Finally, if you're using the advanced blocks, I also recommend also hanging out on the &lt;a href="http://social.msdn.microsoft.com/Forums/en/tpldataflow/threads"&gt;TPL Dataflow forum&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1617808717365458599/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-2.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1617808717365458599'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1617808717365458599'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-2.html' title='Introduction to Dataflow, Part 2'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-352413745607298877</id><published>2012-09-20T12:30:00.000-04:00</published><updated>2012-09-23T15:02:54.056-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='Dataflow'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Introduction to Dataflow, Part 1</title><content type='html'>&lt;p&gt;So far, we've been learning quite a bit about the core &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; / &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt;&lt;/code&gt; support that was added to C# in VS2012. Today, we'll start with a conceptual overview of the first large, useful library built with &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;async&lt;/span&gt;&lt;/code&gt; in mind: &lt;a href=" http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx"&gt;TPL Dataflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TPL Dataflow allows you to easily create a &lt;i&gt;mesh&lt;/i&gt; through which your data flows. The simplest meshes are pipelines (very similar to pipelines in PowerShell). More complex meshes can split and join the data flows, and even contain data flow loops!&lt;/p&gt;

&lt;p&gt;Every mesh is composed of a number of &lt;i&gt;blocks&lt;/i&gt; which are linked together. TPL Dataflow provides quite a few blocks which address different needs; we will just use the most basic blocks for our examples, but you can see the &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=14782"&gt;Introduction to TPL Dataflow document&lt;/a&gt; for a full description of the different types of blocks.&lt;/p&gt;

&lt;h4&gt;The Block&lt;/h4&gt;

&lt;p&gt;A block is a part of a dataflow mesh through which data can flow. The block usually processes the data in some way, but it doesn't have to.&lt;/p&gt;

&lt;p&gt;Blocks themselves have components: usually a &lt;i&gt;buffer&lt;/i&gt; component and a &lt;i&gt;task&lt;/i&gt; component. Buffers hold data (either data that has been sent to this block but which has not yet been processed, or data that has been processed and is waiting to leave the block).&lt;/p&gt;

&lt;p&gt;Different block types have different configurations of buffers and tasks. Some blocks have multiple buffers (e.g., "join" blocks). Tasks have two purposes. Most blocks use a task to push data out of the block; some blocks also use a task to do the processing of the data.&lt;/p&gt;

&lt;h4&gt;Basic Data Flow&lt;/h4&gt;

&lt;p&gt;You can push data to a block by calling &lt;a href="http://msdn.microsoft.com/en-us/library/hh194836.aspx"&gt;&lt;code class="csharp"&gt;Post(item)&lt;/code&gt;&lt;/a&gt; or &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblock.sendasync.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt; SendAsync(item)&lt;/code&gt;&lt;/a&gt;. Normally, you could just use &lt;code class="csharp"&gt;Post(item)&lt;/code&gt; to (synchronously) place the data into the block's input buffer. However, it's possible to throttle a block by limiting its buffer size; in this case, you could use &lt;code class="csharp"&gt;SendAsync&lt;/code&gt; to (asynchronously) wait for space to be available and then place the data into the block's input buffer.&lt;/p&gt;

&lt;p&gt;Getting data out at first appears pretty easy: you can call &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblock.receive.aspx"&gt;&lt;code class="csharp"&gt;Receive&lt;/code&gt;&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/hh194808.aspx"&gt;&lt;code class="csharp"&gt;TryReceive&lt;/code&gt;&lt;/a&gt;, or &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblock.receiveasync.aspx"&gt;&lt;code class="csharp"&gt;ReceiveAsync&lt;/code&gt;&lt;/a&gt; to retrieve the next item, and there's an &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowblock.outputavailableasync.aspx"&gt;&lt;code class="csharp"&gt;OutputAvailableAsync&lt;/code&gt;&lt;/a&gt; that lets you know when the next item is ready to be retrieved. However, there are a couple of "gotchas":&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a block finishes processing, &lt;code class="csharp"&gt;Receive&lt;/code&gt; and &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;await&lt;/span&gt; ReceiveAsync&lt;/code&gt; will both throw exceptions. This is not ideal.&lt;/li&gt;
&lt;li&gt;&lt;code class="csharp"&gt;OutputAvailableAsync&lt;/code&gt; is not very useful if there are multiple receivers reading from the same block.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From a procedural perspective, it would be great if we had a &lt;code class="csharp"&gt;&lt;span class="type"&gt;Tuple&lt;/span&gt;&amp;lt;&lt;span class="keyword"&gt;bool&lt;/span&gt;, T&amp;gt; TryReceiveAsync&lt;/code&gt; that would either retrieve the item or return false, rather than raising an exception.&lt;/p&gt;

&lt;p&gt;But if you look at the problem from a &lt;i&gt;dataflow&lt;/i&gt; perspective, there is already a solution: &lt;a href="http://msdn.microsoft.com/en-us/library/hh194684.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; will execute a callback for any data pushed to it. This is the "dataflowish" way of getting the results out of a dataflow mesh: just &lt;i&gt;link&lt;/i&gt; your block to an &lt;code class="csharp"&gt;&lt;span class="type"&gt;ActionBlock&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Linking&lt;/h4&gt;

&lt;p&gt;You can connect two blocks by linking them together. The actual negotiation of data transfer is fairly complex (to allow scenarios such as "join" blocks) - but you usually don't have to think about it. Just link from source to target (&lt;a href="http://msdn.microsoft.com/en-us/library/hh160311.aspx"&gt;&lt;code class="csharp"&gt;source.LinkTo(target);&lt;/code&gt;&lt;/a&gt;), and the library takes care of propagating the data.&lt;/p&gt;

&lt;p&gt;There's no limit to what you can link. It is possible to have a loop in your dataflow mesh.&lt;/p&gt;

&lt;p&gt;There are several options you have when setting up a link. You can have the link disengage after so many data items, or specify a filter so only certain data items will be propagated along the link, etc.&lt;/p&gt;

&lt;p&gt;A lot of my dataflow "meshes" end up being "pipelines", so one option I use more than others is &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.dataflowlinkoptions.propagatecompletion.aspx"&gt;&lt;code class="csharp"&gt;PropagateCompletion&lt;/code&gt;&lt;/a&gt;, which propagates completion as well as data items.&lt;/p&gt;

&lt;h4&gt;Completion&lt;/h4&gt;

&lt;p&gt;Eventually, you're going to finish sending data to your dataflow mesh, and you're going to want to know when the mesh is done processing it. Each block supports an asynchronous form of completion: you call &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.idataflowblock.complete.aspx"&gt;&lt;code class="csharp"&gt;Complete&lt;/code&gt;&lt;/a&gt; and some time later, the block's &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.dataflow.idataflowblock.completion.aspx"&gt;&lt;code class="csharp"&gt;Completion&lt;/code&gt;&lt;/a&gt; task will complete.&lt;/p&gt;

&lt;blockquote&gt;Side note: you should &lt;i&gt;always&lt;/i&gt; assume that &lt;code class="csharp"&gt;Completion&lt;/code&gt; might be signaled asynchronously, even if there are no data items to process.&lt;/blockquote&gt;

&lt;p&gt;If you have a simple dataflow mesh (like a pipeline), then you can tell the blocks to propagate their completion when you link them together. Then when you're finished, you can just complete the first block and await the completion of the last block.&lt;/p&gt;

&lt;p&gt;If your dataflow mesh is more complex, then you may have to propagate completion manually. The common tools for this are &lt;a href="http://msdn.microsoft.com/en-us/library/hh160384.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.WhenAll&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.task.continuewith.aspx"&gt;&lt;code class="csharp"&gt;&lt;span class="type"&gt;Task&lt;/span&gt;.ContinueWith&lt;/code&gt;&lt;/a&gt;. If you do have to do this, I recommend that you wrap your dataflow mesh into a separate class (possibly exposing the blocks as properties) and implement your own &lt;code class="csharp"&gt;Complete&lt;/code&gt; and &lt;code class="csharp"&gt;Completion&lt;/code&gt; members just like a dataflow block does.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/352413745607298877/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/352413745607298877'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/352413745607298877'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html' title='Introduction to Dataflow, Part 1'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5002474674580089954</id><published>2012-09-12T12:30:00.000-04:00</published><updated>2012-09-12T12:30:01.484-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>An Async Horror Story</title><content type='html'>&lt;p&gt;Congratulations to the Async/Await team on their RTW release!&lt;/p&gt;

&lt;p&gt;This is a &lt;b&gt;huge&lt;/b&gt; milestone for .NET. Personally, I think Async will have a monumental impact on how we write code. It makes &lt;i&gt;maintainable asynchronous code&lt;/i&gt; a reality.&lt;/p&gt;

&lt;p&gt;Today, I will &lt;b&gt;not&lt;/b&gt; write a long blog post about how to use Async or some obscure synchronization pitfall. Instead, I will tell a horror story from long ago... a story that has never before been told, but I assure you it is true. For I was there.&lt;/p&gt;

&lt;p&gt;Sit back, young programmers, and listen to a tale of Async... from the Dark Ages!!! [lightning, thunder]&lt;/p&gt;

&lt;h4&gt;The Setting&lt;/h4&gt;

&lt;p&gt;The year was 2000. I was a young programmer at that time: only three years of work experience, all at a small engineering company. But I had several successful projects under my belt, I had contributed to &lt;a href="http://www.boost.org"&gt;Boost&lt;/a&gt;, and I felt confident that I could tackle anything. In this pre-September 11th world, optimism reigned.&lt;/p&gt;

&lt;h4&gt;The Client&lt;/h4&gt;

&lt;div style="float:right;"&gt;
&lt;img border="0" height="126" width="190" src="http://3.bp.blogspot.com/-RxuOHzFP7tA/T_oqOGyG45I/AAAAAAAAHPw/tiL2Kvvnc_c/s320/Building.jpg" /&gt;
&lt;/div&gt;

&lt;p&gt;A certain large newspaper was expanding. They built a new press building and had plans to outfit it to the tune of $40 million. Their new Swiss printing press was 750 tons; and was capable of printing 70,000 pages per hour, moving the paper through at 30 mph. The paper was delivered at the bottom of the presses and traveled up through 27 feet of machinery. It was quite a sight!&lt;/p&gt;

&lt;p&gt;But the press was only $25 million of the story. Besides the building and all of the planning software, they needed a way to get the paper to the press on time, and that's where we came in.&lt;/p&gt;

&lt;p&gt;My company had recently hired a "rock star" developer, who had already been assigned another newsprint project. He assured the software department heads that this new newsprint project would only require minor tweaks and configuration changes to the software he was developing for the other client (which was his first project for our company). Unlike our traditional procedural design, the Rock Star's code reveled in "abstraction" and "OOP." As the only other programmer in the company who had "done OOP," I was slated to work as the Rock Star's assistant programmer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In one conversation around this time, I was opposing what I saw as unnecessary complexity in the system (I had been asked to abstract the IoC component by using DI). The Rock Star responded by giving me an additional assignment: a module which would continuously check memory for errors while the system was running. At that point, the conversation had just gotten too ridiculous; I walked away without saying a word.&lt;/p&gt;

&lt;p&gt;The software was sufficiently complex to require its own program for modifying the configuration (called, unsurprisingly, "The Configurator").&lt;/p&gt;

&lt;p&gt;Long-time readers of &lt;a href="http://thedailywtf.com"&gt;The Daily WTF&lt;/a&gt; will immediately realize what will happen to these projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was nominally assigned to the new newspaper project (in addition to my other tasks). The Rock Star assured me that the project would be easy, once he actually gave me the holy grail code base.&lt;/p&gt;

&lt;h4&gt;Clouds on the Horizon&lt;/h4&gt;

&lt;p&gt;Deadlines slipped. Weeks became months. It was now 2001. More deadlines slipped. I was routinely assured that the code would be there, and that it would be better than my wildest imagination. The software department heads hung on the Rock Star's every word, and I had no option but to go along. I had no code to work with, so after finishing my other projects, I played around with alternative programming styles. I was experimenting with something I called "single-threaded concurrency," and began exploring how the newsprint project would look if it was coded in that fashion.&lt;/p&gt;

&lt;p&gt;Finally, the time came for the installation. Ordinarily, the projects at my company would run for 6-9 months followed by a 3-week on-site installation. Inevitably, many minor issues were brought up during the installation, and having a programmer on-site encouraged quick resolutions.&lt;/p&gt;

&lt;p&gt;I was very nervous on my first flight out to the job site for the install, since I was flying without any code. But I was super-seriously assured that the code would be in my inbox when I got there.&lt;/p&gt;

&lt;p&gt;Of course, it wasn't. I was given instructions to go to the customer site and "look busy" every day while the Rock Star put the finishing touches on his masterpiece.&lt;/p&gt;

&lt;p&gt;Another week went by. I continued my "single-threaded concurrency" experiment. Another week or two went by. I came home for the weekend and then returned to the job site - very unusual for my company's projects. More weeks went by.&lt;/p&gt;

&lt;p&gt;Excuse after excuse was given for the lack of code. The most memorable one was that the Rock Star's hard drive had crashed, and he was working day and night (at home, naturally) to recover it.&lt;/p&gt;

&lt;p&gt;Fortunately, the other vendors for the newsprint system were even later than we were with their deliverables, so the client didn't blame us for the delays.&lt;/p&gt;

&lt;h4&gt;The Storm&lt;/h4&gt;

&lt;div style="float:right;"&gt;
&lt;img border="0" height="214" width="87" src="http://1.bp.blogspot.com/-0yRR_vK72q4/T_oq1CUcTFI/AAAAAAAAHP8/B1zTaPjBzDw/s320/Press.jpg" /&gt;
&lt;/div&gt;

&lt;p&gt;Finally, some six weeks after the official contract deadline, the Rock Star delivered the code base. It was a steaming pile of useless nonsense. It did not even compile. I took a few hours to go through it, and it contained a ton of hard-coded logic for the Rock Star's newsprint project that would have to be changed to work for any other newsprint system. In short, it was a disaster, and almost completely useless for our new client.&lt;/p&gt;

&lt;p&gt;Terrorists attacked the World Trade Center.&lt;/p&gt;

&lt;p&gt;And the Rock Star quit, taking the glowing recommendations of our software department heads with him. He had not completed a single project, but - amazingly - they still believed him when he said we just had to "snap together a few components" to complete both of his projects.&lt;/p&gt;

&lt;p&gt;The new newsprint project was officially turned over to me. The Rock Star's former project was passed off to an Unsuspecting Teammate, who truly had no idea of the mess he was getting into - but he was (and still is) the best programmer I've ever worked with, so I didn't worry too much about him. I had big enough problems of my own.&lt;/p&gt;

&lt;p&gt;The Rock Star's code base was downright unusable. My only options were to restart the project from scratch, or to expand my single-threaded concurrency experiment into an actual solution. I knew the rewrite would take many months, and the ire of the client would fall on us in full force. I was also tempted by my curiosity: &lt;i&gt;could&lt;/i&gt; I, in fact, create a full solution using these techniques?&lt;/p&gt;

&lt;p&gt;I chose to continue my experiment. It was my choice to bring it to life.&lt;/p&gt;

&lt;h4&gt;The Monster&lt;/h4&gt;

&lt;p&gt;I will now attempt to explain my "single-threaded concurrency" experiment. I leave it to the reader to judge whether it was inherently evil, or whether it was merely born at the wrong time and in the wrong place.&lt;/p&gt;

&lt;p&gt;Please do keep in mind that this was written in unmanaged C++ with the NT4 API: there were no spin locks, no thread pool, no garbage collection, or many other things that programmers can take for granted these days.&lt;/p&gt;

&lt;p&gt;In the unmanaged world at that time, the most common type of asynchronous operation was overlapped I/O. My early experiment used overlapped I/O exclusively, with some APCs thrown in for good measure, but I quickly discovered how difficult it was to &lt;i&gt;extend&lt;/i&gt;. I shifted to using HANDLEs.&lt;/p&gt;

&lt;blockquote&gt;For my .NET-only readers, you can think of a HANDLE as like a Task.&lt;/blockquote&gt;

&lt;p&gt;The entire system was conceptually built around a single thread. The main loop of this thread essentially just called WaitForMultipleObjects on a dynamic array of HANDLEs and executed completion callbacks. Completion callbacks would add and remove HANDLEs from the main array as necessary. This approach was fully extensible using the monkey wrench of synchronization primitives: the Manual Reset Event.&lt;/p&gt;

&lt;blockquote&gt;For my .NET-only readers: A Manual Reset Event is analogous to a TaskCompletionSource. There was no thread pool, so I used WaitForMultipleObjects to make a "thread pool" that would only ever have one thread.&lt;/blockquote&gt;

&lt;p&gt;There is one major limitation with this approach: everything &lt;b&gt;must&lt;/b&gt; be asynchronous. I was fairly sure, however, that I could &lt;i&gt;make&lt;/i&gt; everything asynchronous, one way or another.&lt;/p&gt;

&lt;p&gt;As the system grew, I encountered the 64-HANDLE limit: WaitForMultipleObjects could only wait for 64 HANDLEs at a time. This was insufficient, so I wrote the &lt;i&gt;most complex&lt;/i&gt; software component I have ever written: The Event Demultiplexer!&lt;/p&gt;

&lt;p&gt;The Event Demultiplexer, conceptually, was quite simple. It was a WaitForMultipleObjects loop that was unlimited in its number of HANDLEs. That's it. When it came to implementation, however, it was considerably difficult. It had to manage its own threads (no thread pool, remember?), and doing all of that in a thread-safe way was not trivial.&lt;/p&gt;

&lt;blockquote&gt;Curiously, the 64-handle limitation still exists in .NET (in WaitHandle.WaitAll/WaitAny). I had thought they would abstract it away! It's not so important anymore, though: Task's WaitAll/WhenAll/WaitAny/WhenAny do not use the same mechanism and are not subject to a 64-task limit.&lt;/blockquote&gt;

&lt;p&gt;Of course, there were many external problems as well. The remote database driver had a nasty habit of crashing its host process every time the server was unreachable. The local database did not support asynchronous operations (and required regular offline compaction). The robot controlled via RS232 did not like commands sent too quickly (apparently, they only tested with slow-typing humans). The press communications used an underdocumented protocol over an unusual bus. Pretty much the only thing that worked perfectly was the PLC talking over OPC.&lt;/p&gt;

&lt;div style="text-align:center;"&gt;
&lt;img border="0" height="240" width="320" src="http://4.bp.blogspot.com/-QTztUJPGNoo/T_orKl0VLqI/AAAAAAAAHQI/9SYTNcKJzMU/s320/Operator.jpg" /&gt;
&lt;/div&gt;

&lt;p&gt;Every problem was eventually solved. The remote database driver was encapsulated into its own child process and restarted whenever it crashed. The local database got its own dedicated thread which exposed an asynchronous API to the core system. I added delays to the RS232 interface, using the wonderful Waitable Timer (interestingly, not available in .NET). The press communications were developed "by observation."&lt;/p&gt;

&lt;p&gt;At the end, I had a working system. It was the first 100% asynchronous system I had ever written; possibly the first (non-trivial) 100% asynchronous system ever.&lt;/p&gt;

&lt;p&gt;I was proud of my creation.&lt;/p&gt;

&lt;h4&gt;Darkness Falls&lt;/h4&gt;

&lt;p&gt;For many years, I was proud of my accomplishment. The client &lt;i&gt;did&lt;/i&gt; discover that I essentially wrote the entire system on-site, but we were not responsible for any major delays, so we didn't get nailed. Also, I learned a &lt;i&gt;lot&lt;/i&gt; about asynchronous programming: you have to turn your code "inside out" to do it right. This valuable experience enabled me to create a fully-asynchronous component a couple of years later when our communications system changed from serial to TCP/IP.&lt;/p&gt;

&lt;blockquote&gt;Note: Only old-school async requires you to write your code "inside out." The new async/await support in .NET does the rewriting for you, so you can write asynchronous code &lt;i&gt;so much easier!&lt;/i&gt;&lt;/blockquote&gt;

&lt;p&gt;However, it gradually became apparent that I was too proud of my creation. Being a fully asynchronous system (and therefore completely different than any of our other systems), it was difficult for me to maintain. And, as difficult as it was for me to maintain it, it was near-impossible for anyone else to maintain it!&lt;/p&gt;

&lt;p&gt;True, I had pulled off a working system in a bad situation. But that system wouldn't last - &lt;i&gt;couldn't&lt;/i&gt; last. It was years later when I admitted to myself that it was, in fact, &lt;a href="http://thedailywtf.com/Articles/Avoiding-Development-Disasters.aspx"&gt;a&lt;/a&gt; &lt;a href="http://thedailywtf.com/Articles/What_Could_Possibly_Be_Worse_Than_Failure_0x3f_.aspx"&gt;failure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had created a monster.&lt;/p&gt;

&lt;p&gt;Time passed. My company moved to Detroit, and I stayed here. The software department got absorbed by another company, and then the entire company got bought by yet another company.&lt;/p&gt;

&lt;p&gt;Now, many years later, I still occasionally wonder about my creation - my first fully-asynchronous system. Is it still living in that server room, sending out commands to move rolls of paper hither and yon? Does it horrify innocent maintenance programmers? Or has it been replaced by another system that is easier to understand and maintain?&lt;/p&gt;

&lt;p&gt;Sometimes, late at night, I feel a profound sense of guilt. My professional pride wants me to go back... to replace it with a system that would not shame me any more... to kill the monster.&lt;/p&gt;

&lt;p&gt;Perhaps someday I will be brave enough to face my creation again.&lt;/p&gt;

&lt;p&gt;Perhaps it is too late. Too late for me.&lt;/p&gt;

&lt;p&gt;Yet, I have a ray of hope.&lt;/p&gt;

&lt;p&gt;My hope is that all programmers will learn the new way of async. With the new async support in .NET, no one should ever have to create another monster.&lt;/p&gt;

&lt;p&gt;There is always hope.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5002474674580089954/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5002474674580089954'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5002474674580089954'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html' title='An Async Horror Story'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-RxuOHzFP7tA/T_oqOGyG45I/AAAAAAAAHPw/tiL2Kvvnc_c/s72-c/Building.jpg' height='72' width='72'/><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7484788429010732233</id><published>2012-09-10T12:30:00.000-04:00</published><updated>2012-09-10T12:30:02.484-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='jQuery'/><title type='text'>A New Web Site</title><content type='html'>&lt;p&gt;This weekend, I &lt;i&gt;finally&lt;/i&gt; updated &lt;a href="http://stephencleary.com"&gt;my personal home page&lt;/a&gt; (it's only been about 5 years...). The new site uses several technologies I wanted to play around with.&lt;/p&gt;

&lt;p&gt;The site is served by &lt;a href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, though I don't use their automatic page generator thingy. Instead, on my local machine, I have two checkouts of the repo side-by-side: "master" and "gh-pages". The "master" contains &lt;a href="https://github.com/StephenCleary/stephencleary-dotcom"&gt;the actual source code for the site&lt;/a&gt;, while the "gh-pages" contains &lt;a href="https://github.com/StephenCleary/stephencleary-dotcom/tree/gh-pages"&gt;the site itself&lt;/a&gt;. This setup is &lt;a href="https://gist.github.com/833223"&gt;described by Chris Jacob in this Gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The site itself (technically) uses ASP.NET MVC and jQuery Mobile UI. Inspired by John Papa's recent &lt;a href="http://johnpapa.net/spapost10"&gt;excellent blog series on single-page applications&lt;/a&gt;, my site is also an SPA, only it's served statically, without any dynamic parts (yet). :)&lt;/p&gt;

&lt;p&gt;To get the (dynamic) ASP.NET MVC converted to a (static) GitHub page, I run a &lt;a href="https://github.com/StephenCleary/stephencleary-dotcom/blob/master/Publish.ps1"&gt;publish script&lt;/a&gt; that captures the ASP.NET MVC output and writes it (along with its content files) to the "gh-pages" directory. This way, I get the full ASP.NET MVC support (including NuGet packages and C#) without having to execute it on the server.&lt;/p&gt;

&lt;p&gt;As part of this web page, I developed my own &lt;a href="https://github.com/StephenCleary/stephencleary-dotcom/blob/master/Api/Api/Business/CSharpFormatter.cs"&gt;C#-to-HTML formatter&lt;/a&gt; wrapped in an &lt;a href="https://github.com/StephenCleary/stephencleary-dotcom/blob/master/StephenCleary.com/Helpers/CSharpHtmlHelper.cs"&gt;HTML helper&lt;/a&gt;. The C# formatter uses backticks (`) to surround type names, and a backtick command (`!) to surround highlighting. Both &lt;a href="https://github.com/StephenCleary/stephencleary-dotcom/blob/master/StephenCleary.com/Views/Home/Index.cshtml#L58"&gt;inline&lt;/a&gt; and &lt;a href="https://github.com/StephenCleary/stephencleary-dotcom/blob/master/StephenCleary.com/Views/Home/Index.cshtml#L234"&gt;block&lt;/a&gt; C# code segments are supported.&lt;/p&gt;

&lt;p&gt;As soon as Azure Web Sites support .NET 4.5, I'll wrap up the formatter into an actual WebAPI.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7484788429010732233/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/09/a-new-web-site.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7484788429010732233'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7484788429010732233'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/a-new-web-site.html' title='A New Web Site'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3585208867844682114</id><published>2012-09-01T12:30:00.001-04:00</published><updated>2012-07-26T20:07:35.295-04:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Async Progress Composition</title><content type='html'>&lt;p&gt;Here's an example of what I mean. Consider an FTP downloader, which downloads every available file one at a time:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public async Task DownloadAllFilesAsync(IProgress&amp;lt;FileDownloadProgress&amp;gt; progress)
{
  var files = await GetFileListAsync().ConfigureAwait(false);

  // We are on a thread pool at this point (assuming GetFileListAsync is asynchronous).

  foreach (var file in files)
  {
    if (progress == null)
    {
      await DownloadFileAsync(file, null);
    }
    else
    {
      await DownloadFileAsync(file,
        new Progress&amp;lt;int&amp;gt;(bytesTransferred =&amp;gt;
        {
          progress.Report(new FileDownloadProgress(file, bytesTransferred));
        }));
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;If DownloadAllFilesAsync doesn't have a progress reporter, then it doesn't pass one down to DownloadFileAsync. But if it does, then it creates an instance of Progress&amp;lt;T&amp;gt; that receives progress updates from DownloadFileAsync, attaches some contextual information, and passes them along.&lt;/p&gt;

&lt;blockquote&gt;This kind of pattern is common; when composing asynchronous methods, the progress updates usually need to be "composed" as well.&lt;/blockquote&gt;

&lt;p&gt;The comment points out that the Progress&amp;lt;T&amp;gt; instances for the inner method calls are created on the thread pool. This means our lambda expression will run on the thread pool when an update comes in from DownloadFileAsync.&lt;/p&gt;

&lt;p&gt;This is dangerous, and it's not obvious &lt;i&gt;why.&lt;/i&gt; After all, even though the lambda expression is run on the thread pool, it just calls back to the parent progress reporter... so shouldn't it work???&lt;/p&gt;

&lt;p&gt;Let's assume that DownloadAllFilesAsync is a "first-tier" method. So it's called by an event handler or something, and it gets a Progress&amp;lt;T&amp;gt; constructed on the UI context. So the caller of DownloadAllFilesAsync doesn't worry about &lt;i&gt;multiple simultaneous updates&lt;/i&gt; or &lt;i&gt;updates after completion&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The danger is this: there &lt;i&gt;can&lt;/i&gt; be updates after completion!&lt;/p&gt;</content><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/09/async-progress-composition.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3585208867844682114'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3585208867844682114'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3398165461947780946</id><published>2012-09-01T11:35:00.000-04:00</published><updated>2012-07-26T20:07:02.852-04:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Cross-thread operation not valid | The calling thread cannot access this object because a different thread owns it.</title><content type='html'>&lt;p&gt;A lot of programmers run into this InvalidOperationException from Windows Forms: "Cross-thread operation not valid: Control '..' accessed from a thread other than the thread it was created on" &lt;b&gt;or&lt;/b&gt; this InvalidOperationException from Windows Presentation Foundation: "The calling thread cannot access this object because a different thread owns it" (both of these exceptions are for the same error).&lt;/p&gt;

&lt;p&gt;There's a &lt;i&gt;lot&lt;/i&gt; of bad advice on the Internet on how to fix this problem, which is unfortunate. So I figured it's high time I set the world straight. ;)&lt;/p&gt;

&lt;p&gt;(I am joking with that last sentence. Mostly.)&lt;/p&gt;

&lt;p&gt;(But this post is more opinionated - and more controversial - than most of my posts. What follows is only my own opinion. Obviously.)&lt;/p&gt;

&lt;h4&gt;A Brief Description of the Problem&lt;/h4&gt;

&lt;p&gt;User interface elements on Windows belong to the thread that created them. So if you need to change a label (or update a progress bar, or add an item to a list view, or any other accessing of UI elements), you need to be running on the UI thread that created that element.&lt;/p&gt;

&lt;h4&gt;The Horrible Hack&lt;/h4&gt;

&lt;p&gt;Most Internet resources recommend an oh-so-clever solution that makes use of the built-in Control.InvokeRequired and Control.Invoke members so that you can write cute little method wrappers like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Horrible code. Do not copy or use. Seriously.
delegate void UpdateUIDelegate(MyData data);

public void UpdateUI(MyData data)
{
  if (!this.InvokeRequired)
  {
    // Do the actual updating of the UI.
  }
  else
  {
    // Queue this same function to the UI thread.
    this.Invoke(new UpdateUIDelegate(UpdateUI), new object[] { data });
  }
}
&lt;/pre&gt;

&lt;p&gt;There is also a WPF version:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// AAAA!!! My eyes!!! My eyes!!! Save yourself!!! Look away!!!
delegate void UpdateUIDelegate(MyData data);

public void UpdateUI(MyData data)
{
  if (this.Dispatcher.CheckAccess())
  {
    // Do the actual updating of the UI.
  }
  else
  {
    // Queue this same function to the UI thread.
    this.Dispatcher.Invoke(DispatcherPriority.Send, new UpdateUIDelegate(UpdateUI), data);
  }
}
&lt;/pre&gt;

&lt;h4&gt;What's the Big Deal? (Part 1)&lt;/h4&gt;

&lt;p&gt;Take a step back and look at the big picture. I know you've got this crazy UI cross-thread exception and you need to fix it "now," but take a moment to consider your architecture. Yes, your &lt;i&gt;architecture&lt;/i&gt;. As in "design."&lt;/p&gt;

&lt;p&gt;Your solution should allow &lt;i&gt;separation of concerns&lt;/i&gt;. This means that your "background operation" code shouldn't care what kind of UI it's running on. The "background operation" code is part of your business layer, which - if designed correctly - should be equally usable from Windows Forms, WPF, ASP.NET, a console application, or a Win32 service (and some would also add Silverlight and Windows Phone to that mix). The .NET framework gives you that kind of power, &lt;i&gt;if&lt;/i&gt; you use it correctly.&lt;/p&gt;

&lt;p&gt;Hint: If you depend on Control.Invoke, you're tied to Windows Forms. Unless you use interoperability hooks to hack together a solution. Yes, I know programmers who have built their entire business logic layer using Control.Invoke (just like the above code samples) and then - when they had to upgrade to WPF - decided to host a Windows Forms control in their WPF application purely for business logic synchronization. Because that was easier than fixing their business logic layer. It was very ugly, but it &lt;i&gt;did&lt;/i&gt; work. However, even that hack won't save them when it's time to move to ASP.NET.&lt;/p&gt;

&lt;h4&gt;What's the Big Deal? (Part 2)&lt;/h4&gt;

&lt;p&gt;OK, you may be thinking "but I'll only use Windows Forms! I promise!" Or maybe "Business layer - bah! I just use code behind!" But there is another reason why the code above is bad: because multithreading is hard.&lt;/p&gt;

&lt;p&gt;More particularly, &lt;i&gt;reasoning&lt;/i&gt; about a multithreaded program needs to be made as simple as possible. Seasoned multithreaders learn techniques that help tremendously when reasoning about the correctness of a program. One key technique is this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each method should only be called by one thread. (Except for methods on &lt;i&gt;synchronization objects&lt;/i&gt;, e.g., ManualResetEvent.Set).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second problem with the hacked code is that it can be called by any thread. The first time the hacked code is used, it's not much of a problem. As more hacking takes place, such methods become used by the UI thread as well as the business logic. Sometimes parameter validation and other non-UI operations get pulled out of the "Do the actual updating of the UI" section and placed before the InvokeRequired/CheckAccess test. Now you have a method that executes partially on the invoking thread and then may or may not queue itself to another thread.&lt;/p&gt;

&lt;p&gt;Take it from a seasoned multithreader: don't use InvokeRequired or CheckAccess. I never have, and I'm doing just fine. It's much cleaner to have one set of methods that are &lt;i&gt;always&lt;/i&gt; executed on the UI thread and another set of methods that are &lt;i&gt;always&lt;/i&gt; executed on thread pool threads (or background threads or whatever your business logic uses). And whenever you need to switch thread context, do it explicitly.&lt;/p&gt;

&lt;h4&gt;OK, So What Do I Do?&lt;/h4&gt;

&lt;p&gt;We've covered the common hack and why it's bad. Now, let's look at a solution that I like to call "the right way."&lt;/p&gt;

&lt;p&gt;In essence, what you want to do is capture a &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx"&gt;SynchronizationContext&lt;/a&gt; and then use it when you want to marshal delegates from one thread to another.&lt;/p&gt;

&lt;h4&gt;Wha?&lt;/h4&gt;

&lt;p&gt;Control.Invoke (and Control.InvokeRequired) are actually members of an interface: ISynchronizeInvoke.</content><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/09/cross-thread-operation-not-valid.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3398165461947780946'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3398165461947780946'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2313847868408422148</id><published>2012-08-30T12:30:00.000-04:00</published><updated>2013-05-17T11:06:00.365-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async Coroutines</title><content type='html'>&lt;p&gt;We've been &lt;a href="http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html"&gt;introduced to scheduled concurrency&lt;/a&gt;. Now how about a quick example?&lt;/p&gt;

&lt;p&gt;Today we're going to use the exclusive scheduler to create a simplistic kind of round-robin co-routine, similar to &lt;a href="http://msmvps.com/blogs/jon_skeet/archive/2011/06/22/eduasync-part-13-first-look-at-coroutines-with-async.aspx"&gt;Jon Skeet's EduAsync Coroutines&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;Please note: this is only "playing around" code. Do not use this in production!&lt;/blockquote&gt;

&lt;p&gt;There isn't that much to it. We define three co-routines with slightly different behavior to make it a little interesting: FirstCoroutine yields twice, SecondCoroutine yields three times, and ThirdCoroutine yields once.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Threading.Tasks;

partial class Program
{
    // The first co-routine yields twice.
    private static async Task FirstCoroutine()
    {
        Console.WriteLine(&amp;quot;Starting FirstCoroutine&amp;quot;);
        Console.WriteLine(&amp;quot;Yielding from FirstCoroutine...&amp;quot;);

        await Task.Yield();

        Console.WriteLine(&amp;quot;Returned to FirstCoroutine&amp;quot;);
        Console.WriteLine(&amp;quot;Yielding from FirstCoroutine again...&amp;quot;);

        await Task.Yield();

        Console.WriteLine(&amp;quot;Returned to FirstCoroutine again&amp;quot;);
        Console.WriteLine(&amp;quot;Finished FirstCoroutine&amp;quot;);
    }

    // The second co-routine yields three times.
    private static async Task SecondCoroutine()
    {
        Console.WriteLine(&amp;quot;  Starting SecondCoroutine&amp;quot;);
        Console.WriteLine(&amp;quot;  Yielding from SecondCoroutine...&amp;quot;);

        await Task.Yield();

        Console.WriteLine(&amp;quot;  Returned to SecondCoroutine&amp;quot;);
        Console.WriteLine(&amp;quot;  Yielding from SecondCoroutine again...&amp;quot;);

        await Task.Yield();

        Console.WriteLine(&amp;quot;  Returned to SecondCoroutine&amp;quot;);
        Console.WriteLine(&amp;quot;  Yielding from SecondCoroutine again...&amp;quot;);

        await Task.Yield();

        Console.WriteLine(&amp;quot;  Returned to SecondCoroutine again&amp;quot;);
        Console.WriteLine(&amp;quot;  Finished SecondCoroutine&amp;quot;);
    }

    // The third co-routine yields once.
    private static async Task ThirdCoroutine()
    {
        Console.WriteLine(&amp;quot;    Starting ThirdCoroutine&amp;quot;);
        Console.WriteLine(&amp;quot;    Yielding from ThirdCoroutine...&amp;quot;);

        await Task.Yield();

        Console.WriteLine(&amp;quot;    Returned to ThirdCoroutine&amp;quot;);
        Console.WriteLine(&amp;quot;    Finished ThirdCoroutine&amp;quot;);
    }
}
&lt;/pre&gt;

&lt;p&gt;To run the co-routines exclusively, we create a TaskFactory wrapping a ConcurrentExclusiveSchedulerPair.ExclusiveScheduler. We also create a convenience method RunCoroutineAsync, which takes a co-routine delegate and executes it on that scheduler.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Threading.Tasks;

partial class Program
{
    static void Main(string[] args)
    {
        var task = MainAsync();
        task.Wait();
        Console.ReadKey();
    }

    /// &amp;lt;summary&amp;gt;
    /// A task factory using an exclusive scheduler.
    /// &amp;lt;/summary&amp;gt;
    private static TaskFactory coroutineFactory = new TaskFactory(new ConcurrentExclusiveSchedulerPair().ExclusiveScheduler);

    /// &amp;lt;summary&amp;gt;
    /// Executes a co-routine using an exclusive scheduler.
    /// &amp;lt;/summary&amp;gt;
    private static async Task RunCoroutineAsync(Func&amp;lt;Task&amp;gt; coroutine)
    {
        await await coroutineFactory.StartNew(coroutine);
    }

    /// &amp;lt;summary&amp;gt;
    /// Starts three co-routines and awaits for them all to complete.
    /// &amp;lt;/summary&amp;gt;
    static async Task MainAsync()
    {
        var coroutines = new[]
        {
            RunCoroutineAsync(FirstCoroutine),
            RunCoroutineAsync(SecondCoroutine),
            RunCoroutineAsync(ThirdCoroutine),
        };

        await Task.WhenAll(coroutines);
    }
}
&lt;/pre&gt;


&lt;p&gt;The tricky part in this code is the double-await in RunCoroutineAsync. This is a &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"&gt;normal pattern&lt;/a&gt; when you use TaskFactory.StartNew with asynchronous delegates (alternatively, you could use Task.Unwrap).&lt;/p&gt;

&lt;p&gt;Logically, the "coroutine" parameter to RunCoroutineAsync is an asynchronous delegate (referring to one of the async co-routine methods). When we pass it to StartNew, we get back a Task&amp;lt;Task&amp;gt; representing the &lt;i&gt;starting&lt;/i&gt; of that asynchronous delegate on our exclusive scheduler. The inner Task represents the &lt;i&gt;completion&lt;/i&gt; of that asynchronous delegate. So the "await await" is used because we want RunCoroutineAsync to complete only when the asynchronous delegate completes.&lt;/p&gt;

&lt;p&gt;If we execute this program, we can clearly see the co-routine behavior:&lt;/p&gt;

&lt;pre&gt;
Starting FirstCoroutine
Yielding from FirstCoroutine...
  Starting SecondCoroutine
  Yielding from SecondCoroutine...
    Starting ThirdCoroutine
    Yielding from ThirdCoroutine...
Returned to FirstCoroutine
Yielding from FirstCoroutine again...
  Returned to SecondCoroutine
  Yielding from SecondCoroutine again...
    Returned to ThirdCoroutine
    Finished ThirdCoroutine
Returned to FirstCoroutine again
Finished FirstCoroutine
  Returned to SecondCoroutine
  Yielding from SecondCoroutine again...
  Returned to SecondCoroutine again
  Finished SecondCoroutine
&lt;/pre&gt;

&lt;p&gt;Just one final word. There are benign race conditions in this code: e.g., it's possible that FirstCoroutine may run and yield to itself before SecondCoroutine even starts. The ExclusiveScheduler does not make guarantees about queueing or fairness (though it does &lt;i&gt;try&lt;/i&gt; to be fair) - it only guarantees exclusive scheduling.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2313847868408422148/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/08/async-coroutines.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2313847868408422148'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2313847868408422148'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-coroutines.html' title='Async Coroutines'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7788616446212117634</id><published>2012-08-23T12:30:00.000-04:00</published><updated>2013-05-17T11:05:41.411-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async and Scheduled Concurrency</title><content type='html'>&lt;p&gt;Async doesn't play well with traditional synchronization primitives. For example, &lt;a href=" http://stackoverflow.com/questions/7612602/why-cant-i-use-the-await-operator-within-the-body-of-a-lock-statement"&gt;think about what happens when you await while holding a lock&lt;/a&gt;: the async method will &lt;i&gt;return&lt;/i&gt; to its caller, allowing other code to run on that thread while the lock is held. If the method later resumes on the same thread (e.g., a UI context), and the "other code" attempts to take the lock, then you have a deadlock. Another case is if the method resumes on a different thread (e.g.,  ConfigureAwait(false)); in that case the new thread will attempt to release a lock it doesn't have.&lt;/p&gt;

&lt;p&gt;The compiler will prevent await from within a lock{}, but it's not omnipotent; async code has similar problems with Semaphore, ManualResetEvent, or really any other kind of traditional synchronization primitive that assumes thread affinity and works by blocking.&lt;/p&gt;

&lt;blockquote&gt;You &lt;i&gt;can&lt;/i&gt; use the traditional primitives as "building blocks". E.g., ConcurrentDictionary will use locks internally, and it can be safely used from async code. This is permitted because all the code within the locks is synchronous; there is no way for the async method to yield while holding one of ConcurrentDictionary's internal locks.&lt;/blockquote&gt;

&lt;h4&gt;Async Concurrency Options&lt;/h4&gt;

&lt;p&gt;The best option is to restructure your code so that concurrency is removed. Instead of having different methods or different objects contending over the same state, focus on the data being moved. Often, you can use &lt;a href="http://msdn.microsoft.com/en-us/devlabs/gg585582.aspx"&gt;TPL Dataflow&lt;/a&gt; or &lt;a href="http://msdn.microsoft.com/en-us/data/gg577609.aspx"&gt;Rx&lt;/a&gt; to represent the logic more naturally, leaving all concurrency internal to those libraries. TPL Dataflow is built on Tasks and plays very well with async. Rx is a bit different but it also plays well with async.&lt;/p&gt;

&lt;blockquote&gt;This is yet another example of async code gently pushing you towards a functional programming style.&lt;/blockquote&gt;

&lt;p&gt;The first option isn't always feasible, though. If you want minimal impact to your existing code, you can check out Stephen Toub's series where he creates async-friendly versions of &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266920.aspx"&gt;ManualResetEvent&lt;/a&gt;, &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266923.aspx"&gt;AutoResetEvent&lt;/a&gt;, &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266930.aspx"&gt;CountdownEvent&lt;/a&gt;, &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/11/10266932.aspx"&gt;Barrier&lt;/a&gt;, &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266983.aspx"&gt;Semaphore&lt;/a&gt;, &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx"&gt;lock&lt;/a&gt;, and &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/building-async-coordination-primitives-part-7-asyncreaderwriterlock.aspx"&gt;ReaderWriterLock&lt;/a&gt;. There's some tremendous knowledge in these posts, even if you don't use the code.&lt;/p&gt;

&lt;p&gt;Today, though, I'm going to explore a third option: &lt;b&gt;scheduled concurrency&lt;/b&gt;. A lot of people aren't even aware that it's an option.&lt;/p&gt;

&lt;h4&gt;Async Scheduled Concurrency&lt;/h4&gt;

&lt;p&gt;By default, &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;when an async method resumes after awaiting a Task, it resumes in a "context"&lt;/a&gt;. I'm always careful not to say "synchronization context" there; the actual async context is SynchronizationContext &lt;i&gt;unless it is null&lt;/i&gt;, in which case the async context is the current TaskScheduler.&lt;/p&gt;

&lt;p&gt;So if we want to control the async context, one option is to implement a custom SynchronizationContext. That's somewhat painful. It does have its uses (e.g., async unit testing), but it's not something we want to do a lot.&lt;/p&gt;

&lt;p&gt;The other option - using a custom TaskScheduler - is what we'll be considering today. Most of the time, you'll only need to specify the TaskScheduler when creating the highest-level async Task. By default, the async context (including our TaskScheduler) will be inherited by all the async methods in the call tree.&lt;/p&gt;

&lt;blockquote&gt;Remember, resuming the async context after an await is &lt;b&gt;by default&lt;/b&gt;. You can always jump out of your TaskScheduler by awaiting ConfigureAwait(false).&lt;/blockquote&gt;

&lt;p&gt;There are two important TaskSchedulers you should know about. The first one is TaskScheduler.Default, which schedules tasks to the ThreadPool. That one's not very interesting because it's the default behavior if we don't provide a custom TaskScheduler.&lt;/p&gt;

&lt;p&gt;The other TaskScheduler is very interesting. It's new in .NET 4.5 and goes by the name of &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.concurrentexclusiveschedulerpair(v=VS.110).aspx"&gt;ConcurrentExclusiveScheculerPair&lt;/a&gt;. It's actually a pair of schedulers: one concurrent and one exclusive. It acts like a reader/writer lock, only at the scheduler level. So instead of blocking a task (synchronously via ReaderWriterLock or asynchronously via &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/building-async-coordination-primitives-part-7-asyncreaderwriterlock.aspx"&gt;AsyncReaderWriterLock&lt;/a&gt;), it simply doesn't execute the task until it's permitted to run.&lt;/p&gt;

&lt;blockquote&gt;As of this writing, the .NET 4.5 docs are a bit lacking. For more information on the design of ConcurrentExclusiveSchedulerPair, see &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2010/04/08/9990422.aspx"&gt;this blog post by Stephen Toub&lt;/a&gt; (who else?) or &lt;a href="http://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364/sourcecode?fileId=44488&amp;pathId=2072038893"&gt;the original implementation&lt;/a&gt;. At that time, it was called ConcurrentExclusiveInterleave.&lt;/blockquote&gt;

&lt;p&gt;ConcurrentExclusiveSchedulerPair actually handles any mixture of these scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reader/writer locks (obviously). Schedule reader tasks to ConcurrentScheduler and writer tasks to ExclusiveScheduler.&lt;/li&gt;
&lt;li&gt;Plain 'ol locks (obviously). Schedule all tasks to ExclusiveScheduler.&lt;/li&gt;
&lt;li&gt;Limited concurrency. You can pass a parameter to ConcurrentExclusiveSchedulerPair to indicate how many concurrent tasks can be scheduled on the ConcurrentScheduler at a time. Then schedule all tasks to ConcurrentScheduler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's also possible to define your own special TaskScheduler, if you really need one. E.g., a UI scheduler that gave its tasks a low dispatcher priority, or an STA scheduler for COM interop.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; When an asynchronous method awaits, it returns back to its context. This means that ExclusiveScheduler is perfectly happy to run one task &lt;i&gt;at a time&lt;/i&gt;, not one task &lt;i&gt;until it completes&lt;/i&gt;. As soon as an asynchronous method awaits, it's no longer the "owner" of the ExclusiveScheduler. Stephen Toub's async-friendly primitives like &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/02/12/10266988.aspx"&gt;AsyncLock&lt;/a&gt; use a different strategy, allowing an asynchronous method to hold the lock while it awaits.&lt;/p&gt;

&lt;!--

&lt;h4&gt;Schedulers, Schedulers, Everywhere!&lt;/h4&gt;

&lt;p&gt;Schedulers can actually do much more than just synchronization. They can also specify a context.&lt;/p&gt;

&lt;p&gt;The most obvious example is TaskScheduler.FromCurrentSynchronizationContext, which is a TaskScheduler that schedules tasks on the current SynchronizationContext. Await does't use this scheduler because it will use SynchronizationContext directly if it is present.&lt;/p&gt;

&lt;p&gt;What about other contexts? Stephen Toub (again) has been there and done that with his &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2010/04/07/9990421.aspx"&gt;StaTaskScheduler&lt;/a&gt; (for scheduling tasks to an STA thread for COM interop) and &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2010/04/09/9990424.aspx"&gt;many other interesting schedulers&lt;/a&gt;. However, out of all of these, only ConcurrentExclusiveSchedulerPair made it into production.&lt;/p&gt;

--&gt;

&lt;h4&gt;Mix and Match&lt;/h4&gt;

&lt;p&gt;In this blog post, I've mentioned three options for concurrency control: TPL Dataflow/Rx, async-friendly primitives, and scheduled concurrency. These are not exclusive.&lt;/p&gt;

&lt;p&gt;ConcurrentExclusiveSchedulerPair is particularly useful with TPL Dataflow. Using dataflow, you can define a "mesh" for your data to travel through, and you can use ConcurrentExclusiveSchedulerPair to synchronize or throttle any parts of that mesh. Combining TPL Dataflow with scheduled concurrency is truly powerful!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7788616446212117634/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7788616446212117634'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7788616446212117634'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html' title='Async and Scheduled Concurrency'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5019631101409390674</id><published>2012-08-16T12:30:00.000-04:00</published><updated>2012-09-30T12:59:32.992-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Asynchronous Lazy Initialization</title><content type='html'>&lt;p&gt;When you have a lazy-created value, it's often useful to lazy-create it in an asynchronous fashion. A simple Lazy&amp;lt;T&amp;gt; provides lazy initialization, but the initialization executes synchronously when the value is created.&lt;/p&gt;

&lt;p&gt;Stephen Toub first introduced this approach &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2011/01/15/10116210.aspx"&gt;in a blog post way back in January, 2011&lt;/a&gt;. This is his code, which I've updated, documented, and tweaked slightly:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt; 
/// &amp;lt;summary&amp;gt;
/// Provides support for asynchronous lazy initialization. This type is fully threadsafe.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of object that is being asynchronously initialized.&amp;lt;/typeparam&amp;gt;
public sealed class AsyncLazy&amp;lt;T&amp;gt;
{
    /// &amp;lt;summary&amp;gt;
    /// The underlying lazy task.
    /// &amp;lt;/summary&amp;gt;
    private readonly Lazy&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; instance;

    /// &amp;lt;summary&amp;gt;
    /// Initializes a new instance of the &amp;lt;see cref=&amp;quot;AsyncLazy&amp;amp;lt;T&amp;amp;gt;&amp;quot;/&amp;gt; class.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;factory&amp;quot;&amp;gt;The delegate that is invoked on a background thread to produce the value when it is needed.&amp;lt;/param&amp;gt;
    public AsyncLazy(Func&amp;lt;T&amp;gt; factory)
    {
        instance = new Lazy&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;(() =&amp;gt; Task.Run(factory));
    }

    /// &amp;lt;summary&amp;gt;
    /// Initializes a new instance of the &amp;lt;see cref=&amp;quot;AsyncLazy&amp;amp;lt;T&amp;amp;gt;&amp;quot;/&amp;gt; class.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;factory&amp;quot;&amp;gt;The asynchronous delegate that is invoked on a background thread to produce the value when it is needed.&amp;lt;/param&amp;gt;
    public AsyncLazy(Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt; factory)
    {
        instance = new Lazy&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;(() =&amp;gt; Task.Run(factory));
    }

    /// &amp;lt;summary&amp;gt;
    /// Asynchronous infrastructure support. This method permits instances of &amp;lt;see cref=&amp;quot;AsyncLazy&amp;amp;lt;T&amp;amp;gt;&amp;quot;/&amp;gt; to be await'ed.
    /// &amp;lt;/summary&amp;gt;
    public TaskAwaiter&amp;lt;T&amp;gt; GetAwaiter()
    {
        return instance.Value.GetAwaiter();
    }

    /// &amp;lt;summary&amp;gt;
    /// Starts the asynchronous initialization, if it has not already started.
    /// &amp;lt;/summary&amp;gt;
    public void Start()
    {
        var unused = instance.Value;
    }
}
&lt;/pre&gt;

&lt;p&gt;The idea is to have a lazy-initialized task, which represents the initialization of the resource.&lt;/p&gt;

&lt;p&gt;The factory delegate passed to the constructor can be either synchronous (Func&amp;lt;T&amp;gt;) or asynchronous (Func&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;); either way, it will be run on a thread pool thread. It will not be executed more than once, even when multiple threads attempt to start it simultaneously (this is guaranteed by the Lazy type).&lt;/p&gt;

&lt;p&gt;There are two "triggers" which can start the initialization: awaiting an AsyncLazy&amp;lt;T&amp;gt; instance or explicitly calling Start. When the factory delegate completes, the value is available, and any methods awaiting the AsyncLazy&amp;lt;T&amp;gt; instance receive the value.&lt;/p&gt;

&lt;p&gt;It takes a few minutes to wrap your head around the theory, but it's really easy in practice:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
private static readonly AsyncLazy&amp;lt;MyResource&amp;gt; myResource = new AsyncLazy&amp;lt;MyResource&amp;gt;(
    () =&amp;gt; new MyResource()
    // or:
    // async () =&amp;gt; { var ret = new MyResource(); await ret.InitAsync(); return ret; }
);

...

public async Task UseResource()
{
  MyResource resource = await myResource;
  ...
}
&lt;/pre&gt;

&lt;h4&gt;Update, 2012-09-30&lt;/h4&gt;

&lt;p&gt;The AsyncLazy&amp;lt;T&amp;gt; type is now part of &lt;a href="http://nitoasyncex.codeplex.com/"&gt;Nito.AsyncEx&lt;/a&gt;, which you can get via NuGet.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5019631101409390674/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5019631101409390674'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5019631101409390674'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html' title='Asynchronous Lazy Initialization'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7638749944990556712</id><published>2012-08-16T07:27:00.000-04:00</published><updated>2012-08-16T07:27:25.097-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='IT'/><title type='text'>Windows 8 Boot to Differencing VHD</title><content type='html'>&lt;p&gt;Last night I installed Windows 8, booting to a differencing vhd. This is a bit of an advanced setup, so I thought I'd quickly type up my reasoning for this approach and the steps taken. Of course, you do this at your own risk, etc, etc. I also am assuming that you have a currently working Windows 7 or Windows 8 Preview/Beta installation.&lt;/p&gt;

&lt;p&gt;We only have one computer in our house. Sometimes it's used for work, and sometimes it's used for entertainment. I wanted to have a system that had minimal software for work, but was also available for the family to use.&lt;/p&gt;

&lt;h4&gt;Considering Hyper-V&lt;/h4&gt;

&lt;p&gt;One of the (many) hallmarks of Windows 8 is that &lt;a href="http://blogs.msdn.com/b/b8/archive/2011/09/07/bringing-hyper-v-to-windows-8.aspx"&gt;Microsoft is providing client Hyper-V&lt;/a&gt;. Using Hyper-V, I could run multiple virtual computers at the same time. Hyper-V (like every virtualization system) also has a nice "snapshot" feature. However, I decided not to go with Hyper-V because it's not a very seamless experience - e.g., for USB devices to work, you have to actually remote desktop into the VM.&lt;/p&gt;

&lt;p&gt;I made the decision to boot from VHD instead. With this approach, only one OS can be running at a time - the only thing virtualized is the disk access, and it's virtualized within the OS itself, not by another full layer (like Hyper-V). So, boot from VHD runs faster and you get full access to hardware, but you lose the multiple-VMs-running-at-once that you can get from Hyper-V. Also, you can use snapshots with boot-from-VHD, but they're not as easy to use as snapshots in Hyper-V.&lt;/p&gt;

&lt;p&gt;Everyone's needs are different, so choose wisely.&lt;/p&gt;

&lt;h4&gt;Emulating Snapshots with Differencing VHDs&lt;/h4&gt;

&lt;p&gt;VHD stands for Virtual Hard Disk, and that's just what it is: a disk file that contains a full hard disk. Usually, you'll want to create a "dynamic VHD", which only takes up as much physical disk space as it needs to; empty parts of the VHD are not actually saved to disk.&lt;/p&gt;

&lt;blockquote&gt;Terminology alert: "dynamic VHD" is completely different than "dynamic disk".&lt;/blockquote&gt;

&lt;p&gt;There's another type of VHD: a "differencing VHD". This is a "child" VHD that only saves the &lt;i&gt;differences&lt;/i&gt; from its &lt;i&gt;parent&lt;/i&gt; VHD. We can make this work kind of like a snapshot.&lt;/p&gt;

&lt;p&gt;Here's where I'd like to end up: one VHD that is just the OS freshly installed (call it "Win8-base.vhd"). Then create a child VHD that is the OS activated with basic setups: locale, family user accounts, really basic stuff like that (call it "Win8.vhd"). Finally, I'll create two child VHDs of that one: one for my development ("Win8Dev.vhd") and one for family entertainment ("Win8Ent.vhd").&lt;/p&gt;

&lt;p&gt;That way, all my development tools will live on "Win8Dev.vhd". In a couple of years when VS2014 (or whatever) comes out, I can just nuke it and create another child VHD with the new toolset.&lt;/p&gt;

&lt;p&gt;Likewise, all the entertainment programs go on "Win8Ent.vhd". This one won't be nuked unless it gets into a really bad state, but it will have many programs installed and uninstalled over the years. And I prefer to keep that isolated from my development setup.&lt;/p&gt;

&lt;p&gt;You can create and delete differencing VHDs at will. You usually don't end up doing this a lot, though, because there isn't a slick UI for it (yet).&lt;/p&gt;

&lt;h4&gt;Step 1 - Install Windows 8&lt;/h4&gt;

&lt;p&gt;By far, the easiest way to install Windows 8 on a VHD is to first boot into Windows 8. Yeah, I'm not kidding, unfortunately - it's a real chicken-and-egg problem. There are &lt;a href="http://www.hanselman.com/blog/GuideToInstallingAndBootingWindows8DeveloperPreviewOffAVHDVirtualHardDisk.aspx"&gt;ways to do this&lt;/a&gt; by breaking into a command prompt during a Windows 8 installation while the option is right in front of you to destroy your current OS, but that approach just seems unnecessarily risky compared to this one.&lt;/p&gt;

&lt;p&gt;If you've already got Windows 8 RTM (as of the time of this writing), then you (or a friend) probably have Windows 8 Preview/Beta installed somewhere, and you can use that. Otherwise, fire up &lt;a href="http://www.vmware.com/products/player/"&gt;VMWare&lt;/a&gt; or &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; and install Windows 8.&lt;/p&gt;

&lt;h4&gt;Step 2 - Use Convert-WindowsImage&lt;/h4&gt;

&lt;p&gt;Once you have Windows 8 installed (virtually, if necessary), download the excellent &lt;a href="http://gallery.technet.microsoft.com/scriptcenter/Convert-WindowsImageps1-0fe23a8f"&gt;Convert-WindowsImage&lt;/a&gt; PowerShell script (remember to &lt;a href="http://support.microsoft.com/kb/883260"&gt;unblock&lt;/a&gt; it and &lt;a href="http://technet.microsoft.com/en-us/library/ee176961.aspx"&gt;Set-ExecutionPolicy RemoteSigned&lt;/a&gt;, or the OS won't let you run it).&lt;/p&gt;

&lt;p&gt;I like to run Convert-WindowsImage with a user interface. To do this, hit the Windows key, type "powershell", right-click PowerShell and choose "Run as Administrator". Then you can change to the directory containing the script file and execute ".\Convert-WindowsImage.ps1 -ShowUI".&lt;/p&gt;

&lt;p&gt;The user interface is pretty self-explanatory. You choose an input file (e.g., your Windows 8 ISO), select an edition, make sure the VHD is large enough (remember, a dynamic VHD won't actually take up that much disk space unless it is full), choose where to save the VHD, and click the big button. If you don't choose the VHD file name, this script will give it some huge name and stick it on your desktop.&lt;/p&gt;

&lt;p&gt;Get coffee. If you're running virtually, this will take a really long time (several hours for me).&lt;/p&gt;

&lt;p&gt;One more thing: Windows 8 will helpfully offer to format the VHD for you. Do &lt;b&gt;not&lt;/b&gt; do this; Convert-WindowsImage will format it.&lt;/p&gt;

&lt;h4&gt;Step 3 (optional) - Create Differencing VHD&lt;/h4&gt;

&lt;p&gt;Once you have the VHD (which I placed at "C:\vhd\Win8-base.vhd"), you're ready to go! For myself, I'm going to create the first differencing VHD before proceeding. I have a tendency to really mess stuff up, and keeping that initial VHD absolutely pure gives me a nice retreat in case something goes wrong.&lt;/p&gt;

&lt;p&gt;Creating a differencing VHD is not difficult, but it's not particularly easy, either. Just run the following &lt;a href="http://technet.microsoft.com/en-us/library/cc770877"&gt;diskpart&lt;/a&gt; commands in an elevated command prompt (this can be done in Windows 7, too):&lt;/p&gt;

&lt;pre&gt;
&amp;gt; diskpart
&amp;gt; create vdisk file=C:\vhd\Win8.vhd parent=C:\vhd\Win8-base.vhd
&amp;gt; exit
&lt;/pre&gt;

&lt;p&gt;It should only take a few seconds to create the differencing VHD, because all it really needs to do is reference the parent VHD.&lt;/p&gt;

&lt;h4&gt;Step 4 - Backup BCD&lt;/h4&gt;

&lt;p&gt;OK, now we're to the point where we edit the BCD (Boot Configuration Data). This is where it gets scary.&lt;/p&gt;

&lt;p&gt;So the first thing we do (of course) is backup our current BCD so that we can restore it later when... er... &lt;b&gt;if&lt;/b&gt; we mess anything up.&lt;/p&gt;

&lt;p&gt;Back to the elevated command prompt, using &lt;a href="http://technet.microsoft.com/en-us/library/cc731662.aspx"&gt;bcdedit&lt;/a&gt; (again, Windows 7 can do this part):&lt;/p&gt;

&lt;pre&gt;
&amp;gt; bcdedit /export C:\vhd\bcdbackup
&lt;/pre&gt;

&lt;h4&gt;Step 5 - Add Boot Entry&lt;/h4&gt;

&lt;p&gt;First, mount the VHD you want to boot to. If you created a differencing VHD in Step 3, then you want to use the child VHD ("Win8.vhd"), not the parent VHD ("Win8-base.vhd"). On Windows 8 you can just right-click the VHD and select Mount; on Windows 7 you have to go into the Disk Manager, select Actions -&gt; Attach VHD, and browse to the VHD file (I mounted mine read-only).&lt;/p&gt;

&lt;p&gt;Then (assuming that it was mounted at drive K:), run bcdboot from an elevated command prompt (this also works on Windows 7):&lt;/p&gt;

&lt;pre&gt;
&amp;gt; bcdboot k:\windows
&lt;/pre&gt;

&lt;p&gt;Then you reboot. Crossing your fingers or saying a brief prayer would not hurt.&lt;/p&gt;

&lt;h4&gt;Step 6 - Repeat as Necessary&lt;/h4&gt;

&lt;p&gt;You can repeat steps 3 (creating a differencing VHD from an existing VHD) and 5 (mounting the child VHD and adding a boot entry) as many times as you like.&lt;/p&gt;

&lt;p&gt;You may also want to customize the boot menu, which can be done by using bcdedit (in this example, I list all of my boot options and then change the description of my old Win8 DevPreview from "Windows 8" to "Old Win8":&lt;/p&gt;

&lt;pre&gt;
&amp;gt; bcdedit

Windows Boot Manager
--------------------
identifier              {bootmgr}
device                  partition=\Device\HarddiskVolume1
description             Windows Boot Manager
locale                  en-US
inherit                 {globalsettings}
integrityservices       Enable
default                 {current}
resumeobject            {244905a5-985a-11de-8155-c187f01c6abe}
displayorder            {current}
                        {244905a2-985a-11de-8155-c187f01c6abe}
                        {2449059d-985a-11de-8155-c187f01c6abe}
toolsdisplayorder       {memdiag}
timeout                 30

Windows Boot Loader
-------------------
identifier              {current}
device                  partition=C:
path                    \windows\system32\winload.exe
description             Windows 8
locale                  en-US
inherit                 {bootloadersettings}
recoverysequence        {244905a7-985a-11de-8155-c187f01c6abe}
integrityservices       Enable
recoveryenabled         Yes
allowedinmemorysettings 0x15000075
osdevice                partition=C:
systemroot              \windows
resumeobject            {244905a5-985a-11de-8155-c187f01c6abe}
nx                      OptIn
bootmenupolicy          Standard

Windows Boot Loader
-------------------
identifier              {244905a2-985a-11de-8155-c187f01c6abe}
device                  vhd=[G:]\vhd\vs2012rc.vhd
path                    \Windows\system32\winload.exe
description             Windows 8
locale                  en-US
inherit                 {bootloadersettings}
recoverysequence        {244905a3-985a-11de-8155-c187f01c6abe}
integrityservices       Enable
recoveryenabled         Yes
allowedinmemorysettings 0x15000075
osdevice                vhd=[G:]\vhd\vs2012rc.vhd
systemroot              \Windows
resumeobject            {244905a1-985a-11de-8155-c187f01c6abe}
nx                      OptIn
bootmenupolicy          Standard

Windows Boot Loader
-------------------
identifier              {2449059d-985a-11de-8155-c187f01c6abe}
device                  partition=G:
path                    \Windows\system32\winload.exe
description             Windows Server 2008 R2
locale                  en-US
inherit                 {bootloadersettings}
recoverysequence        {2449059e-985a-11de-8155-c187f01c6abe}
recoveryenabled         Yes
osdevice                partition=G:
systemroot              \Windows
resumeobject            {2449059c-985a-11de-8155-c187f01c6abe}
nx                      OptOut

&amp;gt; bcdedit /set {244905a2-985a-11de-8155-c187f01c6abe} description "Old Win8"
&lt;/pre&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7638749944990556712/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7638749944990556712'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7638749944990556712'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html' title='Windows 8 Boot to Differencing VHD'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4674692382839314080</id><published>2012-08-09T12:30:00.002-04:00</published><updated>2013-05-17T11:05:07.914-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Async Doesn't Change the HTTP Protocol</title><content type='html'>&lt;p&gt;In my experience, there are two questions commonly asked by programmers new to async after they've learned the basics.&lt;/p&gt;

&lt;p&gt;The most-asked question is &lt;a href="http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html"&gt;"why does my partially-async code deadlock?"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second-most-asked question usually takes a form like this: "I have a long-running method on my web service. I made it async, but it doesn't return back to the client when it awaits!" Or sometimes like this: "I have to call this web service. How do I use async with progress reporting to get updates before the call completes?"&lt;/p&gt;

&lt;p&gt;The answer is: Async doesn't change the HTTP protocol.&lt;/p&gt;

&lt;p&gt;The HTTP protocol is centered around a request and a matching response. That's it. There's no progress reporting, or multiple responses per request, or anything like that. If you need progress reporting, or immediate responses, or some stateful concept of long-running operations on the server, then you need to build it yourself using a higher level of abstraction.&lt;/p&gt;

&lt;p&gt;You can use async on the client and server, but that won't change the way the HTTP protocol works.&lt;/p&gt;

&lt;p&gt;When you use async on the client side (e.g., with HttpClient), then you can treat the entire web service call as a single asynchronous operation. But you can't get progress support, because the HTTP protocol doesn't support it.&lt;/p&gt;

&lt;p&gt;When you use async on the server side (e.g., with ApiController), then you can treat each web request as an asynchronous operation. But when you yield, you only yield to the web server thread pool, not to the client. HTTP only allows a single response, so the response can only be sent when the request is fully complete.&lt;/p&gt;

&lt;p&gt;Now, you can &lt;i&gt;use&lt;/i&gt; async to create higher-level abstractions. For example, you can invent the notion of a "workflow" on the server: a POST call could create the workflow and return a unique identifier, and a GET call could return the current status of the workflow item (e.g., percent complete). Once this is implemented on the server, you could wrap multiple HTTP calls and responses into a single async method on the client. This higher-level async abstraction could support progress notification via IProgress.&lt;/p&gt;

&lt;blockquote&gt;Frameworks such as SignalR can make implementation easier.&lt;/blockquote&gt;

&lt;p&gt;There aren't too many examples of doing that these days; async is still pretty new. But I'm sure that higher-level async abstractions will become a common approach in the future.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4674692382839314080/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/08/async-doesnt-change-http-protocol.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4674692382839314080'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4674692382839314080'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-doesnt-change-http-protocol.html' title='Async Doesn&apos;t Change the HTTP Protocol'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124</id><published>2012-08-02T12:30:00.002-04:00</published><updated>2012-10-12T16:44:52.235-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async WCF Today and Tomorrow</title><content type='html'>&lt;p&gt;In the near future, all of my web services will be changed to REST APIs served via the Web API library. However, for now I do have some WCF services that are implemented using the Async CTP, and I thought it would be helpful to describe how it was done.&lt;/p&gt;

&lt;p&gt;My current production services use the Task-based Asynchronous Pattern (TAP) on VS2010 with the Async CTP. You can do it the same way using VS2012 with the Async Targeting Pack for .NET 4.0. I'll also describe how WCF is becoming async-friendly in the near future with .NET 4.5.&lt;/p&gt;

&lt;p&gt;To keep things simple, I'm just going to expose a "Calculator" service that has a single "Divide" method. If there is a DivideByZeroException, the Calculator service will raise a CalculatorFault.&lt;/p&gt;

&lt;h4&gt;Today&lt;/h4&gt;

&lt;p&gt;Let's tackle the server first. If we want to create an asynchronous WCF service method, we have to set OperationContract.AsyncPattern to true and follow the Asynchronous Programming Model (APM) pattern:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[DataContract]
public class CalculatorFault
{
  [DataMember]
  public string Message { get; set; }
}

[ServiceContract]
public interface ICalculator
{
  // Synchronous equivalent:
  //  [OperationContract]
  //  [FaultContract(typeof(CalculatorFault))]
  //  uint Divide(uint numerator, uint denominator);

  [OperationContract(AsyncPattern = true)]
  [FaultContract(typeof(CalculatorFault))]
  IAsyncResult BeginDivide(uint numerator, uint denominator, AsyncCallback callback, object state);
  uint EndDivide(IAsyncResult asyncResult);
}
&lt;/pre&gt;

&lt;p&gt;In WCF, the "asynchronicity" of the server is an implementation detail. If you look at the metadata that is published for ICalculator, it looks exactly like the synchronous equivalent; the ICalculator metadata just describes a single operation named "Divide".&lt;/p&gt;

&lt;p&gt;If we're going to have an asynchronous server, we're going to want to use the Task-based Asynchronous Pattern (TAP) to write it. So here's our implementation, error handling and all:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public class Calculator : ICalculator
{
  public async Task&amp;lt;uint&amp;gt; DivideAsync(uint numerator, uint denominator)
  {
    try
    {
      var myTask = Task.Factory.StartNew(() =&amp;gt; numerator / denominator);
      var result = await myTask;
      return result;
    }
    catch (DivideByZeroException)
    {
      throw new FaultException&amp;lt;CalculatorFault&amp;gt;(new CalculatorFault { Message = "Undefined result" });
    }
  }
}
&lt;/pre&gt;

&lt;blockquote&gt;I'm using StartNew for example code; real code can use Task.Run (TaskEx.Run for Async CTP) if you want to run code on a background thread.&lt;/blockquote&gt;

&lt;p&gt;OK, so we've got our implementation (using TAP), and our interface (using APM). Now we have to wire them together by writing Begin/End wrapper methods around our TAP method:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public class Calculator : ICalculator
{
  public IAsyncResult BeginDivide(uint numerator, uint denominator, AsyncCallback callback, object state)
  {
    // See the Task-Based Asynchronous Pattern document for an explanation of the Begin/End implementations.
    var tcs = new TaskCompletionSource&amp;lt;uint&amp;gt;(state);
    var task = DivideAsync(numerator, denominator);
    task.ContinueWith(t =&amp;gt;
    {
      if (t.IsFaulted)
        tcs.TrySetException(t.Exception.InnerExceptions);
      else if (t.IsCanceled)
        tcs.TrySetCanceled();
      else
        tcs.TrySetResult(t.Result);

      if (callback != null)
        callback(tcs.Task);
    });

    return tcs.Task;
  }

  public uint EndDivide(IAsyncResult asyncResult)
  {
    try
    {
      return ((Task&amp;lt;uint&amp;gt;)asyncResult).Result;
    }
    catch (AggregateException ex)
    {
      // Note: the original stack trace is lost by this re-throw, but it doesn't really matter.
      throw ex.InnerException;
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;The wrappers are straightforward. The only tricky part is in the End wrapper where we re-throw a FaultException.&lt;/p&gt;

&lt;p&gt;The wrappers are also tedious, especially if you have a lot of methods to wrap. My &lt;a href="http://nitoasyncex.codeplex.com/"&gt;AsyncEx library&lt;/a&gt; includes AsyncFactory.ToBegin and AsyncFactory.ToEnd methods that handle the TAP-to-APM conversion cleanly. That's what I use:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public class Calculator : ICalculator
{
  public IAsyncResult BeginDivide(uint numerator, uint denominator, AsyncCallback callback, object state)
  {
    var task = DivideAsync(numerator, denominator);
    return AsyncFactory&amp;lt;uint&amp;gt;.ToBegin(task, callback, state);
  }

  public uint EndDivide(IAsyncResult asyncResult)
  {
    return AsyncFactory&amp;lt;uint&amp;gt;.ToEnd(asyncResult);
  }
}
&lt;/pre&gt;

&lt;p&gt;At this point, we have a working server that is implemented asynchronously.&lt;/p&gt;

&lt;p&gt;Now, let's turn our attention to the client. In WCF, either the service or the client can be either synchronous or asynchronous; they don't have to match. I usually want asynchronous clients, though - and if they're asynchronous, I want them to be TAP!&lt;/p&gt;

&lt;p&gt;Fortunately, this is pretty easy. Create a client proxy &lt;i&gt;enabling asynchronous methods&lt;/i&gt; (under the "advanced" options). By default, the generated proxy supports APM and EAP (Event-based Asynchronous Programming), but not TAP.&lt;/p&gt;

&lt;p&gt;There are two ways to add TAP support. You can add it manually by implementing a TAP wrapper method around the APM methods:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static class Program
{
  // Wrap those Begin/End methods back into a Task-based API.
  public static Task&amp;lt;uint&amp;gt; DivideAsyncTask(this CalculatorClient client, uint numerator, uint denominator)
  {
    return Task&amp;lt;uint&amp;gt;.Factory.FromAsync(client.BeginDivide, client.EndDivide, numerator, denominator, null);
  }
}
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Or,&lt;/b&gt; you can build the sample project at "My Documents\Microsoft Visual Studio Async CTP\Samples\(C# WCF) Stock Quotes", copy the TaskWsdlImportExtension.dll into your solution, and modify your app.config to use it for building WCF proxies (as described in &lt;a href="http://www.larswilhelmsen.com/2010/11/05/taskwsdlimportextensiona-hidden-gem-in-the-c-vnext-async-ctp-samples/"&gt;this blog post&lt;/a&gt;):&lt;/p&gt;

&lt;pre class="brush:xml"&gt;
&amp;lt;configuration&amp;gt;
 &amp;lt;system.serviceModel&amp;gt;
  &amp;lt;client&amp;gt;
   &amp;lt;metadata&amp;gt;
    &amp;lt;wsdlImporters&amp;gt;
     &amp;lt;extension type=&amp;quot;TaskWsdlImportExtension.TaskAsyncWsdlImportExtension, TaskWsdlImportExtension&amp;quot; /&amp;gt;
    &amp;lt;/wsdlImporters&amp;gt;
   &amp;lt;/metadata&amp;gt;
  &amp;lt;/client&amp;gt;
 &amp;lt;/system.serviceModel&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This is more work to set up, but once it's done you don't have to write any TAP wrappers at all. TaskAsyncWsdlImportExtension does them for you. Unfortunately, this doesn't seem to be an option on VS2012 with the Async Targeting Pack.&lt;/p&gt;

&lt;blockquote&gt;Side note: TaskWsdlImportExtension will generate a method called "DivideAsync", while our manual wrapper uses "DivideAsyncTask" - why the difference? Well, we &lt;i&gt;would&lt;/i&gt; have used "DivideAsync", but the name was already taken by the EAP method. TaskWsdlImportExtension does not generate the EAP methods, so it can use the "DivideAsync" name.&lt;/blockquote&gt;

&lt;p&gt;Now, we're ready to actually call the client. I have some TAP code that uses the WCF client proxy ("CallCalculator") as well as a simple Main:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static class Program
{
  static async Task CallCalculator()
  {
    try
    {
      var proxy = new CalculatorClient();
      // The following call should be "DivideAsyncTask" if we wrote our own wrappers.
      var task = proxy.DivideAsync(10, 0);
      var result = await task;
      Console.WriteLine(&amp;quot;Result: &amp;quot; + result);
    }
    catch (FaultException&amp;lt;CalculatorFault&amp;gt; ex)
    {
      Console.Error.WriteLine(&amp;quot;Error: &amp;quot; + ex.Detail.Message);
    }
  }

  static void Main(string[] args)
  {
    try
    {
      CallCalculator().Wait();
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
    }

    Console.ReadKey();
  }
}
&lt;/pre&gt;

&lt;blockquote&gt;In this sample code, Main is blocking on the Task returned from CallCalculator. This is not recommended for real-world code.&lt;/blockquote&gt;

&lt;h4&gt;Tomorrow&lt;/h4&gt;

&lt;p&gt;Well, that's quite a bit of work to enable async!&lt;/p&gt;

&lt;p&gt;The good news is: in .NET 4.5, &lt;a href="http://blogs.msdn.com/b/endpoint/archive/2010/11/13/simplified-asynchronous-programming-model-in-wcf-with-async-await.aspx"&gt;this all gets easier&lt;/a&gt; (&lt;a href="http://www.webcitation.org/69BfBD7pO"&gt;webcite&lt;/a&gt;). How much easier, you ask?&lt;/p&gt;

&lt;p&gt;A &lt;b&gt;lot&lt;/b&gt; easier.&lt;/p&gt;

&lt;p&gt;Let's start over, this time targeting .NET 4.5 for both server and client. First, the service interface:&lt;/p&gt;
&lt;pre class="brush:csharp"&gt;
[DataContract]
public class CalculatorFault
{
  [DataMember]
  public string Message { get; set; }
}

[ServiceContract]
public interface ICalculator
{
  // Synchronous equivalent:
  //  [OperationContract]
  //  [FaultContract(typeof(CalculatorFault))]
  //  uint Divide(uint numerator, uint denominator);

  [OperationContract]
  [FaultContract(typeof(CalculatorFault))]
  Task&amp;lt;uint&amp;gt; DivideAsync(uint numerator, uint denominator);
}
&lt;/pre&gt;

&lt;p&gt;OK, it's a little simpler so far, because we can declare service methods returning Task instead of a Begin/End pair.&lt;/p&gt;

&lt;p&gt;The core implementation is &lt;i&gt;exactly the same:&lt;/i&gt;&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public class Calculator : ICalculator
{
  public async Task&amp;lt;uint&amp;gt; DivideAsync(uint numerator, uint denominator)
  {
    try
    {
      var myTask = Task.Factory.StartNew(() =&amp;gt; numerator / denominator);
      var result = await myTask;
      return result;
    }
    catch (DivideByZeroException)
    {
      throw new FaultException&amp;lt;CalculatorFault&amp;gt;(new CalculatorFault { Message = "Undefined result" });
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;And... wait for it... that's it! No need for any APM wrapper methods! The WCF runtime is intelligent enough to understand that this is an asynchronous implementation of a service method.&lt;/p&gt;

&lt;p&gt;Now let's turn our attention to the client. There's another nice surprise awaiting us there.&lt;/p&gt;

&lt;blockquote&gt;I reiterate: the "asynchronicity" of a WCF service is independent from the "asynchronicity" of a WCF client. So if you only control one half of the connection, you can still make your half asynchronous.&lt;/blockquote&gt;

&lt;p&gt;Create a WCF client proxy. Heh, that's it. :)&lt;/p&gt;

&lt;p&gt;Not only are TAP methods created, they are created &lt;i&gt;by default!&lt;/i&gt; Totally awesome!&lt;/p&gt;

&lt;p&gt;The client code is &lt;i&gt;exactly the same&lt;/i&gt; as if the TaskWsdlImportExtension was used:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static class Program
{
  static async Task CallCalculator()
  {
    try
    {
      var proxy = new CalculatorClient();
      var task = proxy.DivideAsync(10, 0);
      var result = await task;
      Console.WriteLine(&amp;quot;Result: &amp;quot; + result);
    }
    catch (FaultException&amp;lt;CalculatorFault&amp;gt; ex)
    {
      Console.Error.WriteLine(&amp;quot;Error: &amp;quot; + ex.Detail.Message);
    }
  }

  static void Main(string[] args)
  {
    try
    {
      CallCalculator().Wait();
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
    }

    Console.ReadKey();
  }
}
&lt;/pre&gt;

&lt;p&gt;Unfortunately for me, all this wonderful WCF async goodness is coming out along with the ASP.NET Web API, and I'll be migrating away from WCF. Oh, well.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2734688883195300124/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html#comment-form' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' title='Async WCF Today and Tomorrow'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2442373052621335562</id><published>2012-07-26T12:30:00.000-04:00</published><updated>2012-07-26T12:30:01.572-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async Interop with IAsyncResult</title><content type='html'>&lt;p&gt;Before async/await, the standard way to represent an asynchronous operation was to use the (poorly named) "asynchronous programming model" (APM). APM dates all the way back to .NET 1.0, and is baked into the language and runtime (asynchronous delegate invocation uses APM).&lt;/p&gt;

&lt;p&gt;The Task-based Asynchronous Pattern (TAP) is superior than APM, but there is a lot of code out there that is either producing or consuming APM. The designers of TAP took this into consideration, and ensured that TAP plays well with APM. It's possible to write TAP wrappers for APM methods, and APM wrappers for TAP methods, though the details can get just a touch hairy.&lt;/p&gt;

&lt;p&gt;Most of what I'll cover here is also covered in that excellent document, &lt;a href="http://www.microsoft.com/en-us/download/details.aspx?id=19957"&gt;The Task-based Asynchronous Pattern&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;TAP Wrappers for APM Implementations&lt;/h4&gt;

&lt;p&gt;By far, the easiest way to create a Task from a Begin/End method pair is to use one of the TaskFactory.FromAsync overloads, introduced in .NET 4.0:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public static Task&amp;lt;int&amp;gt; DivideAsync(this Calculator calc, int numerator, int denominator)
{
  return Task.Factory.FromAsync(calc.BeginDivide, calc.EndDivide, numerator, denominator, null);
}
&lt;/pre&gt;

&lt;p&gt;It's common to provide wrappers like this as extension methods. In fact, the Async CTP did exactly this for a lot of BCL classes.&lt;/p&gt;

&lt;p&gt;If you wanted to make your own wrapper, it's easy enough to do using TaskCompletionSource. Just call the Begin method, passing an AsyncCallback that completes the Task based on the results of the End method (canceling the Task if End throws OperationCanceledException).&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public static Task&amp;lt;int&amp;gt; DivideAsync(this Calculator calc, int numerator, int denominator)
{
  var tcs = new TaskCompletionSource&amp;lt;int&amp;gt;();
  calc.BeginDivide(numerator, denominator, iar =&amp;gt;
  {
    try { tcs.TrySetResult(calc.EndDivide(iar)); }
    catch(OperationCanceledException) { tcs.TrySetCanceled(); }
    catch(Exception exc) { tcs.TrySetException(exc); }
  }, null);
  return tcs.Task;
}
&lt;/pre&gt;

&lt;p&gt;The only real design decision is what to do if Begin throws an exception. TaskFactory.FromAsync will complete the Task with a default result, and then (synchronously) rethrow the exception. The code above just allows the exception to propagate.&lt;/p&gt;

&lt;p&gt;One drawback to TaskFactory.FromAsync is that it is somewhat limited in its number of parameters. If you need more, you can pass the IAsyncResult object instead of the Begin method. However, the implementation is less efficient: instead of just passing an AsyncCallback to Begin, they have to pass the AsyncWaitHandle to ThreadPool.RegisterWaitForSingleObject.&lt;/p&gt;

&lt;p&gt;Another alternative is AsyncFactory.FromApm in &lt;a href="http://nitoasyncex.codeplex.com/"&gt;my AsyncEx library&lt;/a&gt;. FromApm supports many more parameters. However, if Begin throws, then FromApm will place the exception on the Task rather than throwing it directly (changing the synchronous exception to an asynchronous exception).&lt;/p&gt;

&lt;blockquote&gt;Actually, the entire AsyncEx library got it start with FromApm. TaskFactory.FromAsync did not have enough parameters to support a lot of the Azure SDK APM methods.&lt;/blockquote&gt;

&lt;p&gt;So, TAP wrappers for existing APM methods are pretty easy.&lt;/p&gt;

&lt;h4&gt;APM Wrappers for TAP Implementations&lt;/h4&gt;

&lt;p&gt;You'd think this would be easy, too, especially considering that Task implements IAsyncResult. Unfortunately, there are a couple of pitfalls.&lt;/p&gt;

&lt;p&gt;Let's start out with the Begin method implementation:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public IAsyncResult BeginDivide(int numerator, int denominator, AsyncCallback callback, object state)
{
  var tcs = new TaskCompletionSource&amp;lt;int&amp;gt;(state);
  var task = DivideAsync(numerator, denominator);
  task.ContinueWith(t =&amp;gt;
  {
    // Copy the task result into the returned task.
    if (t.IsFaulted)
      tcs.TrySetException(t.Exception.InnerExceptions);
    else if (t.IsCanceled)
      tcs.TrySetCanceled();
    else
      tcs.TrySetResult(t.Result);

    // Invoke the user callback if necessary.
    if (callback != null)
      callback(tcs.Task);
  });
  return tcs.Task;
}
&lt;/pre&gt;

&lt;p&gt;The Task returned by Begin needs to be a different instance than the Task returned by the Async implementation because &lt;a href="http://blogs.msdn.com/b/junfeng/archive/2006/03/28/563627.aspx"&gt;IAsyncResult.AsyncState needs to return the state passed into the Begin method&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The example code above will always complete the Task and invoke the user callback from a thread pool thread. There are situations where it would be faster to do this synchronously (TaskContinuationOptions.ExecuteSynchronously), but &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/async/thread/9535a4a6-6218-45fe-aa45-79332b9e5b88"&gt;this can cause complex problems&lt;/a&gt;. ExecuteSynchronously should &lt;b&gt;not&lt;/b&gt; be used in APM wrappers for TAP methods!&lt;/p&gt;

&lt;p&gt;Now, consider the End implementation:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public int EndDivide(IAsyncResult asyncResult)
{
  try
  {
    return ((Task&amp;lt;int&amp;gt;)asyncResult).Result;
  }
  catch (AggregateException ex)
  {
    ExceptionDispatchInfo.Capture(ex.InnerException).Throw();
    throw;
  }
}
&lt;/pre&gt;

&lt;p&gt;The End method must (synchronously) block if the operation has not completed. If there was an exception, the Task wraps it into an AggregateException, so our End method will unwrap the exception and rethrow it (preserving the stack trace). The extra "throw;" line is never executed; it &lt;a href="http://connect.microsoft.com/VisualStudio/feedback/details/689516/exceptiondispatchinfo-api-modifications"&gt;just keeps the compiler happy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that - as of now - the example code in the Task-based Asynchronous Pattern document does not unwrap Task exceptions, so any exceptions will be wrapped in an AggregateException, which is thrown from End.&lt;/p&gt;

&lt;p&gt;The BCL does not provide generic Begin/End implementations, but my &lt;a href="http://nitoasyncex.codeplex.com/"&gt;AsyncEx&lt;/a&gt; library does, as AsyncFactory.ToBegin and AsyncFactory.ToEnd:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public IAsyncResult BeginDivide(int numerator, int denominator, AsyncCallback callback, object state)
{
  var task = DivideAsync(numerator, denominator);
  return AsyncFactory&amp;lt;int&amp;gt;.ToBegin(task, callback, state);
}

public int EndDivide(IAsyncResult asyncResult)
{
  return AsyncFactory&amp;lt;int&amp;gt;.ToEnd(asyncResult);
}
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2442373052621335562/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/07/async-interop-with-iasyncresult.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2442373052621335562'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2442373052621335562'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/async-interop-with-iasyncresult.html' title='Async Interop with IAsyncResult'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3454742513900174322</id><published>2012-07-19T12:30:00.001-04:00</published><updated>2013-05-17T11:04:37.193-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Thread is Dead</title><content type='html'>&lt;p&gt;At this point, it should be clear that Tasks are far superior to BackgroundWorkers. In fact, both Thread and BackgroundWorker just make things harder.&lt;/p&gt;

&lt;p&gt;This post (and most of my other &lt;a href="http://blog.stephencleary.com/search/label/async"&gt;async posts&lt;/a&gt;) are from a talk I gave in October 2011 called "Thread is Dead". Here's the punchline slide:&lt;/p&gt;

&lt;div style="text-align: center;"&gt;
&lt;img border="0" height="720" width="960" src="http://2.bp.blogspot.com/-rEe_nJtpBCo/TzQVTq-F2gI/AAAAAAAAGco/ZjVZyWAdPNE/s960/Thread%2Bis%2BDead.png" /&gt;
&lt;/div&gt;

&lt;p&gt;Friends don't let friends use Thread. Or BackgroundWorker. It is time for these classes to go the way of "lock (this)" and "Application.DoEvents".&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;OK, OK, you can use a thread &lt;i&gt;if&lt;/i&gt; you need to implement a specific scheduling context for a task that isn't already provided. But the &lt;i&gt;only&lt;/i&gt; case I can think of for this is if you need an STA context - and in that case, you can use &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncContextThread"&gt;AsyncContextThread&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3454742513900174322/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/07/thread-is-dead.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3454742513900174322'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3454742513900174322'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/thread-is-dead.html' title='Thread is Dead'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-rEe_nJtpBCo/TzQVTq-F2gI/AAAAAAAAGco/ZjVZyWAdPNE/s72-c/Thread%2Bis%2BDead.png' height='72' width='72'/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727</id><published>2012-07-12T12:30:00.000-04:00</published><updated>2013-05-17T11:04:20.953-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>Don't Block on Async Code</title><content type='html'>&lt;p&gt;This is a problem that is brought up repeatedly on the forums and Stack Overflow. I think it's the most-asked question by async newcomers once they've learned the basics.&lt;/p&gt;

&lt;h4&gt;UI Example&lt;/h4&gt;

&lt;p&gt;Consider the example below. A button click will initiate a REST call and display the results in a text box (this sample is for Windows Forms, but the same principles apply to &lt;i&gt;any&lt;/i&gt; UI application).&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// My "library" method.
public static async Task&amp;lt;JObject&amp;gt; GetJsonAsync(Uri uri)
{
  using (var client = new HttpClient())
  {
    var jsonString = await client.GetStringAsync(uri);
    return JObject.Parse(jsonString);
  }
}

// My "top-level" method.
public void Button1_Click(...)
{
  var jsonTask = GetJsonAsync(...);
  textBox1.Text = jsonTask.Result;
}
&lt;/pre&gt;

&lt;p&gt;The "GetJson" helper method takes care of making the actual REST call and parsing it as JSON. The button click handler waits for the helper method to complete and then displays its results.&lt;/p&gt;

&lt;p&gt;This code will deadlock.&lt;/p&gt;

&lt;h4&gt;ASP.NET Example&lt;/h4&gt;

&lt;p&gt;This example is very similar; we have a library method that performs a REST call, only this time it's used in an ASP.NET context (Web API in this case, but the same principles apply to &lt;i&gt;any&lt;/i&gt; ASP.NET application):&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// My "library" method.
public static async Task&amp;lt;JObject&amp;gt; GetJsonAsync(Uri uri)
{
  using (var client = new HttpClient())
  {
    var jsonString = await client.GetStringAsync(uri);
    return JObject.Parse(jsonString);
  }
}

// My "top-level" method.
public class MyController : ApiController
{
  public string Get()
  {
    var jsonTask = GetJsonAsync(...);
    return jsonTask.Result.ToString();
  }
}
&lt;/pre&gt;

&lt;p&gt;This code will also deadlock. For the same reason.&lt;/p&gt;

&lt;h4&gt;What Causes the Deadlock&lt;/h4&gt;

&lt;p&gt;Here's the situation: remember &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;from my intro post&lt;/a&gt; that after you await a Task, when the method continues it will continue &lt;i&gt;in a context&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;In the first case, this context is a UI context (which applies to &lt;i&gt;any&lt;/i&gt; UI except Console applications). In the second case, this context is an ASP.NET request context.&lt;/p&gt;

&lt;p&gt;One other important point: an ASP.NET request context is not tied to a specific thread (like the UI context is), but it &lt;i&gt;does&lt;/i&gt; only allow one thread in &lt;i&gt;at a time&lt;/i&gt;. This interesting aspect is not officially documented anywhere AFAIK, but it is mentioned in &lt;a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx"&gt;my MSDN article about SynchronizationContext&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So this is what happens, starting with the top-level method (Button1_Click for UI / MyController.Get for ASP.NET):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The top-level method calls GetJsonAsync (within the UI/ASP.NET context).&lt;/li&gt;
&lt;li&gt;GetJsonAsync starts the REST request by calling HttpClient.GetStringAsync (still within the context).&lt;/li&gt;
&lt;li&gt;GetStringAsync returns an uncompleted Task, indicating the REST request is not complete.&lt;/li&gt;
&lt;li&gt;GetJsonAsync awaits the Task returned by GetStringAsync. The context is captured and will be used to continue running the GetJsonAsync method later. GetJsonAsync returns an uncompleted Task, indicating that the GetJsonAsync method is not complete.&lt;/li&gt;
&lt;li&gt;The top-level method synchronously blocks on the Task returned by GetJsonAsync. This blocks the context thread.&lt;/li&gt;
&lt;li&gt;... Eventually, the REST request will complete. This completes the Task that was returned by GetStringAsync.&lt;/li&gt;
&lt;li&gt;The continuation for GetJsonAsync is now ready to run, and it waits for the context to be available so it can execute in the context.&lt;/li&gt;
&lt;li&gt;Deadlock. The top-level method is blocking the context thread, waiting for GetJsonAsync to complete, and GetJsonAsync is waiting for the context to be free so it can complete.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the UI example, the "context" is the UI context; for the ASP.NET example, the "context" is the ASP.NET request context. This type of deadlock can be caused for either "context".&lt;/p&gt;

&lt;h4&gt;Preventing the Deadlock&lt;/h4&gt;

&lt;p&gt;There are two best practices (both covered in &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;my intro post&lt;/a&gt;) that avoid this situation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your "library" async methods, use ConfigureAwait(false) wherever possible.&lt;/li&gt;
&lt;li&gt;Don't block on Tasks; use async all the way down.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Consider the first best practice. The new "library" method looks like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public static async Task&amp;lt;JObject&amp;gt; GetJsonAsync(Uri uri)
{
  using (var client = new HttpClient())
  {
    var jsonString = await client.GetStringAsync(uri).ConfigureAwait(false);
    return JObject.Parse(jsonString);
  }
}
&lt;/pre&gt;

&lt;p&gt;This changes the continuation behavior of GetJsonAsync so that it does &lt;i&gt;not&lt;/i&gt; resume on the context. Instead, GetJsonAsync will resume on a thread pool thread. This enables GetJsonAsync to complete the Task it returned without having to re-enter the context.&lt;/p&gt;

&lt;p&gt;Consider the second best practice. The new "top-level" methods look like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public async void Button1_Click(...)
{
  var json = await GetJsonAsync(...);
  textBox1.Text = json;
}

public class MyController : ApiController
{
  public async Task&amp;lt;string&amp;gt; Get()
  {
    var json = await GetJsonAsync(...);
    return json.ToString();
  }
}
&lt;/pre&gt;

&lt;p&gt;This changes the blocking behavior of the top-level methods so that the context is never actually blocked; all "waits" are "asynchronous waits".&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; It is best to apply both best practices. Either one will prevent the deadlock, but &lt;i&gt;both&lt;/i&gt; must be applied to achieve maximum performance and responsiveness.&lt;/p&gt;

&lt;h4&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;My &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;introduction to async/await&lt;/a&gt; is a good starting point.&lt;/li&gt; 
&lt;li&gt;Stephen Toub's blog post &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2011/01/13/10115163.aspx"&gt;Await, and UI, and deadlocks! Oh, my!&lt;/a&gt; covers this exact type of deadlock (in January of 2011, no less!).&lt;/li&gt;
&lt;li&gt;If you prefer videos, &lt;a href="http://channel9.msdn.com/Events/BUILD/BUILD2011/TOOL-829T"&gt;Stephen Toub demoed this deadlock live&lt;/a&gt; (39:40 - 42:50, but the whole presentation is great!). &lt;a href="http://blogs.msdn.com/b/lucian/archive/2012/03/29/talk-async-part-1-the-message-loop-and-the-task-type.aspx"&gt;Lucian Wischik also demoed this deadlock&lt;/a&gt; using VB (17:10 - 19:15).&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/04/12/10293335.aspx"&gt;Async/Await FAQ&lt;/a&gt; goes into detail on exactly when contexts are captured and used for continuations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This kind of deadlock is always the result of mixing synchronous with asynchronous code. Usually this is because people are just trying out async with one small piece of code and use synchronous code everywhere else. Unfortunately, partially-asynchronous code is much more complex and tricky than just making everything asynchronous.&lt;/p&gt;

&lt;p&gt;If you &lt;i&gt;do&lt;/i&gt; need to maintain a partially-asynchronous code base, then be sure to check out two more of Stephen Toub's blog posts: &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/03/24/10287244.aspx"&gt;Asynchronous Wrappers for Synchronous Methods&lt;/a&gt; and &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx"&gt;Synchronous Wrappers for Asynchronous Methods&lt;/a&gt;, as well as my &lt;a href="http://nitoasyncex.codeplex.com/"&gt;AsyncEx library&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Answered Questions&lt;/h4&gt;

&lt;p&gt;There are scores of answered questions out there that are all caused by the same deadlock problem. It has shown up on WinRT, WPF, Windows Forms, Windows Phone, MonoDroid, Monogame, and ASP.NET.&lt;/p&gt;

&lt;!--
Boring list that I'm no longer interested enough in to maintain.

&lt;p&gt;These questions were all caused by the same deadlock problem, just in different scenarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI context:
&lt;ul&gt;
 &lt;li&gt;WinRT:
 &lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14485115/synchronously-waiting-for-an-async-operation-and-why-does-wait-freeze-the-pro"&gt;Synchronously waiting for an async operation, and why does Wait() freeze the program here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13930113/getfilesasync-stops-working"&gt;GetFilesAsync stops working&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13333786/fileio-writeasync-hanging"&gt;FileIO.WriteAsync hanging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10700570/fileio-readtextasync-occasionally-hangs"&gt;FileIO.ReadTextAsync occasionally hangs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12701545/async-and-await-with-httpwebrequest-getresponseasync"&gt;Async and Await with HttpWebRequest.GetResponseAsync&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12235085/winrt-loading-static-data-with-getfilefromapplicationuriasync"&gt;WinRT: Loading static data with GetFileFromApplicationUriAsync()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12392567/async-method-never-retuns"&gt;Async method never retuns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12048128/async-await-pattern-help-am-i-doing-it-right"&gt;Async await pattern help. Am I doing it right?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11316438/call-to-await-getfileasync-never-returns-and-app-hangs-in-winrt-app"&gt;Call to await GetFileAsync() never returns and app hangs in WinRT app&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;WPF:
 &lt;ul&gt;
  &lt;li&gt;&lt;a href="http://social.msdn.microsoft.com/Forums/en-US/parallelextensions/thread/8322bcc5-1ef5-4efe-9683-96fd0829b49d"&gt;async/await hang in WPF app&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Windows Forms:
 &lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14597232/asp-net-web-api-client-progressmessagehandler-post-task-stuck-in-winform-app"&gt;ASP.NET Web API Client ProgressMessageHandler Post Task stuck in WinForm App&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Windows Phone 8:
 &lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14712132/live-connect-async-and-await-blocking-ui"&gt;Live Connect - async and await blocking UI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15327993/windows-phone-8-sqlite-async-operations-hanging-indefinitely"&gt;Windows Phone 8 SQLite async operations hanging indefinitely&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Android (MonoDroid):
 &lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14631781/using-microsoft-bcl-async-in-pcl-with-mono-droid"&gt;Using Microsoft.bcl.async in PCL with Mono Droid?&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Monogame:
 &lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/15193520/unable-to-get-list-of-files-in-directory-from-monogame"&gt;Unable to get list of files in directory from MonoGame&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;Unspecified:
 &lt;ul&gt;
  &lt;li&gt;&lt;a href="http://social.msdn.microsoft.com/Forums/en-AU/async/thread/269172a3-adb9-4b5e-9ac1-8b67ff920177"&gt;Async Issue(Why blocking the UI thread)??&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ASP.NET context:
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14875856/asp-net-web-api-httpclient-download-large-files-breaks"&gt;Asp.net Web API: HttpClient Download large files breaks&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14526377/why-does-this-async-action-hang"&gt;Why does this async action hang?&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14046471/task-waitall-keeps-in-loop"&gt;Task.WaitAll keeps in loop&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13621647/using-async-even-if-it-should-complete-as-part-of-a-mvc-route-deadlocks-the"&gt;Using “async” (even if it should complete) as part of a MVC route deadlocks the route; how can this be avoided?&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12981490/task-waitall-hanging-with-multiple-awaitable-tasks-in-asp-net"&gt;Task.WaitAll hanging with multiple awaitable tasks in ASP.NET&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13140523/await-vs-task-wait-deadlock"&gt;await vs Task.Wait - Deadlock?&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/12701879/confusing-behaviour-when-invoking-async-methods-inside-asp-net"&gt;Confusing behaviour when invoking async methods inside ASP.NET&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11887915/preventing-a-deadlock-when-calling-an-async-method-without-using-await"&gt;Preventing a deadlock when calling an async method without using await&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11364272/asp-net-mvc-4-controller-hangs-whenever-async-is-used"&gt;ASP.Net MVC 4 controller hangs whenever async is used&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10343632/httpclient-getasync-never-returns-when-using-await-async"&gt;HttpClient.GetAsync(…) never returns when using await/async&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7804363/async-ctp-bug-task-never-completes"&gt;Async CTP Bug - Task Never Completes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unspecified context:
&lt;ul&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14470983/await-task-getting-lost-with-dbcontext-savechanges"&gt;Await Task 'getting lost' with dbContext.savechanges()&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14186608/c-sharp-net-4-5-async-await-task-wait-blocking-issue"&gt;c# .net 4.5 async await Task.Wait() blocking issue&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9545885/get-result-of-async-method"&gt;Get result of async method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

--&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1979708439934624727/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html#comment-form' title='21 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' title='Don&apos;t Block on Async Code'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>21</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6715883636223656312</id><published>2012-06-21T12:30:00.000-04:00</published><updated>2012-06-21T12:30:03.342-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='NuGet'/><title type='text'>ArraySegments Library Available</title><content type='html'>&lt;p&gt;Yesterday I officially released the ArraySegments library on &lt;a href="https://nuget.org/packages/ArraySegments"&gt;NuGet&lt;/a&gt; and &lt;a href="http://arraysegments.codeplex.com/"&gt;CodePlex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's a very small library designed to give the &lt;a href="http://msdn.microsoft.com/en-us/library/1hsbd92d.aspx"&gt;ArraySegment&amp;lt;T&amp;gt;&lt;/a&gt; a bit of love. It's especially useful when dealing with large amounts of binary data.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6715883636223656312/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/06/arraysegments-library-available.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6715883636223656312'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6715883636223656312'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/06/arraysegments-library-available.html' title='ArraySegments Library Available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6740069892417218537</id><published>2012-05-17T12:30:00.000-04:00</published><updated>2014-02-03T15:16:50.182-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='NuGet'/><title type='text'>Framework Profiles in .NET</title><content type='html'>&lt;p&gt;&lt;b&gt;Updated 2012-10-31 with the newest framework identifiers.&lt;br/&gt;Updated 2013-11-02 with the VS2013 framework identifiers.&lt;br/&gt;Updated 2014-02-03 to move the portable profiles to &lt;a href="http://embed.plnkr.co/03ck2dCtnJogBKHJ9EjY"&gt;a separate page&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of different .NET runtimes. There's the desktop framework, Windows Phone, Silverlight, and Windows Store. There's also a number of lesser-known frameworks. You can download &lt;a href="http://msdn.microsoft.com/en-US/hh454951.aspx"&gt;targeting packs&lt;/a&gt; to target different frameworks.&lt;/p&gt;

&lt;p&gt;Every once in a while (usually while &lt;a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package"&gt;working with NuGet&lt;/a&gt;), I find myself needing a refresher on the frameworks and profiles. It's a pain to look all this up again, so I'm collecting it here for future reference.&lt;/p&gt;

&lt;h4&gt;FrameworkName and Version&lt;/h4&gt;

&lt;p&gt;A target framework is indicated by a &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.versioning.frameworkname.aspx"&gt;FrameworkName&lt;/a&gt;, which has three components: a required framework Identifier, a required framework &lt;a href="http://msdn.microsoft.com/en-us/library/system.version.aspx"&gt;Version&lt;/a&gt;, and an optional framework Profile.&lt;/p&gt;

&lt;p&gt;Both Identifier and Profile are always case-insensitive. The FrameworkName constructor allows some flexibility when it parses strings (and NuGet allows even more flexibility), but the canonical structure is as such: &lt;i&gt;Identifier&lt;/i&gt; ",Version=v" &lt;i&gt;Version&lt;/i&gt; [ ",Profile=" &lt;i&gt;Profile&lt;/i&gt; ].&lt;/p&gt;

&lt;p&gt;Note that the Version applies to the Identifier; there is no version on a Profile.&lt;/p&gt;

&lt;h4&gt;Getting the FrameworkName&lt;/h4&gt;

&lt;p&gt;You can type the following into the Package Manager Console window to view the target framework for any project:&lt;/p&gt;

&lt;pre class="brush:ps"&gt;
$p = Get-Project "MyProjectName"
$p.Properties.Item("TargetFrameworkMoniker").Value
&lt;/pre&gt;

&lt;h4&gt;Known Framework Identifiers and Profiles&lt;/h4&gt;

&lt;h5&gt;.NETFramework&lt;/h5&gt;

&lt;p&gt;The &lt;b&gt;.NETFramework&lt;/b&gt; identifier is used for the regular desktop framework. For example, ".NETFramework,Version=v3.5" refers to .NET 3.5. You can also target specific updates, e.g., ".NETFramework,Version=v4.0.2" refers to &lt;a href="http://support.microsoft.com/kb/2544514"&gt;.NET 4.0 Platform Update 2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If there is no profile specified, the framework refers to the full profile.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Client&lt;/b&gt; specifies the client profile; e.g., ".NETFramework,Version=v4.0,Profile=Client" refers to the .NET 4.0 Client Profile. Note that the client profile is not supported in .NET 4.5.&lt;/p&gt;

&lt;blockquote&gt;Historical note: The &lt;b&gt;CompactFramework&lt;/b&gt; profile specifies the .NET Compact Framework. This probably should have been its own identifier, but doesn't really matter anymore since Visual Studio 2008 was the last version to support CF directly.&lt;/blockquote&gt;

&lt;h5&gt;Silverlight&lt;/h5&gt;

&lt;p&gt;The &lt;b&gt;Silverlight&lt;/b&gt; identifier is used for the Silverlight framework. For example, "Silverlight,Version=v4.0" refers to Silverlight 4.&lt;/p&gt;

&lt;p&gt;If there is no profile specified, the framework refers to the desktop Silverlight framework.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;WindowsPhone&lt;/b&gt; specifies the original Windows Phone profile; e.g., "Silverlight,Version=v3.0,Profile=WindowsPhone" refers to Windows Phone 7.0. I believe this profile is only applicable to Silverlight version 3.0.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;WindowsPhone71&lt;/b&gt; specifies the newer Windows Phone profile; e.g., "Silverlight,Version=v4.0,Profile=WindowsPhone71" refers to Windows Phone 7.5 (Mango). That's not a typo: "7.5" came from marketing; the internal version numbers are all "7.1". However, some (all?) Microsoft tools &lt;!-- like Portable Libraries --&gt; will treat &lt;b&gt;WindowsPhone75&lt;/b&gt; just like &lt;b&gt;WindowsPhone71&lt;/b&gt;, so you may be able to get away with that. I believe this profile is only applicable to Silverlight version 4.0.&lt;/p&gt;

&lt;blockquote&gt;The "Windows Phone" profiles of Silverlight are a historical oddity; starting with Windows Phone 8, Microsoft correctly gave Windows Phone its own identifier (see below).&lt;/blockquote&gt;

&lt;h5&gt;.NETCore&lt;/h5&gt;

&lt;p&gt;The &lt;b&gt;.NETCore&lt;/b&gt; identifier is used for the new .NET framework for Windows Store applications. For example, ".NETCore,Version=v4.5" refers to the original Windows Store framework. Note that the first version of this framework will be 4.5. Also, remember that Windows Store is different than the desktop .NET 4.5 ".NETFramework,Version=v4.5", which was released at the same time.&lt;/p&gt;

&lt;h5&gt;WindowsPhone&lt;/h5&gt;

&lt;p&gt;The &lt;b&gt;WindowsPhone&lt;/b&gt; identifier is used for newer Windows Phone projects. For example, "WindowsPhone,Version=v8.0" refers to Windows Phone 8. Earlier versions of Windows Phone used special profiles of the &lt;b&gt;Silverlight&lt;/b&gt; identifier.&lt;/p&gt;

&lt;p&gt;There are no known profiles for the &lt;b&gt;WindowsPhone&lt;/b&gt; identifier.&lt;/p&gt;

&lt;h5&gt;Xbox and .NETMicroFramework&lt;/h5&gt;

&lt;p&gt;The &lt;b&gt;Xbox&lt;/b&gt; identifier is used for XBox 360 projects. For example, "Xbox,Version=v4.0" refers to the XBox 360 platform. The &lt;b&gt;.NETMicroFramework&lt;/b&gt; identifier targets (surprise) the .NET Micro Framework.&lt;/p&gt;

&lt;p&gt;And that's all I know about those.&lt;/p&gt;

&lt;h5&gt;.NETPortable&lt;/h5&gt;

&lt;p&gt;The &lt;b&gt;.NETPortable&lt;/b&gt; identifier is used for &lt;a href="http://go.microsoft.com/fwlink/?LinkId=210823"&gt;portable libraries&lt;/a&gt;. Each portable library may run on a number of different platforms, indicated by a profile named &lt;b&gt;Profile&lt;i&gt;N&lt;/i&gt;&lt;/b&gt;. For example, ".NETPortable,Version=v4.0,Profile=Profile1" refers to a portable library that can run on .NET 4.0, Silverlight 4, Windows Phone 7, Metro, or XBox 360.&lt;/p&gt;

&lt;p&gt;The "Version" for the .NETPortable identifier looks like it refers to the maximum version supported by all the platforms in that profile.&lt;/p&gt;

&lt;p&gt;The .NETPortable identifier requires a profile. The profiles are listed below (or &lt;a href="http://embed.plnkr.co/03ck2dCtnJogBKHJ9EjY"&gt;click here to open in a separate page&lt;/a&gt;):&lt;/p&gt;

&lt;iframe src="http://embed.plnkr.co/03ck2dCtnJogBKHJ9EjY" style="width:100%; height:40em;"&gt;&lt;/iframe&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6740069892417218537/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/05/framework-profiles-in-net.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6740069892417218537'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6740069892417218537'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/05/framework-profiles-in-net.html' title='Framework Profiles in .NET'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7841943686567891827</id><published>2012-02-23T12:30:00.000-05:00</published><updated>2013-10-10T14:06:24.223-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Thinking about Async Tasks</title><content type='html'>&lt;p&gt;In this post, I'm going to clarify how Tasks are used by async/await. This is a little bit different than Tasks &lt;i&gt;as used by the Task Parallel Library,&lt;/i&gt; and it's also a little bit different than &lt;i&gt;awaitables&lt;/i&gt; as used by async/await.&lt;/p&gt;

&lt;h4&gt;Tasks Are a Future&lt;/h4&gt;

&lt;p&gt;A &lt;b&gt;future&lt;/b&gt; is &lt;a href="http://en.wikipedia.org/wiki/Futures_and_promises"&gt;some operation that will complete at some future time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An async Task is &lt;i&gt;not&lt;/i&gt; a thread - not even a tiny one. This is one of the most common conceptual hurdles to working with async. &lt;b&gt;Task != Thread&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, an async Task is &lt;i&gt;not&lt;/i&gt; a delegate.&lt;/p&gt;

&lt;p&gt;Some tasks do &lt;i&gt;contain&lt;/i&gt; a delegate, and they represent some work to be done on a thread. However, as we saw in &lt;a href="http://blog.stephencleary.com/2012/02/creating-tasks.html"&gt;the Creating Tasks post&lt;/a&gt;, tasks created with TaskCompletionSource&amp;lt;T&amp;gt; have no code or delegate at all!&lt;/p&gt;

&lt;h4&gt;Tasks Complete Once&lt;/h4&gt;

&lt;p&gt;A task will complete exactly one time. It can complete successfully or with error (cancellation is treated as a special kind of error).&lt;/p&gt;

&lt;p&gt;Because tasks complete only once, they're not ideal for representing &lt;i&gt;streams of data&lt;/i&gt; or &lt;i&gt;event subscriptions&lt;/i&gt;. We'll deal with stream/subscription scenarios in a later post.&lt;/p&gt;

&lt;h4&gt;Tasks Support Continuations&lt;/h4&gt;

&lt;p&gt;A &lt;b&gt;continuation&lt;/b&gt; is &lt;a href="http://msdn.microsoft.com/en-us/library/ee372288.aspx"&gt;some code that is attached to a task and executed when that task completes&lt;/a&gt;. Tasks have direct support for continuations via the ContinueWith method.&lt;/p&gt;

&lt;p&gt;However, you usually do not need to call that method. The await keyword will use task continuations to schedule the remainder of the async method as necessary.&lt;/p&gt;

&lt;h4&gt;Differences between Async Tasks and TPL Tasks&lt;/h4&gt;

&lt;p&gt;The Task class was introduced with the Task Parallel Library. The TPL usage of Task is a bit more general than the Async usage of Task. Also, the TPL was designed with fork/join parallelism in mind, and those portions of the Task class API are not used with async tasks.&lt;/p&gt;

&lt;p&gt;Under the TPL, the creation of a task and the scheduling of that task may be separate. It is possible to create a Task object and not start it until later. Under Async, every task is already in progress; its operation is started when the Task object is created. Because of this, you may have to call Task.Start on a Task returned from TPL code if you want to await it.&lt;/p&gt;

&lt;p&gt;TPL has a concept of parent and child tasks. Async tasks do not use this mechanism. There &lt;i&gt;is&lt;/i&gt; a &lt;i&gt;logical&lt;/i&gt; hierarchy among async tasks, but they do not use the &lt;a href="http://msdn.microsoft.com/en-us/library/dd997417.aspx"&gt;parent/child relationship provided by the TPL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each TPL task may have multiple errors. Even if a task only has one exception, it is wrapped in an AggregateException. Async tasks are only expected to have one error, so the await operator will automatically unwrap the single exception if necessary.&lt;/p&gt;

&lt;h4&gt;Differences between Async Tasks and Awaitables&lt;/h4&gt;

&lt;p&gt;An awaitable is a very generic form of background operation. Awaitables support testing for completion (IsCompleted), scheduling continuations (OnCompleted), and retrieving the results of the operation (GetResult).&lt;/p&gt;

&lt;p&gt;The await operator uses &lt;a href="http://blogs.msdn.com/b/lucian/archive/2011/04/15/async-ctp-refresh-design-changes.aspx"&gt;a well-defined pattern&lt;/a&gt;, so it's possible to have some very strange awaitables that do work correctly.&lt;/p&gt;

&lt;p&gt;For example, the awaitable returned by the Task.Yield method &lt;i&gt;never&lt;/i&gt; returns true for IsCompleted, and its OnCompleted will immediately schedule the completions. So, on the one hand it never completes, but on the other hand it is already completed.&lt;/p&gt;

&lt;p&gt;WinRT awaitables are also not quite like Task objects. &lt;strike&gt;The most important difference is that WinRT operations do not start their operation immediately. Normally, the WinRT awaitable will start the operation for you when it is used in an await expression. However, this won't work as well if you want to have multiple operations running simultaneously. In this case, you can convert any WinRT awaitable into an async Task by calling the &lt;b&gt;StartAsTask&lt;/b&gt; extension method.&lt;/strike&gt; &lt;b&gt;Update:&lt;/b&gt; WinRT operations &lt;a href="http://blogs.msdn.com/b/windowsappdev/archive/2012/03/20/keeping-apps-fast-and-fluid-with-asynchrony-in-the-windows-runtime.aspx"&gt;have been changed&lt;/a&gt; so that they &lt;i&gt;do&lt;/i&gt; start immediately.&lt;/p&gt;

&lt;h4&gt;Functional Concepts&lt;/h4&gt;

&lt;p&gt;In conclusion, I'd like to point out that we're witnessing more functional concepts gradually enter our imperative language: both &lt;i&gt;future&lt;/i&gt; and &lt;i&gt;continuation&lt;/i&gt; are concepts borrowed from functional languages.&lt;/p&gt;

&lt;p&gt;This helps explain &lt;i&gt;why&lt;/i&gt; async code will gently nudge you into a functional programming style. And I'll say it again: this is natural, and should be embraced.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7841943686567891827/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/02/thinking-about-async-tasks.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7841943686567891827'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7841943686567891827'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/thinking-about-async-tasks.html' title='Thinking about Async Tasks'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011</id><published>2012-02-16T12:30:00.001-05:00</published><updated>2013-11-20T20:29:06.880-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Reporting Progress from Async Tasks</title><content type='html'>&lt;p&gt;Today, we'll look at how async methods satisfy a &lt;a href="http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html"&gt;common requirement&lt;/a&gt; of background operations: reporting progress.&lt;/p&gt;

&lt;h4&gt;Progress Reporter Abstraction&lt;/h4&gt;

&lt;p&gt;When asynchronous methods report progress, they use an abstraction of the "progress reporter" concept: &lt;a href="http://msdn.microsoft.com/en-us/library/hh138298(v=VS.110).aspx"&gt;&lt;b&gt;IProgress&amp;lt;in T&amp;gt;&lt;/b&gt;&lt;/a&gt;. This interface has a single method: &lt;b&gt;void Report(T value)&lt;/b&gt;. You can't get much simpler than that!&lt;/p&gt;

&lt;p&gt;An asynchronous method that wants to report progress just takes an IProgress&amp;lt;T&amp;gt; parameter, with some appropriate type for T. There are two important things to keep in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The parameter can be null. This means that no progress reports are needed.&lt;/li&gt;
&lt;li&gt;IProgress&amp;lt;T&amp;gt;.Report is thread-safe, but asynchronous. In other words, you're "posting" the progress reports to the progress reporter. The progress reporter probably hasn't responded to the progress update by the time your method continues.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That second rule can trip people up - it means &lt;i&gt;you can't modify the progress object after it's passed to Report.&lt;/i&gt; It is an error to keep a single "current progress" object, update it, and repeatedly pass it to Report.&lt;/p&gt;

&lt;p&gt;To avoid this problem, you should create a new progress object each time you call Report. This is easy if your progress type is a value type (the compiler makes a copy of it for you). Alternatively, you could make your progress type immutable and make your own copies.&lt;/p&gt;

&lt;blockquote&gt;This is one small step towards a functional mindset. Async/await will gently nudge you away from OOP and towards functional programming. This is natural and should be embraced.&lt;/blockquote&gt;

&lt;h4&gt;Progress Reporter Implementation&lt;/h4&gt;

&lt;p&gt;Now let's look at the "receiving" side of progress reports. The caller of the asynchronous method passes in the progress reporter, so it has complete control of how progress reports are handled.&lt;/p&gt;

&lt;p&gt;There is one built-in progress reporter: &lt;a href="http://msdn.microsoft.com/en-us/library/hh193692(v=vs.110).aspx"&gt;Progress&amp;lt;T&amp;gt;&lt;/a&gt;. You can either pass an Action&amp;lt;T&amp;gt; into the constructor or handle the ProgressChanged event.&lt;/p&gt;

&lt;p&gt;One important aspect of this class is that it invokes ProgressChanged (and the Action&amp;lt;T&amp;gt;) in the context in which it was constructed. So it's natural to write UI updates:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public async void StartProcessingButton_Click(object sender, EventArgs e)
{
  // The Progress&amp;lt;T&amp;gt; constructor captures our UI context,
  //  so the lambda will be run on the UI thread.
  var progress = new Progress&amp;lt;int&amp;gt;(percent =&gt;
  {
    textBox1.Text = percent + "%";
  });

  // DoProcessing is run on the thread pool.
  await Task.Run(() =&gt; DoProcessing(progress));
  textBox1.Text = "Done!";
}

public void DoProcessing(IProgress&amp;lt;int&amp;gt; progress)
{
  for (int i = 0; i != 100; ++i)
  {
    Thread.Sleep(100); // CPU-bound work
    if (progress != null)
      progress.Report(i);
  }
}
&lt;/pre&gt;

&lt;p&gt;The context keeps the updates nicely synchronized.&lt;/p&gt;

&lt;p&gt;However, this doesn't work as well if there's no context to capture. In this case, Progress&amp;lt;T&amp;gt; uses the thread pool context, and you'll have to deal with these problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple simultaneous updates. Since the event is raised on a thread pool thread, fast updates can cause the same event handlers to run on different thread pool threads at the same time.&lt;/li&gt;
&lt;li&gt;Updates after completion. If a method issues an update just before it completes, the event may be raised on a thread pool thread &lt;i&gt;after&lt;/i&gt; the task has been completed!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You do need to be aware of these problems when using Progress&amp;lt;T&amp;gt; without a UI context. We'll cover more advanced progress composition in a later post, and consider solutions to these problems.&lt;/p&gt;

&lt;h4&gt;Progress Report Exceptions&lt;/h4&gt;

&lt;p&gt;Progress&amp;lt;T&amp;gt; raises its event within a captured context. However, this event is not wrapped in a Task or anything like that; it is just executed directly. This means that any exceptions from that event's handlers will propagate directly to the context.&lt;/p&gt;

&lt;p&gt;In other words, exceptions from Progress&amp;lt;T&amp;gt;.ProgressChanged are treated just like exceptions from other event handlers.&lt;/p&gt;

&lt;p&gt;In &lt;i&gt;other&lt;/i&gt; words, don't throw exceptions from Progress&amp;lt;T&amp;gt;.ProgressChanged. :)&lt;/p&gt;

&lt;h4&gt;More Progress Reporter Implementations!&lt;/h4&gt;

&lt;p&gt;The callback-based Progress&amp;lt;T&amp;gt; is great for general use, but there's no reason you couldn't write your own IProgress&amp;lt;T&amp;gt; that works better with your own code base. Here are some implementations from the &lt;a href="http://nitoasyncex.codeplex.com"&gt;AsyncEx library:&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;PropertyProgress&amp;lt;T&amp;gt;&lt;/b&gt; has a property called Progress and implements &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx"&gt;INotifyPropertyChanged&lt;/a&gt;, so progress updates can update data bindings. This implementation also captures its context just like Progress&amp;lt;T&amp;gt;, which is expected for data binding updates.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ObserverProgress&amp;lt;T&amp;gt;&lt;/b&gt; forwards progress updates to an &lt;a href="http://msdn.microsoft.com/en-us/library/dd783449.aspx"&gt;IObserver&amp;lt;T&amp;gt;&lt;/a&gt;, where they can be composed using Rx.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ProducerProgress&amp;lt;T&amp;gt;&lt;/b&gt; and &lt;b&gt;DataflowProgress&amp;lt;T&amp;gt;&lt;/b&gt; both place progress updates into containers (an &lt;a href="http://msdn.microsoft.com/en-us/library/dd287147.aspx"&gt;IProducerConsumerCollection&amp;lt;T&amp;gt;&lt;/a&gt; or an &lt;a href="http://msdn.microsoft.com/en-us/library/hh194833(v=VS.110).aspx"&gt;ITargetBlock&amp;lt;TInput&amp;gt;&lt;/a&gt;, respectively).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Defining "Progress"&lt;/h4&gt;

&lt;p&gt;We've covered a lot about progress reporting without actually saying much about the progress update itself (other than it must be passed by value - so either a value type, or an immutable reference type works best).&lt;/p&gt;

&lt;blockquote&gt;The information in this section is not Gospel. It's just a tip from my own (limited) experience dealing with progress updates from async methods. YMMV.&lt;/blockquote&gt;

&lt;p&gt;It's natural to think of a progress report as &lt;i&gt;cumulative&lt;/i&gt; - the canonical example being "percent complete." However, I recommend a different approach: have &lt;i&gt;incremental&lt;/i&gt; progress reports for all reusable code and only convert it to &lt;i&gt;cumulative&lt;/i&gt; just before it is displayed to the user.&lt;/p&gt;

&lt;p&gt;So an FTP file downloader would report the number of bytes transferred after each write to disk, not the entire number of bytes transferred so far:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public async Task DownloadFileAsync(string fileName, IProgress&amp;lt;int&amp;gt; progress)
{
  using (var fileStream = ...) // Open local file for writing
  using (var ftpStream = ...) // Open FTP stream
  {
    while (true)
    {
      var bytesRead = await ftpStream.ReadAsync(...);
      if (bytesRead == 0)
        return;
      await fileStream.WriteAsync(...);
      if (progress != null)
        progress.Report(bytesRead);
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;Perhaps it's just me, but I find it easier to compose incremental updates like this rather than cumulative ones.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8479165366230044011/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html#comment-form' title='10 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' title='Reporting Progress from Async Tasks'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>10</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1930900922329960620</id><published>2012-02-09T12:30:00.001-05:00</published><updated>2013-07-17T11:24:55.114-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Creating Tasks</title><content type='html'>&lt;p&gt;Microsoft will give us lots of awaitables in .NET 4.5, but there are some situations where we want to create our own awaitable. Task&amp;lt;T&amp;gt; and Task are the easiest awaitable types to work with in .NET, so today we'll look at different ways awaitable Task objects can be constructed.&lt;/p&gt;

&lt;p&gt;All Task objects fall into one of two types: "code" and "event". Code-based tasks have a delegate that they are trying to run. Event-based tasks have no code; they're just waiting for some event to take place.&lt;/p&gt;

&lt;h4&gt;Tasks as Events&lt;/h4&gt;

&lt;p&gt;Tasks without code can represent any kind of event. The most common examples are I/O completion events, but event-based tasks can actually wrap &lt;i&gt;any&lt;/i&gt; kind of event.&lt;/p&gt;

&lt;p&gt;To create an event-based task, use the &lt;a href="http://msdn.microsoft.com/en-us/library/dd449174.aspx"&gt;&lt;b&gt;TaskCompletionSource&amp;lt;TResult&amp;gt;&lt;/b&gt;&lt;/a&gt; class:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public static Task&amp;lt;int&amp;gt; MyIntegerEventAsync()
{
  TaskCompletionSource&amp;lt;int&amp;gt; tcs = new TaskCompletionSource&amp;lt;int&amp;gt;();

  // Register for the "event".
  //   For example, if this is an I/O operation, start the I/O and register for its completion.

  // When the event fires, it should call:
  //   tcs.TrySetResult(...); // For a successful event.
  // or
  //   tcs.TrySetException(...); // For some error.
  // or
  //   tcs.TrySetCanceled(); // If the event was canceled.

  // TaskCompletionSource is thread-safe, so you can call these methods from whatever thread you want.

  // Return the Task&amp;lt;int&amp;gt;, which will complete when the event triggers.
  return tcs.Task;
}
&lt;/pre&gt;

&lt;p&gt;Remember that Task&amp;lt;T&amp;gt; and Task are awaitable, so you can await the result of MyIntegerEventAsync even though it's not an async method.&lt;/p&gt;

&lt;p&gt;You &lt;i&gt;probably&lt;/i&gt; won't have to use TaskCompletionSource&amp;lt;TResult&amp;gt; directly; you can use &lt;b&gt;TaskFactory.FromAsync&lt;/b&gt; to wrap any operation that uses IAsyncResult (and most existing asynchronous I/O methods do use IAsyncResult). Internally, FromAsync does use TaskCompletionSource&amp;lt;TResult&amp;gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;a href="http://nuget.org/packages/Nito.AsyncEx"&gt;Nito.AsyncEx&lt;/a&gt; includes an &lt;b&gt;AsyncFactory&lt;/b&gt; type which works like TaskFactory.FromAsync but is slightly easier to use and supports more arguments. It also includes a (non-generic) &lt;b&gt;TaskCompletionSource&lt;/b&gt;, which is easier to use when creating (non-generic) Tasks.&lt;/blockquote&gt;

&lt;h4&gt;Tasks as Code&lt;/h4&gt;

&lt;p&gt;Remember (from our &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;async intro post&lt;/a&gt;) that the async keyword does &lt;i&gt;not&lt;/i&gt; run the method on a background thread. However, you can use &lt;b&gt;Task.Run&lt;/b&gt; to run code on a background thread:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public static void MyThreadPoolMethod()
{
  // Do work (assuming we're running on the thread pool).
}

public async Task DoStuffAsync()
{
  var cpuResult = await Task.Run(MyThreadPoolMethod);

  // Use cpuResult...
}
&lt;/pre&gt;

&lt;p&gt;Task.Run will take a delegate and run it on the thread pool for you. It wraps the delegate into a Task&amp;lt;T&amp;gt; or Task, and the Task wrapper &lt;a href="http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html"&gt;takes care of all the error handling and other stuff correctly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What about other threads? What if you don't want to run your code on the thread pool?&lt;/p&gt;

&lt;p&gt;If you have a particular context in which you want to run your code, you can use a &lt;b&gt;TaskFactory&lt;/b&gt; initialized with a &lt;b&gt;TaskScheduler&lt;/b&gt; that targets your context. You can then call &lt;b&gt;TaskFactory.StartNew&lt;/b&gt; to run your code in that context. In fact, Task.Run is just a shorthand for Task.Factory.StartNew.&lt;/p&gt;

&lt;p&gt;It's possible to capture the current synchronization context into a TaskScheduler by calling &lt;b&gt;TaskScheduler.FromCurrentSynchronizationContext&lt;/b&gt;, and then use it later (e.g., from a background thread) to run code within that context. &lt;i&gt;Normally there are better ways to do this,&lt;/i&gt; but it is an option.&lt;/p&gt;

&lt;blockquote&gt;Before async/await, this was &lt;a href="http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html"&gt;a good way to send progress reports from a background task to the UI&lt;/a&gt;. With async/await, there is now &lt;a href="http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html"&gt;a better way&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;Writing your own TaskScheduler is possible, but frustrating due to the lack of MSDN documentation. Fortunately, it's almost never necessary.&lt;/p&gt;

&lt;blockquote&gt;If you need a specific thread (e.g., an STA thread) that supports TaskScheduler, you can use the &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncContextThread"&gt;&lt;b&gt;AsyncContextThread&lt;/b&gt; type&lt;/a&gt; in the &lt;a href="http://nuget.org/packages/Nito.AsyncEx"&gt;Nito.AsyncEx library&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;There are some pretty cool tricks we can pull off using the built-in TaskScheduler/TaskFactory types. We'll look at more advanced TaskScheduler situations in later posts.&lt;/p&gt;

&lt;h4&gt;Tasks as Async Methods&lt;/h4&gt;

&lt;p&gt;This is a special case of Task creation - and it's easy to overlook!&lt;/p&gt;

&lt;p&gt;The flat-out easiest way to create Task objects is to write an asynchronous method:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public async Task&amp;lt;int&amp;gt; DivideAsync(int numerator, int denominator)
{
  await Task.Delay(100);
  return numerator / denominator;
}
&lt;/pre&gt;

&lt;p&gt;We do not create a Task&amp;lt;int&amp;gt; in our code, but the compiler rewrites our code so that a Task&amp;lt;int&amp;gt; is created and returned. When the method completes, the task completes. This type of task is actually an event-based task, since an event (the method returning) causes the task to complete.&lt;/p&gt;

&lt;p&gt;That's the easiest way to create Task objects! However, it only works if you're building on existing awaitables; if you aren't in this situation, then you should use TaskFactory.StartNew or TaskCompletionSource&amp;lt;TResult&amp;gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1930900922329960620/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/02/creating-tasks.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1930900922329960620'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1930900922329960620'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/creating-tasks.html' title='Creating Tasks'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705</id><published>2012-02-07T12:30:00.001-05:00</published><updated>2013-11-21T15:39:52.554-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async Unit Tests, Part 2: The Right Way</title><content type='html'>&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; The information in this blog post &lt;i&gt;only applies to Visual Studio 2010&lt;/i&gt;. Visual Studio 2012 &lt;i&gt;will&lt;/i&gt; support asynchronous unit tests, &lt;b&gt;as long as those tests are "async Task" tests, not "async void" tests&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Last time, we looked at &lt;a href="http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html"&gt;incorrect approaches to async unit testing&lt;/a&gt;. We also identified the underlying problem: that unit tests do not have an appropriate async context.&lt;/p&gt;

&lt;p&gt;At this point, the solution should be pretty obvious: give the unit tests an async context!&lt;/p&gt;

&lt;p&gt;It really is that easy! Why, all you have to do is write your own SynchronizationContext implementation. Keep in mind that thread-safety is paramount, because the methods under test may interact with the thread pool or other async contexts. Note that &lt;a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx"&gt;async void methods interact with SynchronizationContext in a different way&lt;/a&gt; than other async methods. Oh, and also remember that exceptions need special handling in some cases so their original call stack is preserved appropriately, and if you're on VS2010 you'll need to hack this in because &lt;a href="http://connect.microsoft.com/VisualStudio/feedback/details/633822/allow-preserving-stack-traces-when-rethrowing-exceptions"&gt;there's no support for it on .NET 4.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just kidding! Ha, ha! The good folks on the Async team have done all the hard work for you. :)&lt;/p&gt;

&lt;h4&gt;Right Way #1: The Official Approach&lt;/h4&gt;

&lt;p&gt;If you have the Async CTP installed, then check out the "My Documents\Microsoft Visual Studio Async CTP\Samples\(C# Testing) Unit Testing\AsyncTestUtilities" folder. You'll find not just one, but &lt;i&gt;three&lt;/i&gt; async-compatible contexts, ready for you to use!&lt;/p&gt;

&lt;p&gt;You should use GeneralThreadAffineContext unless you absolutely need another one. To use it, just copy AsyncTestUtilities.cs, CaptureAndRestorer.cs, and GeneralThreadAffineContext.cs into your test project.&lt;/p&gt;

&lt;p&gt;Then, take each unit test and re-write it so that it has a context:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
public void FourDividedByTwoIsTwo()
{
  GeneralThreadAffineContext.Run(async () =&amp;gt;
  {
    int result = await MyClass.Divide(4, 2);
    Assert.AreEqual(2, result);
  });
}

[TestMethod]
[ExpectedException(typeof(DivideByZeroException))]
public void DenominatorIsZeroThrowsDivideByZero()
{
  GeneralThreadAffineContext.Run(async () =&amp;gt;
  {
    await MyClass.Divide(4, 0);
  });
}
&lt;/pre&gt;

&lt;p&gt;Our unit test methods are not async. Each one sets up an async context and passes the &lt;i&gt;actual&lt;/i&gt; test into it as an async lambda expression. So, the &lt;i&gt;actual&lt;/i&gt; test code can still be written with all the benefits of async/await, and the async context takes care of making sure it runs as expected:&lt;/p&gt;

&lt;img border="0" height="86" width="332" src="http://4.bp.blogspot.com/-PUJd91U-KOQ/Tywglwj2h8I/AAAAAAAAGZ0/leAosXERVls/s400/AsyncUnitTests8.png" /&gt;

&lt;p&gt;Just as importantly, the async context ensures that tests that &lt;i&gt;should&lt;/i&gt; fail, &lt;i&gt;will&lt;/i&gt; fail:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
public void FourDividedByTwoIsThirteen_ShouldFail()
{
  GeneralThreadAffineContext.Run(async () =&amp;gt;
  {
    int result = await MyClass.Divide(4, 2);
    Assert.AreEqual(13, result);
  });
}
&lt;/pre&gt;

&lt;img border="0" height="66" width="332" src="http://1.bp.blogspot.com/-GbDb5DN0zTs/TywheaMRyuI/AAAAAAAAGaA/mhBhZbrlMz0/s400/AsyncUnitTests9.png" /&gt;

&lt;p&gt;And everyone lived happily ever after!&lt;/p&gt;

&lt;p&gt;Well, sort of. This solution does work, but it's a bit cumbersome. Copying code files into each test project? Modifying &lt;i&gt;every&lt;/i&gt; unit test to set up its own async context? &lt;i&gt;Really?&lt;/i&gt;&lt;/p&gt;

&lt;h4&gt;Right Way #2: Now with Less Effort!&lt;/h4&gt;

&lt;p&gt;Boy, if only there was &lt;i&gt;some way&lt;/i&gt; to have the MSTest framework apply the async context &lt;i&gt;for&lt;/i&gt; us, then we could just write async unit test methods and not worry about it!&lt;/p&gt;

&lt;p&gt;Oh yeah - there is. Visual Studio allows you to define a custom "test type." It really is that easy! Why, all you have to do is... ah, forget it. A custom "async unit test" type is already available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the &lt;a href="http://nuget.org/packages/AsyncUnitTests-MSTest"&gt;AsyncUnitTests-MSTest NuGet package&lt;/a&gt; into your test project.&lt;/li&gt;
&lt;li&gt;Add a &lt;b&gt;using Nito.AsyncEx.UnitTests;&lt;/b&gt; line.&lt;/li&gt;
&lt;li&gt;Change your [TestClass] attribute to [AsyncTestClass].&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sweet.&lt;/p&gt;

&lt;p&gt;Now you can write async unit tests (using async void):&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
public async void FourDividedByTwoIsTwoAsync()
{
  int result = await MyClass.Divide(4, 2);
  Assert.AreEqual(2, result);
}

[TestMethod]
[ExpectedException(typeof(DivideByZeroException))]
public async void DenominatorIsZeroThrowsDivideByZeroAsync()
{
  await MyClass.Divide(4, 0);
}
&lt;/pre&gt;

&lt;p&gt;And it works:&lt;/p&gt;

&lt;img border="0" height="83" width="361" src="http://4.bp.blogspot.com/-HzZzWRIjps4/TywnDiLrNCI/AAAAAAAAGaM/vi76_Zooyvs/s400/AsyncUnitTests10.png" /&gt;

&lt;p&gt;And test failures actually fail:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
public async void FourDividedByTwoIsThirteenAsync_ShouldFail()
{
  int result = await MyClass.Divide(4, 2);
  Assert.AreEqual(13, result);
}
&lt;/pre&gt;

&lt;img border="0" height="66" width="687" src="http://4.bp.blogspot.com/-KPICu-SIVrg/TywnkasIGUI/AAAAAAAAGaY/L72wYtkLIyY/s1400/AsyncUnitTests11.png" /&gt;

&lt;p&gt;&lt;i&gt;Sniff...&lt;/i&gt; It's... so... beautiful...&lt;/p&gt;

&lt;p&gt;But not quite perfect. You still have to add a NuGet package &lt;i&gt;and&lt;/i&gt; remember to change [TestClass] to [AsyncTestClass].&lt;/p&gt;

&lt;blockquote&gt;Tip: You can download an &lt;a href="http://asyncunittests.codeplex.com/wikipage?title=Optional%20Component"&gt;Async Unit Test item type&lt;/a&gt; which uses [AsyncTestClass] instead of [TestClass]. This makes writing new async tests just a little bit easier, but not entirely foolproof.&lt;/blockquote&gt;

&lt;h4&gt;Future Directions&lt;/h4&gt;

&lt;p&gt;xUnit.NET has recently released &lt;a href="http://xunit.codeplex.com/workitem/9733"&gt;first-class support for asynchronous unit tests&lt;/a&gt;: in version 1.9 (2012-01-02) and newer, for any test method returning Task/Task&amp;lt;T&amp;gt;, the test framework will wait until the task completes before declaring success/failure. However, as of now, it does not support async void unit tests; this &lt;a href="http://xunit.codeplex.com/workitem/9752"&gt;is planned&lt;/a&gt; for a future release.&lt;/p&gt;

&lt;p&gt;I've been in contact with some people inside of Microsoft regarding this issue, and they said they're aware of it and are considering various options. They wouldn't give me any details, of course, but they did suggest that I would be "pleasantly surprised" when Visual Studio vNext comes out.&lt;/p&gt;

&lt;p&gt;So, that's where we are today. Hopefully Microsoft will ship built-in async unit test support in Visual Studio vNext, and I'll be able to look back at this blog post and laugh at how fraught with peril async unit testing &lt;i&gt;used&lt;/i&gt; to be.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3764589414165236705/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html#comment-form' title='9 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' title='Async Unit Tests, Part 2: The Right Way'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-PUJd91U-KOQ/Tywglwj2h8I/AAAAAAAAGZ0/leAosXERVls/s72-c/AsyncUnitTests8.png' height='72' width='72'/><thr:total>9</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7640802004847274195</id><published>2012-02-06T12:30:00.000-05:00</published><updated>2013-11-21T15:36:46.327-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async Unit Tests, Part 1: The Wrong Way</title><content type='html'>&lt;blockquote&gt;&lt;div style="margin-left:30%; margin-right:30%"&gt;"Code without tests does not exist."&lt;br/&gt;&lt;p style="text-align:right;"&gt;&lt;i&gt;(Overheard at &lt;a href="http://codemash.org/"&gt;CodeMash&lt;/a&gt;)&lt;/i&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;The core meaning of this quote is that code without unit tests is not as useful as code with unit tests. The speaker even goes so far as to say he &lt;i&gt;won't&lt;/i&gt; use code without tests.&lt;/p&gt;

&lt;p&gt;I don't take a position quite this extreme, but I definitely agree with the underlying sentiment: that code with unit tests is far more useful. Unit tests prove correct functionality (at least for a limited set of cases). Unit tests also provide a sort of documentation.&lt;/p&gt;

&lt;p&gt;If you don't write unit tests - or if you or your manager think writing tests just delays software development - then I refer you to the best computer book ever written, &lt;a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_ss_tl?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735619670"&gt;Code Complete&lt;/a&gt;. In that book, Steve McConnell presents some very interesting hard facts about testing.&lt;/p&gt;

&lt;p&gt;I hope we can all agree that unit testing is a fundamental skill in Modern Programming. And this brings me to a sad chapter in async/await support: the "obvious" way to do unit tests is wrong.&lt;/p&gt;

&lt;p&gt;Let's start with a simple asynchronous method. So simple, in fact, that it will just pretend to work for a while and then do a single integer division:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public static class MyClass
{
  public static async Task&amp;lt;int&amp;gt; Divide(int numerator, int denominator)
  {
    // Work for a while...
    await Task.Delay(10); // (Use TaskEx.Delay on VS2010)

    // Return the result
    return numerator / denominator;
  }
}
&lt;/pre&gt;

&lt;p&gt;Boy, it doesn't seem that there &lt;i&gt;can&lt;/i&gt; be much wrong with that code! But as we'll see, there's a lot that can be wrong with the unit tests...&lt;/p&gt;

&lt;p&gt;When developers write unit tests for async code, they usually take one of two mistaken approaches (with the second one being what I call "obvious"). We'll look at each of these approaches in this post and examine why they're wrong, and look at solutions next time.&lt;/p&gt;

&lt;h4&gt;Wrong Way #1: Using Task.Wait and Task.Result&lt;/h4&gt;

&lt;p&gt;This mistake is most common for people new to async: they decide to wait for the task to complete and then check its result. Well, that &lt;i&gt;seems&lt;/i&gt; logical enough, and some unit tests written this way actually work:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
public void FourDividedByTwoIsTwo()
{
  Task&amp;lt;int&amp;gt; task = MyClass.Divide(4, 2);
  task.Wait();
  Assert.AreEqual(2, task.Result);
}
&lt;/pre&gt;
&lt;img border="0" height="58" width="264" src="http://3.bp.blogspot.com/-DCU0n01B4gk/TywEJUuXxtI/AAAAAAAAGYg/ZAM3DiuSYxQ/s400/AsyncUnitTests1.png" /&gt;

&lt;p&gt;But one of the problems with this approach is unit tests that check error handling:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
[ExpectedException(typeof(DivideByZeroException))]
public void DenominatorIsZeroThrowsDivideByZero()
{
  Task&amp;lt;int&amp;gt; task = MyClass.Divide(4, 0);
  task.Wait();
}
&lt;/pre&gt;
&lt;img border="0" height="66" width="336" src="http://3.bp.blogspot.com/-RPxjq18wKeM/TywGLlx2X5I/AAAAAAAAGYs/88O5J7EJtVc/s400/AsyncUnitTests2.png" /&gt;

&lt;p&gt;This unit test is failing, even though the async method under test &lt;i&gt;is&lt;/i&gt; throwing a DivideByZeroException. The Test Results Details explains why:&lt;/p&gt;

&lt;img border="0" height="66" width="691" src="http://2.bp.blogspot.com/-2VrjWteEERk/TywGf-GQV3I/AAAAAAAAGY4/SjUKYKulg8U/s1600/AsyncUnitTests3.png" /&gt;

&lt;p&gt;The Task class is wrapping our exception into an AggregateException. This is why the Task.Wait and Task.Result members should not be used with new async code (see the end of &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;last week's async intro post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Well, we could await the task, which would unwrap the exception for us. This would require our test method to be async. Congratulations, you can move on to the next section.&lt;/p&gt;

&lt;h4&gt;Wrong Way #2: Using Async Test Methods&lt;/h4&gt;

&lt;p&gt;This mistake is more common for people who have used async in some real-world code. They've observed how async "grows" through the code base, and so it's natural to extend async to the test methods. This is what I consider the "obvious" solution:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
public async Task FourDividedByTwoIsTwoAsync()
{
  int result = await MyClass.Divide(4, 2);
  Assert.AreEqual(2, result);
}
&lt;/pre&gt;
&lt;img border="0" height="64" width="334" src="http://3.bp.blogspot.com/-QJnErhOhIkk/TywIdoieTLI/AAAAAAAAGZE/JnDGHdUc4gc/s400/AsyncUnitTests4.png" /&gt;

&lt;p&gt;Yay! It works!&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Wait...&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
[TestMethod]
public async Task FourDividedByTwoIsThirteenAsync()
{
  int result = await MyClass.Divide(4, 2);
  Assert.AreEqual(13, result);
}
&lt;/pre&gt;
&lt;img border="0" height="62" width="335" src="http://3.bp.blogspot.com/-vjLqO2hcBLM/TywJgQSvEHI/AAAAAAAAGZQ/LK1UrMdiuhg/s400/AsyncUnitTests5.png" /&gt;

&lt;p&gt;Um, that test should &lt;i&gt;certainly not&lt;/i&gt; be passing! What is going on here???&lt;/p&gt;

&lt;p&gt;We've encountered a situation very similar to &lt;a href="http://blog.stephencleary.com/2012/02/async-console-programs.html"&gt;async in Console programs&lt;/a&gt;: there is no async context provided for unit tests, so they're just using the thread pool context. This means that when we await our method under test, then our async test method returns to its caller (the unit test framework), and the remainder of the async test method - including the Assert - is scheduled to run on the thread pool. When the unit test framework sees the test method return (without an exception), then it marks the method as "Passed". Eventually, the Assert will fail on the thread pool.&lt;/p&gt;

&lt;p&gt;There is now a race condition. There's no race condition in the test itself; it will always pass (incorrectly). The race condition is when the assertion fires. If the assertion fires &lt;i&gt;after&lt;/i&gt; the unit test framework finishes the test run, then you'll see a successful test run (like the last screenshot). But if the assertion fires &lt;i&gt;before&lt;/i&gt; the unit test framework finishes the test run, then you'll see something like this:&lt;/p&gt;
&lt;img border="0" height="67" width="320" src="http://3.bp.blogspot.com/-jh2t2vj3h0o/TywPB1ENGPI/AAAAAAAAGZc/yPitpVg9ySo/s400/AsyncUnitTests6.png" /&gt;

&lt;p&gt;Clicking on the link shows that the Assertion is indeed failing on the thread pool, some time after the test is considered completed and "Passed":&lt;/p&gt;
&lt;img border="0" height="156" width="688" src="http://4.bp.blogspot.com/-jD4Y9__6c2g/TywPd6F2HKI/AAAAAAAAGZo/g7KlQRDzqGo/s1400/AsyncUnitTests7.png" /&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; Visual Studio 2012 will correctly support "async &lt;i&gt;Task&lt;/i&gt;" unit tests, but doesn't appear to support "async void" unit tests.&lt;/p&gt;

&lt;h4&gt;Next Time: The Right Way&lt;/h4&gt;

&lt;p&gt;During CodeMash, I gave a lightning talk about async unit testing. You could almost hear the teeth grinding at this point, when the TDD/BDD fans discovered that async unit tests were essentially broken. But do not give up hope!&lt;/p&gt;

&lt;p&gt;Tomorrow we'll look at &lt;a href="http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html"&gt;the right way to do async unit testing&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7640802004847274195/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7640802004847274195'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7640802004847274195'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html' title='Async Unit Tests, Part 1: The Wrong Way'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-DCU0n01B4gk/TywEJUuXxtI/AAAAAAAAGYg/ZAM3DiuSYxQ/s72-c/AsyncUnitTests1.png' height='72' width='72'/><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674</id><published>2012-02-03T12:30:00.000-05:00</published><updated>2013-05-17T11:01:31.890-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async Console Programs</title><content type='html'>&lt;p&gt;Once you start using asynchronous code, it kind of "grows" through your codebase. It's easier for asynchronous code to work with other asynchronous code, so it's natural to start making everything asynchronous.&lt;/p&gt;

&lt;p&gt;If you're writing a console program, you may end up wanting an asynchronous main method, like this:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
class Program
{
  static async void Main(string[] args)
  {
    ...
  }
}
&lt;/pre&gt;

&lt;p&gt;Unfortunately, that doesn't work (and in fact, the Visual Studio 11 compiler will reject an async Main method). Remember &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;from our intro post&lt;/a&gt; that an async method will &lt;i&gt;return&lt;/i&gt; to its caller before it is complete. This works perfectly in UI applications (the method just returns to the UI event loop) and ASP.NET applications (the method returns off the thread but keeps the request alive). It doesn't work out so well for Console programs: Main returns to the OS - so your program exits.&lt;/p&gt;

&lt;p&gt;You can work around this by providing your own async-compatible context. &lt;a href="http://nitoasyncex.codeplex.com/wikipage?title=AsyncContext"&gt;AsyncContext&lt;/a&gt; is a general-purpose context that can be used to enable an asynchronous MainAsync:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
class Program
{
  static int Main(string[] args)
  {
    try
    {
      return AsyncContext.Run(() =&amp;gt; MainAsync(args));
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return -1;
    }
  }

  static async Task&amp;lt;int&amp;gt; MainAsync(string[] args)
  {
    ...
  }
}
&lt;/pre&gt;

&lt;p&gt;That's all for today; next week we'll start looking at asynchronous unit tests, which suffer from a similar problem.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8486108197439859674/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html#comment-form' title='10 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html' title='Async Console Programs'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>10</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806</id><published>2012-02-02T12:30:00.000-05:00</published><updated>2014-03-07T22:16:43.063-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Async and Await</title><content type='html'>&lt;p&gt;Most people have already heard about the new "async" and "await" functionality coming in Visual Studio 11. This is Yet Another Introductory Post.&lt;/p&gt;

&lt;p&gt;First, the punchline: Async will fundamentally change the way most code is written.&lt;/p&gt;

&lt;p&gt;Yup, I believe async/await will have a bigger impact than LINQ. Understanding async will be a basic necessity just a few short years from now.&lt;/p&gt;

&lt;h4&gt;Introducing the Keywords&lt;/h4&gt;

&lt;p&gt;Let's dive right in. I'll use some concepts that I'll expound on later on - just hold on for this first part.&lt;/p&gt;

&lt;p&gt;Asynchronous methods look something like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public async Task DoSomethingAsync()
{
  // In the Real World, we would actually do something...
  // For this example, we're just going to (asynchronously) wait 100ms.
  await Task.Delay(100);
}
&lt;/pre&gt;

&lt;p&gt;The "async" keyword enables the "await" keyword in that method. &lt;i&gt;That's all the async keyword does!&lt;/i&gt; It does not run this method on a thread pool thread, or do any other kind of magic. The async keyword &lt;i&gt;only&lt;/i&gt; enables the await keyword.&lt;/p&gt;

&lt;p&gt;The beginning of an async method is executed just like any other method. That is, it runs synchronously until it hits an "await" (or throws an exception).&lt;/p&gt;

&lt;p&gt;The "await" keyword is where things can get asynchronous. Await is like a unary operator: it takes a single argument, an &lt;b&gt;awaitable&lt;/b&gt; (an "awaitable" is an asynchronous operation). Await examines that awaitable to see if it has already completed; if the awaitable has already completed, then the method just continues running (synchronously, just like a regular method).&lt;/p&gt;

&lt;p&gt;If "await" sees that the awaitable has not completed, then it acts asynchronously. It tells the awaitable to run the remainder of the method when it completes, and then &lt;i&gt;returns&lt;/i&gt; from the async method.&lt;/p&gt;

&lt;p&gt;Later on, when the awaitable completes, it will execute the remainder of the async method. If you're awaiting a built-in awaitable (such as a task), then the remainder of the async method will execute on a "context" that was captured before the "await" returned.&lt;/p&gt;

&lt;p&gt;I like to think of "await" as an "asynchronous wait". That is to say, the async &lt;i&gt;method&lt;/i&gt; pauses until the awaitable is complete (so it &lt;i&gt;waits&lt;/i&gt;), but the actual &lt;i&gt;thread&lt;/i&gt; is not blocked (so it's &lt;i&gt;asynchronous&lt;/i&gt;).&lt;/p&gt;

&lt;h4&gt;Awaitables&lt;/h4&gt;

&lt;p&gt;As I mentioned, "await" takes a single argument - an "awaitable" - which is an asynchronous operation. There are two awaitable types already common in the .NET framework: Task&amp;lt;T&amp;gt; and Task.&lt;/p&gt;

&lt;p&gt;There are also other awaitable types: special methods such as "Task.Yield" return awaitables that are not Tasks, and the WinRT runtime (coming in Windows 8) has an unmanaged awaitable type. You can also create your own awaitable (usually for performance reasons), or use extension methods to make a non-awaitable type awaitable.&lt;/p&gt;

&lt;p&gt;That's all I'm going to say about making your own awaitables. I've only had to write a couple of awaitables in the entire time I've used async/await. If you want to know more about writing your own awaitables, see the &lt;a href="http://blogs.msdn.com/b/pfxteam/"&gt;Parallel Team Blog&lt;/a&gt; or &lt;a href="http://msmvps.com/blogs/jon_skeet/Default.aspx"&gt;Jon Skeet's Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One important point about awaitables is this: it is the &lt;i&gt;type&lt;/i&gt; that is awaitable, not the method returning the type. In other words, you can await the result of an async method that returns Task ... &lt;i&gt;because the method returns Task, not because it's async&lt;/i&gt;. So you can also await the result of a &lt;i&gt;non-async&lt;/i&gt; method that returns Task:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public async Task NewStuffAsync()
{
  // Use await and have fun with the new stuff.
  await ...
}

public Task MyOldTaskParallelLibraryCode()
{
  // Note that this is not an async method, so we can't use await in here.
  ...
}

public async Task ComposeAsync()
{
  // We can await Tasks, regardless of where they come from.
  await NewStuffAsync();
  await MyOldTaskParallelLibraryCode();
}
&lt;/pre&gt;

&lt;blockquote&gt;Tip: If you have a very simple asynchronous method, you may be able to write it without using the await keyword (e.g., using Task.FromResult). If you &lt;i&gt;can&lt;/i&gt; write it without await, then you &lt;i&gt;should&lt;/i&gt; write it without await, and remove the async keyword from the method. A non-async method returning Task.FromResult is more efficient than an async method returning a value.&lt;/blockquote&gt;

&lt;h4&gt;Return Types&lt;/h4&gt;

&lt;p&gt;Async methods can return Task&amp;lt;T&amp;gt;, Task, or void. In almost all cases, you want to return Task&amp;lt;T&amp;gt; or Task, and return void only when you have to.&lt;/p&gt;

&lt;p&gt;Why return Task&amp;lt;T&amp;gt; or Task? Because they're awaitable, and void is not. So if you have an async method returning Task&amp;lt;T&amp;gt; or Task, then you can pass the result to await. With a void method, you don't have anything to pass to await.&lt;/p&gt;

&lt;p&gt;You have to return void when you have async event handlers.&lt;/p&gt;

&lt;blockquote&gt;You can also use async void for other "top-level" kinds of actions - e.g., a single "static async void MainAsync()" for Console programs. However, this use of async void has its own problem; see &lt;a href="http://blog.stephencleary.com/2012/02/async-console-programs.html"&gt;Async Console Programs&lt;/a&gt;. The primary use case for async void methods is event handlers.&lt;/blockquote&gt;

&lt;h4&gt;Returning Values&lt;/h4&gt;

&lt;p&gt;Async methods returning Task or void do not have a return value. Async methods returning Task&amp;lt;T&amp;gt; must return a value of type T:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public async Task&amp;lt;int&amp;gt; CalculateAnswer()
{
  await Task.Delay(100); // (Probably should be longer...)

  // Return a type of "int", not "Task&amp;lt;int&amp;gt;"
  return 42;
}
&lt;/pre&gt;

&lt;p&gt;This is a bit odd to get used to, but there are &lt;a href="http://blog.stephencleary.com/2011/09/async-ctp-why-do-keywords-work-that-way.html"&gt;good reasons&lt;/a&gt; behind this design.&lt;/p&gt;

&lt;h4&gt;Context&lt;/h4&gt;

&lt;p&gt;In the overview, I mentioned that when you await a built-in awaitable, then the awaitable will capture the current "context" and later apply it to the remainder of the async method. What exactly is that "context"?&lt;/p&gt;

&lt;p&gt;Simple answer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you're on a UI thread, then it's a UI context.&lt;/li&gt;
&lt;li&gt;If you're responding to an ASP.NET request, then it's an ASP.NET request context.&lt;/li&gt;
&lt;li&gt;Otherwise, it's usually a thread pool context.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Complex answer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If SynchronizationContext.Current is not null, then it's the current SynchronizationContext. (UI and ASP.NET request contexts are SynchronizationContext contexts).&lt;/li&gt;
&lt;li&gt;Otherwise, it's the current TaskScheduler (TaskScheduler.Default is the thread pool context).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What does this mean in the real world? For one thing, capturing (and restoring) the UI/ASP.NET context is done transparently:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// WinForms example (it works exactly the same for WPF).
private async void DownloadFileButton_Click(object sender, EventArgs e)
{
  // Since we asynchronously wait, the UI thread is not blocked by the file download.
  await DownloadFileAsync(fileNameTextBox.Text);

  // Since we resume on the UI context, we can directly access UI elements.
  resultTextBox.Text = "File downloaded!";
}

// ASP.NET example
protected async void MyButton_Click(object sender, EventArgs e)
{
  // Since we asynchronously wait, the ASP.NET thread is not blocked by the file download.
  // This allows the thread to handle other requests while we're waiting.
  await DownloadFileAsync(...);

  // Since we resume on the ASP.NET context, we can access the current request.
  // We may actually be on another *thread*, but we have the same ASP.NET request context.
  Response.Write("File downloaded!");
}
&lt;/pre&gt;

&lt;p&gt;This is great for event handlers, but it turns out to not be what you want for most other code (which is, really, most of the async code you'll be writing).&lt;/p&gt;

&lt;h4&gt;Avoiding Context&lt;/h4&gt;

&lt;p&gt;Most of the time, you don't &lt;i&gt;need&lt;/i&gt; to sync back to the "main" context. Most async methods will be designed with composition in mind: they await other operations, and each one represents an asynchronous operation itself (which can be composed by others). In this case, you want to tell the awaiter to &lt;i&gt;not&lt;/i&gt; capture the current context by calling &lt;b&gt;ConfigureAwait&lt;/b&gt; and passing false, e.g.:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
private async Task DownloadFileAsync(string fileName)
{
  // Use HttpClient or whatever to download the file contents.
  var fileContents = await DownloadFileContentsAsync(fileName).ConfigureAwait(false);

  // Note that because of the ConfigureAwait(false), we are not on the original context here.
  // Instead, we're running on the thread pool.

  // Write the file contents out to a disk file.
  await WriteToDiskAsync(fileName, fileContents).ConfigureAwait(false);

  // The second call to ConfigureAwait(false) is not *required*, but it is Good Practice.
}

// WinForms example (it works exactly the same for WPF).
private async void DownloadFileButton_Click(object sender, EventArgs e)
{
  // Since we asynchronously wait, the UI thread is not blocked by the file download.
  await DownloadFileAsync(fileNameTextBox.Text);

  // Since we resume on the UI context, we can directly access UI elements.
  resultTextBox.Text = "File downloaded!";
}
&lt;/pre&gt;

&lt;p&gt;The important thing to note with this example is that each "level" of async method calls has its own context. DownloadFileButton_Click started in the UI context, and called DownloadFileAsync. DownloadFileAsync also started in the UI context, but then stepped out of its context by calling ConfigureAwait(false). The rest of DownloadFileAsync runs in the thread pool context. However, when DownloadFileAsync completes and DownloadFileButton_Click resumes, it &lt;i&gt;does&lt;/i&gt; resume in the UI context.&lt;/p&gt;

&lt;p&gt;A good rule of thumb is to use ConfigureAwait(false) unless you know you &lt;i&gt;do&lt;/i&gt; need the context.&lt;/p&gt;

&lt;h4&gt;Async Composition&lt;/h4&gt;

&lt;p&gt;So far, we've only considered serial composition: an async method waits for one operation at a time. It's also possible to start several operations and await for one (or all) of them to complete. You can do this by starting the operations but not awaiting them until later:&lt;/p&gt;

&lt;pre class="brush:csharp;"&gt;
public async Task DoOperationsConcurrentlyAsync()
{
  Task[] tasks = new Task[3];
  tasks[0] = DoOperation0Async();
  tasks[1] = DoOperation1Async();
  tasks[2] = DoOperation2Async();

  // At this point, all three tasks are running at the same time.

  // Now, we await them all.
  await Task.WhenAll(tasks);
}

public async Task&amp;lt;int&amp;gt; GetFirstToRespondAsync()
{
  // Call two web services; take the first response.
  Task&amp;lt;int&amp;gt;[] tasks = new[] { WebService1Async(), WebService2Async() };

  // Await for the first one to respond.
  Task&amp;lt;int&amp;gt; firstTask = await Task.WhenAny(tasks);

  // Return the result.
  return await firstTask;
}
&lt;/pre&gt;

&lt;p&gt;By using concurrent composition (Task.WhenAll or Task.WhenAny), you can perform simple concurrent operations. You can also use these methods along with Task.Run to do simple parallel computation. However, this is not a substitute for the Task Parallel Library - any advanced CPU-intensive parallel operations should be done with the TPL.&lt;/p&gt;

&lt;h4&gt;Guidelines&lt;/h4&gt;

&lt;p&gt;Read the &lt;a href="http://www.microsoft.com/download/en/details.aspx?id=19957"&gt;Task-based Asynchronous Pattern (TAP) document&lt;/a&gt;. It is extremely well-written, and includes guidance on API design and the proper use of async/await (including cancellation and progress reporting).&lt;/p&gt;

&lt;p&gt;There are many new await-friendly techniques that should be used instead of the old blocking techniques. If you have any of these Old examples in your new async code, you're Doing It Wrong(TM):&lt;/p&gt;

&lt;table border="0"&gt;
&lt;tr&gt;&lt;th&gt;Old&lt;/th&gt;&lt;th&gt;New&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;task.Wait&lt;/td&gt;&lt;td&gt;await task&lt;/td&gt;&lt;td&gt;Wait/await for a task to complete&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;task.Result&lt;/td&gt;&lt;td&gt;await task&lt;/td&gt;&lt;td&gt;Get the result of a completed task&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Task.WaitAny&lt;/td&gt;&lt;td&gt;await Task.WhenAny&lt;/td&gt;&lt;td&gt;Wait/await for one of a collection of tasks to complete&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Task.WaitAll&lt;/td&gt;&lt;td&gt;await Task.WhenAll&lt;/td&gt;&lt;td&gt;Wait/await for every one of a collection of tasks to complete&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Thread.Sleep&lt;/td&gt;&lt;td&gt;await Task.Delay&lt;/td&gt;&lt;td&gt;Wait/await for a period of time&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Task constructor&lt;/td&gt;&lt;td&gt;Task.Run or TaskFactory.StartNew&lt;/td&gt;&lt;td&gt;Create a code-based task&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h4&gt;Next Steps&lt;/h4&gt;

&lt;p&gt;I have published an MSDN article &lt;a href="http://msdn.microsoft.com/en-us/magazine/jj991977.aspx"&gt;Best Practices in Asynchronous Programming&lt;/a&gt;, which further explains the "avoid async void", "async all the way" and "configure context" guidelines.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://msdn.microsoft.com/en-us/library/hh191443.aspx"&gt;official MSDN documentation&lt;/a&gt; is quite good; they include an online version of the &lt;a href="http://msdn.microsoft.com/en-us/library/hh873175.aspx"&gt;Task-based Asynchronous Pattern document&lt;/a&gt; which is excellent, covering the designs of asynchronous methods.&lt;/p&gt;

&lt;p&gt;The async team has published an &lt;a href="http://blogs.msdn.com/b/pfxteam/archive/2012/04/12/10293335.aspx"&gt;async/await FAQ&lt;/a&gt; that is a great place to continue learning about async. They have pointers to the best blog posts and videos on there. Also, pretty much any blog post by &lt;a href="http://blogs.msdn.com/b/pfxteam"&gt;Stephen Toub&lt;/a&gt; is instructive!&lt;/p&gt;

&lt;p&gt;Of course, another resource is my own blog. This blog post is the beginning of a &lt;a href="http://blog.stephencleary.com/search/label/async"&gt;series of posts on async&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7596207631806694806/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html#comment-form' title='58 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html' title='Async and Await'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>58</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3092811678661560282</id><published>2011-12-01T00:46:00.001-05:00</published><updated>2011-12-01T00:54:46.391-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Personal'/><title type='text'>Out for a Bit</title><content type='html'>&lt;p&gt;There are several things that I was planning to do over the last week or two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collect my slides, notes, and demos for my "Thread is Dead" talk recently given at GRDevDay.&lt;/li&gt;
&lt;li&gt;Update Nito.AsyncEx to support Silverlight 5 and possibly also Windows Phone.&lt;/li&gt;
&lt;li&gt;Finish my "command line parsing" series of blog posts, and start a new series looking at "async in the real world" - essentially my "Thread is Dead" talk broken up into a couple dozen posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, sometimes the unexpected happens. My two-year-old son &lt;a href="http://sdcleary.blogspot.com/"&gt;has been diagnosed&lt;/a&gt; with Leukemia, and I am writing this far from home in his hospital room.&lt;/p&gt;

&lt;p&gt;I do still plan to do all of the things listed above, but they won't get done as soon as I was hoping. My apologies especially to the GRDevDay people!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3092811678661560282/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/12/out-for-bit.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3092811678661560282'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3092811678661560282'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/12/out-for-bit.html' title='Out for a Bit'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4708674097342024260</id><published>2011-11-26T15:28:00.000-05:00</published><updated>2011-11-26T18:27:11.838-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='IT'/><title type='text'>Virtualizing Two Machines over Thanksgiving</title><content type='html'>&lt;p&gt;Like many "computer people," I do a lot of admin work for friends and familiy. Over the last few years, I've worked with &lt;a href="http://landmarkbaptist.com"&gt;my church&lt;/a&gt; to get them out of the dark ages of computing. The process is almost complete; I only have one more machine to replace, and then they will all be 64-bit dual-core 4GB systems running Pro editions of Windows. Next year I hope to (finally) put in a domain.&lt;/p&gt;

&lt;p&gt;It turns out that two of the old machines have some outdated software that's critical to weekly operations. I'm working on replacements for the software, but in the meantime, the old machines were just sitting around, taking up space in the church office.&lt;/p&gt;

&lt;p&gt;I decided to try to virtualize these machines on Friday (the day after Thanksgiving). This blog entry is just a "lessons learned" from this adventure.&lt;/p&gt;

&lt;h4&gt;The Challenge, and the Plan&lt;/h4&gt;

&lt;p&gt;The old "server" (XP Home with 192 MB RAM) and the old office machine (XP Home with 256 MB RAM) both needed virtualization. Due to the way the weekly process is done in the office, the old server would have to be virtualized onto the new server, and the old office machine would have to be virtualized onto the new office machine.&lt;/p&gt;

&lt;p&gt;I'm most familiar with &lt;a href="http://www.vmware.com/"&gt;VMWare products&lt;/a&gt; (particularly VMWare Workstation), and I highly recommend them. However, I wanted to see if it was possible to virtualize these machines without incurring a licensing cost. My budget at Landmark Baptist isn't comparable to most IT departments. ;)  So, I decided to try Hyper-V or Virtual PC, falling back on VirtualBox if necessary (it wasn't).&lt;/p&gt;

&lt;p&gt;The server was the first machine to be replaced, so unfortunately at this point the new server has the most outdated hardware/OS. It's running Server 2008 but without Hyper-V... or even CPU virtualization support. :(  Furthermore, according to what I've read, Hyper-V doesn't support USB, which IMO is a significant limitation (and a showstopper for the old "server").&lt;/p&gt;

&lt;p&gt;So, I decided to try using Virtual PC for both virtual machines. The new office machine runs Win7 Pro, which is fully supported by the current version of Virtual PC ("Windows Virtual PC"). I was a bit apprehensive about the new server; Server 2008 isn't an officially supported platform for the previous version of Virtual PC ("Microsoft Virtual PC 2007 SP1"), but it turned out to work fine. Microsoft still has Virtual PC 2007 available for download, and SP1 added support for machines without virtualization hardware (which is just what I needed).&lt;/p&gt;

&lt;p&gt;One limitation with Virtual PC is that it can only handle 127 GB hard drives. In my case, both machines had hard drives much smaller than that, so it wasn't a problem.&lt;/p&gt;

&lt;p&gt;The plan at this point was to virtualize each machine to a different version of Virtual PC (running on different OSes and hardware). We'll see how well this worked in a moment, but first I'll mention the tool which kicked off this whole adventure.&lt;/p&gt;

&lt;p&gt;Systems Internals has a great tool called &lt;a href="http://technet.microsoft.com/en-us/sysinternals/ee656415"&gt;disk2vhd&lt;/a&gt;, which can create a virtual disk from a physical disk - even storing the virtual disk image on the physical disk it's imaging, while the physical disk is running the OS running disk2vhd. If you think about it, that's pretty cool.&lt;/p&gt;

&lt;p&gt;Disk2vhd can take quite a while (i.e., 8-10 hours) to run, so I tried to make my plan where it would run overnight. Once I have the machines in a VHD image, I should be able to create a Virtual PC machine using that for a hard drive. VirtualBox also supports VHD, so my fallback would be ready just in case.&lt;/p&gt;

&lt;p&gt;There are several articles on the Internet where others have successfully converted a physical XP machine to a virtual PC on Windows 7. The steps are straightforward: Create a disk image using disk2vhd; copy the image to the host PC; set up a new virtual machine in Virtual PC; re-activate Windows on the virtual machine; and install Integration Components/Services.&lt;/p&gt;

&lt;p&gt;One final note: during my preparations, I discovered that XP can run into a stop 0x7B when backing up to a disk image and restoring on different hardware (which is very similar to what I'm doing with disk2vhd). The steps to fix this are in &lt;a href="http://support.microsoft.com/kb/314082"&gt;KB314082&lt;/a&gt;. I did not run into this issue, but I'm including it here for others who may.&lt;/p&gt;

&lt;p&gt;On Wednesday (the day before Thanksgiving), I had done all the research and established my plan. I downloaded disk2vhd, VirtualBox, and both versions of Virtual PC onto my USB drive and left for Petoskey. That night, I started both machines running disk2vhd and went over to my Mom's for Thanksgiving.&lt;/p&gt;

&lt;h4&gt;A Snag: OEM OS&lt;/h4&gt;

&lt;p&gt;I popped in to check the status on Thursday morning. The server disk2vhd failed; my external USB drive had a faulty power adapter and it had shorted out overnight. So I restarted it with my other USB drive, and turned my attention to the office machine.&lt;/p&gt;

&lt;p&gt;I had noticed on the disk2vhd download page that OEM OS licenses prevent virtualization. Turns out the office machine was XP Home OEM. The VHD came out fine, but it was not possible to re-activate Windows on the virtual machine. I did have a spare XP Home Retail key, but apparently you can't activate an OEM install with a Retail key. I also tried the original OEM key, but that didn't work since it's keyed to the BIOS which is different in a virtual machine.&lt;/p&gt;

&lt;p&gt;Re-installing the OS was out of the question (if I actually &lt;i&gt;had&lt;/i&gt; the install media for the outdated programs, I would have installed them on the new machine and we wouldn't need to virtualize in the first place). In desperation, I searched online for any way to convert OEM to Retail in-place. Most of the articles recommended running a repair from a different CD, but that seemed hokey to me (how would that affect updates already installed?).&lt;/p&gt;

&lt;p&gt;Finally, I discovered the &lt;a href="http://go.microsoft.com/fwlink/?LinkId=204141"&gt;Product Key Update Tool&lt;/a&gt;. I ran it on the old office machine, converting it from OEM to Retail, and then re-started disk2vhd. This time, I ran disk2vhd with the output disk image going directly over the network to the new host PC; this worked just fine and I highly recommend it.&lt;/p&gt;

&lt;p&gt;During my searching, I also discovered &lt;b&gt;sysprep&lt;/b&gt;. The Product Key Update Tool changes the old key to a new key; whereas Sysprep removes the existing key, requiring the user to type it in the next time the computer boots. I used the Update Tool, but Sysprep would probably also work.&lt;/p&gt;

&lt;h4&gt;Another Snag: Remote Control&lt;/h4&gt;

&lt;p&gt;I was hoping to do most of the work on Friday from the comfort of my Mom's living room, eating Thanksgiving leftovers and watching the kids play with their uncles. Unfortunately, I could not get mouse capture to work at all remotely before Integration Services were installed.&lt;/p&gt;

&lt;p&gt;It doesn't appear to be possible to set up a new virtual machine remotely. At least not using &lt;a href="https://secure.logmein.com/"&gt;LogMeIn&lt;/a&gt;, which is my remote control software of choice; in the past I've used pcAnywhere, UltraVNC, and Windows Live Mesh, but I've now settled solidly on LogMeIn.&lt;/p&gt;

&lt;p&gt;I also tried to LogMeIn into another computer and Remote Desktop to the Virtual PC host; however, the mouse capture was still funky (the scale was messed up). Once I got Integration Services installed, remotely controlling a host PC worked fine.&lt;/p&gt;

&lt;p&gt;So, I ended up having to physically be present for the initial virtual machine setup, which was disappointing.&lt;/p&gt;

&lt;h4&gt;Another Snag: Networking&lt;/h4&gt;

&lt;p&gt;When I brought up the old "server" as a virtual machine on the new server, the networking didn't work. Since I only had the Windows Activation UI available, it wasn't possible to diagnose. By default, Virtual PC will share the host's network card (using a network switch in software). The new server had a static IP, but this shouldn't have caused a problem. When I switched it to use NAT (a network router in software), the problem went away.&lt;/p&gt;

&lt;p&gt;I've always used NAT for my VMWare virtual machines, so this was a natural step.&lt;/p&gt;

&lt;h4&gt;Issue: Slow Initial Boot&lt;/h4&gt;

&lt;p&gt;The "server" disk2vhd process never finished. I'm not entirely sure why; the disk file was approximately the correct size, but disk2vhd never completed. Eventually I just exited the program and decided to try to use the file anyway.&lt;/p&gt;

&lt;p&gt;When starting the old server as a virtual machine for the first time, it took about an hour to get from initial startup, through Windows activation, and to the desktop. Virtual PC was pegging the CPU the entire time. I'm unsure of the reason for this; the host PC does not have virtualization hardware, the vhd could be incomplete, the vhd is dynamic, ...&lt;/p&gt;

&lt;p&gt;Once I installed Integration Components and rebooted, the CPU problems disappeared. I can't say whether the resolution was due to the installation or the rebooting.&lt;/p&gt;

&lt;h4&gt;Issue: Integration Components on XP Home&lt;/h4&gt;

&lt;p&gt;The virtualized XP office machine is running on Windows Virtual PC under a Windows 7 Pro host. Normally, this situation allows a really neat trick: you can set up a program on the virtual machine so it looks like a program on the host, with its own Start menu entry, running in a regular window instead of a full virtual machine desktop, etc.&lt;/p&gt;

&lt;p&gt;Unfortunately, that does not work if the virtual machine is XP Home. Apparently, the Integration Components use RDP (Remote Desktop) for that functionality. The auto-login feature is also not available.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;The project was completed, though it took longer than I expected. I'll find out next week if everything works sufficiently on the virtualized machines.&lt;/p&gt;

&lt;p&gt;Lessons learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You cannot virtualize an OEM install. You have to change it to a Retail install first, using the &lt;a href="http://go.microsoft.com/fwlink/?LinkId=204141"&gt;Product Key Update Tool&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://technet.microsoft.com/en-us/sysinternals/ee656415"&gt;Disk2vhd&lt;/a&gt; can target a vhd image over the network.&lt;/li&gt;
&lt;li&gt;You must be physically present to set up the virtual machines, at least until the point that Integration Services are installed.&lt;/li&gt;
&lt;li&gt;If you're having problems getting the virtual machine on the network, try using NAT.&lt;/li&gt;
&lt;li&gt;Some Integration Components features do not work if the guest is XP Home.&lt;/li&gt;
&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4708674097342024260/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/11/virtualizing-two-machines-over.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4708674097342024260'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4708674097342024260'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/11/virtualizing-two-machines-over.html' title='Virtualizing Two Machines over Thanksgiving'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3253379317202462495</id><published>2011-10-13T12:30:00.000-04:00</published><updated>2011-10-14T10:51:25.790-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Case Sensitivity</title><content type='html'>&lt;p&gt;By default, all option parsing is case-sensitive:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;name&amp;quot;, 'n')]
    public string Name { get; private set; }
  }

  static int Main(string[] args)
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();
      Console.WriteLine(&amp;quot;Name: &amp;quot; + options.Name);
      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe /name Bob
Name: Bob

&amp;gt; CommandLineParsingTest.exe /Name Bob
Unknown option  Name  in parameter  /Name
&lt;/pre&gt;

&lt;p&gt;This is normal for Unix users, but Windows users expect case-insensitivity. You can pass your own &lt;b&gt;StringComparer&lt;/b&gt; to the &lt;b&gt;Parse&lt;/b&gt; method to support case-insensitivity:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;name&amp;quot;, 'n')]
    public string Name { get; private set; }
  }

  static int Main(string[] args)
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;(stringComparer:StringComparer.CurrentCultureIgnoreCase);
      Console.WriteLine(&amp;quot;Name: &amp;quot; + options.Name);
      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe /name Bob
Name: Bob

&amp;gt; CommandLineParsingTest.exe /Name Bob
Name: Bob
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3253379317202462495/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/10/option-parsing-case-sensitivity.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3253379317202462495'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3253379317202462495'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/10/option-parsing-case-sensitivity.html' title='Option Parsing: Case Sensitivity'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4272680031731395365</id><published>2011-10-06T12:30:00.000-04:00</published><updated>2013-05-17T11:00:27.899-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing; Positional Arguments</title><content type='html'>&lt;p&gt;"Positional arguments" are any arguments not associated with an option. When using the &lt;a href="http://nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink option parsing library&lt;/a&gt;, positional arguments must come after any options and their arguments.&lt;/p&gt;

&lt;h4&gt;Individual Positional Arguments&lt;/h4&gt;

&lt;p&gt;You can use the &lt;b&gt;PositionalArgumentAttribute&lt;/b&gt; to specify positional arguments in your options class. This attribute takes a single integral parameter, the 0-based index of the positional argument.&lt;/p&gt;

&lt;p&gt;Positional arguments support the entire range of &lt;a href="http://blog.stephencleary.com/2011/08/option-parsing-argument-parsing.html"&gt;parsing possibilities&lt;/a&gt;, including &lt;b&gt;SimpleParserAttribute&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;This example uses a regular &lt;b&gt;Level&lt;/b&gt; option along with a &lt;b&gt;Name&lt;/b&gt; positional parameter.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option('l')]
    public int? Level { get; set; }

    [PositionalArgument(0)]
    public string Name { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Level: &amp;quot; + options.Level);
      Console.WriteLine(&amp;quot;Name: &amp;quot; + options.Name);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level:
Name:

&amp;gt; CommandLineParsingTest.exe Bob
Level:
Name: Bob

&amp;gt; CommandLineParsingTest.exe -l 13
Level: 13
Name:

&amp;gt; CommandLineParsingTest.exe -l 13 Bob
Level: 13
Name: Bob

&amp;gt; CommandLineParsingTest.exe Bob -l 13
Unknown parameter  -l
&lt;/pre&gt;

&lt;p&gt;The last test above shows that positional arguments must come after all regular options.&lt;/p&gt;

&lt;p&gt;If you need to pass a positional argument that starts with a dash (-) or forward slash (/), you can pass the special option "--", which forces all remaining command-line arguments to be interpreted as positional arguments:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -Negative
Unknown option  N  in parameter  -Negative

&amp;gt; CommandLineParsingTest.exe -- -Negative
Level:
Name: -Negative
&lt;/pre&gt;

&lt;h4&gt;The Positional Argument Collection&lt;/h4&gt;

&lt;p&gt;Every options class must have one property that can receive "extra" positional arguments. Extra positional arguments are any positional arguments after those defined by &lt;b&gt;PositionalArgumentAttribute&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Most programs do not need this functionality, so the &lt;b&gt;OptionArgumentsBase&lt;/b&gt; class provides a simple collection called &lt;b&gt;AdditionalArguments&lt;/b&gt;. By default, &lt;b&gt;OptionArgumentsBase.Validate&lt;/b&gt; will throw an &lt;b&gt;UnknownOptionException&lt;/b&gt; if any positional arguments end up in that collection.&lt;/p&gt;

&lt;p&gt;A program may make use of the &lt;b&gt;AdditionalArguments&lt;/b&gt; collection by overriding &lt;b&gt;Validate&lt;/b&gt;:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [PositionalArgument(0)]
    public string Name { get; set; }

    public override void Validate()
    {
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Name: &amp;quot; + options.Name);
      Console.WriteLine(&amp;quot;ArgList: &amp;quot; + string.Join(&amp;quot;, &amp;quot;, options.AdditionalArguments));

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Name:
ArgList:

&amp;gt; CommandLineParsingTest.exe Bob
Name: Bob
ArgList:

&amp;gt; CommandLineParsingTest.exe Bob 17
Name: Bob
ArgList: 17

&amp;gt; CommandLineParsingTest.exe Bob -l 13
Name: Bob
ArgList: -l, 13

&amp;gt; CommandLineParsingTest.exe -- Bob
Name: Bob
ArgList:
&lt;/pre&gt;

&lt;p&gt;Alternatively, an options class may provide its own collection, marked with the &lt;b&gt;PositionalArgumentsAttribute&lt;/b&gt; (note the plural "Argument&lt;b&gt;s&lt;/b&gt;"). When it does this, the options class may &lt;i&gt;not&lt;/i&gt; derive from &lt;b&gt;OptionArgumentsBase&lt;/b&gt;; rather, it should implement the &lt;b&gt;IOptionArguments&lt;/b&gt; interface.&lt;/p&gt;

&lt;p&gt;The property does not have to be &lt;b&gt;List&amp;lt;string&amp;gt;&lt;/b&gt; (which is used by &lt;b&gt;OptionArgumentsBase&lt;/b&gt;). The only requirements on the collection is that it only have one method named &lt;b&gt;Add&lt;/b&gt; which takes a single parameter. The parameter does not have to be &lt;b&gt;string&lt;/b&gt;; it can be any type, and the &lt;a href="http://blog.stephencleary.com/2011/08/option-parsing-argument-parsing.html"&gt;standard parsing rules&lt;/a&gt; apply.&lt;/p&gt;

&lt;blockquote&gt;This means that &lt;b&gt;PositionalArguments&lt;/b&gt; can be placed on a property of dictionary type, as long as a matching parser is provided.&lt;/blockquote&gt;

&lt;p&gt;Here's an example of a program taking any number of integer parameters:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : IOptionArguments
  {
    public Options()
    {
      this.Integers = new List&amp;lt;int&amp;gt;();
    }

    [PositionalArguments]
    public List&amp;lt;int&amp;gt; Integers { get; private set; }

    public void Validate()
    {
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Integers: &amp;quot; + string.Join(&amp;quot;, &amp;quot;, options.Integers));

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Integers:

&amp;gt; CommandLineParsingTest.exe 13
Integers: 13

&amp;gt; CommandLineParsingTest.exe 13 7
Integers: 13, 7

&amp;gt; CommandLineParsingTest.exe 13 7 Bob
Could not parse  Bob  as Int32
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4272680031731395365/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/10/option-parsing-positional-arguments.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4272680031731395365'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4272680031731395365'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/10/option-parsing-positional-arguments.html' title='Option Parsing; Positional Arguments'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5502317969145444650</id><published>2011-09-16T09:00:00.000-04:00</published><updated>2011-09-16T09:00:23.302-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Rx and Async</title><content type='html'>&lt;p&gt;I saw some rather shocking tweets yesterday from the BUILD conference:&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;img border="0" height="132" width="348" src="http://4.bp.blogspot.com/-pGyY6tjvz7o/TnNG8fH56qI/AAAAAAAAFv8/j0nAv_Orhb4/s1600/AndersNoRx.PNG" /&gt;&lt;br /&gt;
&lt;/div&gt;&lt;p&gt;The author of that original tweet followed up with &lt;a href=""&gt;a blog post&lt;/a&gt; with some interesting Rx-related quotes from Anders Hejlsberg: "I don't know if we've decided [whether Rx will be included in future versions of .NET]." and "Personally I've found the stuff we've done with async &lt;b&gt;allows you to do a lot more&lt;/b&gt; [than Rx]." (emphasis mine).&lt;/p&gt;&lt;p&gt;Interesting. I tried to take a listen for myself, but the Channel9 live interview was no longer available. Note that these remarks were made during a live interview, and were not part of a presentation; I'm hoping that Anders just answered off the cuff and didn't mean it.&lt;/p&gt;&lt;p&gt;One reason I found those quotes controversial is because parallel programming (TPL/PLINQ), background operations (async/await), and asynchronous streams (Rx) all address different problems. In particular, Async &lt;i&gt;only&lt;/i&gt; supports background operations and does &lt;i&gt;not&lt;/i&gt; support asynchronous streams. Rx supports both, but Async will become the default solution for background operations because it's easier to use than Rx.&lt;/p&gt;&lt;p&gt;So, I agree with Anders that Async is easier to use, but I totally disagree that Async is more powerful. Rx can do everything Async can do, and can do some things that Async &lt;i&gt;can't&lt;/i&gt; do.&lt;/p&gt;&lt;p&gt;It comes down to the difference between &lt;i&gt;asynchronous operations&lt;/i&gt; and &lt;i&gt;asynchronous events&lt;/i&gt;. An asynchronous operation is something that my program can start, and it will complete some time later. An asynchronous event stream is something that is happening all the time independent of my program; it can subscribe and unsubscribe, but does not &lt;i&gt;cause&lt;/i&gt; the events. This is an important distinction if you consider an event stream that produces in quick bursts (e.g., mouse movement); Rx allows collating all of those events, but an async-based solution may miss some (because it has to restart the operation each time it completes).&lt;/p&gt;&lt;p&gt;Historically, asynchronous &lt;i&gt;events&lt;/i&gt; have been a blind spot for Microsoft. Consider a condensed history of asynchronous support:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Asynchronous Programming Model (APM)&lt;/b&gt;. In the beginning, there was only IAsyncResult (Begin/End). The APM was everywhere, even baked into delegate types. The thing to note about APM is that it is purely an asynchronous operation; no asynchronous events are supported. The program starts the operation, which has a single point of completion.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Event-Based Asynchronous Pattern (EAP)&lt;/b&gt;. Way back in .NET 2.0, the EAP was introduced. EAP works by capturing the current SynchronizationContext and then raising events on that context. This was the first asynchronous pattern that supported both asynchronous operations and asynchronous events. Unfortunately, the documentation &lt;i&gt;assumed&lt;/i&gt; that EAP objects are only implementing asynchronous operations, and completely ignored the EAP support for asynchronous events. In addition, the most famous EAP implementation (BackgroundWorker) was just an asynchronous operation. However, the &lt;a href="nitoasync.codeplex.com"&gt;Nito.Async&lt;/a&gt; library included some helpers for EAP components, and included sample socket components using EAP in an asynchronous event fashion.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rx&lt;/b&gt;. Supporting .NET 3.5 and up, the Rx libraries are all about asynchronous events (and they also support asynchronous operations, which are just a singleton asynchronous event). Rx is also more powerful than EAP because it has a very flexible execution context, while EAP ties everything through a single SynchronizationContext. However, the learning curve for Rx is steep.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Async/await and the Task-Based Asynchronous Pattern (TAP)&lt;/b&gt;. These extensions to the language allow for a very natural and easy way to deal with asynchronous operations, but they do not support asynchronous events.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In terms of &lt;i&gt;power&lt;/i&gt; and &lt;i&gt;flexibility&lt;/i&gt;, TAP is approximately equivalent to APM (less powerful than EAP and Rx). The only reason it's a step &lt;i&gt;forward&lt;/i&gt; is because it is so easy to learn and use. Some simple programs may use only TAP, but other programs will need both TAP and Rx.&lt;/p&gt;&lt;p&gt;Rx is a very welcome (and necessary) addition to our toolset. Async does not and can not replace it.&lt;/p&gt;&lt;p&gt;(P.S. All of this - and much more - is covered in my "Thread is Dead" talk, which has been submitted for consideration at a couple of conferences in the next few months. I'll update this space when it's accepted.)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5502317969145444650/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/09/rx-and-async.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5502317969145444650'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5502317969145444650'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/rx-and-async.html' title='Rx and Async'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-pGyY6tjvz7o/TnNG8fH56qI/AAAAAAAAFv8/j0nAv_Orhb4/s72-c/AndersNoRx.PNG' height='72' width='72'/><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2369806483622982104</id><published>2011-09-09T08:43:00.001-04:00</published><updated>2011-09-09T08:44:37.603-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.AsyncEx'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.Async'/><title type='text'>Nito.AsyncEx Available</title><content type='html'>&lt;p&gt;Nito.AsyncEx is &lt;a href="http://nitoasyncex.codeplex.com/"&gt;now available&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Just as the &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt; library helps you work with the Event-Based Asynchronous Pattern (and its underlying concepts such as SynchronizationContext), the &lt;a href="http://nitoasyncex.codeplex.com/"&gt;Nito.AsyncEx&lt;/a&gt; library helps you work with the Task-Based Asynchronous Pattern (and its underlying concepts such as Task).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2369806483622982104/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/09/nitoasyncex-available.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2369806483622982104'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2369806483622982104'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/nitoasyncex-available.html' title='Nito.AsyncEx Available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-389732469803365909</id><published>2011-09-01T12:30:00.004-04:00</published><updated>2013-05-17T10:59:53.750-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Language design'/><category scheme='http://www.blogger.com/atom/ns#' term='async'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>The Async CTP "Why Do the Keywords Work THAT Way" Unofficial FAQ</title><content type='html'>&lt;p&gt;There's a lot of interest in the &lt;a href="http://msdn.microsoft.com/en-US/vstudio/async"&gt;Async CTP&lt;/a&gt;, with good reason. The Async CTP will make asynchronous programming much, much easier than it has ever been. It's somewhat less powerful but much easier to learn than &lt;a href="http://msdn.microsoft.com/en-us/data/gg577609"&gt;Rx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Async CTP introduces two new keywords, &lt;b&gt;async&lt;/b&gt; and &lt;b&gt;await&lt;/b&gt;. Asynchronous methods (or lambda expressions) must return &lt;b&gt;void&lt;/b&gt;, &lt;b&gt;Task&lt;/b&gt;, or &lt;b&gt;Task&amp;lt;TResult&amp;gt;&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;This post is not an introduction to the Async CTP; there's plenty of tutorial resources available out there (including &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;one by yours truly&lt;/a&gt;). This post is an attempt to bring together the answers to a few common questions that programmers have when they start using the Async CTP.&lt;/p&gt;

&lt;h4&gt;Inferring the Return Type&lt;/h4&gt;

&lt;p&gt;When returning a value from an &lt;b&gt;async&lt;/b&gt; method, the method body returns the value directly, but the method itself is declared as returning a &lt;b&gt;Task&amp;lt;TResult&amp;gt;&lt;/b&gt;. There is a bit of "disconnect" when you declare a method returning one type and have to return another type:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Actual syntax
public async Task&amp;lt;int&amp;gt; GetValue()
{
  await TaskEx.Delay(100);
  return 13; // Return type is "int", not "Task&amp;lt;int&amp;gt;"
}
&lt;/pre&gt;

&lt;p&gt;Question: Why can't I write this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Hypothetical syntax
public async int GetValue()
{
  await TaskEx.Delay(100);
  return 13; // Return type is "int"
}
&lt;/pre&gt;

&lt;p&gt;Consider: How will the method signature look to callers? Async methods that return a value must have an actual result type of &lt;b&gt;Task&amp;lt;TResult&amp;gt;&lt;/b&gt;. So &lt;b&gt;GetValue&lt;/b&gt; will show up in IntelliSense as returning &lt;b&gt;Task&amp;lt;TResult&amp;gt;&lt;/b&gt; (this would also be true for the object browser, Reflector, etc).&lt;/p&gt;

&lt;p&gt;Inferring the return type &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/async/thread/0ee0af6a-3034-4ac3-aa82-cb6bd62a9ab9#8d1826a5-d603-4b74-8c64-2a9b32d6af24"&gt;was considered&lt;/a&gt; during the initial design, but the team concluded that the keeping the "disconnect" within the &lt;b&gt;async&lt;/b&gt; method was better than spreading the "disconnect" throughout the code base. The "disconnect" is still there, but it's smaller than it could be. The consensus is that a consistent method signature is preferred.&lt;/p&gt;

&lt;p&gt;Consider: There is a difference between &lt;b&gt;async void&lt;/b&gt; and &lt;b&gt;async Task&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;b&gt;async Task&lt;/b&gt; method is just like any other asynchronous operation, only without a return value. An &lt;b&gt;async void&lt;/b&gt; method acts as a "top-level" asynchronous operation. An &lt;b&gt;async Task&lt;/b&gt; method may be composed into other async methods using &lt;b&gt;await&lt;/b&gt;. An &lt;b&gt;async void&lt;/b&gt; method may be used as an event handler. An &lt;b&gt;async void&lt;/b&gt; method also has another important property: in an ASP.NET context, it informs the web server that the page is not completed until it returns (see &lt;a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx"&gt;my MSDN article&lt;/a&gt; for more information on how this works).&lt;/p&gt;

&lt;p&gt;Inferring the return type would remove the distinction between &lt;b&gt;async void&lt;/b&gt; and &lt;b&gt;async Task&lt;/b&gt;; either all async methods would be &lt;b&gt;async void&lt;/b&gt; (preventing composability), or they would all be &lt;b&gt;async Task&lt;/b&gt; (preventing them from being event handlers, and requiring an alternative solution for ASP.NET support).&lt;/p&gt;

&lt;h4&gt;Async Return&lt;/h4&gt;

&lt;p&gt;There is still a "disconnect" between the method declaration return type and the method body return type. Another option that &lt;a href="http://gauravsmathur.wordpress.com/2010/11/04/something-wrong-with-async-await-and-the-tasktask/"&gt;has been suggested&lt;/a&gt; is to add a keyword to &lt;b&gt;return&lt;/b&gt; to indicate that the value given to &lt;b&gt;return&lt;/b&gt; is not really what's being returned, e.g.:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Hypothetical syntax
public async Task&amp;lt;int&amp;gt; GetValue()
{
  await TaskEx.Delay(100);
  async return 13; // "async return" means the value will be wrapped in a Task
}
&lt;/pre&gt;

&lt;p&gt;Consider: Converting large amounts of code from synchronous to asynchronous.&lt;/p&gt;

&lt;p&gt;The &lt;b&gt;async return&lt;/b&gt; keyword &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/async/thread/75493675-4a39-4958-a493-ad8a96f8a19d"&gt;was also considered&lt;/a&gt;, but it wasn't compelling enough. This is particularly true when converting a lot of synchronous code to asynchronous code (which will be common over the next few years); forcing people to add &lt;b&gt;async&lt;/b&gt; to every &lt;b&gt;return&lt;/b&gt; statement just seemed like "needless busy-work." It's easier to get used to the "disconnect".&lt;/p&gt;

&lt;h4&gt;Inferring "async"&lt;/h4&gt;

&lt;p&gt;The &lt;b&gt;async&lt;/b&gt; keyword &lt;i&gt;must&lt;/i&gt; be applied to a method that makes use of &lt;b&gt;await&lt;/b&gt;. However, it also gives a warning if it is applied to a method that does &lt;i&gt;not&lt;/i&gt; make use of &lt;b&gt;await&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Question: Why can't &lt;b&gt;async&lt;/b&gt; be inferred based on the presence of &lt;b&gt;await&lt;/b&gt;:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Hypothetical syntax
public Task&amp;lt;int&amp;gt; GetValue()
{
  // The presence of "await" implies that this is an "async" method.
  await TaskEx.Delay(100);
  return 13;
}
&lt;/pre&gt;

&lt;p&gt;Consider: Backwards compatibility and code readability.&lt;/p&gt;

&lt;p&gt;Eric Lippert has the &lt;a href="http://blogs.msdn.com/b/ericlippert/archive/2010/11/11/whither-async.aspx"&gt;definitive post&lt;/a&gt; on the subject. It's also been discussed in &lt;a href="http://blogs.msdn.com/b/ericlippert/archive/2010/10/29/asynchronous-programming-in-c-5-0-part-two-whence-await.aspx"&gt;blog comments&lt;/a&gt;, &lt;a href="http://channel9.msdn.com/Forums/Coffeehouse/Why-is-the-async-keyword-needed"&gt;Channel9&lt;/a&gt;, &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/async/thread/75493675-4a39-4958-a493-ad8a96f8a19d"&gt;forums&lt;/a&gt;, and &lt;a href="http://stackoverflow.com/questions/9225748/why-does-the-async-keyword-exist"&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To summarize, a single-word &lt;b&gt;await&lt;/b&gt; keyword would be too big of a breaking change. The choice was between a multi-word await (e.g., &lt;b&gt;await for&lt;/b&gt;) or a keyword on the method (&lt;b&gt;async&lt;/b&gt;) that would enable the &lt;b&gt;await&lt;/b&gt; keyword just within that method. Explicitly marking methods &lt;b&gt;async&lt;/b&gt; is easier for both humans and computers to parse, so they decided to go with the &lt;b&gt;async&lt;/b&gt;/&lt;b&gt;await&lt;/b&gt; pair.&lt;/p&gt;

&lt;h4&gt;Inferring "await"&lt;/h4&gt;

&lt;p&gt;Question: Since it makes sense to explicitly include &lt;b&gt;async&lt;/b&gt; (see above), why can't &lt;b&gt;await&lt;/b&gt; be inferred based on the presence of &lt;b&gt;async&lt;/b&gt;:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Hypothetical syntax
public async Task&amp;lt;int&amp;gt; GetValue()
{
  // "await" is implied, since this is an "async" method.
  TaskEx.Delay(100);
  return 13;
}
&lt;/pre&gt;

&lt;p&gt;Consider: Parallel composition of asynchronous operations.&lt;/p&gt;

&lt;p&gt;At first glance, inferring &lt;b&gt;await&lt;/b&gt; appears to simplify basic asynchronous operations. As long as all waiting is done in serial (i.e., one operation is awaited, then another, and then another), this works fine. However, it falls apart when one considers parallel composition.&lt;/p&gt;

&lt;p&gt;Parallel composition in the Async CTP is done using &lt;b&gt;TaskEx.WhenAny&lt;/b&gt; and &lt;b&gt;TaskEx.WhenAll&lt;/b&gt; methods. Here's a simple example which starts two operations immediately and asynchronously waits for both of them to complete:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Actual syntax
public async Task&amp;lt;int&amp;gt; GetValue()
{
  // Asynchronously retrieve two partial values.
  // Note that these are *not* awaited at this time.
  Task&amp;lt;int&amp;gt; part1 = GetValuePart1();
  Task&amp;lt;int&amp;gt; part2 = GetValuePart2();

  // Wait for both values to arrive.
  await TaskEx.WhenAll(part1, part2);

  // Calculate our result.
  int value1 = await part1; // Does not actually wait.
  int value2 = await part2; // Does not actually wait.
  return value1 + value2;
}
&lt;/pre&gt;

&lt;p&gt;In order to do parallel composition, we must have the ability to say we're &lt;i&gt;not&lt;/i&gt; going to &lt;b&gt;await&lt;/b&gt; an expression.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/389732469803365909/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/09/async-ctp-why-do-keywords-work-that-way.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/389732469803365909'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/389732469803365909'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/async-ctp-why-do-keywords-work-that-way.html' title='The Async CTP &quot;Why Do the Keywords Work THAT Way&quot; Unofficial FAQ'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6502016124937707996</id><published>2011-08-25T12:30:00.001-04:00</published><updated>2013-05-17T10:59:37.688-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Validation</title><content type='html'>&lt;p&gt;The &lt;a href="http://blog.stephencleary.com/2011/06/option-parsing-option-parsing-pipeline.html"&gt;option parsing pipeline&lt;/a&gt; consists of three steps: lexing, parsing, and validation. So far, we've only talked about the first two steps; today we'll look at validation.&lt;/p&gt;

&lt;p&gt;Option argument classes must derive from &lt;b&gt;IOptionArguments&lt;/b&gt;, which only has one method:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
/// &amp;lt;summary&amp;gt;
/// An arguments class, which uses option attributes on its properties.
/// &amp;lt;/summary&amp;gt;
public interface IOptionArguments
{
  /// &amp;lt;summary&amp;gt;
  /// Validates the arguments by throwing &amp;lt;see cref=&amp;quot;OptionParsingException&amp;quot;/&amp;gt; errors as necessary.
  /// &amp;lt;/summary&amp;gt;
  void Validate();
}
&lt;/pre&gt;

&lt;p&gt;The &lt;b&gt;Validate&lt;/b&gt; method should do any validation, and throw an exception if the option argument class properties are not acceptable. The &lt;b&gt;OptionArgumentsBase&lt;/b&gt; type includes an implementation of &lt;b&gt;Validate&lt;/b&gt; that just does some basic validation (we'll cover it in detail next week). This method may be overridden in derived classes.&lt;/p&gt;

&lt;h4&gt;Validating Option Values&lt;/h4&gt;

&lt;p&gt;It's possible to include any logic you need in the &lt;b&gt;Validate&lt;/b&gt; method. This example forces an option value to be in the range [0, 3]:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;level&amp;quot;, 'l')]
    public int Level { get; set; }

    public override void Validate()
    {
      base.Validate();
      if (this.Level &amp;lt; 0 || this.Level &amp;gt; 3)
        throw new OptionParsingException.OptionArgumentException(&amp;quot;Level must be in the range [0, 3].&amp;quot;);
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Level: &amp;quot; + options.Level);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level: 0

&amp;gt; CommandLineParsingTest.exe -l 3
Level: 3

&amp;gt; CommandLineParsingTest.exe -l 4
Level must be in the range [0, 3].
&lt;/pre&gt;

&lt;p&gt;Other option parsing libraries do validation using various attributes (e.g., the example above would use a [RangeAttribute]). However, using a &lt;b&gt;Validate&lt;/b&gt; method is both simpler and more powerful.&lt;/p&gt;

&lt;h4&gt;Required Options&lt;/h4&gt;

&lt;p&gt;It's possible to use validation to &lt;i&gt;require&lt;/i&gt; an option.&lt;/p&gt;

&lt;blockquote&gt;&lt;b&gt;Please note:&lt;/b&gt; The technique described here is controversial! In general, people who have designed many command-line interfaces do not recommend &lt;i&gt;required options&lt;/i&gt; (at the very least, the terminology is confusing: it's a required optional parameter). Usually, a required option is better represented as a positional argument or a subcommand (both of which will be covered in later blog posts). Consider carefully before using required options.&lt;/blockquote&gt;

&lt;p&gt;The example below requires a level to be specified:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;level&amp;quot;, 'l')]
    public int? Level { get; set; }

    public override void Validate()
    {
      base.Validate();
      if (this.Level == null)
        throw new OptionParsingException.OptionArgumentException(&amp;quot;Level must be specified.&amp;quot;);
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Level: &amp;quot; + options.Level);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level must be specified.

&amp;gt; CommandLineParsingTest.exe -l 4
Level: 4

&amp;gt; CommandLineParsingTest.exe -l 0
Level: 0
&lt;/pre&gt;

&lt;p&gt;To reiterate, people with much more experience than I recommend against using "required options". They recommend positional arguments or subcommands instead.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6502016124937707996/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-validation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6502016124937707996'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6502016124937707996'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-validation.html' title='Option Parsing: Validation'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5266290140171816250</id><published>2011-08-18T12:30:00.005-04:00</published><updated>2013-05-17T10:59:21.553-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Boolean Options</title><content type='html'>&lt;h4&gt;Options as Flags&lt;/h4&gt;

&lt;p&gt;Most options require an option argument. Some options take &lt;a href="http://blog.stephencleary.com/2011/07/option-parsing-options-with-optional.html"&gt;an optional argument&lt;/a&gt;. Then there are the options that take no argument at all. These are the "flag" options - the option value is either set or unset.&lt;/p&gt;

&lt;p&gt;Options with no arguments may only be defined on boolean properties. Consider this program, which defines two options (&lt;b&gt;a&lt;/b&gt; and &lt;b&gt;b&lt;/b&gt;) that do not take arguments, and a third option (&lt;b&gt;c&lt;/b&gt;) which takes a required argument:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class ProgramtO
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option('a', Argument = OptionArgument.None)]
    public bool A { get; set; }

    [Option('b', Argument = OptionArgument.None)]
    public bool B { get; set; }

    [Option('c')]
    public bool C { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;A: &amp;quot; + options.A);
      Console.WriteLine(&amp;quot;B: &amp;quot; + options.B);
      Console.WriteLine(&amp;quot;C: &amp;quot; + options.C);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
A: False
B: False
C: False

&amp;gt; CommandLineParsingTest.exe -a -b
A: True
B: True
C: False

&amp;gt; CommandLineParsingTest.exe -c
Missing argument for option  c

&amp;gt; CommandLineParsingTest.exe -c true
A: False
B: False
C: True
&lt;/pre&gt;

&lt;h4&gt;Short Option Runs&lt;/h4&gt;

&lt;p&gt;Arguments that do not take arguments may be combined on the command line into a "short option run." A short option run must use the short names of the options; it cannot use the long names.&lt;/p&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -ab
A: True
B: True
C: False
&lt;/pre&gt;

&lt;p&gt;There is no way to pass an argument to an option in a short option run.&lt;/p&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -ac true
Option  c  cannot be in a short option run (because it takes an argument) in parameter  -ac

&amp;gt; CommandLineParsingTest.exe -ac=true
Invalid parameter  -ac=true
&lt;/pre&gt;

&lt;blockquote&gt;This is a deliberate departure from the behavior of GNU's getopt. Short option runs with arguments are not readable and may cause compatibility problems when the options change.&lt;/blockquote&gt;

&lt;h4&gt;Inverse Aliases&lt;/h4&gt;

&lt;p&gt;Some programs prefer the ability to specify an "on" and an "off" version for the same option. This can be easily done by having the boolean properties share a single backing value, with the "off" version inverting its value. These are very similar to aliases, except that they mean the &lt;i&gt;opposite&lt;/i&gt; instead of the &lt;i&gt;same&lt;/i&gt;.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    public Options()
    {
      this.B = true;
    }

    [Option(&amp;quot;a&amp;quot;, Argument = OptionArgument.None)]
    public bool A { get; set; }

    [Option(&amp;quot;no-a&amp;quot;, Argument = OptionArgument.None)]
    public bool NoA
    {
      get { return !this.A; }
      set { this.A = !value; }
    }

    [Option(&amp;quot;b&amp;quot;, Argument = OptionArgument.None)]
    public bool B { get; set; }

    [Option(&amp;quot;no-b&amp;quot;, Argument = OptionArgument.None)]
    public bool NoB
    {
      get { return !this.B; }
      set { this.B = !value; }
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;A: &amp;quot; + options.A);
      Console.WriteLine(&amp;quot;B: &amp;quot; + options.B);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
A: False
B: True

&amp;gt; CommandLineParsingTest.exe /a
A: True
B: True

&amp;gt; CommandLineParsingTest.exe /b
A: False
B: True

&amp;gt; CommandLineParsingTest.exe /no-a
A: False
B: True

&amp;gt; CommandLineParsingTest.exe /no-b
A: False
B: False

&amp;gt; CommandLineParsingTest.exe /a /no-a
A: False
B: True
&lt;/pre&gt;

&lt;p&gt;The last example shows that the default &lt;a href="http://blog.stephencleary.com/2011/08/option-parsing-preventing-multiple.html"&gt;overwrite behavior&lt;/a&gt; of options produces the expected result: when there are multiple conflicting options on a command line, the last one wins.&lt;/p&gt;

&lt;p&gt;Note that the options in this sample do not have short names. They &lt;i&gt;are&lt;/i&gt; allowed to have short names, but options with inverse aliases do not usually have short names.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5266290140171816250/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-boolean-options.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5266290140171816250'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5266290140171816250'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-boolean-options.html' title='Option Parsing: Boolean Options'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6819626154390642976</id><published>2011-08-11T12:30:00.020-04:00</published><updated>2014-05-16T16:09:30.066-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Argument Parsing</title><content type='html'>&lt;p&gt;This is going to be an in-depth post on how argument parsing works in the &lt;a href="http://nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink.OptionParsing library&lt;/a&gt;, and a couple of ways the parsing can be modified.&lt;/p&gt;

&lt;h4&gt;General Option Argument Parsing Rules&lt;/h4&gt;

&lt;p&gt;First, a reminder about terminology; in this example, the "v" is the short option name, and the "3" is the option argument:&lt;/p&gt;

&lt;pre&gt;&amp;gt; CommandLineTest.exe -v 3&lt;/pre&gt;

&lt;p&gt;Also remember that an option argument may be &lt;i&gt;required&lt;/i&gt; for an option, or it may be &lt;i&gt;optional&lt;/i&gt;. If you need a refresher, read the earlier post &lt;a href="http://blog.stephencleary.com/2011/07/option-parsing-options-with-optional.html"&gt;options with optional arguments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Required option arguments are allowed to begin with a dash (&lt;b&gt;-&lt;/b&gt;) or forward-slash (&lt;b&gt;/&lt;/b&gt;), but optional option arguments are not. To start an optional option argument with these characters, specify the argument using a full-colon (&lt;b&gt;:&lt;/b&gt;) or equals sign (&lt;b&gt;=&lt;/b&gt;).&lt;/p&gt;

&lt;p&gt;Consider this example program, which just takes two string arguments, one required and one optional:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;required&amp;quot;, 'r')]
    public string RequiredValue { get; set; }

    [Option(&amp;quot;optional&amp;quot;, 'o', Argument = OptionArgument.Optional)]
    public string OptionalValue { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (options.RequiredValue != null)
        Console.WriteLine(&amp;quot;Required Value: &amp;quot; + options.RequiredValue);
      if (options.OptionalValue != null)
        Console.WriteLine(&amp;quot;Optional Value: &amp;quot; + options.OptionalValue);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -r a -o b
Required Value: a
Optional Value: b

&amp;gt; CommandLineParsingTest.exe -r /a -o b
Required Value: /a
Optional Value: b

&amp;gt; CommandLineParsingTest.exe -r a -o /b
Unknown option  b  in parameter  /b

&amp;gt; CommandLineParsingTest.exe -o &amp;quot;/b&amp;quot;
Unknown option  b  in parameter  /b

&amp;gt; CommandLineParsingTest.exe -o:/b
Optional Value: /b

&amp;gt; CommandLineParsingTest.exe -o=/b
Optional Value: /b
&lt;/pre&gt;

&lt;p&gt;Note that placing the argument in double-quotes does &lt;i&gt;not&lt;/i&gt; allow the argument to start with a dash or forward-slash.&lt;/p&gt;

&lt;p&gt;Reminder: the command shell has its own set of reserved characters (&lt;b&gt;&amp;amp;&lt;/b&gt;, &lt;b&gt;|&lt;/b&gt;, &lt;b&gt;(&lt;/b&gt;, &lt;b&gt;)&lt;/b&gt;, &lt;b&gt;&amp;lt;&lt;/b&gt;, &lt;b&gt;&amp;gt;&lt;/b&gt;, and &lt;b&gt;^&lt;/b&gt;). These can be escaped using &lt;b&gt;^&lt;/b&gt;, or they can be wrapped in double-quotes. Command shell escapes are described in more detail in the &lt;a href="http://blog.stephencleary.com/2011/06/option-parsing-lexing.html"&gt;post on command-line lexing&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Implementing a Simple Argument Parser&lt;/h4&gt;

&lt;p&gt;Parsing an argument option is done in two steps. The first step is to parse that portion of the command line as a string, using the rules above. The second step is to parse the string into an instance of the corresponding property type on the option arguments class. Since the examples above used a property type of string, there was no processing during the second step.&lt;/p&gt;

&lt;blockquote&gt;It is possible to use only a part of the &lt;a href="http://blog.stephencleary.com/2011/06/option-parsing-option-parsing-pipeline.html"&gt;option parsing pipeline&lt;/a&gt; to get options and their arguments as strings. Pass a sequence of &lt;b&gt;OptionDefinition&lt;/b&gt; instancess and a command line into the parser; the result is a sequence of &lt;b&gt;Option&lt;/b&gt; instances (where each argument is typed as &lt;b&gt;string&lt;/b&gt;). Details of these types will be covered in a future blog post.&lt;/blockquote&gt;

&lt;p&gt;The option parsing library uses a collection of "simple parsers" to convert from a string to a known type. By default, the simple parser collection understands how to parse &lt;b&gt;bool&lt;/b&gt;; signed and unsigned 8-bit, 16-bit, 32-bit, and 64-bit integers; &lt;b&gt;BigInteger&lt;/b&gt;; single and double-precision floating point; &lt;b&gt;decimal&lt;/b&gt;; &lt;b&gt;Guid&lt;/b&gt;; &lt;b&gt;TimeSpan&lt;/b&gt;; &lt;b&gt;DateTime&lt;/b&gt;; and &lt;b&gt;DateTimeOffset&lt;/b&gt;. Strings, enumerations and nullable types are treated specially: strings are never parsed, enumerations use &lt;b&gt;Enum.Parse&lt;/b&gt;, and nullable types are supported if their corresponding non-nullable types are supported. The built-in parsers all use the standard &lt;b&gt;TryParse&lt;/b&gt; methods.&lt;/p&gt;

&lt;p&gt;Say, for example, we wanted to accept an argument of type &lt;a href="http://msdn.microsoft.com/en-us/library/system.numerics.complex.aspx"&gt;Complex&lt;/a&gt;. The Complex type is not included in the default simple parser collection (in fact, it does not even have a Parse or TryParse method!).&lt;/p&gt;

&lt;p&gt;If we try to add it to our program, then whatever we pass as the argument value will just fail to parse:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;value&amp;quot;, 'v')]
    public Complex? Value { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (options.Value != null)
        Console.WriteLine(&amp;quot;Value: &amp;quot; + options.Value);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -v (3,5)
Could not parse  (3,5)  as Complex
&lt;/pre&gt;

&lt;p&gt;We can create a parser for the &lt;b&gt;Complex&lt;/b&gt; type by implementing &lt;b&gt;ISimpleParser&lt;/b&gt;. This interface only has two members: the type of the result and a &lt;b&gt;TryParse&lt;/b&gt; method.&lt;/p&gt;

&lt;p&gt;Once we've implemented our special parser, we need to pass it to the Parse method. To do this, we create a &lt;b&gt;SimpleParserCollection&lt;/b&gt;, add our special parser, and pass the collection to the Parse method.&lt;/p&gt;

&lt;p&gt;Our solution now looks like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class ComplexParser : ISimpleParser
  {
    public Type ResultType
    {
      get { return typeof(Complex); }
    }

    public object TryParse(string value)
    {
      // Match the following pattern: '(' double ',' double ')'
      if (value.Length &amp;lt; 5 || value[0] != '(' || value[value.Length - 1] != ')')
        return null;
      var components = value.Substring(1, value.Length - 2).Split(',');
      if (components.Length != 2)
        return null;
      double real, imaginary;
      if (!double.TryParse(components[0], out real))
        return null;
      if (!double.TryParse(components[1], out imaginary))
        return null;
      return new Complex(real, imaginary);
    }
  }


  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;value&amp;quot;, 'v')]
    public Complex? Value { get; set; }
  }

  static int Main()
  {
    try
    {
      var parsers = new SimpleParserCollection();
      parsers.Add(new ComplexParser());
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;(parserCollection: parsers);

      if (options.Value != null)
        Console.WriteLine(&amp;quot;Value: &amp;quot; + options.Value);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -v (3,5)
Value: (3, 5)
&lt;/pre&gt;

&lt;p&gt;We added a custom parser to the collection, and the option parsing library now understands how to parse a new type. We could add any number of &lt;b&gt;Complex&lt;/b&gt; properties, and they would all use the new parser.&lt;/p&gt;

&lt;p&gt;This is a powerful extension point, but what if we want to modify the way an extisting type is parsed?&lt;/p&gt;

&lt;h4&gt;Replacing a Simple Argument Parser&lt;/h4&gt;

&lt;p&gt;The default parsers in a simple parser collection only use the basic &lt;b&gt;TryParse&lt;/b&gt; methods, which may not be exactly what is needed. &lt;b&gt;SimpleParserCollection.Add&lt;/b&gt; will actually &lt;i&gt;replace&lt;/i&gt; the parser for a given type if there is already a parser for that type.&lt;/p&gt;

&lt;p&gt;We'll use &lt;b&gt;uint&lt;/b&gt; for our example. We want to allow either decimal numbers or hexadecimal numbers prefixed by "0x". &lt;b&gt;System.UInt32.TryParse(string)&lt;/b&gt; does not accept hexadecimal numbers:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;value&amp;quot;, 'v')]
    public uint? Value { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (options.Value != null)
        Console.WriteLine(&amp;quot;Value: &amp;quot; + options.Value);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -v 11
Value: 11

&amp;gt; CommandLineParsingTest.exe -v 0x11
Could not parse  0x11  as UInt32
&lt;/pre&gt;

&lt;p&gt;Just like the last example, we'll implement our own parser, and we'll add it to the parser collection (replacing the default parser).&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class UInt32HexParser : ISimpleParser
  {
    public Type ResultType
    {
      get { return typeof(uint); }
    }

    public object TryParse(string value)
    {
      uint ret;
      if (value.StartsWith(&amp;quot;0x&amp;quot;))
      {
        if (!uint.TryParse(value.Substring(2), NumberStyles.AllowHexSpecifier, CultureInfo.InvariantCulture, out ret))
          return null;
        return ret;
      }

      if (!uint.TryParse(value, out ret))
        return null;
      return ret;
    }
  }

  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;value&amp;quot;, 'v')]
    public uint? Value { get; set; }
  }

  static int Main()
  {
    try
    {
      var parsers = new SimpleParserCollection();
      parsers.Add(new UInt32HexParser());
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;(parserCollection: parsers);

      if (options.Value != null)
        Console.WriteLine(&amp;quot;Value: &amp;quot; + options.Value);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -v 11
Value: 11

&amp;gt; CommandLineParsingTest.exe -v 0x11
Value: 17
&lt;/pre&gt;

&lt;p&gt;Our program now allows decimal or hexadecimal values for all &lt;b&gt;uint&lt;/b&gt; argument values.&lt;/p&gt;

&lt;p&gt;These custom parsers can be written for any type, including types specific for your program. The only type they won't work on is string, since the simple parser collection just passes string values straight through.&lt;/p&gt;

&lt;h4&gt;Overriding the Simple Argument Parser&lt;/h4&gt;

&lt;p&gt;The examples so far have implemented a custom parser and added it to the parser collection. This changes the parsing behavior for &lt;i&gt;every&lt;/i&gt; property of that type. Sometimes we just want to apply a parser to a single property; this can be done by using the &lt;b&gt;SimpleParserAttribute&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;This example defines a hex parser (without the "0x" prefix) and then uses it for only one of its properties:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class UInt32HexParser : ISimpleParser
  {
    public Type ResultType
    {
      get { return typeof(uint); }
    }

    public object TryParse(string value)
    {
      uint ret;
      if (!uint.TryParse(value, NumberStyles.AllowHexSpecifier, CultureInfo.InvariantCulture, out ret))
        return null;
      return ret;
    }
  }

  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;hex-value&amp;quot;, 'h')]
    [SimpleParser(typeof(UInt32HexParser))]
    public uint? HexValue { get; set; }

    [Option(&amp;quot;dec-value&amp;quot;, 'd')]
    public uint? DecValue { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (options.HexValue != null)
        Console.WriteLine(&amp;quot;HexValue: &amp;quot; + options.HexValue);
      if (options.DecValue != null)
        Console.WriteLine(&amp;quot;DecValue: &amp;quot; + options.DecValue);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -h 11 -d 11
HexValue: 17
DecValue: 11
&lt;/pre&gt;

&lt;h4&gt;Custom Parsers for Multiple Argument Values&lt;/h4&gt;

&lt;p&gt;Revisiting the problem of &lt;a href="http://blog.stephencleary.com/2011/07/option-parsing-allowing-multiple.html"&gt;multiple argument values&lt;/a&gt;, we can use a custom parser for a cleaner solution. This example "sequence parser" uses the default simple parser for &lt;b&gt;int&lt;/b&gt; types, which is easier to deal with than &lt;b&gt;int.TryParse&lt;/b&gt;:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Int32SequenceParser : ISimpleParser
  {
    public Type ResultType
    {
      get { return typeof(IEnumerable&amp;lt;int&amp;gt;); }
    }

    public object TryParse(string value)
    {
      var values = value.Split(',');
      ISimpleParser defaultParser = new DefaultSimpleParser&amp;lt;int&amp;gt;();
      var result = values.Select(x =&amp;gt; defaultParser.TryParse(x));
      if (result.Any(x =&amp;gt; x == null))
        return null;
      return result.Cast&amp;lt;int&amp;gt;();
    }
  }

  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;values&amp;quot;, 'v')]
    [SimpleParser(typeof(Int32SequenceParser))]
    public IEnumerable&amp;lt;int&amp;gt; Values { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (options.Values != null)
        Console.WriteLine(&amp;quot;Values: &amp;quot; + string.Join(&amp;quot; &amp;quot;, options.Values));

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe

&amp;gt; CommandLineParsingTest.exe -v 2,3,5,7
Values: 2 3 5 7

&amp;gt; CommandLineParsingTest.exe -v 2,3a,5
Could not parse  2,3a,5  as IEnumerable&amp;lt;Int32&amp;gt;

&amp;gt; CommandLineParsingTest.exe -v 2,3 -v 5,7
Values: 5 7
&lt;/pre&gt;

&lt;p&gt;The last example above shows that the default behavior of the actual property setter is still &lt;i&gt;overwrite&lt;/i&gt;, not &lt;i&gt;append&lt;/i&gt;. If you want to allow appending sequences, you'll need to change the setter to append each sequence to an internal collection.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6819626154390642976/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-argument-parsing.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6819626154390642976'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6819626154390642976'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-argument-parsing.html' title='Option Parsing: Argument Parsing'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9088134259592323615</id><published>2011-08-04T12:30:00.012-04:00</published><updated>2013-05-17T10:58:24.903-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Preventing Multiple Argument Values</title><content type='html'>&lt;p&gt;When dealing with multiple argument values, there are four basic behaviors: &lt;i&gt;overwrite&lt;/i&gt;, &lt;i&gt;append&lt;/i&gt;, &lt;i&gt;prevent&lt;/i&gt;, and &lt;i&gt;ignore&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.stephencleary.com/2011/07/option-parsing-allowing-multiple.html"&gt;Last week's post&lt;/a&gt; contained a few examples of the &lt;i&gt;append&lt;/i&gt; behavior, which is supported by having the property setter place the values into a backing list.&lt;/p&gt;

&lt;p&gt;The default behavior in the &lt;a href="http://nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink option parsing library&lt;/a&gt; is to &lt;i&gt;overwrite&lt;/i&gt; previous values. In other words, options coming later on the command line may "override" options earlier on the command line. Consider this example:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option(&amp;quot;level&amp;quot;, 'l')]
    public int? Level { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Level: &amp;quot; + options.Level);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level:

&amp;gt; CommandLineParsingTest.exe -l 3
Level: 3

&amp;gt; CommandLineParsingTest.exe -l 3 -l 9
Level: 9
&lt;/pre&gt;

&lt;p&gt;This is the default behavior, and is probably what users expect. However, for some options, the &lt;i&gt;prevent&lt;/i&gt; or &lt;i&gt;ignore&lt;/i&gt; behaviors may make sense.&lt;/p&gt;

&lt;p&gt;The &lt;i&gt;prevent&lt;/i&gt; and &lt;i&gt;ignore&lt;/i&gt; behaviors are closely related. Like last week's post, these behaviors are implemented by placing special code in the property setter.&lt;/p&gt;

&lt;p&gt;The &lt;i&gt;prevent&lt;/i&gt; behavior can be implemented by having a nullable backing value, and throwing from the setter if it is already set. The only tricky part is choosing the exception to throw from the setter; I recommend throwing an exception derived from &lt;b&gt;OptionParsingException&lt;/b&gt;, since that indicates a usage error. Any exception thrown from a property setter will be wrapped in an &lt;b&gt;OptionParsingException.OptionArgumentException&lt;/b&gt; (in versions 1.1.2 and newer).&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    private int? level;

    [Option(&amp;quot;level&amp;quot;, 'l')]
    public int? Level
    {
      get
      {
        return this.level;
      }

      set
      {
        if (this.level.HasValue)
          throw new OptionParsingException.OptionArgumentException(&amp;quot;The value may only be specified once.&amp;quot;);
        this.level = value;
      }
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Level: &amp;quot; + options.Level);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level:

&amp;gt; CommandLineParsingTest.exe -l 3
Level: 3

&amp;gt; CommandLineParsingTest.exe -l 3 -l 9
The value may only be specified once.
&lt;/pre&gt;

&lt;p&gt;Likewise, the &lt;i&gt;ignore&lt;/i&gt; behavior can be implemented by having a nullable backing value, and ignoring the setter if it is already set:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    private int? level;

    [Option(&amp;quot;level&amp;quot;, 'l')]
    public int? Level
    {
      get
      {
        return this.level;
      }

      set
      {
        if (!this.level.HasValue)
          this.level = value;
      }
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(&amp;quot;Level: &amp;quot; + options.Level);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level:

&amp;gt; CommandLineParsingTest.exe -l 3
Level: 3

&amp;gt; CommandLineParsingTest.exe -l 3 -l 9
Level: 3
&lt;/pre&gt;

&lt;p&gt;Note that the &lt;i&gt;ignore&lt;/i&gt; behavior may confuse users; most command-line programs use &lt;i&gt;overwrite&lt;/i&gt; behavior, which is the default.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9088134259592323615/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-preventing-multiple.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9088134259592323615'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9088134259592323615'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/08/option-parsing-preventing-multiple.html' title='Option Parsing: Preventing Multiple Argument Values'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6186360930312199003</id><published>2011-07-28T12:30:00.007-04:00</published><updated>2013-05-17T10:58:02.480-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Allowing Multiple Argument Values</title><content type='html'>&lt;p&gt;Some options need to take a &lt;i&gt;sequence&lt;/i&gt; of argument values. There are several ways to accomplish this using the &lt;a href="http://nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink Option Parsing library&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Enumeration Flags&lt;/h4&gt;

&lt;p&gt;If the option values are a series of enumerated flags, then the built-in enumeration parser will handle multiple values automatically:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  [Flags]
  private enum FavoriteThings
  {
    None = 0x0,
    Mittens = 0x1,
    Kittens = 0x2,
    Snowflakes = 0x4,
  }

  private sealed class Options : OptionArgumentsBase
  {
    [Option("favorite-things", 'f')]
    public FavoriteThings FavoriteThings { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(options.FavoriteThings);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
None

&amp;gt; CommandLineParsingTest.exe /favorite-things Mittens
Mittens

&amp;gt; CommandLineParsingTest.exe /favorite-things Mittens,Kittens
Mittens, Kittens

&amp;gt; CommandLineParsingTest.exe /favorite-things "Mittens, Snowflakes"
Mittens, Snowflakes

&amp;gt; CommandLineParsingTest.exe /favorite-things DogBites
Could not parse  DogBites  as FavoriteThings
&lt;/pre&gt;

&lt;h4&gt;Using a Property Setter for Individual Values&lt;/h4&gt;

&lt;p&gt;The example above works well enough for enumerations, but not all arguments are that simple. In these situations, we can take advantage of the fact that arguments are applied to the options class by property setters.&lt;/p&gt;

&lt;p&gt;The following example allows multiple individual values for an argument. As each argument value is set, it is saved into a collection of values.&lt;/p&gt;

&lt;p&gt;Note that using a property setter in this fashion is not a good OOP practice; however, the adverse design affects are contained within the options class.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    public Options()
    {
      Numbers = new List&amp;lt;int&amp;gt;();
    }

    public List&amp;lt;int&amp;gt; Numbers { get; private set; }

    [Option("number", 'n')]
    public int NumberOption
    {
      set
      {
        Numbers.Add(value);
      }
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(string.Join(", ", options.Numbers));

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe


&amp;gt; CommandLineParsingTest.exe -n 3
3

&amp;gt; CommandLineParsingTest.exe -n 3 -n 6
3, 6

&amp;gt; CommandLineParsingTest.exe -n 3,6
Could not parse  3,6  as Int32
&lt;/pre&gt;

&lt;p&gt;Note that the last test failed; the options class above only allows multiple individual arguments, not a group of values.&lt;/p&gt;

&lt;h4&gt;Using a Property Setter for Grouped Values&lt;/h4&gt;

&lt;p&gt;In this case, we want to be able to pass a sequence of values (delimited somehow) as a single argument, and have them interpreted as multiple individual values.&lt;/p&gt;

&lt;p&gt;We can again take advantage of the property setter hack, but we have to do our own parsing of the delimited value. We will use a property type of &lt;b&gt;string&lt;/b&gt; to prevent automatic parsing.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    public Options()
    {
      Numbers = new List&amp;lt;int&amp;gt;();
    }

    public List&amp;lt;int&amp;gt; Numbers { get; private set; }

    [Option("number", 'n')]
    public string NumberOption
    {
      set
      {
        // Note: this example uses poor error handling!
        //  We *should* use TryParse and throw OptionParsingException.
        Numbers.AddRange(value.Split(';').Select(x =&amp;gt; int.Parse(x)));
      }
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(string.Join(", ", options.Numbers));

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe -n 3 -n 6
3, 6

&amp;gt; CommandLineParsingTest.exe -n 3;6
3, 6
&lt;/pre&gt;

&lt;p&gt;This works, but still feels a bit "hackish". We're out of time for today, but in &lt;a href="http://blog.stephencleary.com/2011/08/option-parsing-argument-parsing.html"&gt;a few weeks&lt;/a&gt; we'll revisit this problem when we talk about &lt;i&gt;custom argument parsers&lt;/i&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6186360930312199003/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/07/option-parsing-allowing-multiple.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6186360930312199003'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6186360930312199003'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/07/option-parsing-allowing-multiple.html' title='Option Parsing: Allowing Multiple Argument Values'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6342580608716459520</id><published>2011-07-21T12:30:00.005-04:00</published><updated>2011-07-21T12:30:00.101-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><title type='text'>System.Threading.Timer Constructor and Garbage Collection</title><content type='html'>&lt;p&gt;This week, we take a break from the option parsing posts to bring you an interesting corner case from the BCL.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://msdn.microsoft.com/en-us/library/1k93acx8.aspx"&gt;System.Threading.Timer constructor&lt;/a&gt; has several overloads; all except one take a &lt;i&gt;state&lt;/i&gt; parameter which is passed to the &lt;i&gt;TimerCallback&lt;/i&gt; delegate when the timer fires.&lt;/p&gt;

&lt;p&gt;It turns out that this &lt;i&gt;state&lt;/i&gt; parameter (and the &lt;i&gt;TimerCallback&lt;/i&gt; delegate) have an interesting effect on garbage collection: if neither of them reference the System.Threading.Timer object, it may be garbage collected, causing it to stop. This is because both the &lt;i&gt;TimerCallback&lt;/i&gt; delegate and the &lt;i&gt;state&lt;/i&gt; parameter are wrapped into a &lt;b&gt;GCHandle&lt;/b&gt;. If neither of them reference the timer object, it may be eligible for GC, freeing the &lt;b&gt;GCHandle&lt;/b&gt; from its finalizer.&lt;/p&gt;

&lt;p&gt;The single-parameter constructor does not suffer from this problem, because it passes &lt;b&gt;this&lt;/b&gt; for the &lt;i&gt;state&lt;/i&gt; (not &lt;b&gt;null&lt;/b&gt;). Most real-world usage of System.Threading.Timer either references the timer from the callback or uses the timer for the &lt;i&gt;state&lt;/i&gt;, so this interesting garbage collection behavior will probably not be noticed.&lt;/p&gt;

&lt;p&gt;This blog post was prompted by &lt;a href="http://stackoverflow.com/questions/4962172/why-does-a-system-timers-timer-survive-gc-but-not-system-threading-timer"&gt;my own question on Stack Overflow&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6342580608716459520/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/07/systemthreadingtimer-constructor-and.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6342580608716459520'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6342580608716459520'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/07/systemthreadingtimer-constructor-and.html' title='System.Threading.Timer Constructor and Garbage Collection'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8327317883711917999</id><published>2011-07-14T12:30:00.006-04:00</published><updated>2014-05-16T16:11:22.028-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Options with Optional Arguments</title><content type='html'>&lt;p&gt;All of the examples so far have illustrated &lt;i&gt;options with required arguments&lt;/i&gt;; that is, if the option is passed, it must be followed by an argument. It's also possible to define an option that takes an optional argument:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option("with-extreme-prejudice", 'p', OptionArgument.Optional)]
    public int? PrejudiceLevel { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (options.PrejudiceLevel.HasValue)
        Console.WriteLine("Extreme Prejudice specified: " + options.PrejudiceLevel.Value);
      else
        Console.WriteLine("Regular prejudice will do.");

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Regular prejudice will do.

&amp;gt; CommandLineParsingTest.exe -p 3
Extreme Prejudice specified: 3

&amp;gt; CommandLineParsingTest.exe -p
Regular prejudice will do.
&lt;/pre&gt;

&lt;p&gt;The last example above illustrates the problem with options that take optional arguments: there isn't an easy way to determine whether the option &lt;i&gt;was passed without an argument&lt;/i&gt; or the option &lt;i&gt;was not passed at all&lt;/i&gt;. In both of these cases, the property is left at the default value (&lt;b&gt;null&lt;/b&gt; in this case).&lt;/p&gt;

&lt;p&gt;The solution is to use the &lt;b&gt;OptionPresent&lt;/b&gt; attribute, as such:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option("with-extreme-prejudice", 'p', OptionArgument.Optional)]
    public int? PrejudiceLevel { get; set; }

    [OptionPresent('p')]
    public bool PrejudiceLevelWasSpecified { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (!options.PrejudiceLevelWasSpecified)
        Console.WriteLine("Regular prejudice will do.");
      else if (options.PrejudiceLevel.HasValue)
        Console.WriteLine("Extreme Prejudice specified: " + options.PrejudiceLevel.Value);
      else
        Console.WriteLine("Extreme Prejudice specified.");

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Regular prejudice will do.

&amp;gt; CommandLineParsingTest.exe -p 3
Extreme Prejudice specified: 3

&amp;gt; CommandLineParsingTest.exe -p
Extreme Prejudice specified.
&lt;/pre&gt;

&lt;p&gt;It is now possible to distinguish all possibilities. The &lt;b&gt;OptionPresent&lt;/b&gt; example above uses the short option name, but this attribute also works with long names.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8327317883711917999/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/07/option-parsing-options-with-optional.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8327317883711917999'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8327317883711917999'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/07/option-parsing-options-with-optional.html' title='Option Parsing: Options with Optional Arguments'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3453165979776023539</id><published>2011-07-07T12:30:00.006-04:00</published><updated>2013-05-17T10:57:35.847-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Default and Nullable Argument Values</title><content type='html'>&lt;p&gt;Most of our examples so far have already dealt with options taking arguments, because most options in the real world &lt;i&gt;do&lt;/i&gt; take arguments. Today we'll start looking at option arguments in depth.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://blog.stephencleary.com/2011/06/option-parsing-option-parsing-pipeline.html"&gt;option pipeline&lt;/a&gt; post laid out the steps taken when using an Option Arguments class:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Option Arguments class is default-constructed.&lt;/li&gt;
&lt;li&gt;Attributes of properties on the class are used to produce a collection of option definitions.&lt;/li&gt;
&lt;li&gt;The command line is parsed, setting properties on the Option Arguments instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll take advantage of these steps to handle several common scenarios.&lt;/p&gt;

&lt;h4&gt;Default Values&lt;/h4&gt;

&lt;p&gt;Default argument values are set in the default constructor:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    public Options()
    {
      // Set default values.
      Quality = 3;
    }

    [Option("level", 'l')]
    public int Level { get; set; }

    [Option("quality")]
    public int Quality { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine("Level: " + options.Level);
      Console.WriteLine("Quality: " + options.Quality);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level: 0
Quality: 3

&amp;gt; CommandLineParsingTest.exe /level 7
Level: 7
Quality: 3

&amp;gt; CommandLineParsingTest.exe /quality 4
Level: 0
Quality: 4
&lt;/pre&gt;

&lt;h4&gt;Nullable Values&lt;/h4&gt;

&lt;p&gt;There are some situations where a "default value" doesn't make sense for an option; you need to know whether there was a value passed, and what the value is (if it was passed). In this situation, you can use a nullable value type for your property:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option("level", 'l')]
    public int? Level { get; set; }

    [Option("name", 'n')]
    public string Name { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      if (options.Level.HasValue)
        Console.WriteLine("Level: " + options.Level.Value);
      else
        Console.WriteLine("Level not specified.");
      if (options.Name != null)
        Console.WriteLine("Name: " + options.Name);
      else
        Console.WriteLine("Name not specified.");

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level not specified.
Name not specified.

&amp;gt; CommandLineParsingTest.exe /level 3
Level: 3
Name not specified.

&amp;gt; CommandLineParsingTest.exe /level 0
Level: 0
Name not specified.

&amp;gt; CommandLineParsingTest.exe /name Bob
Level not specified.
Name: Bob

&amp;gt; CommandLineParsingTest.exe /name ""
Level not specified.
Name: 
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3453165979776023539/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/07/option-parsing-default-and-nullable.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3453165979776023539'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3453165979776023539'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/07/option-parsing-default-and-nullable.html' title='Option Parsing: Default and Nullable Argument Values'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1297021806070842577</id><published>2011-06-30T12:30:00.008-04:00</published><updated>2011-06-30T12:30:02.107-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Option Names</title><content type='html'>&lt;p&gt;An option may have a long name, a short name, or both. "Short names" are just single characters, while "long names" are strings. Option names may not contain the special characters &lt;b&gt;:&lt;/b&gt; or &lt;b&gt;=&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Commonly-used options should have both a long name and a short name. The short name enables faster typing on the command line, while the long name enables self-documenting command lines (for use in script and batch files). Normally, the short name is the first character of the long name, but this is not required.&lt;/p&gt;

&lt;p&gt;Less-common options should have just a long name; this avoids polluting the short name namespace.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using Nito.KitchenSink.OptionParsing;

class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option("level", 'l')]
    public int Level { get; set; }

    [Option("priority")]
    public int Priority { get; set; }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();
      
      Console.WriteLine("Level: " + options.Level);
      Console.WriteLine("Priority: " + options.Priority);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe
Level: 0
Priority: 0

&amp;gt; CommandLineParsingTest.exe /l 3
Level: 3
Priority: 0

&amp;gt; CommandLineParsingTest.exe /level 3
Level: 3
Priority: 0

&amp;gt; CommandLineParsingTest.exe /priority 1
Level: 0
Priority: 1

&amp;gt; CommandLineParsingTest.exe /p 1
Unknown option  p  in parameter  /p
&lt;/pre&gt;

&lt;p&gt;Normally, options do not have just a short name without a long name, but you &lt;i&gt;can&lt;/i&gt; do it if you want do.&lt;/p&gt;

&lt;h4&gt;Multiple Long and Short Names&lt;/h4&gt;

&lt;p&gt;Options may have "aliases" (multiple long and/or short names). The easiest way to add aliases is to have separate properties on your Option Arguments class that refer to the same underlying field.&lt;/p&gt;

&lt;p&gt;The following example shows one alias that is used to change an old option "level" into a more descriptive option "frob-level", marking the old option as obsolete. Another alias "frobbing-level" is also added, which is just a regular alias (without any options marked obsolete).&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    // The old "level" option, now obsolete and made into an alias for "frob-level".
    [Option("level", 'l')]
    [Obsolete]
    public int Level
    {
      get { return FrobLevel; }
      set
      {
        Console.Error.WriteLine("Warning: The --level option is obsolete; use --frob-level instead.");
        FrobLevel = value;
      }
    }

    [Option("frob-level")]
    public int FrobLevel { get; set; }

    // Another alias for "frob-level"; this one is not obsolete.
    [Option("frobbing-level")]
    public int FrobbingLevel
    {
      get { return FrobLevel; }
      set { FrobLevel = value; }
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();

      Console.WriteLine(options.FrobLevel);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return 2;
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe /level 4
Warning: The --level option is obsolete; use --frob-level instead.
4

&amp;gt; CommandLineParsingTest.exe /frob-level 4
4

&amp;gt; CommandLineParsingTest.exe /frobbing-level 6
6
&lt;/pre&gt;

&lt;h4&gt;Abbreviated Option Names&lt;/h4&gt;

&lt;p&gt;Some programs support abbreviated option names; for example, the option "pack" may be abbreviated as "pa" or "p" (assuming there is no other option that starts with "pa" or "p", respectively). However, this causes backwards compatibility issues; for example, an updated version of the program may introduce an option named "push", and any scripts that used the abbreviated option "p" then become ambiguous. For this reason, &lt;a href="http://www.nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink.OptionParsing&lt;/a&gt; does not include automatic support for abbreviated option names. If you need abbreviated option names, you may use explicit aliases to achieve the same effect.&lt;/p&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe /frob 6
Unknown option  frob  in parameter  /frob
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1297021806070842577/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-option-names.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1297021806070842577'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1297021806070842577'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-option-names.html' title='Option Parsing: Option Names'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8857663109918908825</id><published>2011-06-23T12:30:00.009-04:00</published><updated>2011-06-23T12:30:02.169-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Error Handling</title><content type='html'>&lt;p&gt;The &lt;a href="http://www.nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink Option Parsing Library&lt;/a&gt; wraps all option parsing errors into an exception derived from &lt;b&gt;Nito.KitchenSink.OptionParsing.OptionParsingException&lt;/b&gt;. There are three more specific exception types (&lt;b&gt;InvalidParameterException&lt;/b&gt;, &lt;b&gt;OptionArgumentException&lt;/b&gt;, and &lt;b&gt;UnknownOptionException&lt;/b&gt;), but they are seldomly needed.&lt;/p&gt;

&lt;p&gt;All steps of the option parsing pipeline should only throw exceptions derived from &lt;b&gt;OptionParsingException&lt;/b&gt;. In particular, this is true for custom validation (which will be described in detail in a future post).&lt;/p&gt;

&lt;p&gt;The following example program shows how option parsing errors should be handled in a console application:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using Nito.KitchenSink.OptionParsing;

class Program
{
  private sealed class Options : OptionArgumentsBase
  {
    [Option("level", 'l')]
    public int Level { get; set; }

    public static int Usage()
    {
      // Standard console size:
      //                      [                                                                                ]
      Console.Error.WriteLine("Usage: CommandLineOptionTest &amp;lt;arguments&amp;gt;");
      Console.Error.WriteLine("  -l, --level=LEVEL        level at which to operate");
      return 2;
    }
  }

  static int Main()
  {
    try
    {
      var options = OptionParser.Parse&amp;lt;Options&amp;gt;();
      
      // Program logic
      Console.WriteLine(options.Level);

      return 0;
    }
    catch (OptionParsingException ex)
    {
      Console.Error.WriteLine(ex.Message);
      return Options.Usage();
    }
    catch (Exception ex)
    {
      Console.Error.WriteLine(ex);
      return 1;
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;First, the &lt;b&gt;Options&lt;/b&gt; class is declared, which defines the options our program takes. It also exposes a &lt;b&gt;Usage&lt;/b&gt; method, which displays command-line usage information. &lt;b&gt;Usage&lt;/b&gt; writes its information to &lt;b&gt;Console.Error&lt;/b&gt; and returns an error code.&lt;/p&gt;

&lt;blockquote&gt;The Nito.KitchenSink.OptionParsing library does not attempt to write the &lt;b&gt;Usage&lt;/b&gt; method for you automatically. Other option parsing libraries have attempted this, but the results are (IMHO) less than ideal.&lt;/blockquote&gt;

&lt;p&gt;The program's &lt;b&gt;Main&lt;/b&gt; method returns an &lt;b&gt;int&lt;/b&gt;, and contains a top-level try/catch. The try block parses the options, performs its requested task (in this case, the program just writes the Level option to the console), and then returns 0 (meaning "success").&lt;/p&gt;

&lt;p&gt;If there is an option parsing exception, then the exception message is written to &lt;b&gt;Console.Error&lt;/b&gt;, usage information is displayed, and an error code is returned.&lt;/p&gt;

&lt;p&gt;If there is some other (unexpected) exception (during option parsing or program logic), then the entire exception (including the call stack) is written to &lt;b&gt;Console.Error&lt;/b&gt; and an error code is returned.&lt;/p&gt;

&lt;h4&gt;Notes&lt;/h4&gt;

&lt;p&gt;For console programs, a return value of 0 indicates success and any other return value usually indicates an error. I used two different error codes in the example above, but they could just as easily be a single error code because distinguishing usage errors is not normally useful.&lt;/p&gt;

&lt;p&gt;An options class does not have to include a &lt;b&gt;Usage&lt;/b&gt; method; I just usually put it there so it's along with the class that defines the options. In future blog posts, I'll post example code that skips the &lt;b&gt;Usage&lt;/b&gt; method to avoid distractions, but it should be included in real-world code.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8857663109918908825/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-error-handling.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8857663109918908825'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8857663109918908825'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-error-handling.html' title='Option Parsing: Error Handling'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5517804048510696948</id><published>2011-06-16T12:30:00.018-04:00</published><updated>2014-05-16T16:13:50.350-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Lexing</title><content type='html'>&lt;p&gt;The first step in parsing a command line is &lt;i&gt;lexing&lt;/i&gt;, which converts a single string (the command line) into a sequence of strings (individual options and/or arguments). Actually, the &lt;i&gt;very&lt;/i&gt; first step takes place before the program even runs: the command shell has its own simple lexer.&lt;/p&gt;

&lt;h4&gt;Command Shell Escaping and Quoting&lt;/h4&gt;

&lt;blockquote&gt;The information in this section is derived from the TechNet articles &lt;a href="http://technet.microsoft.com/en-us/library/bb490954.aspx"&gt;Command shell overview&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5ytzcAcrB"&gt;webcite&lt;/a&gt;) and &lt;a href="http://technet.microsoft.com/en-us/library/cc723564.aspx"&gt;The Windows NT Command Shell&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5ytzuqd4h"&gt;webcite&lt;/a&gt;).&lt;/blockquote&gt;

&lt;p&gt;The command shell has these special characters: &lt;b&gt;&amp;amp;&lt;/b&gt;, &lt;b&gt;|&lt;/b&gt;, &lt;b&gt;(&lt;/b&gt;, &lt;b&gt;)&lt;/b&gt;, &lt;b&gt;&amp;lt;&lt;/b&gt;, &lt;b&gt;&amp;gt;&lt;/b&gt;, and &lt;b&gt;^&lt;/b&gt;. There are two ways to pass these special characters on the command line: &lt;i&gt;escaping&lt;/i&gt; and &lt;i&gt;quoting&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;b&gt;^&lt;/b&gt; character is the shell escape character. You may prefix any of the special shell characters with that escape character, and the special shell character will be passed to the program (without the escape character).&lt;/p&gt;

&lt;p&gt;The command shell also supports quoting; special characters may be passed within a pair of double-quotes. In this case, the special characters are passed to the program along with the surrounding quotes.&lt;/p&gt;

&lt;p&gt;The shell escaping and quoting appears to be a simple algorithm: escaped characters (including normal characters) are passed through directly, and each (non-escaped) double-quote either starts or ends a quoted string. Consider the outputs from this example program:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static void Main(string[] args)
{
  Console.WriteLine(Environment.CommandLine);
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe ^^ "^"
CommandLineParsingTest.exe ^ "^"

&amp;gt; CommandLineParsingTest.exe ^"^"
CommandLineParsingTest.exe ""

&amp;gt; CommandLineParsingTest.exe ^""
CommandLineParsingTest.exe ""

&amp;gt; CommandLineParsingTest.exe "^"^"
CommandLineParsingTest.exe "^""

&amp;gt; CommandLineParsingTest.exe "^"^^"
CommandLineParsingTest.exe "^"^"

&amp;gt; CommandLineParsingTest.exe "^^
CommandLineParsingTest.exe "^^
&lt;/pre&gt;

&lt;p&gt;Shell escaping and quoting are applied to every process by the Command Shell; there is no way to opt out of this behavior. After the command shell does its own escaping and quoting, the command line is passed to the program.&lt;/p&gt;

&lt;h4&gt;Default .NET Lexing&lt;/h4&gt;

&lt;p&gt;The command line is split up into a list of process arguments by the .NET runtime. The algorithm is described in the documentation for &lt;a href="http://msdn.microsoft.com/en-us/library/system.environment.getcommandlineargs.aspx"&gt;Environment.GetCommandLineArgs&lt;/a&gt;. The same results (except for the process name) are also passed as the single argument to the &lt;b&gt;Main&lt;/b&gt; method, if present.&lt;/p&gt;

&lt;p&gt;The .NET lexing also uses a combination of escaping and quoting, but it has some surprising results because escaping is allowed inside quoting. The escape character is &lt;b&gt;\&lt;/b&gt;, and the quote character is the double-quote.&lt;/p&gt;

&lt;p&gt;Each non-escaped double-quote starts or ends a quoted string, just like command shell quoting. However, unlike command shell quoting, escaping is allowed within quoted strings. The .NET lexing also allows two consecutive double-quotes inside a quoted string to represent a single double-quote. Consider the outputs from this example program:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static void Main(string[] args)
{
  foreach (var arg in args)
    Console.WriteLine(arg);
}
&lt;/pre&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe "a"
a

&amp;gt; CommandLineParsingTest.exe \"a"
"a

&amp;gt; CommandLineParsingTest.exe \"a
"a

&amp;gt; CommandLineParsingTest.exe "a\"
a"

&amp;gt; CommandLineParsingTest.exe "a\\"
a\

&amp;gt; CommandLineParsingTest.exe a \"
a
"

&amp;gt; CommandLineParsingTest.exe "a \\"
a \

&amp;gt; CommandLineParsingTest.exe "a\"b"
a"b

&amp;gt; CommandLineParsingTest.exe "a""b"
a"b

&amp;gt; CommandLineParsingTest.exe a "" """"
a

"
&lt;/pre&gt;

&lt;p&gt;This lexing behavior is particularly problematic when passing directories. Since directories may contain spaces, they should be wrapped with quotes. However, if the directory ends with a backslash, the closing quote will be escaped:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; CommandLineParsingTest.exe "c:\my path"
c:\my path

&amp;gt; CommandLineParsingTest.exe "c:\my path\"
c:\my path"
&lt;/pre&gt;

&lt;p&gt;This is a rather serious limitation of the default .NET lexer. It is possible to write your own replacement lexer using a different algorithm. This lexer would take the process command line as input and produce a sequence of strings.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink.OptionParser&lt;/a&gt; library does not have a lexer of its own, but it will accept a sequence of strings as input into its parsing methods. If no sequence of strings is passed to a parsing method, then the method will use the process' command line lexed with the default .NET lexer.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5517804048510696948/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-lexing.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5517804048510696948'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5517804048510696948'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-lexing.html' title='Option Parsing: Lexing'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6204935143075600923</id><published>2011-06-09T12:30:00.000-04:00</published><updated>2011-06-09T12:30:01.047-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: The Option Parsing Pipeline</title><content type='html'>&lt;p&gt;There are three main phases during option parsing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lexing&lt;/li&gt;
&lt;li&gt;Parsing&lt;/li&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;b&gt;Lexing&lt;/b&gt; phase deals with the escaping and quoting of special characters and splitting the command line string into a sequence of strings. The &lt;b&gt;Parsing&lt;/b&gt; phase evaluates the sequence of strings from the lexing phase, and interprets them as options and arguments; this includes parsing arguments as necessary, e.g., converting a string argument &lt;i&gt;"3"&lt;/i&gt; into the numeric argument value &lt;i&gt;3&lt;/i&gt;. The &lt;b&gt;Validation&lt;/b&gt; phase determines if the options and arguments represent a valid command for the program to perform.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink.OptionParser&lt;/a&gt; library does not have a &lt;i&gt;lexer&lt;/i&gt;, but does have a &lt;i&gt;parser&lt;/i&gt; and hooks for &lt;i&gt;validation&lt;/i&gt;. The easiest way to use the library is by calling a single method:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
var options = OptionParser.Parse&amp;lt;MyOptionArguments&amp;gt;();
&lt;/pre&gt;

&lt;p&gt;This single method wraps all the phases of the option parsing pipeline:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The command line for the process is lexed using the default .NET lexing.&lt;/li&gt;
&lt;li&gt;The option and argument definitions are inferred from properties and attributes on the &lt;b&gt;MyOptionArguments&lt;/b&gt; type.&lt;/li&gt;
&lt;li&gt;These definitions are used to parse the lexed command line, saving the results into properties on a default-constructed &lt;b&gt;MyOptionsArguments&lt;/b&gt; object.&lt;/li&gt;
&lt;li&gt;Validation is performed on the &lt;b&gt;MyOptionsArguments&lt;/b&gt; object, which is then returned.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Future posts will show how each of these steps may be configured (or replaced).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6204935143075600923/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-option-parsing-pipeline.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6204935143075600923'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6204935143075600923'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/06/option-parsing-option-parsing-pipeline.html' title='Option Parsing: The Option Parsing Pipeline'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1832065908503459147</id><published>2011-06-02T12:30:00.001-04:00</published><updated>2013-09-19T15:36:18.744-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows Services'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows'/><title type='text'>How to Run Processes Remotely</title><content type='html'>&lt;p&gt;Today I'm going to delve deeply into something I discovered many years ago (c. 2003). It's an interesting little trick that hopefully no one will ever have to use.&lt;/p&gt;

&lt;p&gt;When a process running on one computer needs to perform some operation on &lt;i&gt;another&lt;/i&gt; computer, the common solution is to actually have two processes that use interprocess communication. The one process sends its commands to the other process, which executes them on behalf of the first process. Normally, one must install a server on one computer and a client on the other. So, if someone needs to perform an operation on another computer, then that computer must &lt;i&gt;already have&lt;/i&gt; the software installed.&lt;/p&gt;

&lt;p&gt;However, there &lt;i&gt;is&lt;/i&gt; a way to send a program to a remote computer and run it, without having any special existing software on the target machine. This approach doesn't work in every situation, but it's useful to know. The command line programs in the famous &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb896649"&gt;PSTools suite&lt;/a&gt; use the approach documented here to "inject" copies of themselves onto remote computers; this allows a simple form of remote administration. The white paper &lt;a href="http://www.ntkernel.com/?White_papers:PsExec_Internals"&gt;PsExec Internals&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yUALT8gw"&gt;webcite&lt;/a&gt;) includes the specific details for PsExec.&lt;/p&gt;

&lt;h4&gt;Step 1: Establish an Authenticated Connection&lt;/h4&gt;

&lt;h5&gt;About Connections&lt;/h5&gt;

&lt;p&gt;A user session on one computer may have network connections to other computers. One common example is network drives; each network drive is a connection to another computer. Network connections may also exist without mapping a drive letter.&lt;/p&gt;

&lt;blockquote&gt;Network connections may be examined and modified using the &lt;a href="http://msdn.microsoft.com/en-us/library/aa385406.aspx"&gt;Windows Networking (WNet) API&lt;/a&gt; or the &lt;b&gt;net&lt;/b&gt; command. Unfortunately, there are no .NET wrappers for this API in the BCL.&lt;/blockquote&gt;

&lt;h5&gt;About Authentication&lt;/h5&gt;

&lt;p&gt;Each network connection has to be authenticated, but there are situations where this happens automatically. When you map a network drive using Explorer, by default Windows will use your local logon to attempt to log onto the remote machine, and if it's accepted, you won't actually get prompted for credentials. This is particularly common in Domain environments.&lt;/p&gt;

&lt;blockquote&gt;The &lt;b&gt;net use&lt;/b&gt; command allows you to display current connections to other computers, and add or remove those connections.&lt;/blockquote&gt;

&lt;h5&gt;Authentication Quirks&lt;/h5&gt;

&lt;p&gt;Microsoft made the design decision that any number of network connections may exist between two different computers, but that the same credentials must be used for all those connections. You may use different credentials for connections to two different servers, but all connections to the same server must use the same credentials. According to a rather dated &lt;a href="http://support.microsoft.com/kb/106211"&gt;KB106211&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yelY3I5Z"&gt;webcite&lt;/a&gt;), this is done "for security purposes." The newer &lt;a href="http://support.microsoft.com/kb/183366"&gt;KB183366&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yemC7rC8"&gt;webcite&lt;/a&gt;) documents the limitation in more detail, but does not give a reason.&lt;/p&gt;

&lt;p&gt;If you do attempt to use different credentials for different connections to the same server, you'll get a 1219 error: "Multiple connections to a server or shared resource by the same user, using more than one user name, are not allowed. Disconnect all previous connections to the server or shared resource and try again." I've also seen this error when Explorer tries to auto-reconnect its mapped drives and it gets confused; it appears to happen more commonly on wireless networks when resuming from a low-power state.&lt;/p&gt;

&lt;blockquote&gt;There's a "greybeard" trick used to get around this limitation: connect to the IP address instead of the hostname (or, if you want more work, set up multiple hostnames for that server). The logic behind "the same server" appears to be just a string comparison. This workaround has been documented in &lt;a href="http://support.microsoft.com/kb/938120"&gt;KB938120&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yemWypLb"&gt;webcite&lt;/a&gt;).&lt;/blockquote&gt;

&lt;p&gt;There are some notable situations where it's not possible to establish an authenticated connection:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the target (server) machine is running a client OS "Home" edition (e.g., XP Home, Vista Home Basic, Vista Home Premium, Windows 7 Home Basic, Windows 7 Home Premium), then no authenticated connections are possible.&lt;/li&gt;
&lt;li&gt;If the target (server) machine is running a client OS "Professional" edition (e.g., XP Professional, Vista Business/Enterprise/Ultimate, Windows 7 Professional/Enterprise/Ultimate), then that machine must &lt;i&gt;either&lt;/i&gt; be a member of a domain &lt;i&gt;or&lt;/i&gt; turn off "simple file sharing" to support authenticated connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that if you're working in a domain enviroment, Everything Just Works. For the rest of us, we have to turn off "simple file sharing."&lt;/p&gt;

&lt;p&gt;If the server is running a Home edition, or if it is not connected to a domain and is using simple file sharing, then it does not support authenticated connections. Instead, every incoming network connection is authenticated with the Guest account; see &lt;a href="http://support.microsoft.com/kb/300489"&gt;KB300489&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yenW0M9U"&gt;webcite&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;Another non-authenticated approach is to use &lt;i&gt;null sessions&lt;/i&gt;, which are truly anonymous. This means they work even if the Guest account is disabled. Null sessions are disabled by default and considered a security risk.&lt;/blockquote&gt;

&lt;p&gt;To send a program to a remote computer, you'll need an authenticated connection. A Guest authentication (or null session) is insufficient.&lt;/p&gt;

&lt;h5&gt;Common Shares&lt;/h5&gt;

&lt;p&gt;There are some hidden network shares for Windows systems. They are recreated automatically on reboot if they've been deleted.&lt;/p&gt;

&lt;blockquote&gt;Hidden shares are not shown in the normal GUI, but they can be displayed by the command &lt;b&gt;net share&lt;/b&gt;.&lt;/blockquote&gt;

&lt;p&gt;The standard hidden share names that are important to us are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;IPC$&lt;/b&gt; - An share that is used only for authentication.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ADMIN$&lt;/b&gt; - The equivalent of &lt;b&gt;%SYSTEMROOT%&lt;/b&gt; (usually "C:\Windows").&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;You can create your own hidden shares: &lt;a href="http://support.microsoft.com/kb/314984"&gt;KB314984&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yep2mpjH"&gt;webcite&lt;/a&gt;). You can also prevent the automatic creation of the standard hidden shares: &lt;a href="http://support.microsoft.com/kb/954422"&gt;KB954422&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yep4SjDH"&gt;webcite&lt;/a&gt;), but this may cause lots of problems: &lt;a href="http://support.microsoft.com/kb/842715"&gt;KB842715&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yepDm7Rl"&gt;webcite&lt;/a&gt;).&lt;/blockquote&gt;

&lt;p&gt;With all of that background information, our first step is to actually establish the authenticated connection to &lt;b&gt;\\computer\IPC$&lt;/b&gt;. The other steps are quite simple in comparison!&lt;/p&gt;

&lt;h4&gt;Step 2: Copy the Program to the Target&lt;/h4&gt;

&lt;p&gt;Just copy the program to &lt;b&gt;\\computer\ADMIN$&lt;/b&gt;, right into the Windows directory. I recommend renaming the file during the copy to a unique name, to avoid conflicts. You don't need to explicitly establish a network connection to &lt;b&gt;\\computer\ADMIN$&lt;/b&gt;; the existing connection to &lt;b&gt;\\computer\IPC$&lt;/b&gt; will be your authentication.&lt;/p&gt;

&lt;h4&gt;Step 3: Register and Execute the Program&lt;/h4&gt;

&lt;p&gt;This step makes use of the little-known fact that Win32 services may be &lt;i&gt;installed&lt;/i&gt; remotely. The &lt;a href="http://msdn.microsoft.com/en-us/library/ms685148(v=VS.85).aspx"&gt;service configuration API&lt;/a&gt; can be used to install the service on the remote computer and then start it.&lt;/p&gt;

&lt;blockquote&gt;The .NET &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicecontroller.aspx"&gt;ServiceController class&lt;/a&gt; does expose remote &lt;i&gt;control&lt;/i&gt; of services (starting, stopping, etc), but it does not expose remote &lt;i&gt;installation&lt;/i&gt; of services.&lt;/blockquote&gt;

&lt;h4&gt;Step 4: Securely Communicate&lt;/h4&gt;

&lt;p&gt;Once the service is running on the remote computer, it is simple matter to communicate with the original process and carry out its instructions. It's not quite as simple to do so in a secure manner, though; strongly consider &lt;i&gt;encrypting&lt;/i&gt; all network communication and using &lt;i&gt;impersonation&lt;/i&gt; in the service.&lt;/p&gt;

&lt;blockquote&gt;Also remember that - as a service - you &lt;a href="http://blog.stephencleary.com/search/label/Windows%20Services"&gt;are limited&lt;/a&gt; in what you can do.&lt;/blockquote&gt;

&lt;h4&gt;Enjoy!&lt;/h4&gt;

&lt;p&gt;There aren't too many good use cases for this technique. Remote administration is one, as demonstrated by the PsTools suite from Microsoft TechNet Systems Internals.&lt;/p&gt;

&lt;p&gt;Another possible application is to inject an installer for remote control software, such as VNC or pcAnywhere. This could be useful in the rare case where a computer is physically inaccessible.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1832065908503459147/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/06/how-to-run-processes-remotely.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1832065908503459147'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1832065908503459147'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/06/how-to-run-processes-remotely.html' title='How to Run Processes Remotely'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8258839092889204805</id><published>2011-05-26T12:30:00.000-04:00</published><updated>2011-05-26T12:30:01.397-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><category scheme='http://www.blogger.com/atom/ns#' term='Linq'/><title type='text'>Getting the ObjectContext from an EntityObject</title><content type='html'>&lt;p&gt;There are a few situations where it's useful to get an &lt;b&gt;ObjectContext&lt;/b&gt; from an &lt;b&gt;EntityObject&lt;/b&gt;. Note that in general I do not recommend a design that depends on this; there doesn't appear to be an easy way to do this using code first in EF 4.1 (using the &lt;b&gt;DbContext&lt;/b&gt; API). That said, either of the solutions in this blog post will work when using the &lt;b&gt;ObjectContext&lt;/b&gt; API.&lt;/p&gt;

&lt;p&gt;The most common solution for this problem is from &lt;a href="http://blogs.msdn.com/b/alexj/archive/2009/06/08/tip-24-how-to-get-the-objectcontext-from-an-entity.aspx"&gt;a 2009 Microsoft blog post by Alex James&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yYYB64NN"&gt;webcite&lt;/a&gt;). Unfortunately, that solution has several limitations (including the requirement that the entities must have relations to other entities). Both of the solutions below do not have these limitations.&lt;/p&gt;

&lt;p&gt;We use an example entity container named &lt;b&gt;NorthwindEntites&lt;/b&gt;, derived from &lt;b&gt;ObjectContext&lt;/b&gt;. To this we will add a factory method &lt;b&gt;FromEntity(EntityObject entity)&lt;/b&gt;, which retrieves the &lt;b&gt;NorthwindEntities&lt;/b&gt; instance to which that entity is attached, or &lt;b&gt;null&lt;/b&gt; if the entity is detached.&lt;/p&gt;

&lt;h4&gt;Solution 1: Dynamic&lt;/h4&gt;

&lt;p&gt;The idea behind this solution is to add a property to the entity type that points to its own &lt;b&gt;ObjectContext&lt;/b&gt;. It's possible to do this by &lt;a href="http://msdn.microsoft.com/en-us/library/dd456821.aspx"&gt;modifying the code-generating&lt;/a&gt; &lt;a href="http://msdn.microsoft.com/en-us/library/ff477605.aspx"&gt;template&lt;/a&gt; file, but it's also possible to just add the property to each entity type manually and use dynamic duck typing to access it.&lt;/p&gt;

&lt;p&gt;The modified &lt;b&gt;NorthwindEntities&lt;/b&gt; uses &lt;b&gt;OnContextCreated&lt;/b&gt; to hook into its constructor and set up event handlers to respond whenever an entity is added to or removed from this context. Each event handler uses dynamic duck typing to access an "ObjectContext" property on the entity; if no such property exists, the entity is ignored.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System.ComponentModel;
using System.Data.Objects.DataClasses;
using Microsoft.CSharp.RuntimeBinder;

namespace WindowsFormsApplication1
{
  public partial class NorthwindEntities
  {
    partial void OnContextCreated()
    {
      this.ObjectMaterialized += (_, e) =&amp;gt;
      {
        try
        {
          dynamic entity = e.Entity;
          entity.ObjectContext = this;
        }
        catch (RuntimeBinderException)
        {
        }
      };
      this.ObjectStateManager.ObjectStateManagerChanged += (_, e) =&amp;gt;
      {
        if (e.Action == CollectionChangeAction.Add)
        {
          try
          {
            dynamic entity = e.Element;
            entity.ObjectContext = this;
          }
          catch (RuntimeBinderException)
          {
          }
        }
        else if (e.Action == CollectionChangeAction.Remove)
        {
          try
          {
            dynamic entity = e.Element;
            entity.ObjectContext = null;
          }
          catch (RuntimeBinderException)
          {
          }
        }
      };
    }

    /// &amp;lt;summary&amp;gt;
    /// Gets the object context for the entity. Returns &amp;lt;c&amp;gt;null&amp;lt;/c&amp;gt; if the entity is detached or does not define an &amp;lt;c&amp;gt;ObjectContext&amp;lt;/c&amp;gt; property.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;entity&amp;quot;&amp;gt;The entity for which to return the object context.&amp;lt;/param&amp;gt;
    public static NorthwindEntities FromEntity(EntityObject entity)
    {
      try
      {
        dynamic dynamicEntity = entity;
        return dynamicEntity.ObjectContext;
      }
      catch (RuntimeBinderException)
      {
        return null;
      }
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;The disadvantage to this approach is that you have to add an &lt;b&gt;ObjectContext&lt;/b&gt; property to each entity type, like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
namespace WindowsFormsApplication1
{
  public partial class Order
  {
    /// &amp;lt;summary&amp;gt; 
    /// Gets or sets the context for this entity.
    ///  This should not be set by end-user code; this property will be set
    ///  automatically as entities are created or added,
    ///  and will be set to &amp;lt;c&amp;gt;null&amp;lt;/c&amp;gt; as entities are detached.
    /// &amp;lt;/summary&amp;gt; 
    internal NorthwindEntities ObjectContext { get; set; }
  }
}
&lt;/pre&gt;

&lt;p&gt;Alternatively, you could modify the creation template. Either way, it's a fair amount of work.&lt;/p&gt;

&lt;h4&gt;Solution 2: Connected Properties&lt;/h4&gt;

&lt;p&gt;The &lt;a href="http://www.nuget.org/List/Packages/ConnectedProperties"&gt;Connected Properties&lt;/a&gt; library may be used to "attach" properties to entity objects at run-time. This means it's no longer necessary to add the &lt;b&gt;ObjectContext&lt;/b&gt; property on each entity type.&lt;/p&gt;

&lt;p&gt;This modified &lt;b&gt;NorthwindEntities&lt;/b&gt; uses the same hooks as the one above, but it uses connected properties instead of dynamic duck typing:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System.ComponentModel;
using System.Data.Objects.DataClasses;
using Nito.ConnectedProperties;
using Nito.ConnectedProperties.Implicit;

namespace WindowsFormsApplication1
{
  public partial class NorthwindEntities
  {
    /// &amp;lt;summary&amp;gt;
    /// The object context connected property type.
    /// &amp;lt;/summary&amp;gt;
    private struct ObjectContextProperty { }

    /// &amp;lt;summary&amp;gt;
    /// Gets the object context connected property for a specified carrier object.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;entity&amp;quot;&amp;gt;The carrier object.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;The connected property.&amp;lt;/returns&amp;gt;
    private static IConnectibleProperty&amp;lt;NorthwindEntities&amp;gt; ObjectContext(object entity)
    {
      return entity.GetConnectedProperty&amp;lt;NorthwindEntities, ObjectContextProperty&amp;gt;();
    }

    /// &amp;lt;summary&amp;gt;
    /// Handles post-construction event.
    /// &amp;lt;/summary&amp;gt;
    partial void OnContextCreated()
    {
      this.ObjectMaterialized += (_, e) =&amp;gt;
      {
        ObjectContext(e.Entity).Set(this);
      };

      this.ObjectStateManager.ObjectStateManagerChanged += (_, e) =&amp;gt;
      {
        if (e.Action == CollectionChangeAction.Add)
        {
          ObjectContext(e.Element).Set(this);
        }
        else if (e.Action == CollectionChangeAction.Remove)
        {
          ObjectContext(e.Element).Set(null);
        }
      };
    }

    /// &amp;lt;summary&amp;gt;
    /// Gets the object context for the entity. Returns &amp;lt;c&amp;gt;null&amp;lt;/c&amp;gt; if the entity is detached.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;entity&amp;quot;&amp;gt;The entity for which to return the object context.&amp;lt;/param&amp;gt;
    public static NorthwindEntities FromEntity(EntityObject entity)
    {
      return ObjectContext(entity).GetOrConnect(null);
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;The disadvantage of this approach is that you do need to take a dependency on the &lt;a href="http://www.nuget.org/List/Packages/ConnectedProperties"&gt;Connected Properties&lt;/a&gt; library, but I think that's a reasonable tradeoff.&lt;/p&gt;

&lt;p&gt;This post was inspired by &lt;a href="http://stackoverflow.com/questions/5707312/whats-the-fastest-way-to-get-an-objectcontext-reference-from-an-entity-object"&gt;a recent SO question&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8258839092889204805/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/05/getting-objectcontext-from-entityobject.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8258839092889204805'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8258839092889204805'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/05/getting-objectcontext-from-entityobject.html' title='Getting the ObjectContext from an EntityObject'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7418294080775285988</id><published>2011-05-19T12:30:00.007-04:00</published><updated>2011-05-19T12:30:01.362-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Language design'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Linq'/><title type='text'>Signed and Unsigned Comparisons in C, C#, and T-SQL</title><content type='html'>&lt;p&gt;As noted earlier, I've been doing a lot of firmware development recently (in C). A long-standing rule of C (and C++) is to convert &lt;b&gt;signed int&lt;/b&gt; values to &lt;b&gt;unsigned int&lt;/b&gt; values if both are used in a comparison; this is what the standard specifies. It's also traditional to issue a warning (the famous &lt;i&gt;comparison between signed and unsigned integer expressions&lt;/i&gt; warning) because such code is usually a mistake.&lt;/p&gt;

&lt;p&gt;In C, the expression &lt;b&gt;( (unsigned)-1 == -1 )&lt;/b&gt; will compile (with a warning), and have a value of &lt;b&gt;1&lt;/b&gt; (true). C# and T-SQL both handle that situation very differently.&lt;/p&gt;

&lt;p&gt;In C#, the expression &lt;b&gt;( unchecked((uint)-1) == -1 )&lt;/b&gt; will compile without warning and have a value of &lt;b&gt;false&lt;/b&gt;. What &lt;a href="http://msdn.microsoft.com/en-us/library/aa691330(v=VS.71).aspx"&gt;actually happens&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5ySVSNhTE"&gt;webcite&lt;/a&gt;) is that the unsigned value of 0xFFFFFFFF and the signed value of -1 are both converted to &lt;b&gt;long&lt;/b&gt; values and &lt;i&gt;then&lt;/i&gt; compared.&lt;/p&gt;

&lt;p&gt;The C# behavior does makes sense. C# continues the C/C++ tradition of implicitly promoting to &lt;b&gt;int&lt;/b&gt; for any integral binary operation (e.g., two &lt;b&gt;byte&lt;/b&gt; values added together are converted to &lt;b&gt;int&lt;/b&gt;s before the addition). However, the additional implicit promotion to &lt;b&gt;long&lt;/b&gt; was a bit of a surprise. This is probably due to 64-bit math becoming more commonplace - not common enough to have an implicit promotion to &lt;b&gt;long&lt;/b&gt; for &lt;i&gt;every&lt;/i&gt; binary operation, but enough to add the implicit promotion to &lt;b&gt;long&lt;/b&gt; when necessary.&lt;/p&gt;

&lt;p&gt;In SQL Server's TSQL, the expression &lt;b&gt;select 'true' where -1 = 4294967295;&lt;/b&gt; will return an empty result set (meaning &lt;b&gt;-1&lt;/b&gt; is not considered equivalent to &lt;b&gt;4294967295&lt;/b&gt;). Interestingly, it's doing the &lt;a href="http://msdn.microsoft.com/en-us/library/ms190309.aspx"&gt;same kind of promotion as C#&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5ySZdwwtV"&gt;webcite&lt;/a&gt;). In this case, the value &lt;b&gt;4294967295&lt;/b&gt; is typed as a &lt;b&gt;bigint&lt;/b&gt; (a 64-bit signed integer).&lt;/p&gt;

&lt;p&gt;The C# behavior can be seen when inspecting T-SQL statements generated by Linq to Entites. In my case, I was using code such as this to look up an item by serial number (an unsigned value):&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using (var context = new MyEntities())
{
    uint serialNumber = 0xFFFFFFFF;
    var item = context.Items.Where(x =&amp;gt; x.SerialNumber == serialNumber).SingleOrDefault();
}
&lt;/pre&gt;

&lt;p&gt;The generated T-SQL statement (for SQL Server Compact Edition) was like this:&lt;/p&gt;

&lt;pre&gt;
SELECT TOP (2) [Extent1].[ID] AS [ID], [Extent1].[SerialNumber] AS [SerialNumber] FROM [Items] AS [Extent1]  WHERE ( CAST( [Extent1].[SerialNumber] AS bigint)) = @p__linq__0
&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;p__linq__0&lt;/b&gt; had a &lt;a href="http://msdn.microsoft.com/en-us/library/system.data.dbtype.aspx"&gt;DbType&lt;/a&gt; of &lt;b&gt;Int64&lt;/b&gt;. Note that the generated T-SQL includes an explicit cast to &lt;b&gt;bigint&lt;/b&gt; because the C# language implicitly inserted a cast to &lt;b&gt;long&lt;/b&gt; in the expression &lt;b&gt;x.SerialNumber == serialNumber&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Lesson learned: be careful of mixing signed and unsigned types. The warnings that existed in C/C++ are not necessarily present in C# (or T-SQL).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7418294080775285988/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/05/signed-and-unsigned-comparisons-in-c-c.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7418294080775285988'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7418294080775285988'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/05/signed-and-unsigned-comparisons-in-c-c.html' title='Signed and Unsigned Comparisons in C, C#, and T-SQL'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-765412694783577912</id><published>2011-05-12T12:05:00.001-04:00</published><updated>2013-09-19T15:14:41.446-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows Services'/><title type='text'>Managed Services and UIs</title><content type='html'>&lt;p&gt;One common question that I've seen is how to display a UI from a service.&lt;/p&gt;

&lt;p&gt;The answer is: "don't".&lt;/p&gt;

&lt;p&gt;Usually, when someone asks this question, the correct solution is to change the application from a &lt;i&gt;service&lt;/i&gt; to a background application run whenever a user logs in (e.g., from the Startup folder), possibly with a tray icon. Occasionally, this isn't possible, and the correct solution in that case is to split the application into two applications: a service without a UI, and a UI front-end (which may be a backround application run automatically).&lt;/p&gt;

&lt;p&gt;Unfortunately, some people try to push forward with the "service with a UI" approach. This is doomed to fail.&lt;/p&gt;

&lt;h4&gt;Inevitable Failure&lt;/h4&gt;

&lt;p&gt;There are two hurdles to displaying a UI from a service; the first is architectural, and the second is technical.&lt;/p&gt;

&lt;p&gt;The architectural hurdle is simply that displaying a UI from a service just doesn't make sense. A Win32 service is a program that runs (or can be run) any time the computer is running, regardless of whether or not there is a user logged in. It doesn't make much sense to talk about "displaying a UI" if there isn't a user to show it to. Also consider multi-user (terminal server or fast-user-switching) computers: &lt;i&gt;which&lt;/i&gt; user would see the UI?&lt;/p&gt;

&lt;p&gt;The technical hurdle is a bit more complex. To summarize: services which display UIs are a security risk.&lt;/p&gt;

&lt;p&gt;The Win32 windows messaging system was designed without security in mind. Before you get too mad at Microsoft, remember that the Internet (including email, TCP/IP, and HTTP) were designed without security, too. Back then, it was hard enough just to get it working, without worrying about someone deliberately trying to destroy it. Most security on the Internet today is due to wrapping the original insecure protocols in an encrypted, authenticated stream (SSL/TLS).&lt;/p&gt;

&lt;blockquote&gt;In fact, when I first got on the Internet, the common instructions for setting up an email server explicitly stated that it should be set up as an open relay so that anyone could send email through it. Then someone invented spam. The instructions have since been revised.&lt;/blockquote&gt;

&lt;p&gt;Similarly, in the early days, Windows had no need for security. In early versions of Windows, multitasking was non-preemptive, so any program could effortlessly cause a denial-of-service attack. Furthermore, each program had direct access to hardware, and causing a complete system crash was trivial.&lt;/p&gt;

&lt;p&gt;These days, the situation is much improved. On modern OSes (not including the 9x line), a user-mode program simply cannot crash the system; it can only crash itself. With almost every new OS, Microsoft has enhanced security by trusting programs less (e.g., User Account Control).&lt;/p&gt;

&lt;p&gt;One attack vector for malicious programs is a &lt;i&gt;privilege escalation&lt;/i&gt;. This is a way for an untrusted program to trick the OS into trusting it more. One privilege escalation attack that has been discovered is called a &lt;a href="http://en.wikipedia.org/wiki/Shatter_attack"&gt;shatter attack&lt;/a&gt;. This "shatter attack" is based on Win32 message passing.&lt;/p&gt;

&lt;p&gt;In response, Microsoft made two changes starting in Vista: User Interface Privilege Isolation (see &lt;a href="http://msdn.microsoft.com/en-us/library/bb756960.aspx"&gt;New UAC Technologies for Windows Vista&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yJMQ8H2i"&gt;webcite&lt;/a&gt;)); and Session 0 Isolation (see &lt;a href="http://blogs.technet.com/b/askperf/archive/2007/04/27/application-compatibility-session-0-isolation.aspx"&gt;this Application Compatibility blog post&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yJcr5ySR"&gt;webcite&lt;/a&gt;) or &lt;a href="http://msdn.microsoft.com/en-us/windows/hardware/gg463353"&gt;this Word document&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;User Interface Privilege Isolation is a simple system where less-trusted programs (such as Internet Explorer) are limited in which Win32 messages they may send to more-trusted programs (such as services). This doesn't prevent services from having UIs, but may trip up programmers if they try to communicate with their service via message passing.&lt;/p&gt;

&lt;p&gt;Session 0 Isolation is more surprising to most programmers, simply because most programmers are not aware of desktops or window stations. The following MSDN resources provide a good intro to the concept:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://support.microsoft.com/kb/171890"&gt;Services, Desktops, and Window Stations (KB171890)&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yJMygiUo"&gt;webcite&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms684859.aspx"&gt;Process Connection to a Window Station&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yJN86Gvo"&gt;webcite&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms686744.aspx"&gt;Thread Connection to a Desktop&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yJNBEJc4"&gt;webcite&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In essence, the older versions of Windows (XP and earlier) would run services in the same session as the first user that logged on to the physical computer, and services displaying UIs would be seen by that user. Newer versions of Windows (Vista and later) run services in their own special session (Session 0), which has its own window station and desktop completely independent from anything the user sees.&lt;/p&gt;

&lt;p&gt;Naturally, this broke a lot of existing services, so Microsoft implemented a couple of workarounds. One is the "Interactive Service" flag, which would allow a service to display a UI. Another is the Interactive Service Detection Service, which is a special service that detects dialogs on Session 0 and notifies the user (if any) of them.&lt;/p&gt;

&lt;p&gt;It is possible to set the Interactive Service flag when installing a service (not through the regular .NET Framework APIs; you have to p/Invoke for it). That is a horrible hack and should never, ever be applied to a new application. Even with that flag, some notification systems may not work as expected (see the end of &lt;a href="http://blogs.technet.com/b/voy/archive/2007/02/23/services-isolation-in-session-0-of-windows-vista-and-longhorn-server.aspx"&gt;this blog post from the security team&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yJd1Jb7p"&gt;webcite&lt;/a&gt;)).&lt;/p&gt;

&lt;p&gt;Remember that the Interactive Service flag is a &lt;i&gt;backwards&lt;/i&gt; compatibility hack that weakens overall system security and may be removed from Windows vNext. Similarly, the Interactive Service Detection Service comes with this disclaimer: "This support might be removed from a future Windows release, at which time all applications and drivers must handle Session 0 isolation properly."&lt;/p&gt;

&lt;p&gt;So - while it is &lt;i&gt;possible&lt;/i&gt; to hack together a service with a UI today - you'd only be setting yourself up for failure in the future.&lt;/p&gt;

&lt;h3&gt;Update (2013-09-19):&lt;/h3&gt;

&lt;p&gt;Windows 8 (and Server 2012) &lt;a href="http://blogs.technet.com/b/home_is_where_i_lay_my_head/archive/2012/10/09/windows-8-interactive-services-detection-error-1-incorrect-function.aspx"&gt;no longer allow interactive services by default&lt;/a&gt;. So any service with a UI will fail.&lt;/p&gt;

&lt;p&gt;Currently, you are allowed to hack the OS to re-enable interactive services by setting &lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Control\Windows\NoInteractiveServices&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;. This is an OS-level hack that you must apply &lt;i&gt;in addition to&lt;/i&gt; the service-level Interactive Service flag hack.&lt;/p&gt;

&lt;p&gt;As predicted, Microsoft is moving further and further away from interactive services. I &lt;i&gt;strongly&lt;/i&gt; recommend not using these hacks in production.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/765412694783577912/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/05/managed-services-and-uis.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/765412694783577912'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/765412694783577912'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/05/managed-services-and-uis.html' title='Managed Services and UIs'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1042421121410476367</id><published>2011-05-05T12:30:00.000-04:00</published><updated>2013-05-17T10:56:12.490-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Linq'/><category scheme='http://www.blogger.com/atom/ns#' term='Simple and Easy'/><title type='text'>Simple and Easy Entity Framework SQL Tracing</title><content type='html'>&lt;p&gt;There's an easy way to &lt;a href="http://blog.stephencleary.com/2010/12/simple-and-easy-tracing-in-net.html"&gt;add tracing to an application&lt;/a&gt;, but Entity Framework brings some special challenges. &lt;a href="http://msdn.microsoft.com/en-us/library/system.data.objects.objectquery.totracestring.aspx"&gt;ObjectQuery.ToTraceString&lt;/a&gt; does allow tracing of SQL SELECT commands, but there's no built-in way to trace database updates.&lt;/p&gt;

&lt;p&gt;However, there is an &lt;a href="http://efwrappers.codeplex.com/"&gt;Entity Framework Tracing Provider&lt;/a&gt; that allows this. Follow the quick-start instructions on the home page, and you'll be off in no time!&lt;/p&gt;

&lt;p&gt;Here's a few tests using SQL Server Compact Edition to access the Northwind sample database. This code:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using (var db = new NorthwindContext())
{
    MessageBox.Show(db.Orders.Count(x =&amp;gt; x.Order_Date &amp;lt; DateTime.Now).ToString());
}
&lt;/pre&gt;

&lt;p&gt;will result in this trace:&lt;/p&gt;

&lt;pre&gt;
EntityFramework.NorthwindEntities Information: 0 : Executing 1: SELECT [GroupBy1].[A1] AS [C1] FROM ( SELECT COUNT(1) AS [A1] FROM [Orders] AS [Extent1] WHERE [Extent1].[Order Date] &amp;lt; ( CAST( GetDate() AS datetime)) ) AS [GroupBy1]
EntityFramework.NorthwindEntities Information: 0 : Finished 1 in 00:00:00.0466592: [DbDataReader(C1:Int)]
&lt;/pre&gt;

&lt;p&gt;Note that the total time taken by the query is included in the finishing trace. Another interesting tidbit is that &lt;i&gt;DateTime.Now&lt;/i&gt; is not evaluated on the client side; rather, the SQL statement includes a call to &lt;i&gt;GetDate&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Here's some code that deletes an order:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using (var db = new NorthwindContext())
{
    db.Orders.DeleteObject(db.Orders.OrderBy(x =&amp;gt; x.Order_Date).First());
    db.SaveChanges();
}
&lt;/pre&gt;

&lt;p&gt;resulting in this trace:&lt;/p&gt;

&lt;pre&gt;
EntityFramework.NorthwindEntities Information: 0 : Executing 2: SELECT TOP (1) [Extent1].[Order ID] AS [Order ID], [Extent1].[Customer ID] AS [Customer ID], [Extent1].[Employee ID] AS [Employee ID], [Extent1].[Ship Name] AS [Ship Name], [Extent1].[Ship Address] AS [Ship Address], [Extent1].[Ship City] AS [Ship City], [Extent1].[Ship Region] AS [Ship Region], [Extent1].[Ship Postal Code] AS [Ship Postal Code], [Extent1].[Ship Country] AS [Ship Country], [Extent1].[Ship Via] AS [Ship Via], [Extent1].[Order Date] AS [Order Date], [Extent1].[Required Date] AS [Required Date], [Extent1].[Shipped Date] AS [Shipped Date], [Extent1].[Freight] AS [Freight] FROM [Orders] AS [Extent1] ORDER BY [Extent1].[Order Date] ASC
EntityFramework.NorthwindEntities Information: 0 : Finished 2 in 00:00:00.0027257: [DbDataReader(Order ID:Int, Customer ID:NVarChar, Employee ID:Int, Ship Name:NVarChar, Ship Address:NVarChar, Ship City:NVarChar, Ship Region:NVarChar, Ship Postal Code:NVarChar, Ship Country:NVarChar, Ship Via:Int, Order Date:DateTime, Required Date:DateTime, Shipped Date:DateTime, Freight:Money)]
EntityFramework.NorthwindEntities Information: 0 : Executing 3: delete [Orders] where ([Order ID] = @0) { @0=[Int32,0,Input]10000 }
EntityFramework.NorthwindEntities Information: 0 : Finished 3 in 00:00:00.0482807: 1 rows affected
&lt;/pre&gt;

&lt;p&gt;As expected, the first command executes a single-row SELECT, followed by a DELETE that affects a single row. Note the use of the parameterized deletion query.&lt;/p&gt;

&lt;p&gt;Unfortunately, the Entity Framework Tracing Provider does not support everything; in particular, direct database commands (e.g., &lt;a href="http://msdn.microsoft.com/en-us/library/system.data.objects.objectcontext.executestorecommand.aspx"&gt;ExecuteStoreCommand&lt;/a&gt;) are not supported.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1042421121410476367/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/05/simple-and-easy-entity-framework-sql.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1042421121410476367'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1042421121410476367'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/05/simple-and-easy-entity-framework-sql.html' title='Simple and Easy Entity Framework SQL Tracing'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7669822473643049478</id><published>2011-04-28T17:53:00.000-04:00</published><updated>2014-05-16T16:15:54.373-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='P/Invoke'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Unmanaged Blocking</title><content type='html'>&lt;p&gt;Managed code should never block in an unmanaged function, if it can possibly help it. As a general rule, wait functions (such as &lt;b&gt;WaitForMultipleObjects&lt;/b&gt;) should never be p/Invoked from managed code.&lt;/p&gt;

&lt;p&gt;The MSDN document &lt;a href="http://msdn.microsoft.com/en-us/library/ms228970.aspx"&gt;Reliability Best Practices&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yHvHIG97"&gt;webcite&lt;/a&gt;) states "do not block indefinitely in unmanaged code." Specifically, "blocking using a Win32 synchronization primitive is a clear example of something we cannot allow" because "a blocked thread prevents the CLR from unloading the AppDomain, at least without doing some extremely unsafe operations." As a general rule, they suggest that any function blocking more than 10 seconds will &lt;i&gt;require special CLR support!&lt;/i&gt; In other words, if you're doing unmanaged blocking for that long, you'll have to write your own .NET runtime host.&lt;/p&gt;

&lt;p&gt;The legendary Chris Brumme has a good blog entry on &lt;a href="http://blogs.msdn.com/b/cbrumme/archive/2003/04/17/51361.aspx"&gt;Managed Blocking&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yHvfrmgy"&gt;webcite&lt;/a&gt;). He enumerates several reasons why unmanaged blocking is inappropriate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The CLR loses control of the thread. This is the same reason covered in the MSDN article above.&lt;/li&gt;
&lt;li&gt;Managed blocking will do message pumping (in the right way) while blocked. This is necessary for STA threads (including UI threads as well as threads doing STA COM interop). Mr. Blumme has another classic classic blog entry: &lt;a href="http://blogs.msdn.com/b/cbrumme/archive/2004/02/02/66219.aspx"&gt;Apartments and Pumping in the CLR&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yHvxNIih"&gt;webcite&lt;/a&gt;) that delves in-depth into this issue, and is probably the most complex blog post in existence.&lt;/li&gt;
&lt;li&gt;The CLR collects information about managed threads, including how often and how long they block; this information is used (among other things) for making the ThreadPool more efficient. Unmanaged blocking prevents the CLR from gathering this information.&lt;/li&gt;
&lt;li&gt;(The fourth reason from the blog post - hiding of platform differences - is no longer applicable, since the Windows 9x line is no longer supported by modern .NET applications).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Joe Duffy, in a very interesting post on &lt;a href="http://www.bluebytesoftware.com/blog/PermaLink,guid,710e6ba3-60e9-4f5e-a5a7-d878015c7a16.aspx"&gt;Hooking CLR Calls with SynchronizationContext&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5yHvuG9w1"&gt;webcite&lt;/a&gt;), talks about using a custom &lt;b&gt;SynchronizationContext&lt;/b&gt; implementation to receive notifications about managed blocking. These types of notifications simply won't work if a managed thread does unmanaged blocking.&lt;/p&gt;

&lt;p&gt;Closely related to Joe Duffy's post above is the fact that some CLR hosts take special action when managed threads block. In particular, SQL Server makes use of that information. Any host that is based on fibers instead of threads would also require that information (AutoCAD is the only such host that I'm aware of). Again, unmanaged blocking would prevent these hosts from working as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.waithandle.aspx"&gt;&lt;b&gt;WaitHandle&lt;/b&gt;&lt;/a&gt; is the key to unusual managed blocking situations. You can wait on any or all of a series of handles, or even derive from the &lt;b&gt;WaitHandle&lt;/b&gt; class itself if you have a Win32 synchronization primitive not already wrapped by the BCL.&lt;/p&gt;

&lt;p&gt;The bottom line is: avoid unmanaged blocking.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7669822473643049478/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/04/unmanaged-blocking.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7669822473643049478'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7669822473643049478'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/04/unmanaged-blocking.html' title='Unmanaged Blocking'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-207917452898329258</id><published>2011-04-26T14:55:00.003-04:00</published><updated>2011-08-31T08:39:37.877-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='NuGet'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Contracts'/><title type='text'>NuGet No Longer Supports Code Contracts</title><content type='html'>&lt;p&gt;Unfortunately, the latest two releases of NuGet (1.2 and 1.3) do not support Code Contracts. Previous versions of NuGet work fine, but the current version will add contract assemblies as references.&lt;/p&gt;

&lt;p&gt;Workaround: When you add a library package reference, remove the reference(s) to any ".Contracts.dll" files.&lt;/p&gt;

&lt;p&gt;This does affect every Nito library released to NuGet.&lt;/p&gt;

&lt;p&gt;You may vote up this bug &lt;a href="http://nuget.codeplex.com/workitem/263"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update 2011-05-26:&lt;/b&gt; All Nito NuGet packages have been changed to drop Code Contract support; they have also all been changed to &lt;a href="http://blog.davidebbo.com/2011/04/easy-way-to-publish-nuget-packages-with.html"&gt;include support for seamless source debugging&lt;/a&gt;. When NuGet fixes their Code Contract support, the Nito packages will be re-released with both Code Contract and source debugging support.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update 2011-08-31:&lt;/b&gt; Nuget 1.5 resumes support for Code Contracts! The Nito NuGet packages will be updated shortly.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/207917452898329258/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/04/nuget-no-longer-supports-code-contracts.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/207917452898329258'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/207917452898329258'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/04/nuget-no-longer-supports-code-contracts.html' title='NuGet No Longer Supports Code Contracts'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8252102378518876128</id><published>2011-03-28T13:00:00.005-04:00</published><updated>2011-04-28T18:08:45.099-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Exception Types</title><content type='html'>&lt;p&gt;A while ago, Eric Lippert wrote an excellent blog entry called &lt;a href="http://www.webcitation.org/5xQLUxwF3"&gt;Vexing Exceptions&lt;/a&gt;. He defines four categories of exceptions, along with recommendations of how to handle them. I summarized this information into a Word document which I've printed out and posted at my desk:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.landmarkbaptist.ws/misc/ExceptionTypes.docx"&gt;Download&lt;/a&gt; - &lt;a href="http://cid-d18a13492fd0fb87.office.live.com/view.aspx/.Public/ExceptionTypes.docx"&gt;View Online in Microsoft Office Live&lt;/a&gt; - &lt;a href="http://docs.google.com/viewer?url=http%3A%2F%2Fwww.landmarkbaptist.ws%2Fmisc%2FExceptionTypes.docx"&gt;View Online in Google Docs Viewer&lt;/a&gt;&lt;/p&gt;

&lt;!-- This should work, but doesn't:
&lt;iframe src="http://docs.google.com/viewer?url=http%3A%2F%2Fwww.landmarkbaptist.ws%2Fmisc%2FExceptionTypes.docx&amp;embedded=true" width="600" height="780" style="border: none;"&gt;&lt;/iframe&gt;
--&gt;

&lt;p&gt;I've also started to use Mr. Lippert's terminology in my regular work, and I see it becoming more common in the programming communities. A brief summary of the terminology is below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fatal - exceptions that you can't prevent and cannot handle in a reasonable manner, e.g., out of memory, thread aborted.&lt;/li&gt;
&lt;li&gt;Boneheaded - exceptions that are bugs in the code, e.g., argument null, index out of range.&lt;/li&gt;
&lt;li&gt;Vexing - exceptions thrown in non-exceptional situations, e.g., parsing errors.&lt;/li&gt;
&lt;li&gt;Exogenous - exceptions due to external influences, e.g., file not found.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The question of what exactly constitutes a "non-exceptional situation" is not addressed; this is an age-old debate.&lt;/p&gt;

&lt;p&gt;Eric Lippert's post is mainly concerned with client-side code; that is, how to handle the different exception categories. When I write code, I always strive to write it as if it were going to be a library (I find that a little thought about API design goes a long way towards code reusability, even if the code never becomes an actual &lt;i&gt;library&lt;/i&gt;). Therefore, in my Word document, I added &lt;i&gt;design&lt;/i&gt; recommendations for each exception category as well.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8252102378518876128/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/02/exception-types.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8252102378518876128'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8252102378518876128'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/exception-types.html' title='Exception Types'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5762880735949654448</id><published>2011-03-24T12:53:00.000-04:00</published><updated>2011-03-24T12:53:01.805-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Firmware'/><title type='text'>The Border Case of Abs</title><content type='html'>&lt;p&gt;Things have been busy here, adjusting to two children in the house and trying to hold down two jobs! One problem I ran into on my day job was a boundary condition that I'd never seen before...&lt;/p&gt;

&lt;p&gt;Long story short: it turns out that the result of &lt;b&gt;abs(0x80000000)&lt;/b&gt; is undefined in C (in C#, &lt;b&gt;Math.Abs((int)0x80000000)&lt;/b&gt; throws an &lt;b&gt;OverflowException&lt;/b&gt;). In the C library used by my firmware, &lt;b&gt;abs(0x80000000)&lt;/b&gt; is actually a negative number (!).&lt;/p&gt;

&lt;p&gt;In my case, this caused the wrong logic path to be taken; the call to &lt;b&gt;abs&lt;/b&gt; was in an expression like &lt;b&gt;if (abs(large_unsigned - smaller_unsigned) &amp;lt; (signed_value))&lt;/b&gt;. Another programmer had added the call to &lt;b&gt;abs&lt;/b&gt; because the compiler was complaining about comparing a signed integer to an unsigned integer. As it turns out, the compiler would do an unsigned comparison when it gave that warning (which was correct). By adding the &lt;b&gt;abs&lt;/b&gt;, the programmer had introduced a very subtle bug: whenever the difference between &lt;b&gt;large_unsigned&lt;/b&gt; and &lt;b&gt;smaller_unsigned&lt;/b&gt; was &lt;i&gt;exactly&lt;/i&gt; 0x8000000, the result of &lt;b&gt;abs&lt;/b&gt; would be negative, causing the branch to be taken when it shouldn't be.&lt;/p&gt;

&lt;p&gt;I removed the &lt;b&gt;abs&lt;/b&gt; (and cast &lt;b&gt;signed_value&lt;/b&gt; to &lt;b&gt;unsigned&lt;/b&gt; to - correctly - get rid of the compiler warning). All told, it was a rather expensive mistake: two failures were seen at a customer site, and we had to set up a test bench here with several people working for several days just to find the problem.&lt;/p&gt;

&lt;p&gt;Lessons learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't "just make the compiler shut up". I'm a big proponent of warning-free code, but the correct way to get there is to first &lt;i&gt;understand&lt;/i&gt; the warning, and &lt;i&gt;then&lt;/i&gt; correct the code.&lt;/li&gt;
&lt;li&gt;There is an interesting boundary condition around &lt;b&gt;abs&lt;/b&gt;. I've already searched through the rest of the source for similar occurrences. :)&lt;/li&gt;
&lt;/ul&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5762880735949654448/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/03/border-case-of-abs.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5762880735949654448'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5762880735949654448'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/03/border-case-of-abs.html' title='The Border Case of Abs'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6658590115854493278</id><published>2011-02-20T01:19:00.000-05:00</published><updated>2011-02-20T01:19:04.179-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>SynchronizationContext Odds and Ends</title><content type='html'>&lt;p&gt;During my many adventures with SynchronizationContext, I ran into two rather interesting corner cases. Originally, these appeared as footnotes in &lt;a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx"&gt;my article&lt;/a&gt;, but they were among the first things that I cut.&lt;/p&gt;

&lt;p&gt;Both of these corner cases deal with a "missing" SynchronizationContext; that is, &lt;b&gt;SynchronizationContext.Current&lt;/b&gt; is &lt;b&gt;null&lt;/b&gt; when it shouldn't be. In this case, the default SynchronizationContext is used, which invokes all of its callbacks on the ThreadPool thread. One common symptom of this problem is that &lt;b&gt;BackgroundWorker.RunWorkerCompleted&lt;/b&gt; gets a cross-thread exception.&lt;/p&gt;

&lt;h4&gt;Missing SynchronizationContext in Office Add-Ins&lt;/h4&gt;

&lt;p&gt;I ran into this issue on the &lt;a href="http://www.webcitation.org/5wdDTMTu4"&gt;MSDN forums&lt;/a&gt;. Apparently, Microsoft Office add-ins do not have a SynchronizationContext installed when they are invoked. This appears to be a simple oversight, and is fixed by calling &lt;b&gt;SynchronizationContext.SetSynchronizationContext&lt;/b&gt;, passing a &lt;b&gt;new WindowsFormsSynchronizationContext()&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The MSDN forums have several other threads dealing with the same issue, phrased several different ways.&lt;/p&gt;

&lt;h4&gt;Missing SynchronizationContext in (old versions of) Windows Forms before Show&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.webcitation.org/5wdE1qbIg"&gt;Less than a year ago&lt;/a&gt;, Windows Forms would only install the WindowsFormsSynchronizationContext when the first Win32 window handle for that thread was created. In particular, &lt;b&gt;SynchronizationContext.Current&lt;/b&gt; was &lt;b&gt;null&lt;/b&gt; through the main form's constructor &lt;i&gt;and&lt;/i&gt; Load event. It would be set, however, by the time the Show event was invoked. One common workaround was to force the creation of the Win32 window handle (by reading the Handle property), which installed the proper SynchronizationContext as a side-effect.&lt;/p&gt;

&lt;p&gt;Fortunately, that hack is no longer necessary. Sometime in the last year, Microsoft released an update that fixes that issue all the way back to .NET 2.0 Windows Forms projects. I'm not sure which update that was.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6658590115854493278/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/02/synchronizationcontext-odds-and-ends.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6658590115854493278'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6658590115854493278'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/synchronizationcontext-odds-and-ends.html' title='SynchronizationContext Odds and Ends'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3103921052975633626</id><published>2011-02-11T23:33:00.005-05:00</published><updated>2011-05-20T16:15:37.779-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Parsing'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.KitchenSink'/><title type='text'>Option Parsing: Introduction</title><content type='html'>&lt;p&gt;Last week, &lt;a href="http://nuget.org/List/Packages/Nito.KitchenSink.OptionParsing"&gt;Nito.KitchenSink.OptionParsing&lt;/a&gt; was released on NuGet. This is a command-line option parsing library that I've used for years. Since my day job currently consists of re-architecting firmware, I figured I'd write a few posts on the Nito.KitchenSink NuGet (mini-)libraries.&lt;/p&gt;

&lt;p&gt;First, here's a little sample program to show how the option parsing library is used:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.IO;
using System.Reflection;

using Nito.KitchenSink.OptionParsing;

class Program
{
    // Define the options
    private sealed class MyOptions : OptionArgumentsBase
    {
        [Option(&amp;quot;level&amp;quot;, 'l')]
        public int? Level { get; set; }

        public static int Usage()
        {
            Console.Error.WriteLine(&amp;quot;Usage: myprog [OPTIONS]...&amp;quot;);
            Console.Error.WriteLine(&amp;quot;  -l, --level=LEVEL   Sets the level at which to operate.&amp;quot;);
            return -1;
        }
    }

    static int Main()
    {
        try
        {
            // Parse the options.
            var options = OptionParser.Parse&amp;lt;MyOptions&amp;gt;();

            // Do the requested operation.
            if (options.Level != null)
                Console.WriteLine(&amp;quot;Level: &amp;quot; + options.Level);
            return 0;
        }
        catch (OptionParsingException ex)
        {
            // Handle usage errors.
            Console.Error.WriteLine(ex.Message);
            return MyOptions.Usage();
        }
        catch (Exception ex)
        {
            // Handle operation errors.
            Console.Error.WriteLine(ex);
            return -1;
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;The sample program above only takes a single option: a "level". First, I define the option in the &lt;b&gt;MyOptions&lt;/b&gt; class, along with a static &lt;b&gt;Usage&lt;/b&gt; to display command-line usage.&lt;/p&gt;

&lt;p&gt;The actual program just parses its command-line options and then displays the level if it was specified. The error handling code distinguishes between usage errors and operating errors (all option parsing errors derive from &lt;b&gt;OptionParsingException&lt;/b&gt;).&lt;/p&gt;

&lt;p&gt;Even though the sample program only includes a single option, a lot of variety is allowed by the option parsing library:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; myprog

&amp;gt; myprog -l 3
Level: 3

&amp;gt; myprog --level 3
Level: 3

&amp;gt; myprog /level 3
Level: 3

&amp;gt; myprog /l 3
Level: 3
&lt;/pre&gt;

&lt;p&gt;By default, the Nito.KitchenSink.OptionParsing library allows short options (with a single dash), long options (with a double dash), and short &lt;i&gt;or&lt;/i&gt; long options (with a forward slash).&lt;/p&gt;

&lt;p&gt;In addition, the option argument can be separated by whitespace (as in the examples above), a full colon, or an equals sign:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; myprog /l:3
Level: 3

&amp;gt; myprog /level=3
Level: 3

&amp;gt; myprog -l=3
Level: 3
&lt;/pre&gt;

&lt;p&gt;The Nito.KitchenSink.OptionParsing library also handles common errors, and tries to give meaningful error messages:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; myprog wha?
Unknown parameter  wha?
Usage: myprog [OPTIONS]...
  -l, --level=LEVEL   Sets the level at which to operate.

&amp;gt; myprog -bad
Unknown option  b  in parameter  -bad
Usage: myprog [OPTIONS]...
  -l, --level=LEVEL   Sets the level at which to operate.

&amp;gt; myprog /bad
Unknown option  bad  in parameter  /bad
Usage: myprog [OPTIONS]...
  -l, --level=LEVEL   Sets the level at which to operate.

&amp;gt; myprog -l
Missing argument for option  level
Usage: myprog [OPTIONS]...
  -l, --level=LEVEL   Sets the level at which to operate.

&amp;gt; myprog -l null
Could not parse  null  as Int32
Usage: myprog [OPTIONS]...
  -l, --level=LEVEL   Sets the level at which to operate.
&lt;/pre&gt;

&lt;p&gt;Option parsing is case sensitive by default:&lt;/p&gt;

&lt;pre&gt;
&amp;gt; myprog /Level:3
Unknown option  Level  in parameter  /Level:3
Usage: myprog [OPTIONS]...
  -l, --level=LEVEL   Sets the level at which to operate.
&lt;/pre&gt;

&lt;p&gt;There's actually a lot of work being done in the single-line &lt;b&gt;OptionParser.Parse&amp;lt;MyOptions&amp;gt;()&lt;/b&gt;! And this post is just scratching the surface; the Nito.KitchenSink.OptionParsing library is all about flexibility and extensibility.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3103921052975633626/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/02/option-parsing-introduction.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3103921052975633626'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3103921052975633626'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/option-parsing-introduction.html' title='Option Parsing: Introduction'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8989332053059742097</id><published>2011-02-03T22:38:00.001-05:00</published><updated>2013-05-17T10:55:16.833-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='P/Invoke'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><title type='text'>NuGet Packages for Nito.KitchenSink</title><content type='html'>&lt;p&gt;Ever since NuGet was released, I've been working on changing the design of the &lt;a href="http://nitokitchensink.codeplex.com/"&gt;Nito.KitchenSink&lt;/a&gt; library. As a CodePlex project, it's acted as a "catch-all" for reusable code that wasn't large enough for its own project. NuGet provides a simple way to handle many small packages.&lt;/p&gt;

&lt;p&gt;I've been taking the more stable parts of Nito.KitchenSink, reviewing the design of each type, completing the XML documentation, and instrumenting them with Code Contracts. Tonight, the first twelve packages were published to the official NuGet feed. They all start with "Nito.KitchenSink".&lt;/p&gt;

&lt;p&gt;The KitchenSink project will continue, but this is the first step of making it into a "library collection" rather than a single library. Eventually, the huge ILMerged binary will be replaced by many independent NuGet packages and a single, smaller binary.&lt;/p&gt;

&lt;!--

&lt;p&gt;The Nito.KitchenSink packages published tonight are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;BinaryData&lt;/b&gt; - A &lt;b&gt;BinaryConverter&lt;/b&gt; class which is easier to use than &lt;a href="http://msdn.microsoft.com/en-us/library/system.bitconverter.aspx"&gt;BitConverter&lt;/a&gt; for packed byte arrays, and extension methods for displaying binary byte arrays as a string.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CRC&lt;/b&gt; - &lt;b&gt;CRC16&lt;/b&gt; and &lt;b&gt;CRC32&lt;/b&gt; classes (deriving from &lt;a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm.aspx"&gt;HashAlgorithm&lt;/a&gt;) which can implement &lt;i&gt;any&lt;/i&gt; CRC-16 or CRC-32 algorithm, and definitions for the common implementations.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Dynamic&lt;/b&gt; - Classes for dynamically accessing static type members, using the approach &lt;a href="http://blog.stephencleary.com/2010/04/dynamically-binding-to-static-class.html"&gt;described on this blog last year.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Exceptions&lt;/b&gt; - Extension methods for exceptions: preserving stack traces when re-throwing, dumping to xml, and unwrapping &lt;a href="http://msdn.microsoft.com/en-us/library/system.aggregateexception.aspx"&gt;AggregateExceptions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FileSystemPaths&lt;/b&gt; - A specialized string wrapper that provides a more OO/fluent API for &lt;a href="http://msdn.microsoft.com/en-us/library/system.io.path.aspx"&gt;System.IO.Path&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

--&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8989332053059742097/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/02/nuget-packages-for-nitokitchensink.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8989332053059742097'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8989332053059742097'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/nuget-packages-for-nitokitchensink.html' title='NuGet Packages for Nito.KitchenSink'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4929220989284630144</id><published>2011-02-01T00:05:00.006-05:00</published><updated>2011-02-03T14:18:16.256-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>MSDN Article on SynchronizationContext Published</title><content type='html'>&lt;p&gt;My first article in MSDN - &lt;a href="http://msdn.microsoft.com/en-us/magazine/gg598924.aspx"&gt;It's All About the SynchronizationContext&lt;/a&gt; - has been published in the February 2011 issue. Check it out and let me know what you think!&lt;/p&gt;

&lt;p&gt;Kudos to my wife and children for putting up with me being even busier than normal, and of course to &lt;a href="http://www.landmarkbaptist.ws/salvation"&gt;Jesus Christ&lt;/a&gt; for - well, everything!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4929220989284630144/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/02/msdn-article-on-synchronizationcontext.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4929220989284630144'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4929220989284630144'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/msdn-article-on-synchronizationcontext.html' title='MSDN Article on SynchronizationContext Published'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-844589089289050100</id><published>2011-01-21T13:58:00.000-05:00</published><updated>2013-05-17T10:54:46.303-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='dynamic'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>New Library: ConnectedProperties</title><content type='html'>&lt;p&gt;The first version of &lt;a href="http://connectedproperties.codeplex.com/"&gt;ConnectedProperties&lt;/a&gt; has been released (on both CodePlex and NuGet).&lt;/p&gt;

&lt;p&gt;It's a very simple library that allows you to dynamically attach properties to (most) objects at runtime. It uses the &lt;a href="http://blog.stephencleary.com/2010/12/conditionalweaktable.html"&gt;ConditionalWeakTable&lt;/a&gt; I posted about last month, but adds some wrapping to ensure it's used correctly.&lt;/p&gt;

&lt;p&gt;Download it, check it out, and leave some feedback (on CodePlex or the NuGet gallery, as appropriate)!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/844589089289050100/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/01/new-library-connectedproperties.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/844589089289050100'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/844589089289050100'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/01/new-library-connectedproperties.html' title='New Library: ConnectedProperties'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1768327649962323794</id><published>2011-01-19T17:00:00.007-05:00</published><updated>2011-05-04T10:28:20.835-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Code Contracts'/><category scheme='http://www.blogger.com/atom/ns#' term='Simple and Easy'/><title type='text'>Simple and Easy Code Contracts</title><content type='html'>&lt;p&gt;&lt;a href="http://research.microsoft.com/en-us/projects/contracts/"&gt;Code Contracts&lt;/a&gt; are a wonderful thing. Every new library I write uses CC right from the beginning.&lt;/p&gt;

&lt;p&gt;Here's Steve's "simple and easy" guide to getting started with Code Contracts (assuming you're writing a new library):&lt;/p&gt;

&lt;h4&gt;Project Setup&lt;/h4&gt;

&lt;p&gt;After you've downloaded and installed Code Contracts and created a library project, you need to enable CC for that library. Under the Project Properties, there is a new tab called Code Contracts. Here's the way that I like to set it up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set "Assembly Mode" to "Standard Contract Requires".&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Debug&lt;/b&gt; - Check "Perform Runtime Contract Checking" and set to "Full". Check "Call-site Requires Checking".
&lt;a href="http://2.bp.blogspot.com/_lkN-6AUYgOI/TTctkUEfelI/AAAAAAAAEDo/QxEv15AHduI/s1600/CC-debug.PNG" imageanchor="1" style=""&gt;&lt;img border="0" height="355" width="400" src="http://2.bp.blogspot.com/_lkN-6AUYgOI/TTctkUEfelI/AAAAAAAAEDo/QxEv15AHduI/s400/CC-debug.PNG" /&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Release&lt;/b&gt; - Set "Contract Reference Assembly" to "Build" and check "Emit contracts into XML doc file".
&lt;a href="http://3.bp.blogspot.com/_lkN-6AUYgOI/TTct7M3lH3I/AAAAAAAAEDw/0i1jnPgmlcI/s1600/CC-release.PNG" imageanchor="1" style=""&gt;&lt;img border="0" height="353" width="400" src="http://3.bp.blogspot.com/_lkN-6AUYgOI/TTct7M3lH3I/AAAAAAAAEDw/0i1jnPgmlcI/s400/CC-release.PNG" /&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, if you have the Academic or Commercial Premium edition of Code Contracts, add a configuration called &lt;b&gt;CodeAnalysis&lt;/b&gt; with all the settings from &lt;b&gt;Debug&lt;/b&gt; and also check "Perform Static Contract Checking" and all the other checkboxes in that section except "Baseline".&lt;/p&gt;

&lt;a href="http://4.bp.blogspot.com/_lkN-6AUYgOI/TTc3F4BLDjI/AAAAAAAAEEQ/U5Ly3FuxFOo/s1600/CC-analysis.PNG" imageanchor="1" style=""&gt;&lt;img border="0" height="355" width="400" src="http://4.bp.blogspot.com/_lkN-6AUYgOI/TTc3F4BLDjI/AAAAAAAAEEQ/U5Ly3FuxFOo/s400/CC-analysis.PNG" /&gt;&lt;/a&gt;

&lt;p&gt;This will give you three separate builds, with separate behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;CodeAnalysis&lt;/b&gt; - This evaluates all the code contracts at build time, searching for any errors. This "build" doesn't result in a usable dll, but should be run before checking in code, similar to a unit test.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Debug&lt;/b&gt; - This turns on all code contracts at runtime. This includes code contract checks for any libraries that your library uses (such as CLR libraries). It also turns on consistency checks such as &lt;b&gt;Contract.Assert&lt;/b&gt; and &lt;b&gt;ContractInvariantMethod&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Release&lt;/b&gt; - This turns off all code contracts in your dll at runtime. However, it includes a separate ".Contracts.dll" which contains the contracts for your library's public API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Projects &lt;i&gt;consuming&lt;/i&gt; your library should reference your &lt;b&gt;Release&lt;/b&gt; build. In their &lt;b&gt;Debug&lt;/b&gt; configuration, they should check "Perform Runtime Contract Checking" and "Call-site Requires Checking"; this will ensure that the code contracts for your library's public API are enforced at runtime (the "Call-site" option uses the ".Contracts.dll" assembly that you built). In their &lt;b&gt;Release&lt;/b&gt; configuration, they should leave code contracts disabled, which allows all assemblies to run at full speed.&lt;/p&gt;

&lt;a href="http://1.bp.blogspot.com/_lkN-6AUYgOI/TTct7ry5LrI/AAAAAAAAEEA/m5xPg-lUmzo/s1600/CC-consumer-debug.PNG" imageanchor="1" style=""&gt;&lt;img border="0" height="354" width="400" src="http://1.bp.blogspot.com/_lkN-6AUYgOI/TTct7ry5LrI/AAAAAAAAEEA/m5xPg-lUmzo/s400/CC-consumer-debug.PNG" /&gt;&lt;/a&gt;
&lt;a href="http://2.bp.blogspot.com/_lkN-6AUYgOI/TTct73ex9II/AAAAAAAAEEI/0iSZVJvS8XY/s1600/CC-consumer-release.PNG" imageanchor="1" style=""&gt;&lt;img border="0" height="353" width="400" src="http://2.bp.blogspot.com/_lkN-6AUYgOI/TTct73ex9II/AAAAAAAAEEI/0iSZVJvS8XY/s400/CC-consumer-release.PNG" /&gt;&lt;/a&gt;

&lt;p&gt;If the consuming project suspects a bug in your library (i.e., their &lt;b&gt;Debug&lt;/b&gt; build doesn't cause any Contracts violations but your library is still not behaving as expected), they can remove the reference to your &lt;b&gt;Release&lt;/b&gt; build and add a reference to your &lt;b&gt;Debug&lt;/b&gt; build. This is an easy way to enable all the code contract checks in your library, even the internal ones.&lt;/p&gt;

&lt;h4&gt;Preconditions (Contract.Requires)&lt;/h4&gt;

&lt;p&gt;Preconditions require some condition at the beginning of a method. Common examples are requiring a parameter to be non-null, or to require the object to be in a particular state.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public string GetObjectInfo(object obj)
{
  Contract.Requires(obj != null);
  return obj.ToString();
}
&lt;/pre&gt;

&lt;h4&gt;Postconditions (Contract.Ensures)&lt;/h4&gt;

&lt;p&gt;Postconditions guarantee some condition at the end of a method. It is often used with Contract.Result to guarantee that a particular method won't return null.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
private string name; // never null
public string Name
{
  get
  {
    Contract.Ensures(Contract.Result&amp;lt;string&amp;gt;() != null);
    return this.name;
  }
}
&lt;/pre&gt;

&lt;h4&gt;Preconditions and Postconditions on Interfaces&lt;/h4&gt;

&lt;p&gt;Both preconditions and postconditions are commonly placed on interface members. Code Contracts includes the ContractClassAttribute and ContractClassForAttribute to facilitate this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[ContractClass(typeof(MyInterfaceContracts))]
public interface IMyInterface
{
  string GetObjectInfo(object obj);
  string Name { get; }
}

[ContractClassFor(typeof(IMyInterface))]
internal abstract class MyInterfaceContracts : IMyInterface
{
  public string GetObjectInfo(object obj)
  {
    Contract.Requires(obj != null);
    return null; // fake implementation
  }

  public string Name
  {
    get
    {
      Contract.Ensures(Contract.Result&amp;lt;string&amp;gt;() != null);
      return null; // fake implementation does not need to satisfy postcondition
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;With generic interfaces, the same idea holds:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[ContractClass(typeof(MyInterfaceContracts&amp;lt;,&amp;gt;))]
public interface IMyInterface&amp;lt;T, U&amp;gt;
{
  string GetObjectInfo(object obj);
  string Name { get; }
}

[ContractClassFor(typeof(IMyInterface&amp;lt;,&amp;gt;))]
internal abstract class MyInterfaceContracts&amp;lt;T, U&amp;gt; : IMyInterface&amp;lt;T, U&amp;gt;
{
  public string GetObjectInfo(object obj)
  {
    Contract.Requires(obj != null);
    return null; // fake implementation
  }

  public string Name
  {
    get
    {
      Contract.Ensures(Contract.Result&amp;lt;string&amp;gt;() != null);
      return null; // fake implementation does not need to satisfy postcondition
    }
  }
}
&lt;/pre&gt;

&lt;h4&gt;Invariants (ContractInvariantMethod, Contract.Invariant)&lt;/h4&gt;

&lt;p&gt;Object invariants are expressed using the ContractInvariantMethod. If they are enabled by the build, then they are checked at the beginning of each method (except constructors) and at the end of each method (except Dispose and the finalizer).&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public class MyClass&amp;lt;T, U&amp;gt;: public IMyInterface&amp;lt;T, U&amp;gt;
{
  private string name;

  public MyClass(string name)
  {
    Contract.Requires(name != null);
    this.name = name;
  }

  [ContractInvariantMethod]
  private void ObjectInvariant()
  {
    Contract.Invariant(this.name != null);
  }

  public string Name
  {
    get
    {
      Contract.Ensures(Contract.Result&amp;lt;string&amp;gt;() != null);
      return this.name;
    }
  }

  public string GetObjectInfo(object obj)
  {
    Contract.Requires(obj != null);
    return obj.ToString();
  }
}
&lt;/pre&gt;

&lt;h4&gt;Assertions and Assumptions (Contract.Assert, Contract.Assume)&lt;/h4&gt;

&lt;p&gt;There will always be some things that should be true but just have to be checked at runtime. For these, use Contract.Assert unless the static checker (i.e., the CodeAnalysis configuration) complains. You can then change them to be Contract.Assume so that the static checker can use them. There's no difference between Contract.Assert and Contract.Assume at runtime.&lt;/p&gt;

&lt;p&gt;Reminder: if you're using the &lt;b&gt;Release&lt;/b&gt; build setup recommended above, then all your &lt;b&gt;Contract.Assert&lt;/b&gt; and &lt;b&gt;Contract.Assume&lt;/b&gt; calls get removed from your release builds. So they can't be used to throw vexing exceptions, e.g., rejecting invalid input.&lt;/p&gt;

&lt;p&gt;In the example below, the static checker would complain because &lt;b&gt;Type.MakeGenericType&lt;/b&gt; has preconditions that are difficult to prove. So we give it a little help by inserting some &lt;b&gt;Contract.Assume&lt;/b&gt; calls, and the static checker is then pacified.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public static IMyInterface&amp;lt;T, U&amp;gt; CreateUsingReflection()
{
  var openGenericReturnType = typeof(MyClass&amp;lt;,&amp;gt;);
  Contract.Assume(openGenericReturnType.IsGenericTypeDefinition);
  Contract.Assume(openGenericReturnType.GetGenericArguments().Length == 2);
  var constructedGenericReturnType = openGenericReturnType.MakeGenericType(typeof(T), typeof(U));
  return (IMyInterface&amp;lt;T, U&amp;gt;)Activator.CreateInstance(constructedGenericReturnType);
}
&lt;/pre&gt;

&lt;h4&gt;For More Information&lt;/h4&gt;

&lt;p&gt;The Code Contracts library has a thorough &lt;a href="http://research.microsoft.com/en-us/projects/contracts/userdoc.pdf"&gt;user manual&lt;/a&gt; available. It's a bit of a hard read, but they include a lot of information that I've skipped for this "intro" post, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specifying postconditions that hold even if the method throws an exception.&lt;/li&gt;
&lt;li&gt;Techniques for gradually migrating Code Contracts into an existing library.&lt;/li&gt;
&lt;li&gt;Details on how Code Contracts are inherited.&lt;/li&gt;
&lt;li&gt;Contract abbreviations.&lt;/li&gt;
&lt;li&gt;Applying contracts to sequences (e.g., &lt;b&gt;ForAll&lt;/b&gt; and &lt;b&gt;Exists&lt;/b&gt; quantifiers).&lt;/li&gt;
&lt;li&gt;Advanced contract checking with &lt;b&gt;Pure&lt;/b&gt; methods.&lt;/li&gt;
&lt;li&gt;Tips for working with the static checker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another great source of information is Jon Skeet's updated &lt;a href="http://www.amazon.com/gp/product/1935182471?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1935182471"&gt;C# in Depth&lt;/a&gt; - the second edition added a whole chapter just on Code Contracts.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1768327649962323794/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/01/simple-and-easy-code-contracts.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1768327649962323794'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1768327649962323794'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/01/simple-and-easy-code-contracts.html' title='Simple and Easy Code Contracts'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/_lkN-6AUYgOI/TTctkUEfelI/AAAAAAAAEDo/QxEv15AHduI/s72-c/CC-debug.PNG' height='72' width='72'/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3331235068411895984</id><published>2011-01-14T11:46:00.003-05:00</published><updated>2014-05-16T16:25:58.285-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Sharp Corners'/><title type='text'>Sharp Corner: Reference Types, Value Types, and Weirdos</title><content type='html'>&lt;p&gt;This week I was writing some code that had to respond differently depending on whether a generic argument was a &lt;i&gt;reference type&lt;/i&gt; or a &lt;i&gt;value type&lt;/i&gt;. This was bit complex, since "reference type" and "value type" do not have very specific meanings - which was actually a good thing because it forced me to consider &lt;i&gt;exactly&lt;/i&gt; what my code requirements were, and it turned out that I was using just slightly different meanings of "reference type" in different places.&lt;/p&gt;

&lt;p&gt;During this exploration, I developed a few tests to evaluate the type system (code at the end of this post). The results are summarized below, along with some of my thoughts on the weirdos (types which are sort-of reference and sort-of value, depending on your definition of "reference" and "value").&lt;/p&gt;

&lt;p&gt;One way of defining a "reference type" is whether &lt;a href="http://msdn.microsoft.com/en-us/library/system.type.isclass.aspx"&gt;Type.IsClass&lt;/a&gt; is true; another way of defining a "reference type" is whether it satisfies a &lt;a href="http://msdn.microsoft.com/en-us/library/d5x73970.aspx"&gt;generic class constraint&lt;/a&gt; (e.g., &lt;i&gt;void Test&amp;lt;T&amp;gt;() where T : class&lt;/i&gt;). Likewise, value types have &lt;a href="http://msdn.microsoft.com/en-us/library/system.type.isvaluetype.aspx"&gt;Type.IsValueType&lt;/a&gt; and generic struct constraints.&lt;/p&gt;

&lt;p&gt;The table below includes tests on a variety of types, grouped into "mostly reference types" and "mostly value types". The types that are more clearly reference/value types are at the top of each group, with the weirdos at the bottom.&lt;/p&gt;

&lt;table border="1"&gt;
&lt;tr&gt;
  &lt;th width="20%"&gt;Category&lt;/th&gt;
  &lt;th width="30%"&gt;Example Type&lt;/th&gt;
  &lt;th width="10%"&gt;IsClass&lt;/th&gt;
  &lt;th width="10%"&gt;Satisfies class Constraint&lt;/th&gt;
  &lt;th width="10%"&gt;IsValueType&lt;/th&gt;
  &lt;th width="10%"&gt;Satisfies struct Constraint&lt;/th&gt;
  &lt;th width="10%"&gt;Satisfies Without Constraints&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Classes&lt;/td&gt;
 &lt;td&gt;class Class {}&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Arrays&lt;/td&gt;
 &lt;td&gt;int[]&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Delegates&lt;/td&gt;
 &lt;td&gt;delegate void DelegateT();&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Interfaces&lt;/td&gt;
 &lt;td&gt;interface Interface {}&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Pointers&lt;/td&gt;
 &lt;td&gt;int*&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr height="10"/&gt;
&lt;tr&gt;
 &lt;td&gt;Value types&lt;/td&gt;
 &lt;td&gt;int&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Enumerations&lt;/td&gt;
 &lt;td&gt;enum EnumT {}&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Nullable value types&lt;/td&gt;
 &lt;td&gt;int?&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;Void&lt;/td&gt;
 &lt;td&gt;void&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#00ff00"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
 &lt;td bgcolor="#ff0000"&gt;&amp;#160;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;h4&gt;Interfaces are a Bit Weird&lt;/h4&gt;

&lt;p&gt;Interfaces return false for both &lt;b&gt;IsClass&lt;/b&gt; and &lt;b&gt;IsValueType&lt;/b&gt;. This makes sense, since either reference types or value types may inherit from an interface. However, interface variables may be declared and act like reference types (boxing value types as necessary), so interfaces do satisfy generic &lt;b&gt;class&lt;/b&gt; constraints.&lt;/p&gt;

&lt;blockquote&gt;Take-home point: If &lt;b&gt;IsClass&lt;/b&gt; is false but &lt;b&gt;IsInterface&lt;/b&gt; is true, the type will still satisfy a generic &lt;b&gt;class&lt;/b&gt; constraint.&lt;/blockquote&gt;

&lt;h4&gt;Nullable Value Types are a Bit Weird&lt;/h4&gt;

&lt;p&gt;Nullable types return true for &lt;b&gt;IsValueType&lt;/b&gt;, but do not satisfy generic &lt;b&gt;struct&lt;/b&gt; constraints (nor &lt;b&gt;class&lt;/b&gt; constraints). They can only be used as generic parameters without &lt;b&gt;class&lt;/b&gt; or &lt;b&gt;struct&lt;/b&gt; constraints.&lt;/p&gt;

&lt;blockquote&gt;Take-home point: Nullable types &lt;b&gt;(type.IsGenericType &amp;amp;&amp;amp; type.GetGenericTypeDefinition() == typeof(Nullable&amp;lt;&amp;gt;))&lt;/b&gt; will not satisfy a generic &lt;b&gt;struct&lt;/b&gt; constraint, even though &lt;b&gt;IsValueType&lt;/b&gt; is true.&lt;/blockquote&gt;

&lt;h4&gt;Pointers are Definitely Weird&lt;/h4&gt;

&lt;p&gt;To be honest, I don't know &lt;a href="http://stackoverflow.com/questions/3317587/why-are-pointers-reference-types"&gt;why IsClass is true for pointers&lt;/a&gt; (the spec says they are, but without any reason given). They act exactly like value types, and they can't satisfy a generic &lt;b&gt;class&lt;/b&gt; constraint. In fact, they can't be used as any kind of generic argument. This makes pointer types a corner case: they only have to be dealt with if the user is passing a Type instance rather than a generic type argument.&lt;/p&gt;

&lt;blockquote&gt;Take-home point: If &lt;b&gt;IsPointer&lt;/b&gt; is true, then the type cannot be used as a generic type parameter at all (and therefore cannot satisfy a &lt;b&gt;class&lt;/b&gt; constraint, even though &lt;b&gt;IsClass&lt;/b&gt; is true).&lt;/blockquote&gt;

&lt;h4&gt;Void is Definitely Weird&lt;/h4&gt;

&lt;p&gt;Void claims to be a value type (&lt;b&gt;IsValueType&lt;/b&gt; is true) - which sort of makes sense, if we think of it as a value type that cannot have a value - but it cannot satisfy a &lt;b&gt;struct&lt;/b&gt; constraint. In fact, like pointers, &lt;b&gt;void&lt;/b&gt; cannot be used as a generic type argument at all. This makes &lt;b&gt;void&lt;/b&gt; another corner case: they only have to be dealt with if the user is passing a Type instance rather than a generic type argument.&lt;/p&gt;

&lt;blockquote&gt;Take-home point: The &lt;b&gt;void&lt;/b&gt; type &lt;b&gt;(type == typeof(void))&lt;/b&gt; cannot be used as a generic type parameter at all (and therefore cannot satisfy a &lt;b&gt;struct&lt;/b&gt; constraint, even though &lt;b&gt;IsValueType&lt;/b&gt; is true).&lt;/blockquote&gt;

&lt;h4&gt;Test Code&lt;/h4&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TypeSystemTests
{
    internal static class TypeEx
    {
        public static void NoConstraint&amp;lt;T&amp;gt;() { }
        public static void StructConstraint&amp;lt;T&amp;gt;() where T : struct { }
        public static void ClassConstraint&amp;lt;T&amp;gt;() where T : class { }

        public static bool CanBeUsedAsGenericParameter(this Type type)
        {
            try
            {
                typeof(TypeEx).GetMethod(&amp;quot;NoConstraint&amp;quot;).MakeGenericMethod(type).Invoke(null, null);
                return true;
            }
            catch
            {
                return false;
            }
        }

        public static bool SatisfiesGenericStructConstraint(this Type type)
        {
            try
            {
                typeof(TypeEx).GetMethod(&amp;quot;StructConstraint&amp;quot;).MakeGenericMethod(type).Invoke(null, null);
                return true;
            }
            catch
            {
                return false;
            }
        }

        public static bool SatisfiesGenericClassConstraint(this Type type)
        {
            try
            {
                typeof(TypeEx).GetMethod(&amp;quot;ClassConstraint&amp;quot;).MakeGenericMethod(type).Invoke(null, null);
                return true;
            }
            catch
            {
                return false;
            }
        }

        public static bool IsVoid(this Type type)
        {
            return (type == typeof(void));
        }

        public static bool IsNullable(this Type type)
        {
            return (type.IsGenericType &amp;amp;&amp;amp; type.GetGenericTypeDefinition() == typeof(Nullable&amp;lt;&amp;gt;));
        }
    }

    [TestClass]
    public class UnitTests
    {
        public class Class { }
        [TestMethod]
        public void Classes()
        {
            var type = typeof(Class);
            Assert.IsTrue(type.IsClass);
            Assert.IsTrue(type.SatisfiesGenericClassConstraint());
            Assert.IsFalse(type.IsValueType);
            Assert.IsFalse(type.SatisfiesGenericStructConstraint());
            Assert.IsTrue(type.CanBeUsedAsGenericParameter());

            Assert.IsFalse(type.IsArray);
            Assert.IsFalse(type.IsEnum);
            Assert.IsFalse(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsFalse(type.IsVoid());
            Assert.IsFalse(type.IsNullable());
        }

        [TestMethod]
        public void Arrays()
        {
            var type = typeof(int[]);
            Assert.IsTrue(type.IsClass);
            Assert.IsTrue(type.SatisfiesGenericClassConstraint());
            Assert.IsFalse(type.IsValueType);
            Assert.IsFalse(type.SatisfiesGenericStructConstraint());
            Assert.IsTrue(type.CanBeUsedAsGenericParameter());

            Assert.IsTrue(type.IsArray);
            Assert.IsFalse(type.IsEnum);
            Assert.IsFalse(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsFalse(type.IsVoid());
            Assert.IsFalse(type.IsNullable());
        }

        public delegate void DelegateT();
        [TestMethod]
        public void Delegates()
        {
            var type = typeof(DelegateT);
            Assert.IsTrue(type.IsClass);
            Assert.IsTrue(type.SatisfiesGenericClassConstraint());
            Assert.IsFalse(type.IsValueType);
            Assert.IsFalse(type.SatisfiesGenericStructConstraint());
            Assert.IsTrue(type.CanBeUsedAsGenericParameter());

            Assert.IsFalse(type.IsArray);
            Assert.IsFalse(type.IsEnum);
            Assert.IsFalse(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsFalse(type.IsVoid());
            Assert.IsFalse(type.IsNullable());
        }

        public interface Interface { }
        [TestMethod]
        public void Interfaces()
        {
            var type = typeof(Interface);
            Assert.IsFalse(type.IsClass);
            Assert.IsTrue(type.SatisfiesGenericClassConstraint());
            Assert.IsFalse(type.IsValueType);
            Assert.IsFalse(type.SatisfiesGenericStructConstraint());
            Assert.IsTrue(type.CanBeUsedAsGenericParameter());

            Assert.IsFalse(type.IsArray);
            Assert.IsFalse(type.IsEnum);
            Assert.IsTrue(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsFalse(type.IsVoid());
            Assert.IsFalse(type.IsNullable());
        }

        [TestMethod]
        public void Pointers()
        {
            unsafe
            {
                var type = typeof(int*);
                Assert.IsTrue(type.IsClass);
                Assert.IsFalse(type.SatisfiesGenericClassConstraint());
                Assert.IsFalse(type.IsValueType);
                Assert.IsFalse(type.SatisfiesGenericStructConstraint());
                Assert.IsFalse(type.CanBeUsedAsGenericParameter());

                Assert.IsFalse(type.IsArray);
                Assert.IsFalse(type.IsEnum);
                Assert.IsFalse(type.IsInterface);
                Assert.IsTrue(type.IsPointer);
                Assert.IsFalse(type.IsVoid());
                Assert.IsFalse(type.IsNullable());
            }
        }


        [TestMethod]
        public void ValueTypes()
        {
            var type = typeof(int);
            Assert.IsFalse(type.IsClass);
            Assert.IsFalse(type.SatisfiesGenericClassConstraint());
            Assert.IsTrue(type.IsValueType);
            Assert.IsTrue(type.SatisfiesGenericStructConstraint());
            Assert.IsTrue(type.CanBeUsedAsGenericParameter());

            Assert.IsFalse(type.IsArray);
            Assert.IsFalse(type.IsEnum);
            Assert.IsFalse(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsFalse(type.IsVoid());
            Assert.IsFalse(type.IsNullable());
        }

        public enum EnumT { }
        [TestMethod]
        public void Enums()
        {
            var type = typeof(EnumT);
            Assert.IsFalse(type.IsClass);
            Assert.IsFalse(type.SatisfiesGenericClassConstraint());
            Assert.IsTrue(type.IsValueType);
            Assert.IsTrue(type.SatisfiesGenericStructConstraint());
            Assert.IsTrue(type.CanBeUsedAsGenericParameter());

            Assert.IsFalse(type.IsArray);
            Assert.IsTrue(type.IsEnum);
            Assert.IsFalse(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsFalse(type.IsVoid());
            Assert.IsFalse(type.IsNullable());
        }

        [TestMethod]
        public void NullableValueTypes()
        {
            var type = typeof(int?);
            Assert.IsFalse(type.IsClass);
            Assert.IsFalse(type.SatisfiesGenericClassConstraint());
            Assert.IsTrue(type.IsValueType);
            Assert.IsFalse(type.SatisfiesGenericStructConstraint());
            Assert.IsTrue(type.CanBeUsedAsGenericParameter());

            Assert.IsFalse(type.IsArray);
            Assert.IsFalse(type.IsEnum);
            Assert.IsFalse(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsFalse(type.IsVoid());
            Assert.IsTrue(type.IsNullable());
        }

        [TestMethod]
        public void Void()
        {
            var type = typeof(void);
            Assert.IsFalse(type.IsClass);
            Assert.IsFalse(type.SatisfiesGenericClassConstraint());
            Assert.IsTrue(type.IsValueType);
            Assert.IsFalse(type.SatisfiesGenericStructConstraint());
            Assert.IsFalse(type.CanBeUsedAsGenericParameter());

            Assert.IsFalse(type.IsArray);
            Assert.IsFalse(type.IsEnum);
            Assert.IsFalse(type.IsInterface);
            Assert.IsFalse(type.IsPointer);
            Assert.IsTrue(type.IsVoid());
            Assert.IsFalse(type.IsNullable());
        }
    }
}
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3331235068411895984/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2011/01/sharp-corner-reference-types-value.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3331235068411895984'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3331235068411895984'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/01/sharp-corner-reference-types-value.html' title='Sharp Corner: Reference Types, Value Types, and Weirdos'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4542762408625449708</id><published>2011-01-03T13:11:00.001-05:00</published><updated>2011-01-27T13:03:56.337-05:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Partial Reverse-Engineering of E2ETraceEvent</title><content type='html'>- Description of E2ETraceEvent (E2E stands for "end-to-end"; used by WCF and XmlWriterTraceListener.

- TraceRecord and derived classes are used to log detailed information in WCF: http://msdn.microsoft.com/en-us/library/microsoft.servicemodel.channels.common.tracerecord.aspx

- Calling TraceData, passing XPathNavigator(s) as parameters, enables the injection of unescaped XML into /E2ETraceEvent/ApplicationData/TraceData as DataItem elements.

- When TraceRecords are used, the DataItem element contains a single TraceRecord element with namespace http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord.

- TraceRecord element:
  - @Severity - the TraceEventType.
  - TraceIdentifier - an MSDN url for more information about the error.
  - Description - text description of the trace.
  - AppDomain - AppDomain.CurrentDomain.FriendlyName.
  - Source (optional) - type of the source + "/" + hash code of the source.
  - ExtendedData (optional) - TraceRecord detailed information.
  - Exception (optional)
    - ExceptionType - the assembly-qualified type of the exception.
    - Message - the exception message.
    - StackTrace - the exception stack trace, if present; otherwise, the stack trace of the thread calling the tracing method.
    - NativeErrorCode (optional) - the Win32 error in hex.
    - DataItems (optional) - the Exception.Data information.
      - Data
        - Key
        - Value
    - InnerException (optional) - same as the Exception element.

- ExtendedData element:
  - xml namespace of http://schemas.microsoft.com/2006/08/ServiceModel/&lt;b&gt;EventId&lt;/b&gt;TraceRecord
  - May contain any kind of xml; examples:
    - StringTraceRecord defines a single xml element with a single string value.
    - DictionaryTraceRecord defines a single xml element for each entry in a dictionary, with the dictionary keys being the element names and the dictionary values being the element values.

- System element:
  - EventID - the eventId passed to the tracing methods.
  - Type - always 3
  - SubType - has a Name attribute set to the TraceEventType; the value is always 0
  - Level - value of the TraceEventType (?)
  - TimeCreated[@SystemTime] - timestamp
  - Source[@Name] - TraceSource name
  - Correlation - used for TraceEventType.Transfer: @ActivityID is the current ActivityId; @RelatedActivityID is the new ActivityId.
  - Execution[@ProcessName, @ProcessID, @ThreadID] - identifies the process and thread doing the tracing
  - Channel - always empty
  - Computer - the computer doing the tracing.
- ApplicationData element: contains application-specific trace information.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4542762408625449708'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4542762408625449708'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-23935310675924689</id><published>2010-12-30T20:42:00.001-05:00</published><updated>2014-05-16T16:28:41.906-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Simple and Easy'/><title type='text'>Simple and Easy Tracing in .NET</title><content type='html'>&lt;p&gt;.NET includes a fairly complete tracing framework built right in, but there isn't much in the way of "getting started" tutorials that provide best practices. So, here's a simple guide to the built-in .NET tracing support, skipping all the hard stuff. :)&lt;/p&gt;

&lt;h4&gt;Define the TraceSource&lt;/h4&gt;

&lt;p&gt;One &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.aspx"&gt;TraceSource&lt;/a&gt; should be defined per "component." The "component" is up to you; it's a group of trace statements that can be enabled or disabled together.&lt;/p&gt;

&lt;p&gt;A &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.aspx"&gt;TraceSource&lt;/a&gt; needs a name, and that name should be globally unique. Something like "MyCompany.MyProduct.MyComponent" should suffice.&lt;/p&gt;

&lt;p&gt;You usually want to define the &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.aspx"&gt;TraceSource&lt;/a&gt; as a &lt;b&gt;static&lt;/b&gt; member of a class being traced. The example code below uses a &lt;b&gt;private static&lt;/b&gt; &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.aspx"&gt;TraceSource&lt;/a&gt;, but if other classes use the same source, you may prefer &lt;b&gt;internal static&lt;/b&gt;:&lt;/p&gt;

&lt;pre class="style:csharp"&gt;
public class MyComponentClass
{
  private readonly static TraceSource Tracer = new TraceSource("MyCompany.MyProduct.MyComponent");
  ...
}
&lt;/pre&gt;

&lt;h4&gt;Use the TraceSource&lt;/h4&gt;

&lt;p&gt;Add calls to &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.aspx"&gt;TraceSource&lt;/a&gt; methods where you want tracing to take place:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public void Frob(string arg)
{
  Tracer.TraceInformation("Frobbing " + arg);
  ...
}
&lt;/pre&gt;

&lt;p&gt;The &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.aspx"&gt;TraceSource&lt;/a&gt; class provides several tracing methods; the most common are &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.traceinformation.aspx"&gt;TraceInformation&lt;/a&gt; (used for informational message) and &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.tracesource.traceevent.aspx"&gt;TraceEvent&lt;/a&gt; (used for any type of message).&lt;/p&gt;

&lt;p&gt;The types of messages &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.traceeventtype.aspx"&gt;include&lt;/a&gt; (in increasing order of severity): Verbose, Information, Warning, Error, and Critical.&lt;/p&gt;

&lt;h4&gt;Enable the TraceSource&lt;/h4&gt;

&lt;p&gt;Defining and using the TraceSource is all the changes that need to be made to the code. However, running the code above will not actually cause any tracing to be done at runtime, because the TraceSource is not enabled.&lt;/p&gt;

&lt;p&gt;To enable the TraceSource, you'll need to merge the following with your app.config or web.config (and restart the application):&lt;/p&gt;

&lt;pre class="brush:xml"&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;system.diagnostics&amp;gt;
    &amp;lt;sources&amp;gt;
      &amp;lt;source name="MyCompany.MyProduct.MyComponent" switchValue="All" /&amp;gt;
    &amp;lt;/sources&amp;gt;
  &amp;lt;/system.diagnostics&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;

&lt;p&gt;The switchValue attribute &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.sourcelevels.aspx"&gt;may be set to&lt;/a&gt; Off, Critical, Error, Warning, Information, Verbose, or All. This setting interacts with the TraceEvent message types exactly as you'd expect:&lt;/p&gt;

&lt;table border="1"&gt;
&lt;tr&gt;&lt;th/&gt;&lt;th&gt;Verbose&lt;/th&gt;&lt;th&gt;Information&lt;/th&gt;&lt;th&gt;Warning&lt;/th&gt;&lt;th&gt;Error&lt;/th&gt;&lt;th&gt;Critical&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Off&lt;/th&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Critical&lt;/th&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Error&lt;/th&gt;&lt;td/&gt;&lt;td/&gt;&lt;td/&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Warning&lt;/th&gt;&lt;td/&gt;&lt;td/&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Information&lt;/th&gt;&lt;td/&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Verbose&lt;/th&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;All&lt;/th&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Tip: you can leave the &lt;b&gt;source&lt;/b&gt; element defined in your app.config / web.config when you deploy to production. As long as its switchValue is set to Off, it won't actually trace but it's easy to find and turn on.&lt;/p&gt;

&lt;p&gt;Another tip: TraceSource works the same in both Debug and Release builds, so it's great for instrumenting an application heading to production where you want to enable or disable the tracing without recompiling.&lt;/p&gt;

&lt;h4&gt;Observe the Trace Messages&lt;/h4&gt;

&lt;p&gt;Simple tracing can be observed in one of two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you run the application in the Visual Studio Debugger, all enabled trace output is written to the Output window.&lt;/li&gt;
&lt;li&gt;If you're running in production (or for some other reason can't use the debugger), a free Microsoft tool called &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb896647"&gt;DebugView&lt;/a&gt; may be used to view the traces in real-time (and optionally log them to a file). Tip: uncheck "Options" "Force Carriage Returns" to make the trace output line up correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;More Power!&lt;/h4&gt;

&lt;p&gt;This blog post just scratched the surface of the complexity of the built-in .NET tracing system. It is extensible in many ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can add "trace listeners". The simple tracing above just uses the Default trace listener. .NET also includes listeners for logging to the Event Log, a text file, an XML file, or the Console. In addition, you can write your own trace listener (e.g., a rollover log so that the file doesn't get too large).&lt;/li&gt;
&lt;li&gt;You can add trace switches. Our simple tracing just sets a single switchValue for each TraceSource. It's possible to add trace switches that are shared between multiple trace sources. In addition, you can define your own &lt;i&gt;type&lt;/i&gt; of trace switch.&lt;/li&gt;
&lt;li&gt;You can add trace filters. For example, it's possible to put in a trace filter that sends some messages to one trace listener and other messages to another trace listener. You can also define your own trace filter type, if the built-in ones aren't sufficient.&lt;/li&gt;
&lt;li&gt;There are additional types of messages that fall under "ActivityTracing": Start, Stop, etc. These can be used in addition to the existing Verbose to Critical hierarchy.&lt;/li&gt;
&lt;li&gt;There's a &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.trace.correlationmanager.aspx"&gt;Trace.CorrelationManager&lt;/a&gt; class that enables "grouping" of traces into logical operations. This is used in conjection with the ActivityTracing messages to relate traces together that would otherwise get intermixed with other traces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information, see &lt;a href="http://stackoverflow.com/questions/576185/logging-best-practices/939944#939944"&gt;this SO answer&lt;/a&gt; and the &lt;a href="http://msdn.microsoft.com/en-us/library/zs6s4h68.aspx"&gt;MSDN documentation&lt;/a&gt;. Also, check out &lt;a href="http://essentialdiagnostics.codeplex.com/"&gt;Essential Diagnostics&lt;/a&gt; on CodePlex before writing your own extensions; the most useful things have already been done.&lt;/p&gt;

&lt;h4&gt;Other TraceSources&lt;/h4&gt;

&lt;p&gt;Many people aren't aware that a lot of the .NET built-in libraries have already been instrumented with their own TraceSources. &lt;a href="http://msdn.microsoft.com/en-us/library/ty48b824(v=VS.100).aspx"&gt;Network activity&lt;/a&gt;, for example, or &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.presentationtracesources.aspx"&gt;tons of tracing for WPF&lt;/a&gt;. The two that I've found most useful are &lt;b&gt;System.Net.Sockets&lt;/b&gt; for TCP/IP sockets and &lt;b&gt;System.Windows.Data&lt;/b&gt; for debugging data binding errors. There are probably many more out there...&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/23935310675924689/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/12/simple-and-easy-tracing-in-net.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/23935310675924689'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/23935310675924689'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/12/simple-and-easy-tracing-in-net.html' title='Simple and Easy Tracing in .NET'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5051895104372771285</id><published>2010-12-24T14:31:00.000-05:00</published><updated>2010-12-24T14:31:38.604-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Lighter Notes'/><title type='text'>On a Lighter Note: "Wii Me"?</title><content type='html'>&lt;p&gt;Advances in technology often cause changes in language. Most people these days know what a "tweet" is, even if they don't use the term themselves.&lt;/p&gt;

&lt;p&gt;This last Wednesday shortly before &lt;a href="http://www.landmarkbaptist.ws/"&gt;church&lt;/a&gt;, I asked one of the fellows if I had his email address. He replied, "Wii me." This is the first time I'd heard that term, and - even though the meaning was &lt;a href="http://en.wikipedia.org/wiki/Wii_Menu#Message_Board"&gt;obvious&lt;/a&gt; - I had to pause for a moment before replying "&lt;i&gt;Wii&lt;/i&gt; you??"&lt;/p&gt;

&lt;p&gt;I don't think the phrase "Wii me" will catch on, but we both had a good laugh over it. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5051895104372771285/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/12/on-lighter-note-wii-me.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5051895104372771285'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5051895104372771285'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/12/on-lighter-note-wii-me.html' title='On a Lighter Note: &quot;Wii Me&quot;?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9019132320541620871</id><published>2010-12-21T16:30:00.001-05:00</published><updated>2011-01-22T20:45:59.369-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='dynamic'/><category scheme='http://www.blogger.com/atom/ns#' term='Language design'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>ConditionalWeakTable</title><content type='html'>&lt;p&gt;I prefer to find bugs as early as possible. Starting unit tests early-on is a big helper towards that goal; unfortunately, I do find myself sometimes banging out code on tight time constraints, and I skip my unit tests. (Oh, how embarassing! I just admitted that right out in public and everything!)&lt;/p&gt;

&lt;p&gt;Back in the pre-unit-testing world, when dinosaurs roamed the earth, there was another approach to finding bugs early: static typing. This is why I had (and - to be honest - still have) a preference for statically typed languages. If the compiler finds a bug, then that's one less bug I have to run into at runtime.&lt;/p&gt;

&lt;p&gt;That said, dynamic languages are also awesome. I love the ability to do runtime binding with ease, and modify the structure of existing objects after they've been constructed. I do enough work in JavaScript to stand in awe of the language, and I've stated several times that Python is one of the best-designed languages in the world.&lt;/p&gt;

&lt;p&gt;.NET 4.0 added the dynamic language runtime, allowing dynamic .NET languages to &lt;i&gt;truly&lt;/i&gt; exist for the first time. C# received much of the power of dynamic languages by adding the &lt;b&gt;dynamic&lt;/b&gt; keyword. I was one of the ones cheering when this (finally) took place.&lt;/p&gt;

&lt;p&gt;Now, I'm still a fan of statically-typed languages. In fact, I wish C# would add something equivalent to the extreme power and flexibility of C++ templates (supporting at least static polymorphism and implicit invokation of type generators). However, there are times when it's wonderful to just side-step the static typing and do something a bit "out of the box," and &lt;b&gt;dynamic&lt;/b&gt; is just the ticket. Late binding, for example, or Reflection code that doesn't cause your fingers to fall off, or duck typing, or embedding a scripting engine for your end-users, or using an "expando" object with a runtime-defined structure.&lt;/p&gt;

&lt;p&gt;The last of those examples is what &lt;a href="http://msdn.microsoft.com/en-us/library/dd287757.aspx"&gt;ConditionalWeakTable&lt;/a&gt; is all about. Most programmers are aware of &lt;a href="http://msdn.microsoft.com/en-us/library/system.dynamic.expandoobject.aspx"&gt;ExpandoObject&lt;/a&gt;; however, many are not aware that ConditionalWeakTable allows them to "attach" additional information to existing, non-dynamic CLR objects.&lt;/p&gt;

&lt;p&gt;Somehow I missed that class when the .NET 4.0 changes were announced, but Jeffrey Richter gave an example of it in his ".NET Nuggets" talk last week as part of &lt;a href="http://www.wintellect.com/ten"&gt;Wintellect's T.E.N.&lt;/a&gt; event. Essentially, you can use ConditionalWeakTable to define a (threadsafe) mapping from an object &lt;i&gt;instance&lt;/i&gt; to any type of value you need. This allows you to treat any object as an "expando" object, "attaching" information to it. When the object instance is garbage collected, any attached values are automatically cleaned up as well.&lt;/p&gt;

&lt;p&gt;This is a powerful concept, and it was the primary motivation behind my (pre-release) &lt;a href="http://nitoweakness.codeplex.com/"&gt;Nito.Weakness&lt;/a&gt; library. According to Mr. Richter, ConditionalWeakTable is notified of object collection by the garbage collector rather than using a polling thread, which is good. There are a couple of caveats, though, when using CWT.&lt;/p&gt;

&lt;blockquote&gt;&lt;b&gt;Update 2011-01-22:&lt;/b&gt; The Nito.Weakness library has been postponed indefinitely. Instead, I've released the ConnectedProperties library on both &lt;a href="http://connectedproperties.codeplex.com/"&gt;CodePlex&lt;/a&gt; and &lt;a href="http://nuget.org/Packages/Packages/Details/Connected-Properties-(by-Nito-Programs)-1-0-0"&gt;NuGet&lt;/a&gt;. ConnectedProperties is a straightforward wrapper for ConditionalWeakTable.&lt;/blockquote&gt;

&lt;h4&gt;Caveat 1: Restrictions on TKey&lt;/h4&gt;

&lt;p&gt;Be careful what type you specify for &lt;b&gt;TKey&lt;/b&gt;. I stronly recommend that you only use types that use reference equality. This means that I &lt;i&gt;don't&lt;/i&gt; recommend you use &lt;b&gt;string&lt;/b&gt; like Mr. Richter did during his demo (and in his example source code). It's well and good for the author of &lt;a href="http://www.amazon.com/gp/product/0735621632?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735621632"&gt;CLR via C#&lt;/a&gt; to use &lt;b&gt;TKey = System.String&lt;/b&gt;, but mere mortals like you and I should steer clear. &lt;b&gt;string&lt;/b&gt; not only uses value equality, but also has a complex interning feature. Remember, ConditionalWeakTable tracks object &lt;i&gt;instances&lt;/i&gt;, not object &lt;i&gt;values&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Nito.Weakness contains &lt;a href="http://nitoweakness.codeplex.com/SourceControl/changeset/view/b85303561fd1#Source%2f_internal%2fExtensions.cs"&gt;some code (IsReferenceEquatable)&lt;/a&gt; to determine if a type uses reference or value equality, and refuses to track object instances that use value equality. Perhaps this is a bit strong, but I'm planning to add this requirement in any generic ConditionalWeakTable wrappers that I use in my own code.&lt;/p&gt;

&lt;h4&gt;Caveat 2: IDisposable is ignored on TValue&lt;/h4&gt;

&lt;p&gt;ConditionalWeakTable will not dispose any &lt;b&gt;IDisposable&lt;/b&gt; values attached to object instances. They will (eventally) be finalized, but the standard restrictions on finalizers apply. Mr. Richter does have an example in his downloaded code, using this as an "object-collection callback." However, I don't believe that would be usable in real code, simply because all permissible finalizer actions belong in the original class anyway (specifically, the disposing of unmanaged resources).&lt;/p&gt;

&lt;br/&gt;

&lt;p&gt;Even with these caveats, ConditionalWeakTable promises to be quite useful! It allows better "separation of concerns" in code, with a bit of an "aspect-oriented programming" feel.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9019132320541620871/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/12/conditionalweaktable.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9019132320541620871'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9019132320541620871'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/12/conditionalweaktable.html' title='ConditionalWeakTable'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8473037033089307722</id><published>2010-11-20T20:32:00.000-05:00</published><updated>2010-11-20T20:32:35.141-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Personal'/><title type='text'>It's a Girl!</title><content type='html'>&lt;p&gt;I am pleased to announce that Emma Rose Cleary was born at 12:17pm on Saturday, November 20th, 2010. She was a grand total of 7 lbs, 11 oz, and was 20 inches long. She joins her brother Stephen Daniel, who was born 2009-07-29.&lt;/p&gt;

&lt;p&gt;She is the most beautiful girl in the world (though I cannot claim an impartial perspective). We have been so blessed!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8473037033089307722/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/11/its-girl.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8473037033089307722'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8473037033089307722'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/11/its-girl.html' title='It&apos;s a Girl!'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1282213798185076226</id><published>2010-11-16T10:18:00.011-05:00</published><updated>2013-05-17T10:53:40.092-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>A Few Words on GUIDs</title><content type='html'>&lt;p&gt;I keep seeing a lot of confusion in programmers as to how exactly GUIDs work, likeliness of collision, etc. I did some work &lt;a href="http://blog.stephencleary.com/2009/08/alternative-guids-for-mobile-devices.html"&gt;a while ago&lt;/a&gt; developing my own GUID, so I thought I'd post some clarifications about GUIDs.&lt;/p&gt;

&lt;h4&gt;The Standard&lt;/h4&gt;

&lt;p&gt;First off, GUIDs do have a standard: &lt;a href="http://www.apps.ietf.org/rfc/rfc4122.html"&gt;RFC 4122&lt;/a&gt;. However, there are other types of GUIDs; these will be called "non-conforming GUIDs" in this blog post.&lt;/p&gt;

&lt;h4&gt;High-Level Structure&lt;/h4&gt;

&lt;p&gt;A GUID is a 128-bit (16-byte) value that is normally divided into five groups of varying lengths: 4 bytes, 2 bytes, 2 bytes, 2 bytes, and 6 bytes. Certain bits have certain meanings.&lt;/p&gt;

&lt;p&gt;RFC 4122 defines several different types of GUIDs, each of which may be composed of "fields." The first field of note is the Variant field, which determines the "type" of the GUID. The two most significant bits in the 8th octet may be used to get the variant: 0 and 1 are reserved for NCS backwards compatibility; 2 is an RFC 4122 GUID; 3 is reserved for Microsoft backwards compatibility and future expandibility. Almost all discussion of GUIDs on the Internet are dealing with Variant 2 (RFC 4122) GUIDs. [Note: The actual Variant field interpretation is more complex, but this description is close enough].&lt;/p&gt;

&lt;p&gt;The second field of note is the Version field. This acts as a sort of "sub-type" for Variant 2 RFC 4122 GUIDs. The four most significant bits in the 7th octet determine the version: 1 is a time-based GUID; 2 is a DCE GUID (not described in the RFC); 3 is an MD5-hashed name-based GUID; 4 is a random GUID; 5 is a SHA1-hashed name-based GUID; and [0, 6-15] are undefined. Again, almost all discussion of GUIDs on the Internet are dealing with Version 1 or 4 GUIDs.&lt;/p&gt;

&lt;p&gt;Name-based GUIDs (versions 3 and 5) are hardly ever used; they provide a means to hash a name in a given "namespace" to a GUID value consistently. This is a nice idea, but most programs just use the hash directly instead of truncating it into a GUID structure.&lt;/p&gt;

&lt;h4&gt;Random GUIDs (Version 4)&lt;/h4&gt;

&lt;p&gt;Today, the most common type of GUIDs are Variant 2, Version 4 RFC 4122 GUIDs, also known as "random GUIDs". Aside from the Variant and Version fields, all other bits in the GUID are random. In particular, random GUIDs do &lt;i&gt;not&lt;/i&gt; expose a MAC address.&lt;/p&gt;

&lt;p&gt;The .NET Framework &lt;a href="http://msdn.microsoft.com/en-us/library/system.guid.newguid.aspx"&gt;Guid.NewGuid&lt;/a&gt; static method generates a random GUID. The "Create GUID" tool (guidgen.exe) included in Visual Studio and the Windows SDK also generates random GUIDs, as does the uuidgen.exe tool in the SDK.&lt;/p&gt;

&lt;h4&gt;Likelihood of Collision&lt;/h4&gt;

&lt;p&gt;The Variant and Version fields are 6 bits together, which leaves 122 bits of randomness in a random GUID. There are 5.3e36 total unique random GUIDs, which is a lot. What is more important, however, is the &lt;i&gt;likelihood of collision&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Assuming a perfect source of entropy on each device generating random GUIDs, there is a 50% chance of collision after 2.7e18 random GUIDs have been generated. That's more than 2.7 million million million. That's a lot.&lt;/p&gt;

&lt;p&gt;Even if you reduce the chance of collision to 1%, it would still take about 3.27e17 random GUIDs for just a 1% chance of collision. That's more than 326 million billion. That's a lot.&lt;/p&gt;

&lt;p&gt;Random GUIDs cannot ever collide with other types of RFC 4122 GUIDs (e.g., time-based GUIDs). This is because the Variant or Version fields would be set to different values. However, non-conforming GUIDs may collide with random GUIDs.&lt;/p&gt;

&lt;h4&gt;Time-Based GUIDs (Version 1)&lt;/h4&gt;

&lt;p&gt;Time-based GUIDs are Variant 2, Version 1 RFC 4122 GUIDs, also known as "sequential GUIDs" because they can be generated with values very close to each other. They consist of three fields in addition to Variant and Version: a 60-bit UTC Timestamp, a 14-bit Clock Sequence, and a 48-bit Node Identifier.&lt;/p&gt;

&lt;p&gt;The Node Identifier is normally the MAC address of the computer generating the time-based GUID (which is guaranteed to be unique, since MAC addresses use a registration system). However, it may also be a 47-bit random value (with the broadcast bit set). In this case, there is no danger of collision with real MAC addresses because the broadcast bit of a physical MAC address is always 0. There is a danger of collision with other random node identifiers, though; specifically, there is a 50% chance of collision once 13.97 million random nodes enter the network.&lt;/p&gt;

&lt;blockquote&gt;
Note: using a random value instead of the MAC address is not currently supported by Microsoft's Win32 API. This means that any GUID generation done using &lt;a href="http://msdn.microsoft.com/en-us/library/aa379322(VS.85).aspx"&gt;UuidCreateSequential&lt;/a&gt; &lt;i&gt;will&lt;/i&gt; expose the MAC address.
&lt;/blockquote&gt;

&lt;p&gt;The Clock Sequence field is initialized to a random value and incremented whenever the system clock has moved backward since the last generated GUID (e.g., if the computer corrects its time with a time server, or if it lost its date and thinks it's 1980). This allows 16,384 clock resets without any danger of a collision. If the GUIDs are being generated so quickly that the system clock has not moved &lt;i&gt;forward&lt;/i&gt; since the last GUID's timestamp, then the GUID generation algorithm will generally stall until the system clock increments the timestamp.&lt;/p&gt;

&lt;p&gt;Sequential GUIDs are not actually &lt;i&gt;sequential&lt;/i&gt;. In normal circumstances, GUIDs being generated by the same computer will have gradually increasing Timestamp fields (with the other fields remaining constant). However, the Timestamp field is not in the least-significant bit positions of the GUID, so if the GUID is treated as a 128-bit number, it does not actually &lt;i&gt;increment&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;It's important to note that the likelihood of collisions of sequential GUIDs is extremely small. The Clock Sequence and Timestamp almost certainly uniquely identify a point in time, and the Node Identifier almost certainly identifies a unique source.&lt;/p&gt;

&lt;p&gt;Sequential GUIDs can be created by the Win32 function &lt;a href="http://msdn.microsoft.com/en-us/library/aa379322(VS.85).aspx"&gt;UuidCreateSequential&lt;/a&gt; or by using uuidgen.exe from the Windows SDK passing the -x parameter.&lt;/p&gt;

&lt;h4&gt;Microsoft's Change&lt;/h4&gt;

&lt;p&gt;The primary method for creating GUIDs on Windows is the &lt;a href="http://msdn.microsoft.com/en-us/library/aa379205(VS.85).aspx"&gt;UuidCreate&lt;/a&gt; function. Before Windows 2000 (e.g., Windows NT and the 9x line), GUIDs created by this function were time-based (version 1) GUIDs. This was changed in Windows 2000 to return random (version 4) GUIDs due to privacy concerns regarding the exposure of the MAC address in Version 1 GUIDs.&lt;/p&gt;

&lt;p&gt;Note that "the" GUID algorithm did not change. Microsoft simply changed which GUID algorithm they were using to implement that function. Both the old and new implementations are RFC 4122 compliant, and "old" GUIDs will not conflict with "new" GUIDs. "Old" (Version 1) GUIDs can still be created by calling &lt;a href="http://msdn.microsoft.com/en-us/library/aa379322(VS.85).aspx"&gt;UuidCreateSequential&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;The Database Problem(s)&lt;/h4&gt;

&lt;p&gt;Database indexes do not work well with random values; the on-disk search trees end up very wide because the indexes do not cluster well. So, when using GUIDs for keys, it helps to use a more... &lt;i&gt;sequential...&lt;/i&gt; solution.&lt;/p&gt;

&lt;p&gt;However, there's another problem with GUIDs as database keys: the order in which the database compares GUIDs. Remember that sequential GUIDs aren't really &lt;i&gt;sequential&lt;/i&gt; because the Timestamp field is not at the end of the GUID structure. Furthermore, some databases compare GUID values in strange ways (I'm looking at you, &lt;a href="http://blogs.msdn.com/b/sqlprogrammability/archive/2006/11/06/how-are-guids-compared-in-sql-server-2005.aspx"&gt;SQL Server&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5ylIiAwyb"&gt;webcite&lt;/a&gt;)).&lt;/p&gt;

&lt;p&gt;So, when Microsoft added &lt;a href="http://msdn.microsoft.com/en-us/library/ms189786.aspx"&gt;newsequentialid()&lt;/a&gt; to SQL Server, they did not just return a regular sequential GUID. They &lt;a href="http://www.jorriss.net/blog/jorriss/archive/2008/04/24/unraveling-the-mysteries-of-newsequentialid.aspx"&gt;shuffled some of the bytes&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5ylItnhAb"&gt;webcite&lt;/a&gt;) to make index clustering more efficient.&lt;/p&gt; 

&lt;p&gt;Unfortunately, the shuffled bytes include the Version and Variant fields. This means that &lt;b&gt;newsequentialid() GUIDs are not RFC 4122 compliant!&lt;/b&gt; As a result, GUIDs from newsequentialid() have a higher likelihood of colliding with RFC 4122 compliant GUIDs such as sequential or random GUIDs.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;When using GUIDs as keys in a database, you must ensure that the GUIDs are all compatible with each other. In particular, newsequentialid() is not compatible with Guid.NewGuid or UuidCreateSequential (unless you're doing byte swapping manually). Guid.NewGuid and UuidCreateSequential are compatible with each other (since they are both RFC 4122 compliant). Other made-up GUIDs - including &lt;a href="http://www.informit.com/articles/article.aspx?p=25862"&gt;"comb" GUIDs&lt;/a&gt; (&lt;a href="http://www.webcitation.org/5ylJ1c1VK"&gt;webcite&lt;/a&gt;) - are not compatible with any other type of GUID.&lt;/p&gt;

&lt;p&gt;Mixing incompatible GUIDs may work for a while, but you do greatly increase your chances of collisions. If GUIDs are used as keys in a database, then you should choose one particular type of combed GUID (such as newsequentialid()) and use it exclusively. If the GUIDs are not used as keys in a database, just use random RFC 4122 GUIDs. Published GUIDs (e.g., COM identifiers) are usually assumed to be RFC 4122 compliant.&lt;/p&gt;

&lt;p&gt;There are many statements on the Internet about observing GUID collisions in production. These statements almost always conclude that "GUIDs can collide", which should be taken with a healthy dose of skepticism. Collisions are most likely a result of using two incompatible GUID formats (e.g., an RFC 4122 GUID and a non-conforming GUID); however, they may also be caused by one of the devices using a poor source of entropy (for random GUIDs), or a device repeatedly having its clock reset (for sequential GUIDs).&lt;/p&gt;

&lt;p&gt;Another possible problem is when well-meaning coders actually &lt;i&gt;increment&lt;/i&gt; an existing GUID instead of generating a new one. It is &lt;b&gt;wrong&lt;/b&gt; to take any GUID and increment it. Period. Always has been and always will be.&lt;/p&gt;

&lt;h4&gt;Code!&lt;/h4&gt;

&lt;p&gt;When doing the research for &lt;a href="http://blog.stephencleary.com/2009/08/alternative-guids-for-mobile-devices.html"&gt;my own combed GUID&lt;/a&gt;, I wrote &lt;a href="http://nitokitchensink.codeplex.com/SourceControl/changeset/view/57812#1006424"&gt;a few extension methods&lt;/a&gt; for the Guid structure that allow examining the RFC 4122 fields. For example, you can extract the MAC address and creation time for a sequential GUID. Naturally, these extension methods will only work for RFC 4122 GUIDs.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1282213798185076226/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/11/few-words-on-guids.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1282213798185076226'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1282213798185076226'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/11/few-words-on-guids.html' title='A Few Words on GUIDs'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6381791882752106986</id><published>2010-10-23T20:39:00.000-04:00</published><updated>2010-10-23T20:39:36.179-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Grand Rapids Day of DotNET Slides Available</title><content type='html'>&lt;p&gt;Just got back from giving a talk at Day of .NET in Grand Rapids entitled "Designing Application Protocols for TCP/IP". I gave the same talk last year at BarCampGR, but this time I removed some of the introductory information and added an introduction to the Socket API at the end.&lt;/p&gt;

&lt;p&gt;I did forget to mention during my talk that juggling multithreading concerns as well as TCP/IP concerns can be very challenging. I wrote some simple socket wrapper classes as part of the &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt; library (soon to be moved to the Nito.Communication library). These wrappers take care of all the multithreading concerns, so you can just focus on the TCP/IP concerns.&lt;/p&gt;

&lt;p&gt;Slides are available &lt;a href="http://www.landmarkbaptist.ws/misc/Designing%20Application%20Protocols%20for%20TCPIP.pptx"&gt;here&lt;/a&gt; (thanks to &lt;a href="http://www.landmarkbaptist.ws/"&gt;Landmark Baptist Church&lt;/a&gt; for hosting).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6381791882752106986/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/10/grand-rapids-day-of-dotnet-slides.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6381791882752106986'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6381791882752106986'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/10/grand-rapids-day-of-dotnet-slides.html' title='Grand Rapids Day of DotNET Slides Available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2075546509339926240</id><published>2010-10-18T10:25:00.000-04:00</published><updated>2010-10-18T10:25:06.569-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Firmware'/><title type='text'>Implementing GCC's Builtin Functions</title><content type='html'>&lt;p&gt;GCC has a number of &lt;a href="http://gcc.gnu.org/onlinedocs/gcc-4.3.2/gcc/Other-Builtins.html"&gt;useful builtin functions&lt;/a&gt;, which translate directly to the appropriate assembly instruction if the processor supports it. A certain algorithm I was coding made use of a few of these: __builtin_ffs (find first set bit), __builtin_clz (count leading zero bits), and __builtin_ctz (count trailing zero bits).&lt;/p&gt;

&lt;p&gt;In theory, if the target processor does not support these instructions (like mine), then the gcc library for that target should implement them in software. Unfortunately, mine did not.&lt;/p&gt;

&lt;p&gt;The solution was surprisingly simple: I just had to implement the &lt;a href="http://gcc.gnu.org/onlinedocs/gccint/Integer-library-routines.html"&gt;expected functions&lt;/a&gt; myself. The mapping is fairly obvious (e.g., __builtin_clz is implemented by __clzsi2).&lt;/p&gt;

&lt;p&gt;By adding the following code to the project, I was able to build the algorithm using __builtin_clz, __builtin_ctz, and __builtin_ffs:&lt;/p&gt;

&lt;pre class="brush:c"&gt;
// Returns the number of leading 0-bits in x, starting at the most significant bit position.
// If x is zero, the result is undefined.
int __clzsi2(unsigned x);
int __clzsi2(unsigned x)
{
  // This uses a binary search (counting down) algorithm from Hacker's Delight.
   unsigned y;
   int n = 32;
   y = x &amp;gt;&amp;gt;16;  if (y != 0) {n = n -16;  x = y;}
   y = x &amp;gt;&amp;gt; 8;  if (y != 0) {n = n - 8;  x = y;}
   y = x &amp;gt;&amp;gt; 4;  if (y != 0) {n = n - 4;  x = y;}
   y = x &amp;gt;&amp;gt; 2;  if (y != 0) {n = n - 2;  x = y;}
   y = x &amp;gt;&amp;gt; 1;  if (y != 0) return n - 2;
   return n - x;
}

// Returns the number of trailing 0-bits in x, starting at the least significant bit position.
// If x is zero, the result is undefined.
int __ctzsi2(unsigned x);
int __ctzsi2(unsigned x)
{
  // This uses a binary search algorithm from Hacker's Delight.
  int n = 1;
  if ((x &amp;amp; 0x0000FFFF) == 0) {n = n +16; x = x &amp;gt;&amp;gt;16;}
  if ((x &amp;amp; 0x000000FF) == 0) {n = n + 8; x = x &amp;gt;&amp;gt; 8;}
  if ((x &amp;amp; 0x0000000F) == 0) {n = n + 4; x = x &amp;gt;&amp;gt; 4;}
  if ((x &amp;amp; 0x00000003) == 0) {n = n + 2; x = x &amp;gt;&amp;gt; 2;}
  return n - (x &amp;amp; 1);
}

// Returns the index of the least significant 1-bit in x, or the value zero if x is zero.
// The least significant bit is index one.
int __ffsdi2 (unsigned x);
int __ffsdi2 (unsigned x)
{
  return (x == 0) ? 0 : __builtin_ctz(x) + 1;
}
&lt;/pre&gt;

&lt;p&gt;Presumably, this same approach would work for the many other GCC builtins.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2075546509339926240/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/10/implementing-gccs-builtin-functions.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2075546509339926240'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2075546509339926240'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/10/implementing-gccs-builtin-functions.html' title='Implementing GCC&apos;s Builtin Functions'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1097687669245913794</id><published>2010-10-15T18:43:00.000-04:00</published><updated>2010-10-15T18:43:22.693-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Firmware'/><title type='text'>Firmware???</title><content type='html'>&lt;p&gt;This is a meta-blog entry.&lt;/p&gt;

&lt;p&gt;I've been rather silent the last few weeks. There's a reason for that: a couple of months ago I became a "firmware guy."&lt;/p&gt;

&lt;p&gt;Firmware???&lt;/p&gt;

&lt;p&gt;Flexibility. It's a wonderful thing.&lt;/p&gt;

&lt;p&gt;The last few weeks have been an intense learning period, and I didn't want to bother my blog readers with the details of deriving clock speeds from oscillating crystals, or flash wait states, or the proper design of a bootloader that can flash its own upgrade without the danger of leaving the system in an unusable state. Yes, I've been doing all this (starting from an existing code base, thank goodness!).&lt;/p&gt;

&lt;p&gt;I am still doing .NET development as well. However, all of the .NET work I'm doing is not groundbreaking or really interesting, so I haven't been posting about it. It's just boring stuff like extending &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async.Sockets&lt;/a&gt; to support Silverlight and the Compact Framework. There's only two interesting points in that project (which I'll blog about when the time comes); it's mostly just grunt work.&lt;/p&gt;

&lt;p&gt;Now that my firmware learning curve is pretty much complete, I'll be inserting firmware content into the blog as well. Naturally, there will still be some .NET content interspersed with the new firmware content. Almost every day now, I write both C and .NET code (and even assembly if I can't avoid it).&lt;/p&gt;

&lt;h4&gt;Upcoming Stuff In My .NET World&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://www.dayofdotnet.org/GrandRapids/Fall2010/Speakers.aspx#17"&gt;I'll&lt;/a&gt; be speaking at &lt;a href="http://www.dayofdotnet.org/GrandRapids/Fall2010/default.aspx"&gt;Day of .NET in Grand Rapids&lt;/a&gt; next week on &lt;a href="http://www.dayofdotnet.org/GrandRapids/Fall2010/Sessions.aspx#18"&gt;TCP/IP socket protocols&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It looks like &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt; will get a release around the turn of the year. The last release (in September of 2009) has been very stable; I'll just be spinning off Nito.Async.Sockets into a separate library, putting up some online documentation, and possibly adding Code Contracts.&lt;/p&gt;

&lt;p&gt;I also have a special .NET-related surprise coming in February of 2011. More on that when the time comes. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1097687669245913794/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/10/firmware.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1097687669245913794'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1097687669245913794'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/10/firmware.html' title='Firmware???'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5062015318328406015</id><published>2010-09-16T11:00:00.001-04:00</published><updated>2010-09-16T11:38:34.272-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Using ILMerge with .NET 4.0 and/or Rx</title><content type='html'>&lt;h4&gt;The Problem&lt;/h4&gt;

&lt;p&gt;Want to use ILMerge? Using .NET 4.0 (possibly with Rx)? Frustrated with "Unresolved assembly reference not allowed" and StackOverflowExceptions from ILMerge?&lt;/p&gt;

&lt;p&gt;Then use one of these arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/targetplatform:v4,"%ProgramFiles%\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\Profile\Client"&lt;/li&gt;
&lt;li&gt;/targetplatform:v4,"%ProgramFiles%\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0"&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;The Long Answer&lt;/h4&gt;

&lt;p&gt;Microsoft provides a tool called &lt;a href="http://research.microsoft.com/en-us/people/mbarnett/ilmerge.aspx"&gt;ILMerge&lt;/a&gt; that combines multiple assemblies into one. It hasn't been updated for the most recent version of .NET 4.0 yet, though, so if you attempt to merge .NET 4.0 assemblies, you'll end up with an error: &lt;i&gt;Unresolved assembly reference not allowed: System.Core.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;This is because ILMerge understands .NET 4.0 versions v4.0.20926 (which I assume was an internal release between Beta 1 and Beta 2) and v4.0.20107 (which I assume was an internal release before Beta 1), but not v4.0.30319 (the RTW version). If ILMerge can't find the right framework libraries, it will fall back to using whatever version of the framework it's running (2.0 by default).&lt;/p&gt;

&lt;p&gt;As of now, the Google search "ilmerge Unresolved assembly reference not allowed: System.Core" has a first hit of &lt;a href="http://geekswithblogs.net/michelotti/archive/2010/06/02/ilmerge---unresolved-assembly-reference-not-allowed-system.core.aspx"&gt;this blog entry&lt;/a&gt;, which suggests adding a /lib option with the "C:\Windows\Microsoft.NET\Framework\v4.0.30319" argument, or supplying an ILMerge config file to force it to use the 4.0 runtime. Unfortunately, this approach will not work in all situations.&lt;/p&gt;

&lt;p&gt;To be specific, it does not work when trying to merge with &lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;Microsoft's Rx library&lt;/a&gt;. In fact, ILMerge will crash with a StackOverflowException.&lt;/p&gt;

&lt;p&gt;The ILMerge page itself recommends using the /targetplatform switch instead of the /lib switch (passing "C:\Windows\Microsoft.NET\Framework\v4.0.30319"), and this does work for some situations (e.g., if you're only using System.Interactive.dll from Rx). However, it will still not work for any assembly referring to WPF. In particular, Rx's System.Reactive.dll has a reference to WindowsBase (to schedule observable streams to a Dispatcher), so ILMerge will fail with a familiar error message: &lt;i&gt;Unresolved assembly reference not allowed: WindowsBase.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;It turns out that the WPF assemblies in the .NET 4.0 runtime are under a subdirectory of the runtime directory (C:\Windows\Microsoft.NET\Framework\v4.0.30319\WPF), and ILMerge does not search subdirectories. One solution is to specify the runtime directory with /targetplatform and specify the subdirectory with /lib, but a better solution is to specify the &lt;i&gt;reference assembly directory&lt;/i&gt; with /targetplatform.&lt;/p&gt;

&lt;p&gt;If you're targeting .NET 4.0 client profile, then this would be &lt;i&gt;/targetplatform:v4,"%ProgramFiles%\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\Profile\Client"&lt;/i&gt;. For the full .NET 4.0 framework, this would be &lt;i&gt;/targetplatform:v4,"%ProgramFiles%\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0"&lt;/i&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5062015318328406015/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html' title='Using ILMerge with .NET 4.0 and/or Rx'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4049595480173960287</id><published>2010-08-16T23:58:00.000-04:00</published><updated>2013-05-17T10:43:54.727-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.Async'/><title type='text'>Various Implementations of Asynchronous Background Tasks</title><content type='html'>&lt;p&gt;This is going to be a long blog post, because there's plenty of ground to cover. Executive summary: there are lots of ways to do background tasks in .NET, but use the new Task class if possible because it's the best. :D&lt;/p&gt;

&lt;p&gt;Many user interface applications find that they need to support some kind of an asynchronous "background" task. The exact requirements vary, but most applications need some kind of ability to kick off an operation that will run without blocking the user interface; and have that operation report back to the user interface thread when completed.&lt;/p&gt;

&lt;h4&gt;Common Requirements&lt;/h4&gt;

&lt;p&gt;Not all applications need all of these, but some common requirements are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Results.&lt;/b&gt; Usually, the purpose of the asynchronous operation is to determine some value or set of values that is then used to update the state of the program.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Errors.&lt;/b&gt; If there is an exception during the background processing, then it's nice to have that exception preserved, including its original call stack.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Progress.&lt;/b&gt; In addition to just updating program state upon completion (or error), it's often useful to incrementally report progress.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Cancellation.&lt;/b&gt; For long-running operations (especially of the CPU-intensive variety), one should include some kind of cancellation mechanism. If possible, the background operation should have a way to detect when cancellation has been requested and respond properly.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Nesting.&lt;/b&gt; A commonly-overlooked requirement is the ability to nest background operations. This is not needed for simple UI-layer background operations, but it becomes more important when designing business-layer background operations.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Synchronization.&lt;/b&gt; Usually there is some UI that must be updated when a background task reports progress, completes with a result, completes with an error, or is cancelled.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Tasks (Async Methods)&lt;/h4&gt;

&lt;p&gt;The best overall method is to use &lt;a href="http://blog.stephencleary.com/2012/02/async-and-await.html"&gt;Task-returning asynchronous methods&lt;/a&gt;, new in .NET 4.5 and C# 5.0. They naturally support all of the common requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Results.&lt;/b&gt; Any asynchronous method returning Task&amp;lt;TResult&amp;gt; can just return its result directly. The result is retrieved by awaiting the Task&amp;lt;TResult&amp;gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Errors.&lt;/b&gt; Any exceptions thrown by a task are rethrown when the task is awaited. The call stack is properly preserved.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Progress.&lt;/b&gt; Asynchronous methods use a progress reporting abstraction (IProgress&amp;lt;T&amp;gt;) to report progress. The caller of the asynchronous method determines what happens to the progress updates.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Cancellation.&lt;/b&gt; Asynchronous methods integrate with the &lt;a href="http://msdn.microsoft.com/en-us/library/dd997364.aspx"&gt;unified cancellation framework&lt;/a&gt;, which provides exhaustive cancellation support.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Nesting.&lt;/b&gt; Asynchronous methods naturally nest by awaiting the results of other asynchronous methods. Exceptions from inner methods are correctly propagated out. Cancellation can easily be propagated by passing the CancellationToken down to the inner method.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Synchronization.&lt;/b&gt; Asynchronous methods by default will capture and resume their context automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Tasks (Task Parallel Library)&lt;/h4&gt;

&lt;p&gt;You can also use tasks without asynchronous methods. Tasks were introduced in the &lt;a href="http://msdn.microsoft.com/en-us/library/dd537609.aspx"&gt;Task Parallel 
Library&lt;/a&gt; (.NET 4.0). The following requirements are fully supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Results.&lt;/b&gt; The Task&amp;lt;TResult&amp;gt; class allows the natural returning of the result. The result is retrieved by reading Task&amp;lt;TResult&amp;gt;.Result.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Errors.&lt;/b&gt; Any exceptions thrown by a task are rethrown when the task is &lt;a href="http://msdn.microsoft.com/en-us/library/dd997415.aspx"&gt;observed&lt;/a&gt;. The original exception is wrapped in an AggregateException, so the outer exception no longer carries the correct call stack.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Cancellation.&lt;/b&gt; .NET 4.0 includes a &lt;a href="http://msdn.microsoft.com/en-us/library/dd997364.aspx"&gt;unified cancellation framework&lt;/a&gt; that provides exhaustive cancellation support.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Nesting.&lt;/b&gt; Tasks can be &lt;a href="http://msdn.microsoft.com/en-us/library/dd997417.aspx"&gt;nested&lt;/a&gt; if desired; child tasks properly propagate any exceptions upward, and parent tasks may optionally propagate cancellation downward. Nesting is not automatic, so this ability should be exposed by any business-layer API that is Task-based.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Synchronization.&lt;/b&gt; Tasks introduce a very flexible model of synchronization by separating the actual operation from how it is &lt;a href="http://msdn.microsoft.com/en-us/library/dd997402.aspx"&gt;scheduled&lt;/a&gt;. Synchronization with the user interface is only slightly awkward; a user interface task scheduler can be retrieved by calling TaskScheduler.FromCurrentSynchronizationContext while on the UI thread. This scheduler &lt;a href="http://msdn.microsoft.com/en-us/library/dd997394.aspx"&gt;can then be used&lt;/a&gt; to schedule a &lt;a href="http://msdn.microsoft.com/en-us/library/ee372288.aspx"&gt;task continuation&lt;/a&gt; to marshal the result, error, or cancellation update to the UI thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Progress reporting is a bit complex for tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Progress.&lt;/b&gt; One way to report progress from a task is to create another task (to update the UI), schedule it to the UI thread, and wait for it to complete. There is a &lt;a href="http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html"&gt;ProgressReporter wrapper class on this blog&lt;/a&gt; which helps simplify the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;BackgroundWorker&lt;/h4&gt;

&lt;p&gt;Before .NET 4.0 was released, &lt;a href="http://msdn.microsoft.com/en-us/library/8xs8549b.aspx"&gt;BackgroundWorker&lt;/a&gt; was the de-facto standard. It supports most of the requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Results.&lt;/b&gt; Supporting a result is slightly awkward; the DoWork delegate has to set the DoWorkEventArgs.Result property of its argument. This value is then passed to the RunWorkerCompleted delegate, as the RunWorkerCompletedEventArgs.Result property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Errors.&lt;/b&gt; Exceptions thrown by DoWork are caught and passed to the RunWorkerCompleted delgate, as the RunWorkerCompletedEventArgs.Error property. That exception object does include the correct call stack; however, if the RunWorkerCompleteEventArgs.Result property is accessed when the operation completed with an error, then the original exception is wrapped in a TargetInvocationException, so the outer exception no longer carries the correct call stack.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Progress.&lt;/b&gt; Any BackgroundWorker whose WorkerSupportsProgress property is true may report progress. The DoWork delegate invokes ReportProgress, which causes the ProgressChanged event to fire. Progress reporting is always asynchronous, so DoWork will continue to run before the ProgressChanged event actually executes.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Cancellation.&lt;/b&gt; Any BackgroundWorker whose WorkerSupportsCancellation property is true may be cancelled. The cancelling thread first calls BackgroundWorker.CancelAsync. This causes the BackgroundWorker.CancellationPending property to become true. The DoWork delegate should monitor that property (checking it on a regular basis), and set DoWorkEventArgs.Cancel to true and return if the operation is cancelled. The RunWorkerCompleted delegate detects a cancelled result by checking RunWorkerCompletedEventArgs.Cancelled.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Synchronization.&lt;/b&gt; The biggest benefit of BackgroundWorker is its support for automatic synchronization. The ProgressChanged and RunWorkerCompleted events are synchronized to the SynchronizationContext that was in place when RunWorkerAsync was called. In most situations, RunWorkerAsync is called from a UI thread, and so the ProgressChanged and RunWorkerCompleted events are invoked on the UI thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BackgroundWorker does have one rather significant drawback. It works perfectly for less complex systems, but does not nest easily.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Nesting.&lt;/b&gt; BackgroundWorker's problem with nesting is because the DoWork delegate is not given a SynchronizationContext in which to run. Because of this, any time RunWorkerAsync is called from DoWork, the ProgressChanged and RunWorkerCompleted events on the child BackgroundWorker are &lt;i&gt;not&lt;/i&gt; synchronized to the UI thread (or to the parent BackgroundWorker).
This can be solved one of two ways:
&lt;ul&gt;
&lt;li&gt;If the child BackgroundWorker should synchronize to the UI, then the parent BackgroundWorker can manually install the UI SynchronizationContext in its DoWork delegate by calling SynchronizationContext.SetSynchronizationContext.&lt;/li&gt;
&lt;li&gt;If the child BackgroundWorker should synchronize to the parent BackgroundWorker (not the UI), then the parent BackgroundWorker can run a synchronization loop using an object like &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async.ActionDispatcher&lt;/a&gt;. Alternatively, the parent BackgroundWorker could be replaced entirely by a &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async.ActionThread&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Delegate.BeginInvoke&lt;/h4&gt;

&lt;p&gt;Every delegate in .NET supports &lt;a href="http://msdn.microsoft.com/en-us/library/2e08f6yc.aspx"&gt;asynchronous invocation&lt;/a&gt;. This is a lower-level technique that does not require a separate object (e.g., Task or BackgroundWorker) to define an asynchronous operation. Because it is at a lower level, it supports fewer of the standard requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Results.&lt;/b&gt; The result of the delegate may be retrieved by calling Delegate.EndInvoke, even if the asynchronous delegate has already completed.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Errors.&lt;/b&gt; Any exception thrown by the delegate is preserved and rethrown by Delegate.EndInvoke, properly preserving the call stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This lower-level approach does not cleanly support these requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Progress.&lt;/b&gt; A delegate must be designed to support progress reporting; one way to do this is to have the method take another delegate as one of its arguments and invoke that delegate to report progress.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Cancellation.&lt;/b&gt; There is no built-in cancellation support, but a delegate may regularly check for a cancellation signal (e.g., a volatile bool or ManualResetEvent).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Nesting.&lt;/b&gt; Delegates may of course asynchronously invoke other delegates; however, there is no concept of "parent" and "child" asynchronous delegates. Propagation of errors is automatic, but propagation of cancellation is not.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Synchronization.&lt;/b&gt; There is no automatic synchronization for asynchronous delegates. There are two common solutions:
&lt;ul&gt;
&lt;li&gt;Use the AsyncOperation and AsyncOperationManager classes. These types provide a thin wrapper around SynchronizationContext, allowing for simple (asynchronous) synchronization of progress and completion. The disadvantage of these classes is that they do not support nesting. [Note: BackgroundWorker just uses these classes with an asynchronous delegate, so if you need synchronization, it's usually just best to use Tasks or BackgroundWorker]&lt;/li&gt;
&lt;li&gt;Use the SynchronizationContext class directly. The synchronization code is a bit more complex, but it is possible to support nesting.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;ThreadPool.QueueUserWorkItem&lt;/h4&gt;

&lt;p&gt;One of the lowest-level approaches is to queue the work directly to the ThreadPool. Unfortunately, this approach does not support &lt;i&gt;any&lt;/i&gt; of the requirements directly; every requirement needs a fair amount of work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Results.&lt;/b&gt; The delegate passed to ThreadPool.QueueUserWorkItem cannot return a value. To return a result, one must either use a child object of an argument (similar to BackgroundWorker) or pass a lambda expression bound to a variable holding the return value.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Errors.&lt;/b&gt; If a delegate queued to the ThreadPool allows an exception to propagate, then the entire process is killed. If any errors are possible, then they should be wrapped in a try...catch and the exception object "returned" to the calling thread (either using a child object of an argument, or using a bound variable of a lambda expression). The exception could be rethrown with the correct stack trace by calling PrepareForRethrow from the &lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;Rx library&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other requirements have the same problems (and mitigating solutions) as the Delegate.BeginInvoke approach above.&lt;/p&gt;

&lt;h4&gt;Thread&lt;/h4&gt;

&lt;p&gt;Of course, one obvious approach is to place a background operation in its own thread. This is often a sub-optimal solution, since the ThreadPool is designed to handle varying loads. There is almost never a need to manually create background Thread objects. However, many programmers naturally turn to the Thread class as an obvious solution.&lt;/p&gt;

&lt;p&gt;Just like the ThreadPool.QueueUserWorkItem approach, the manual Thread approach does not support &lt;i&gt;any&lt;/i&gt; of the requirements out of the box. Manual threads have the same problems (and mitigating solutions) as the ones listed under ThreadPool.QueueUserWorkItem. In addition, manual Thread objects almost always are less efficient than the built-in ThreadPool.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4049595480173960287/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4049595480173960287'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4049595480173960287'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html' title='Various Implementations of Asynchronous Background Tasks'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5505679838733023982</id><published>2010-08-05T11:01:00.001-04:00</published><updated>2010-08-05T11:42:34.185-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Using Rx for Stream Encoding and Decoding</title><content type='html'>&lt;p&gt;Still on my Rx kick...&lt;/p&gt;

&lt;p&gt;The Rx team had a two-part series last month demonstrating one way to use Rx on the server: &lt;a href="http://blogs.msdn.com/b/jeffva/archive/2010/07/23/rx-on-the-server-part-1-of-n-asynchronous-system-io-stream-reading.aspx"&gt;asynchronous Stream&lt;/a&gt; and &lt;a href="http://blogs.msdn.com/b/jeffva/archive/2010/07/26/rx-on-the-server-part-2-of-n-asynchronous-streamreader.aspx"&gt;asynchronous StreamReader&lt;/a&gt;. In the asynchronous StreamReader example, they punt on the decoding issue, instead demonstrating how to split the text into lines.&lt;/p&gt;

&lt;p&gt;As it turns out, decoding (and encoding) are quite simple in Rx. The code below should be clear to anyone who's been following the Rx team blog posts:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Linq;
using System.Text;

/// &amp;lt;summary&amp;gt;
/// Observable extension methods that encode and decode streams.
/// &amp;lt;/summary&amp;gt;
public static class EncodingObservables
{
  /// &amp;lt;summary&amp;gt;
  /// Takes a &amp;quot;chunked&amp;quot; sequence of characters and converts it to a &amp;quot;chunked&amp;quot; sequence of bytes using the specified encoding.
  /// &amp;lt;/summary&amp;gt;
  /// &amp;lt;param name=&amp;quot;source&amp;quot;&amp;gt;The &amp;quot;chunked&amp;quot; sequence of characters.&amp;lt;/param&amp;gt;
  /// &amp;lt;param name=&amp;quot;encoding&amp;quot;&amp;gt;The encoding used to translate the sequence of characters to a sequence of bytes.&amp;lt;/param&amp;gt;
  /// &amp;lt;returns&amp;gt;The &amp;quot;chunked&amp;quot; sequence of bytes.&amp;lt;/returns&amp;gt;
  public static IObservable&amp;lt;byte[]&amp;gt; Encode(this IObservable&amp;lt;char[]&amp;gt; source, Encoding encoding)
  {
    return Observable.CreateWithDisposable&amp;lt;byte[]&amp;gt;(observer =&amp;gt;
    {
      var encoder = encoding.GetEncoder();

      return source.Subscribe(
        data =&amp;gt;
        {
          try
          {
            var ret = new byte[encoder.GetByteCount(data, 0, data.Length, false)];
            encoder.GetBytes(data, 0, data.Length, ret, 0, false);
            if (ret.Length != 0)
            {
              observer.OnNext(ret);
            }
          }
          catch (EncoderFallbackException ex)
          {
            observer.OnError(ex);
          }
        },
        observer.OnError,
        () =&amp;gt;
        {
          try
          {
            var ret = new byte[encoder.GetByteCount(new char[0], 0, 0, true)];
            encoder.GetBytes(new char[0], 0, 0, ret, 0, true);
            if (ret.Length != 0)
            {
              observer.OnNext(ret);
            }

            observer.OnCompleted();
          }
          catch (EncoderFallbackException ex)
          {
            observer.OnError(ex);
          }
        });
    });
  }

  /// &amp;lt;summary&amp;gt;
  /// Takes a &amp;quot;chunked&amp;quot; sequence of bytes and converts it to a &amp;quot;chunked&amp;quot; sequence of characters using the specified encoding.
  /// &amp;lt;/summary&amp;gt;
  /// &amp;lt;param name=&amp;quot;source&amp;quot;&amp;gt;The &amp;quot;chunked&amp;quot; sequence of bytes.&amp;lt;/param&amp;gt;
  /// &amp;lt;param name=&amp;quot;encoding&amp;quot;&amp;gt;The encoding used to translate the sequence of bytes to a sequence of characters.&amp;lt;/param&amp;gt;
  /// &amp;lt;returns&amp;gt;The &amp;quot;chunked&amp;quot; sequence of characters.&amp;lt;/returns&amp;gt;
  public static IObservable&amp;lt;char[]&amp;gt; Decode(this IObservable&amp;lt;byte[]&amp;gt; source, Encoding encoding)
  {
    return Observable.CreateWithDisposable&amp;lt;char[]&amp;gt;(observer =&amp;gt;
    {
      var decoder = encoding.GetDecoder();

      return source.Subscribe(
        data =&amp;gt;
        {
          try
          {
            var ret = new char[decoder.GetCharCount(data, 0, data.Length, false)];
            decoder.GetChars(data, 0, data.Length, ret, 0, false);
            if (ret.Length != 0)
            {
              observer.OnNext(ret);
            }
          }
          catch (EncoderFallbackException ex)
          {
            observer.OnError(ex);
          }
        },
        observer.OnError,
        () =&amp;gt;
        {
          try
          {
            var ret = new char[decoder.GetCharCount(new byte[0], 0, 0, true)];
            decoder.GetChars(new byte[0], 0, 0, ret, 0, true);
            if (ret.Length != 0)
            {
              observer.OnNext(ret);
            }

            observer.OnCompleted();
          }
          catch (EncoderFallbackException ex)
          {
            observer.OnError(ex);
          }
        });
    });
  }
}
&lt;/pre&gt;

&lt;p&gt;This class defines two operators (Encode and Decode) which can be used like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[TestClass]
public class EncodingObservablesUnitTests
{
  [TestMethod]
  public void MSDNEncoderSample()
  {
    var chars = new[]
    {
      new[] { &amp;#39;\u0023&amp;#39; }, // #
      new[] { &amp;#39;\u0025&amp;#39; }, // %
      new[] { &amp;#39;\u03a0&amp;#39; }, // Pi
      new[] { &amp;#39;\u03a3&amp;#39; } // Sigma
    };

    var result = chars.ToObservable(Scheduler.ThreadPool)
                      .Encode(Encoding.UTF7)
                      .ToEnumerable()
                      .SelectMany(x =&amp;gt; x)
                      .ToArray();
    Assert.IsTrue(result.SequenceEqual(new byte[] { 43, 65, 67, 77, 65, 74, 81, 79, 103, 65, 54, 77, 45 }));
  }

  [TestMethod]
  public void MSDNEncoderGetBytesSample()
  {
    var chars = new[]
    {
      new[] { &amp;#39;\u0023&amp;#39; }, // #
      new[] { &amp;#39;\u0025&amp;#39; }, // %
      new[] { &amp;#39;\u03a0&amp;#39; }, // Pi
      new[] { &amp;#39;\u03a3&amp;#39; } // Sigma
    };

    var result = chars.ToObservable(Scheduler.ThreadPool)
                      .Encode(Encoding.Unicode)
                      .ToEnumerable()
                      .SelectMany(x =&amp;gt; x)
                      .ToArray();

    Assert.IsTrue(result.SequenceEqual(new byte[] { 35, 0, 37, 0, 160, 3, 163, 3 }));
  }

  [TestMethod]
  public void MSDNDecoderSample()
  {
    var bytes = new[]
    {
      new byte[] { 0x20, 0x23, 0xe2 },
      new byte[] { 0x98, 0xa3 },
    };

    var result = bytes.ToObservable(Scheduler.ThreadPool)
                      .Decode(Encoding.UTF8)
                      .ToEnumerable()
                      .SelectMany(x =&amp;gt; x)
                      .ToArray();

    Assert.IsTrue(result.SequenceEqual(new[] { &amp;#39;\u0020&amp;#39;, &amp;#39;\u0023&amp;#39;, &amp;#39;\u2623&amp;#39; }));
  }
}
&lt;/pre&gt;

&lt;p&gt;Note that I've defined the Encode and Decode operators as working on "chunks" of data. As such, they don't really "fit in" with most LINQ and Rx operators, which work on individual data elements. However, this approach makes sense any time there's buffered reading going on. The Encode and Decode operators here will work fine with the Rx team's example AsyncRead operator.&lt;/p&gt;

&lt;p&gt;Also note that these simple Encode and Decode operators will &lt;i&gt;not&lt;/i&gt; treat encoding preambles in any special way (including Unicode byte order marks). They won't prefix the encoded output with a preamble, nor will they detect any preambles when decoding.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5505679838733023982/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/08/using-rx-for-stream-encoding-and.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5505679838733023982'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5505679838733023982'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/08/using-rx-for-stream-encoding-and.html' title='Using Rx for Stream Encoding and Decoding'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6880077835814746258</id><published>2010-08-02T17:17:00.000-04:00</published><updated>2010-08-02T17:17:03.800-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>A Reminder about Asynchronous FileStreams</title><content type='html'>&lt;p&gt;Still on my Rx kick...&lt;/p&gt;

&lt;p&gt;The Rx team published a great blog post regarding using Rx on the server with &lt;a href="http://blogs.msdn.com/b/jeffva/archive/2010/07/23/rx-on-the-server-part-1-of-n-asynchronous-system-io-stream-reading.aspx"&gt;asynchronous Streams&lt;/a&gt;. When doing this, you do need to make sure that the FileStream is actually asynchronous. (I believe the Rx team is fully aware of this caveat, but neglected to mention it in their blog post because it's not directly relevant to Rx).&lt;/p&gt;

&lt;p&gt;To create a FileStream that is asynchronous, one &lt;i&gt;must&lt;/i&gt; either use the constructor that takes an &lt;b&gt;isAsync&lt;/b&gt; boolean paramter (passing &lt;b&gt;true&lt;/b&gt;), or use the constructor that takes the &lt;b&gt;FileOptions&lt;/b&gt; parameter (passing a value including &lt;b&gt;FileOptions.Asynchronous&lt;/b&gt;). Some of the static methods on the File class also take a &lt;b&gt;FileOptions&lt;/b&gt; parameter, so these can also be used to create an asynchronous FileStream.&lt;/p&gt;

&lt;p&gt;A FileStream that is constructed any other way is &lt;i&gt;not&lt;/i&gt; asynchronous. If the asynchronous APIs (such as BeginRead, BeginWrite, etc.) are used on a non-asynchronous FileStream, it will use a ThreadPool thread to "fake" asynchronous operations. Using Rx to wrap the Begin/End methods in this case only provides the &lt;i&gt;illusion&lt;/i&gt; of asynchronous operations.&lt;/p&gt;

&lt;p&gt;Using Rx to access a non-asynchronous FileStream is counterproductive, burning a ThreadPool thread. However, using Rx to access an &lt;i&gt;asynchronous&lt;/i&gt; FileStream provides all the benefits of true asynchronous I/O.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6880077835814746258/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/08/reminder-about-asynchronous-filestreams.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6880077835814746258'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6880077835814746258'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/08/reminder-about-asynchronous-filestreams.html' title='A Reminder about Asynchronous FileStreams'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3433175182146450155</id><published>2010-07-31T21:53:00.000-04:00</published><updated>2013-05-17T10:43:19.127-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.Async'/><title type='text'>Asynchronous Contexts in Rx</title><content type='html'>&lt;p&gt;Yesterday I (finally) wrote my first real-world code using Rx. Like many others, I've played around with various aspects of Rx, but until last night these were all just throwaway experiments. It turns out that in my very first real-world use of Rx, I had to implement an old concept: asynchronous contexts.&lt;/p&gt;

&lt;p&gt;There have been some great resources released about Rx recently. Most notably, the &lt;a href="http://blogs.msdn.com/b/rxteam/archive/2010/07/15/rx-hands-on-labs-published.aspx"&gt;Rx hands-on lab&lt;/a&gt; (&lt;a href="http://download.microsoft.com/download/C/5/D/C5D669F9-01DF-4FAF-BBA9-29C096C462DB/Rx%20HOL%20.NET.pdf"&gt;direct link to PDF&lt;/a&gt;), which is the closest thing to an Rx tutorial in existence. The Rx team followed up later this month with a two-part series on using Rx on the server: &lt;a href="http://blogs.msdn.com/b/jeffva/archive/2010/07/23/rx-on-the-server-part-1-of-n-asynchronous-system-io-stream-reading.aspx"&gt;asynchronous Stream&lt;/a&gt; and &lt;a href="http://blogs.msdn.com/b/jeffva/archive/2010/07/26/rx-on-the-server-part-2-of-n-asynchronous-streamreader.aspx"&gt;asynchronous StreamReader&lt;/a&gt;. These blog posts are great examples of how to think when approaching a problem with Rx in hand.&lt;/p&gt;

&lt;p&gt;This week, I had a business need to create a "search" form. The form is very simple: the user types something in a TextBox, and we populate a ListView with matching objects. It's sort of like a whole form devoted to AutoComplete. The actual "matching" function could be run asynchronously, so this problem ended up almost exactly like the dictionary lookup in the Rx hands-on lab document.&lt;/p&gt;

&lt;p&gt;The one big difference is that the "matching" function will return its results incrementally (it's actually an IEnumerable&amp;lt;T&amp;gt;), and I'd like to display the results incrementally as they are found. In contrast, the dictionary lookup in the Rx hands-on lab example returns all of its results at once.&lt;/p&gt;

&lt;p&gt;Here's the first brush of the code:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Listen for the user typing.
var searchCommands = Observable.FromEvent&amp;lt;EventArgs&amp;gt;(this.textBoxSearch, &amp;quot;TextChanged&amp;quot;)
  .Select(x =&amp;gt; this.textBoxSearch.Text)
  .Throttle(TimeSpan.FromMilliseconds(200)) // For fast typists.
  .DistinctUntilChanged() // Only pass along the event if the actual text changed.
  .ObserveOn(this) // Marshal to UI thread.
  .Merge(Observable.Return(string.Empty)) // Start by searching an empty string.
  .Do(_ =&amp;gt;
  {
    // Update UI each time we get a new search request.
    this.listViewResults.Items.Clear();
    this.labelStatus.Text = &amp;quot;Searching...&amp;quot;;
  });

// Define how we do searches.
Func&amp;lt;string, IObservable&amp;lt;T&amp;gt;&amp;gt; performSearch = searchString =&amp;gt; this.matchProvider.Lookup(searchString)
  .ToObservable(Scheduler.ThreadPool) // Do the iteration on a ThreadPool thread.
  .ObserveOn(this); // Marshal to the UI thread.

// Each time a search is requested, cancel any existing searches and start the new one.
this.searchAction =
  searchCommands
  .Select(searchString =&amp;gt;
    performSearch(searchString) // Do the search.
    .Do(_ =&amp;gt; { },
      () =&amp;gt;
      {
        // Update UI when the search is done.
        this.labelStatus.Text = &amp;quot;Done!&amp;quot;;
      }))
  .Switch() // Cancel existing searches when a new search starts.
  .Subscribe(response =&amp;gt; this.listViewResults.Items.Add(this.toListViewItem(response)));
&lt;/pre&gt;

&lt;p&gt;The first chunk of the code is almost identical to the first chunk of the Rx hands-on lab code. The only difference is that I use ObserveOn(this) and Do() to clear out any previous search results when a new search &lt;i&gt;starts&lt;/i&gt; (the hands-on lab clears previous search results when a search &lt;i&gt;completes&lt;/i&gt;). I also do a Merge() with an empty string, which causes all results to be returned as soon as the form is loaded.&lt;/p&gt;

&lt;p&gt;The second chunk of code defines how searches are performed. The "matchProvider" object just returns an IEnumerable&amp;lt;T&amp;gt; for a given search string. This enumerable is iterated on a ThreadPool thread, and the results are marshalled to the UI thread. This is similar to the asynchronous web service used by the Rx hands-on lab, except that it produces its results incrementally instead of all at once.&lt;/p&gt;

&lt;p&gt;The third part of the code uses the Switch() operator to cancel old searches and start new ones as they are ready. A label is updated to notify the user when a search completes. All results from the combined searches are added to the ListView as they arrive. There is no need to marshal to the UI thread first, because both of the observable sources in this combination have already been marshalled to the UI thread.&lt;/p&gt;

&lt;h4&gt;The Need for an Asynchronous Context&lt;/h4&gt;

&lt;p&gt;There's a rather subtle race condition in the code above. Observable sequences can get tricky whenever they change threads, and that is happening a couple of times here. The first one is not really obvious: Throttle() transfers control to a ThreadPool thread because of its timer. The other one &lt;i&gt;is&lt;/i&gt; obvious: we're converting an IEnumerable&amp;lt;T&amp;gt; to an observable using Scheduler.ThreadPool. Both of these sequences do get marshalled back to the UI thread and combined using Switch(), and that's actually where the problem comes in.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="http://social.msdn.microsoft.com/Forums/en-US/rx/thread/19be939b-d257-4d8e-b104-4dfcc59b3ff8"&gt;an authoritative post on the Rx forums&lt;/a&gt;, when subscriptions are disposed they &lt;i&gt;may&lt;/i&gt; not stop immediately. At first this seems like a design flaw, but it actually makes perfect sense. Believe me - I've done enough asynchronous work to know how complicated it would be to have all subscription disposals stop their observables immediately.&lt;/p&gt;

&lt;p&gt;In short, it's possible to have a former search complete (and update the UI displaying "Done!") after a newer search starts (and updates the UI displaying "Searching..."). The Rx hands-on lab does not have this problem because they only marshal to the UI thread (and display the results) when the lookup has completed.&lt;/p&gt;

&lt;p&gt;Conceptually, this is the same problem that I discussed in &lt;a href="http://blog.stephencleary.com/2009/04/asynchronous-callback-contexts.html"&gt;one of my first blog posts&lt;/a&gt;: an asynchronous operation can't always be reliably cancelled. In this case, the solution is to introduce an &lt;i&gt;asynchronous callback context&lt;/i&gt; and have the operation actively check its context before executing. If the callback is synchronized before checking the callback context, then it &lt;i&gt;knows&lt;/i&gt; whether or not it is cancelled (without causing another race condition).&lt;/p&gt;

&lt;p&gt;To solve this problem in Rx, we'll use an asynchronous context (dropping the "callback" moniker, since it doesn't really apply). The concept is the same: asynchronous events copy the current value of the context (while they are synchronized), then go off and do whatever they do asynchronously, and finally check their saved context against the current value of the context (after they are re-synchronized).&lt;/p&gt;

&lt;p&gt;Note that asynchronous contexts in Rx need to be attached to &lt;i&gt;each element&lt;/i&gt; in the observable. Logically, each observable element is an event.&lt;/p&gt;

&lt;h4&gt;Using the Asynchronous Context&lt;/h4&gt;

&lt;p&gt;This code uses an asynchronous context. The simplest context is just an Object instance, which can be easily compared for equality and is guaranteed unique from any other context.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
// Our asynchronous context.
object context = null;

// Listen for the user typing.
var searchCommands = Observable.FromEvent&amp;lt;EventArgs&amp;gt;(this.textBoxSearch, &amp;quot;TextChanged&amp;quot;)
  .Select(x =&amp;gt; this.textBoxSearch.Text)
  .Throttle(TimeSpan.FromMilliseconds(200)) // For fast typists.
  .DistinctUntilChanged() // Only pass along the event if the actual text changed.
  .ObserveOn(this) // Marshal to UI thread.
  .Merge(Observable.Return(string.Empty)) // Start by searching an empty string.
  .Do(_ =&amp;gt;
  {
    // Change the context to prevent any future updates from old observables.
    context = new object();

    // Update UI each time we get a new search request.
    this.listViewResults.Items.Clear();
    this.labelStatus.Text = &amp;quot;Searching...&amp;quot;;
  })
  .Select(searchString =&amp;gt; new { context, searchString }); // Attach context to each search string.

// Define how we do searches.
Func&amp;lt;string, IObservable&amp;lt;T&amp;gt;&amp;gt; performSearch = searchString =&amp;gt; this.matchProvider.Lookup(searchString)
  .ToObservable(Scheduler.ThreadPool) // Do the iteration on a ThreadPool thread.
  .ObserveOn(this); // Marshal to the UI thread.

// Each time a search is requested, cancel any existing searches and start the new one.
// Propogate the context to each search result.
this.searchAction =
  searchCommands
  .Select(request =&amp;gt;
    performSearch(request.searchString) // Start searching.
    .Select(result =&amp;gt; new { request.context, result }) // Propogate the context to each search result.
    .Do(_ =&amp;gt; { },
      () =&amp;gt;
      {
        // Check the context before handling the result.
        if (request.context == context)
        {
          // Update UI when the search is done.
          this.labelStatus.Text = &amp;quot;Done!&amp;quot;;
        }
      }))
  .Switch()
  .Subscribe(
    response =&amp;gt;
    {
      // Check the context before handling the result.
      if (response.context == context)
      {
        this.listViewResults.Items.Add(this.toListViewItem(response.result));
      }
    });
&lt;/pre&gt;

&lt;p&gt;The changes in this code all have to do with the asynchronous context. The local "context" variable always refers to the currently valid context (all other contexts are, by definition, invalid). When a new user search request is detected, we create a new context for the request, and we "bind" the context to the search request using an anonymous projection.&lt;/p&gt;

&lt;p&gt;The second block of code (defining how we perform a search) is the same. The search results are treated a bit differently, though: we "bind" each search result to the same context associated with the search request. Also, when the search is completed, the request's bound context is verified against the current context before updating the UI.&lt;/p&gt;

&lt;p&gt;Finally, the bound context for each response is verified against the current context before updating the UI. Remember that each response's context is copied from their associated requests's context, so they remain valid as long as their request is the most recent one.&lt;/p&gt;

&lt;p&gt;Note that all context-based actions (setting the current context when starting a request, binding the current context to the observable elements, and verifying the bound contexts against the current context) are all done on the UI thread. Synchronizing context actions is a requirement for asynchronous contexts, to avoid race conditions.&lt;/p&gt;

&lt;h4&gt;A Reusable Solution&lt;/h4&gt;

&lt;p&gt;I'm playing around with a few classes that make asynchronous contexts a little easier to use. Observable elements bound to a context are placed into a structure similar to Timestamped&amp;lt;T&amp;gt; (which binds observable elements to a timestamp), and there are special binding and verification operators. The actual AsynchronousContext type also includes thread checking to ensure that it is used in a synchronized fashion.&lt;/p&gt;

&lt;p&gt;However, I'm just not pleased with how usable it is. I'll continue playing with it over the next week or so, and if I can find a good solution, I'll post it here and put it into &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt;. Suggestions are welcome. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3433175182146450155/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/07/asynchronous-contexts-in-rx.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3433175182146450155'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3433175182146450155'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/07/asynchronous-contexts-in-rx.html' title='Asynchronous Contexts in Rx'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5673643113578179348</id><published>2010-07-16T14:36:00.000-04:00</published><updated>2013-04-11T10:34:42.153-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>ReSharper and the Obscure CTS Corner Case</title><content type='html'>&lt;p&gt;Like several other people, I collect tricky code snippets for fun. Today's image is courtesy of the Common Type System (part of the CLR). As such, it's not so much an artifact of the C# language as it is an artifact of the floating point standard.&lt;/p&gt;

&lt;p&gt;Interestingly, the current version of ReSharper recommended a code transformation that is wrong.&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="http://3.bp.blogspot.com/_lkN-6AUYgOI/TECl7qdiWRI/AAAAAAAADZI/jXf3PO-O9dI/s1600/ReSharper_doubleNaN.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="89" hw="true" src="http://3.bp.blogspot.com/_lkN-6AUYgOI/TECl7qdiWRI/AAAAAAAADZI/jXf3PO-O9dI/s400/ReSharper_doubleNaN.PNG" width="372" /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;Don't get me wrong; ReSharper is a great tool. This is the first time I've seen it make a mistake, and it's an obscure corner case. ReSharper did make another questionable recommendation a few weeks ago, and I felt the C# standard wasn't clear on the subject. However, Eric Lippert did confirm that ReSharper's refactoring was correct that time.&lt;/p&gt;

&lt;h4&gt;Update, 2013-04-11:&lt;/h4&gt;

&lt;p&gt;Jon Skeet explores ReSharper's mistake around double NaN near the end of &lt;a href="http://tv.jetbrains.net/videocontent/jon-skeet-inspects-resharper"&gt;his recent presentation&lt;/a&gt;. He also throws a lot of other crazy situations at Re# trying to break it. Fun stuff!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5673643113578179348/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5673643113578179348'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5673643113578179348'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html' title='ReSharper and the Obscure CTS Corner Case'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/_lkN-6AUYgOI/TECl7qdiWRI/AAAAAAAADZI/jXf3PO-O9dI/s72-c/ReSharper_doubleNaN.PNG' height='72' width='72'/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5661428354819018336</id><published>2010-06-30T16:58:00.000-04:00</published><updated>2013-05-17T10:42:54.649-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Books'/><title type='text'>Review of Bill Wagner's Effective C# (2nd ed), Part 2</title><content type='html'>&lt;p&gt;Continuing my long and drawn-out &lt;a href="http://blog.stephencleary.com/2010/05/review-of-bill-wagners-effective-c-2nd.html"&gt;review of Effective C#&lt;/a&gt;, this post takes a look at items 6-10.&lt;/p&gt;

&lt;h4&gt;Item 6: Understand the Relationships Among the Many Different Concepts of Equality&lt;/h4&gt;
&lt;p&gt;+ This is often a confusing topic for newcomers, and Bill explains it pretty well. He clearly distinguishes reference and value equality.&lt;/p&gt;
&lt;p&gt;+ Correct recommendations on when and how to define equality for user-defined types.&lt;/p&gt;
&lt;p&gt;+ Correctly discusses handling equality in the context of a type hierarchy. [Note: the class hierarchy example is only the simple case where objects of different types are always different. This does not handle the (uncommon) case where there is a sub-hierarchy where objects of different types can be equal.]&lt;/p&gt;
&lt;p&gt;- Minor technical error: this section references the "IStructuralEquality" interface which had its name changed prior to the 4.0 release and is now called &lt;a href="http://msdn.microsoft.com/en-us/library/system.collections.istructuralequatable.aspx"&gt;IStructuralEquatable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;- The only mention of overriding GetHashCode is buried in the text and not even a comment is included in the examples for overriding Equals.&lt;/p&gt;

&lt;h4&gt;Item 7: Understand the Pitfalls of GetHashCode()&lt;/h4&gt;
&lt;p&gt;- Repeatedly states that the result of GetHashCode must be equal if the two objects are equivalent as defined by operator==. This is incorrect; GetHashCode must be kept in sync with Object.Equals, not operator==.&lt;/p&gt;
&lt;p&gt;+ Correctly explains efficiency problems with default GetHashCode implementations.&lt;/p&gt;
&lt;p&gt;- Attempts to enforce more strict requirements on GetHashCode - specifically, that it can only be based on immutable fields. The actual requirements are only that the "key" field values do not change &lt;i&gt;while the object's hash is being used&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;- Incorrectly states that only immutable types can have a correct and efficient implementation of GetHashCode.&lt;/p&gt;
&lt;p&gt;+ Pushes readers towards immutable value types. Even though GetHashCode &lt;i&gt;doesn't&lt;/i&gt; require them, they are easier to work with.&lt;/p&gt;

&lt;h4&gt;Item 8: Prefer Query Syntax to Loops&lt;/h4&gt;
&lt;p&gt;- Assumes that query syntax is always cleaner than loops.&lt;/p&gt;
&lt;p&gt;+ Points out the "composable API" benefit of query syntax.&lt;/p&gt;

&lt;h4&gt;Item 9: Avoid Conversion Operators in Your APIs&lt;/h4&gt;
&lt;p&gt;+ I agree completely, and would include operator overloading in the same cautionary advice.&lt;/p&gt;

&lt;h4&gt;Item 10: Use Optional Parameters to Minimize Method Overloads&lt;/h4&gt;
&lt;p&gt;+ Clearly explains all of the binary compatibility issues with optional parameters and default values.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5661428354819018336/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/06/review-of-bill-wagners-effective-c-2nd.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5661428354819018336'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5661428354819018336'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/review-of-bill-wagners-effective-c-2nd.html' title='Review of Bill Wagner&apos;s Effective C# (2nd ed), Part 2'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4672723065110139047</id><published>2010-06-25T16:35:00.001-04:00</published><updated>2010-06-25T16:37:58.541-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><category scheme='http://www.blogger.com/atom/ns#' term='Lighter Notes'/><title type='text'>On A Lighter Note: SocketFlags.MaxIOVectorLength</title><content type='html'>&lt;p&gt;Today I was just working along, minding my own business, when out of the blue my mind jumped back to something strange I had seen over a year ago. (Is anyone else insane like that, or is it just me?)&lt;/p&gt;

&lt;p&gt;The seldom-used &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socketflags.aspx"&gt;SocketFlags&lt;/a&gt; enumeration serves a dual purpose: it can represent flags passed to the Send or Receive operation, and it also represents flags passed back from the Send or Receive operation.&lt;/p&gt;

&lt;p&gt;Reading through the enumeration values is pretty much straightforward: it's fairly obvious which ones are meant as "input" or "output" parameters, and what their meanings are. One value, however, is rather strange: MaxIOVectorLength, which (according to the MSDN documentation) "Provides a standard value for the number of WSABUF structures that are used to send and receive data."&lt;/p&gt;

&lt;p&gt;That should give anyone pause. That value is clearly not a &lt;i&gt;flag&lt;/i&gt;. It would make (a twisted sort of) sense if, by passing that flag, you could specify the maximum I/O vector length. But a quick look at the Send and Receive methods make it clear that this flag is not "enabling" some other parameter.&lt;/p&gt;

&lt;p&gt;The fact is: this flag value should simply not exist. The value is real enough; it's defined in WinSock2.h as "MSG_MAXIOVLEN". However, it defines a limitation in the WinSock implementation, &lt;i&gt;not&lt;/i&gt; a flag for Send or Recv.&lt;/p&gt;

&lt;p&gt;Why do I find this amusing? Because someone, during the devlopment of the .NET framework, had to track down all the meanings of these flags. This person undoubtedly discovered that MSG_MAXIOVLEN was undocumented in its header file, and learned its meaning from someone else (likely someone responsible for the WinSock code). And in all of that research, that person never once noticed that this value was &lt;i&gt;obviously&lt;/i&gt; not a flag? Not only that, but all of the reviewers reading this documentation never once realized how its description was completely different than all of the other descriptions!&lt;/p&gt;

&lt;p&gt;This is a case of someone working too fast, and no one catching their fundamental mistake. The other flag values (which existed in WinSock.h with names like "MSG_OOB", "MSG_PEEK", and "MSG_DONTROUTE") had straightforward translations to SocketFlags, and MSG_MAXIOVLEN somehow got lumped in with them.&lt;/p&gt;

&lt;p&gt;P.S. An interesting futher note: the person who put MaxIOVectorLength into SocketFlags &lt;i&gt;correctly&lt;/i&gt; did not include a translation of MSG_INTERRUPT. The MSG_INTERRUPT flag was used to signal WinSock that the Send/Recv is being called in a hardware interrupt context (and therefore WinSock could not call other Windows methods). That was back in the 16-bit Windows days, and that flag is no longer used.&lt;/p&gt;

&lt;p&gt;P.P.S. Bonus amusing fact: SocketFlags.MaxIOVectorLength has the same value as MSG_INTERRUPT. He, he, he... I just &lt;i&gt;wonder&lt;/i&gt; what would happen if someone ever used it... :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4672723065110139047/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/06/on-lighter-note-socketflagsmaxiovectorl.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4672723065110139047'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4672723065110139047'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/on-lighter-note-socketflagsmaxiovectorl.html' title='On A Lighter Note: SocketFlags.MaxIOVectorLength'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415</id><published>2010-06-21T17:29:00.007-04:00</published><updated>2014-05-16T16:30:28.368-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>SQLite and Entity Framework 4</title><content type='html'>&lt;p&gt;I met a nice fellow at the Microsoft Code Camp in Chicago recently. He had a question about how well the Entity Framework worked with other ADO.NET providers. When I told him that I had a solution working using Entity Framework running on SQLite, he was quite interested. There are a handful of hurdles to get it all working, though.&lt;/p&gt;

&lt;h4&gt;ADO.NET Provider for SQLite&lt;/h4&gt;

&lt;p&gt;The first thing you need is an ADO.NET provider for SQLite. There's an excellent (and free) solution available called &lt;a href="http://sqlite.phxsoftware.com/"&gt;System.Data.SQLite&lt;/a&gt;. This is actually an ADO.NET 2.0/3.5 provider, and also includes support for the Entity Framework.&lt;/p&gt;

&lt;h4&gt;Supporting SQLite from a .NET 4.0 Project&lt;/h4&gt;

&lt;p&gt;By default, a .NET 4.0 process will happily load a .NET 2.0-3.5 managed DLL, but will refuse to load a .NET 2.0-3.5 mixed-mode DLL. This is a problem for SQLite, since it is a .NET 2.0 mixed-mode DLL. A full description of this problem and its solution is &lt;a href="http://www.marklio.com/marklio/PermaLink,guid,ecc34c3c-be44-4422-86b7-900900e451f9.aspx"&gt;available online&lt;/a&gt;, but the short answer is to set &lt;a href="http://msdn.microsoft.com/en-us/library/bbx34a2h.aspx"&gt;useLegacyV2RuntimeActivationPolicy&lt;/a&gt; to true in your app.config.&lt;/p&gt;

&lt;h4&gt;Opening Alternative Data Files&lt;/h4&gt;

&lt;p&gt;SQLite has a simple "one database per file" concept that does not exist for all ADO.NET data sources. If you need to allow your application to access user-selected database files, it's possible to "redirect" an Entity Framework connection string to an alternative data file. The correct way to do this is to crack the Entity Framework connection string, extract the SQLite connection string, crack the SQLite connection string, replace the data file, rebuild the SQLite connection string, and finally rebuild the Entity Framework connection string:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
/// &amp;lt;summary&amp;gt;
/// Redirects a SQLite Entity Framework connection string to an alternative database file, optionally encrypted with a password.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;param name="originalConnectionString"&amp;gt;The Visual-Studio-generated original Entity Framework connection string.&amp;lt;/param&amp;gt;
/// &amp;lt;param name="databaseFile"&amp;gt;The alternative database file to open.&amp;lt;/param&amp;gt;
/// &amp;lt;param name="password"&amp;gt;The password to use for encryption. May be &amp;lt;c&amp;gt;null&amp;lt;/c&amp;gt; to indicate no password.&amp;lt;/param&amp;gt;
/// &amp;lt;returns&amp;gt;A SQLite Entity Framework connection string referencing the alternative database file.&amp;lt;/returns&amp;gt;
public static string RedirectedEntityFrameworkConnectionString(string originalConnectionString, string databaseFile, string password)
{
    // Parse the Entity Framework connection string.
    var connectionStringBuilder = new EntityConnectionStringBuilder(originalConnectionString);
    if (connectionStringBuilder.Provider != "System.Data.SQLite")
    {
        throw new ArgumentException("Entity Framework connection string does not use System.Data.SQLite provider.");
    }

    // Parse the underlying provider (SQLite) connection string.
    var providerConnectionStringBuilder = new SQLiteConnectionStringBuilder(connectionStringBuilder.ProviderConnectionString);

    // Redirect to the specified database file, and apply encryption.
    providerConnectionStringBuilder.DataSource = databaseFile;
    providerConnectionStringBuilder.Password = password;

    // Rebuild the Entity Framework connection string.
    connectionStringBuilder.ProviderConnectionString = providerConnectionStringBuilder.ConnectionString;
    return connectionStringBuilder.ConnectionString;
}
&lt;/pre&gt;

&lt;p&gt;The redirected Entity Framework connection string may be passed to the ObjectContext-derived class constructor (e.g., the "MyEntities" class that the Entity Framework creates for you):&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
const string OriginalConnectionString = "..."; // (Copy out of app.config)
var connectionString = RedirectedEntityFrameworkConnectionString(OriginalConnectionString, myFileName, null);
using (var context = new MyEntities(connectionString))
{
    ...
}
&lt;/pre&gt;

&lt;h4&gt;The Entity Framework's Database Connection&lt;/h4&gt;

&lt;p&gt;The Entity Framework is actually an ADO.NET data provider that is itself wrapping an ADO.NET data provider (SQLite, to be specific). &lt;a href="http://msdn.microsoft.com/en-us/library/bb896325.aspx"&gt;Normally, the Entity Framework will open a database connection whenever it needs one; these automatically-opened connections are automatically closed when the Entity Framework is finished with it.&lt;/a&gt; This default behavior works well with SQL Server due to its ADO.NET provider's connection pooling. However, it does not work well with SQLite, due to various "properties" existing on the SQLite connection itself. One example is "PRAGMA foreign_keys = ON", which enforces foreign keys only for that SQLite database connection. If the Entity Framework opens and closes its connections at will, then SQLite PRAGMAs such as these are lost.&lt;/p&gt;

&lt;p&gt;As a general rule, you should explicitly call "Connection.Open()" for any ObjectContext. You must also ensure that the ObjectContext is disposed, so that the database connection is cleanly closed. Once "Connection.Open()" has been called, the Entity Framework will no longer open and close its own transient connections.&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using (var myEntities = new MyEntities())
{
    // Open the connection (to make it long-lived)
    myEntities.Connection.Open();

    // Apply PRAGMA directives...

    // Use Entity classes...
}
&lt;/pre&gt;

&lt;p&gt;It's often useful to get at the SQLiteConnection being used by the Entity Framework. This is available through the "EntityConnection.StoreConnection" property, as illustrated by this code sample:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
var connection = (myEntities.Connection as EntityConnection).StoreConnection as SQLiteConnection;
&lt;/pre&gt;

&lt;h4&gt;Directly Accessing the Database Using SQL&lt;/h4&gt;

&lt;p&gt;Even when using the Entity Framework, there are situations where one wishes to execute SQL commands directly against the database. PRAGMAs are one common scenario; another is updating the schema structure to the latest version.&lt;/p&gt;

&lt;p&gt;This is possible one of two ways; once the SQLiteConnection has been acquired (see above), it's possible to create a SQLiteCommand and execute it:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using (var command = connection.CreateCommand())
{
    command.CommandText = "PRAGMA encoding = \"UTF-8\"";
    command.ExecuteNonQuery();
}
&lt;/pre&gt;

&lt;p&gt;However, there's an even easier way of doing this: Entity Framework exposes a method named "ExecuteStoreCommand":&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
myEntities.ExecuteStoreCommand("PRAGMA encoding = \"UTF-8\"");
&lt;/pre&gt;

&lt;h4&gt;Entity Framework Transactions&lt;/h4&gt;

&lt;p&gt;The &lt;a href="http://msdn.microsoft.com/en-us/library/bb896325.aspx"&gt;official Entity Framework documentation&lt;/a&gt; recommends using generic transactions (e.g., TransactionScope). This has some benefits; it can be easily promoted to a distributed transaction, etc.&lt;/p&gt;

&lt;p&gt;However, it has a timeout scheme that is not very friendly (I &lt;a href="http://blog.stephencleary.com/2010/06/transactionscope-has-default-timeout.html"&gt;mentioned this&lt;/a&gt; a few weeks ago). In my situation, I had to potentially spend quite a bit of time upgrading the client's database on first run.&lt;/p&gt;

&lt;p&gt;Fortunately, SQLiteTransaction works perfectly well with the Entity Framework. My database schema upgrade code now looks like this (referencing the SQLiteConnection from above):&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using (var transaction = connection.BeginTransaction())
{
    // lots of time-consuming stuff

    transaction.Commit();
}
&lt;/pre&gt;

&lt;p&gt;SQLiteTransaction does not have the same timeout restrictions that plague TransactionScope, et. al.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Reminder:&lt;/i&gt; You &lt;i&gt;do&lt;/i&gt; want to use a SQLiteTransaction! The Entity Framework by default will create (and commit) a new transaction for each call to SaveChanges (or each call to ExecuteStoreCommand). This is true even if EF has a long-lived connection. By using SQLiteTransaction, you'll avoid &lt;a href="http://www.sqlite.org/faq.html#q19"&gt;serious performance issues&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Defining and Enforcing Foreign Keys&lt;/h4&gt;

&lt;p&gt;First, you need to enforce foreign keys on your database connection; see the &lt;a href="http://www.sqlite.org/foreignkeys.html"&gt;SQLite foreign keys documentation&lt;/a&gt; for more information. This is done simply as such:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
myEntities.ExecuteStoreCommand("PRAGMA foreign_keys = ON");
&lt;/pre&gt;

&lt;p&gt;The next step is to actually establish the Entity Framework relationships. Some SQLite databases work just fine; the EF designer is able to understand the foreign key relationships and adds them correctly. Other SQLite databases just import the entities themselves without the relationships; I'm not sure why this is the case.&lt;/p&gt;

&lt;p&gt;If you have a SQLite database that does not get its relationships imported, then you'll have to define them by hand. If your entity relationships are all imported fine, then you can just skip down to the "final notes".&lt;/p&gt;

&lt;h5&gt;Foreign Keys: 0..1 to N and 1 to N&lt;/h5&gt;

&lt;a href="http://3.bp.blogspot.com/_lkN-6AUYgOI/TB_YCelMDiI/AAAAAAAADS0/8ahLHjxQq40/s1600/1toNp1.PNG" imageanchor="1" style="clear: right; cssfloat: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" ru="true" src="http://3.bp.blogspot.com/_lkN-6AUYgOI/TB_YCelMDiI/AAAAAAAADS0/8ahLHjxQq40/s320/1toNp1.PNG" /&gt;&lt;/a&gt;&lt;a href="http://2.bp.blogspot.com/_lkN-6AUYgOI/TB_YJeDzqVI/AAAAAAAADS8/0yLOi1dHyps/s1600/1toNp2.PNG" imageanchor="1" style="clear: right; cssfloat: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" ru="true" src="http://2.bp.blogspot.com/_lkN-6AUYgOI/TB_YJeDzqVI/AAAAAAAADS8/0yLOi1dHyps/s320/1toNp2.PNG" /&gt;&lt;/a&gt;

&lt;p&gt;In this type of relationship, the "parent" table has an identity, and the "child" table has its own identity and a foreign key referring to a row in the "parent" table. To establish this relationship, follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right-click the "parent" entity in the Entity Framework designer, open the "Add" submenu, and select "Association...".&lt;/li&gt;
&lt;li&gt;Select the entity which has a foreign key pointing to this one, and ensure that the Multiplicity on both ends is correct (tip: read the plain English explanation carefully).&lt;/li&gt;
&lt;li&gt;Be sure to &lt;i&gt;uncheck&lt;/i&gt; the "Add foreign key properties" option.&lt;/li&gt;
&lt;li&gt;Click OK. Entity Framework will create an association that you can see in the designer; however, it is not actually mapped to the correct columns yet.&lt;/li&gt;
&lt;li&gt;Double-click the newly-created association (the line between the entities).&lt;/li&gt;
&lt;li&gt;In the "Principal" drop-down, select the "parent" entity. If your foreign key columns in the "child" entity have the same names as the primary key columns in the "parent" entity, then the rest of the dialog is filled in for you. (If not, you'll have to select which "Dependent Property" maches each "Principal Key").&lt;/li&gt;
&lt;li&gt;Click OK. The foreign key association is now completed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks to the Entity Framework Design team for their &lt;a href="http://blogs.msdn.com/b/efdesign/archive/2009/03/16/foreign-keys-in-the-entity-framework.aspx"&gt;blog post on FK Associations&lt;/a&gt;; my instructions above are derived from that post.&lt;/p&gt;

&lt;h5 style="clear:both;"&gt;Foreign Keys: M to N&lt;/h5&gt;

&lt;a href="http://2.bp.blogspot.com/_lkN-6AUYgOI/TB_YOlFOr1I/AAAAAAAADTE/OXn3IMi0pck/s1600/MtoNp1.PNG" imageanchor="1" style="clear: right; cssfloat: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" ru="true" src="http://2.bp.blogspot.com/_lkN-6AUYgOI/TB_YOlFOr1I/AAAAAAAADTE/OXn3IMi0pck/s320/MtoNp1.PNG" /&gt;&lt;/a&gt;&lt;a href="http://4.bp.blogspot.com/_lkN-6AUYgOI/TB_YTI6qZeI/AAAAAAAADTM/b131G-Gksjs/s1600/MtoNp2.PNG" imageanchor="1" style="clear: right; cssfloat: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" ru="true" src="http://4.bp.blogspot.com/_lkN-6AUYgOI/TB_YTI6qZeI/AAAAAAAADTM/b131G-Gksjs/s320/MtoNp2.PNG" /&gt;&lt;/a&gt;

&lt;p&gt;This type of relationship has a special table in the database, commonly called a "join table". Unfortunately, the Entity Framework support for SQLite does not pick up on these relationships either, so the join table will actually be added to the Entity Framework designer as an entity.&lt;/p&gt;

&lt;p&gt;To convert this join table entity into an M to N relationship, follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right-click one of the two entities in the relationship, open the "Add" submenu, and select "Association...".&lt;/li&gt;
&lt;li&gt;Select the other entity in the relationship, and change the Multiplicity so that they are both Many.&lt;/li&gt;
&lt;li&gt;Click OK. Entity Framework will create an association that you can see in the designer; however, it is not actually mapped to the correct table yet.&lt;/li&gt;
&lt;li&gt;Right-click the newly-created association (the line between the entities) and select "Table Mapping".&lt;/li&gt;
&lt;li&gt;Click the "&amp;lt;Add a Table or View&amp;gt;" and select the join table. If your foreign key columns in the join table have the same names as the primary key columns in the related tables, then the rest of the page is filled in for you. (If not, you'll have to select how the columns in each table are mapped).&lt;/li&gt;
&lt;li&gt;&lt;i&gt;After&lt;/i&gt; the table has been mapped to the M to N association, you may delete the join table entity.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;Final Notes on Foreign Key Associations&lt;/h5&gt;

&lt;p&gt;Once the entity associations are defined (as above), you may freely "update" your model from the database without losing those associations.&lt;/p&gt;

&lt;p&gt;When using the Entity Framework with SQL Server, it is possible to detect some foreign key conflicts before they actually hit the database (e.g., a required "parent" reference). I haven't found a way to get this working with SQLite yet, but it's not a big deal, IMO.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2761650674329324415/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html#comment-form' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' title='SQLite and Entity Framework 4'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/_lkN-6AUYgOI/TB_YCelMDiI/AAAAAAAADS0/8ahLHjxQq40/s72-c/1toNp1.PNG' height='72' width='72'/><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961</id><published>2010-06-18T17:07:00.006-04:00</published><updated>2013-05-17T10:40:07.597-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Reporting Progress from Tasks</title><content type='html'>&lt;div style="background-color:#eee"&gt;&lt;b&gt;Update 2012-02-16: The information in this post is old. See the new post &lt;a href="http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html"&gt;Reporting Progress from Async Tasks&lt;/a&gt; for a better solution.&lt;/b&gt;&lt;/div&gt;

&lt;p&gt;The .NET 4.0 &lt;a href="http://msdn.microsoft.com/en-us/library/dd460717.aspx"&gt;Task Parallel Library&lt;/a&gt; respresents a huge shift in the way future multithreaded code will be written. The TPL and higher-level abstractions (such as the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.parallel.aspx"&gt;Parallel class&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/dd460688.aspx"&gt;Parallel LINQ&lt;/a&gt;, and the &lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;Reactive Extensions&lt;/a&gt;) will (hopefully) become the default approach for handling all multithreading situations. There is (almost) no reason to use the old &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.thread.aspx"&gt;Thread class&lt;/a&gt; anymore.&lt;/p&gt;

&lt;p&gt;Similarly, the &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx"&gt;BackgroundWorker class&lt;/a&gt; has seen its heyday. It is time for this old class to retire as well. However, BGW does have one benefit over the TPL: it is easier to use for background tasks that need to report progress to the UI.&lt;/p&gt;

&lt;p&gt;Background tasks come in two basic flavors. Some of them update the UI infrequently, and can be easily broken into separate tasks which only update at each "checkpoint." Other background tasks update the UI more frequently, and cannot be easily divided this way.&lt;/p&gt;

&lt;p&gt;For the background tasks that infrequently update the UI, the common approach is to split them into separate Tasks with "checkpoints" in-between. At these "checkpoints," a &lt;a href="http://msdn.microsoft.com/en-us/library/ee372288.aspx"&gt;task continuation&lt;/a&gt; is used to update the UI. The C# FAQ blog has &lt;a href="http://blogs.msdn.com/b/csharpfaq/archive/2010/06/18/parallel-programming-task-schedulers-and-synchronization-context.aspx"&gt;an entry&lt;/a&gt; describing this approach.&lt;/p&gt;

&lt;p&gt;For the background tasks that need to frequently update the UI (and can't be easily split into "checkpointed" Tasks), another approach is necessary. The easiest solution is to create an inner Task to update the UI.&lt;/p&gt;

&lt;p&gt;This post introduces the ProgressReporter type, which greatly simplifies background tasks that need to do frequent progress reporting. The goal for ProgressReporter is to allow update code that is as simple as &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.progresschanged.aspx"&gt;BackgroundWorker.ProgressChanged&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;The Example Framework&lt;/h4&gt;

&lt;p&gt;The UI is a single form with 3 buttons and a progress bar. The three buttons are Start, Error, and Cancel. The buttons are enabled and disabled based on whether the background task is running. The progress bar shows the progress of the task.&lt;/p&gt;

&lt;p&gt;The background task runs for 3 seconds, counting from 0 to 99, updating the progress bar every 30 milliseconds. The task will then produce a result of 42. If the Error button is used to start the task, then the task will throw an exception instead of producing a result. The task is also cancelable, checking for cancellation each time it reports progress.&lt;/p&gt;

&lt;p&gt;This is a rather complex example; it covers each background task scenario (successful completion, error conditions, and cancellation).&lt;/p&gt;

&lt;p&gt;The UI framework is the same regardless of whether a BackgroundWorker or Task object is used for the background task:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Windows.Forms;

public sealed partial class MainForm : Form
{
  private readonly Button startButton;
  private readonly Button errorButton;
  private readonly Button cancelButton;
  private readonly ProgressBar progressBar;

  public MainForm()
  {
    this.startButton = new Button
    {
      Text = "Start",
      Height = 23, Width = 75,
      Left = 12, Top = 12,
    };
    this.errorButton = new Button
    {
      Text = "Error",
      Height = 23, Width = 75,
      Left = this.startButton.Right + 6,
      Top = 12,
    };
    this.cancelButton = new Button
    {
      Text = "Cancel",
      Enabled = false,
      Height = 23, Width = 75,
      Left = this.errorButton.Right + 6,
      Top = 12,
    };
    this.progressBar = new ProgressBar
    {
      Width = this.cancelButton.Right - 12,
      Height = 23,
      Left = 12,
      Top = this.startButton.Bottom + 6,
    };
    this.startButton.Click +=
      (sender, e) =&amp;gt; this.startButton_Click(sender, e);
    this.errorButton.Click +=
      (sender, e) =&amp;gt; this.errorButton_Click(sender, e);
    this.cancelButton.Click +=
      (sender, e) =&amp;gt; this.cancelButton_Click(sender, e);
    this.Controls.AddRange(new Control[]
    {
      this.startButton,
      this.errorButton,
      this.cancelButton,
      this.progressBar,
    });
  }

  partial void startButton_Click(object sender, EventArgs e);
  partial void errorButton_Click(object sender, EventArgs e);
  partial void cancelButton_Click(object sender, EventArgs e);

  private void TaskIsRunning()
  {
    // Update UI to reflect background task.
    this.startButton.Enabled = false;
    this.errorButton.Enabled = false;
    this.cancelButton.Enabled = true;
  }

  private void TaskIsComplete()
  {
    // Reset UI.
    this.progressBar.Value = 0;
    this.startButton.Enabled = true;
    this.errorButton.Enabled = true;
    this.cancelButton.Enabled = false;
  }
}

class Program
{
  [STAThread]
  static void Main()
  {
    // Run the UI.
    Application.Run(new MainForm());
  }
}
&lt;/pre&gt;

&lt;p&gt;This defines a form called MainForm that has the UI described above. The two methods TaskIsRunning and TaskIsComplete handle the enabling and disabling of the buttons. There are also partial methods as placeholders for the button click events; these are used by the sample code below.&lt;/p&gt;

&lt;p&gt;You can copy the code above by double-clicking it and then pressing Ctrl-C; then paste it into the Program.cs of a Windows Forms project. It should compile and run, displaying the form, but the buttons don't do anything yet.&lt;/p&gt;

&lt;h4&gt;A BGW That Updates Progress Frequently&lt;/h4&gt;

&lt;p&gt;Here's what the code looks like for a BGW that checks in frequently:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.ComponentModel;
using System.Threading;
using System.Windows.Forms;

partial class MainForm
{
  private BackgroundWorker backgroundWorker;

  partial void startButton_Click(object sender, EventArgs e)
  {
    // Start the background task without error.
    this.StartBackgroundTask(false);

    // Update UI to reflect background task.
    this.TaskIsRunning();
  }

  partial void errorButton_Click(object sender, EventArgs e)
  {
    // Start the background task with error.
    this.StartBackgroundTask(true);

    // Update UI to reflect background task.
    this.TaskIsRunning();
  }

  partial void cancelButton_Click(object sender, EventArgs e)
  {
    // Cancel the background task.
    this.backgroundWorker.CancelAsync();

    // The UI will be updated by the cancellation handler.
  }

  private void StartBackgroundTask(bool causeError)
  {
    this.backgroundWorker = new BackgroundWorker();
    this.backgroundWorker.WorkerReportsProgress = true;
    this.backgroundWorker.WorkerSupportsCancellation = true;
    this.backgroundWorker.DoWork += (_, args) =&amp;gt;
    {
      for (int i = 0; i != 100; ++i)
      {
        // Check for cancellation.
        if (this.backgroundWorker.CancellationPending)
        {
          args.Cancel = true;
          return;
        }

        Thread.Sleep(30); // Do some work.

        // Report progress of the work.
        this.backgroundWorker.ReportProgress(i);
      }

      // After all that work, cause the error if requested.
      if (causeError)
      {
        throw new InvalidOperationException("Oops...");
      }

      // The answer, at last!
      args.Result = 42;
    };
    this.backgroundWorker.ProgressChanged += (_, args) =&amp;gt;
    {
      // Update UI to reflect the progress.
      this.progressBar.Value = args.ProgressPercentage;
    };
    this.backgroundWorker.RunWorkerCompleted += (_, args) =&amp;gt;
    {
      // Update UI to reflect completion.
      this.progressBar.Value = 100;

      // Display results.
      if (args.Error != null)
        MessageBox.Show("Background task error: " + args.Error.ToString());
      else if (args.Cancelled)
        MessageBox.Show("Background task cancelled");
      else
        MessageBox.Show("Background task result: " + args.Result);

      // Reset UI.
      this.TaskIsComplete();
    };

    // Kick off the background task.
    this.backgroundWorker.RunWorkerAsync();
  }
}
&lt;/pre&gt;

&lt;p&gt;You can copy and paste this code into a cs file in the Windows Forms solution, such as MainForm.cs. The solution should then build, and you can play with the buttons to test all three scenarios (successful completion, error condition, and cancellation).&lt;/p&gt;

&lt;h4&gt;A Task That Updates Progress Frequently&lt;/h4&gt;

&lt;p&gt;Using the ProgressReporter class (defined below), translating this BGW code to Task code is rather easy; no explicit continuation scheduling is needed:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

partial class MainForm
{
  private CancellationTokenSource cancellationTokenSource;

  partial void startButton_Click(object sender, EventArgs e)
  {
    // Start the background task without error.
    this.StartBackgroundTask(false);

    // Update UI to reflect background task.
    this.TaskIsRunning();
  }

  partial void errorButton_Click(object sender, EventArgs e)
  {
    // Start the background task with error.
    this.StartBackgroundTask(true);

    // Update UI to reflect background task.
    this.TaskIsRunning();
  }

  partial void cancelButton_Click(object sender, EventArgs e)
  {
    // Cancel the background task.
    this.cancellationTokenSource.Cancel();

    // The UI will be updated by the cancellation handler.
  }

  private void StartBackgroundTask(bool causeError)
  {
    this.cancellationTokenSource = new CancellationTokenSource();
    var cancellationToken = this.cancellationTokenSource.Token;
    var progressReporter = new ProgressReporter();
    var task = Task.Factory.StartNew(() =&amp;gt;
    {
      for (int i = 0; i != 100; ++i)
      {
        // Check for cancellation 
        cancellationToken.ThrowIfCancellationRequested();

        Thread.Sleep(30); // Do some work. 

        // Report progress of the work. 
        progressReporter.ReportProgress(() =&amp;gt;
        {
          // Note: code passed to "ReportProgress" can access UI elements freely. 
          this.progressBar.Value = i;
        });
      }

      // After all that work, cause the error if requested.
      if (causeError)
      {
        throw new InvalidOperationException("Oops...");
      }

      // The answer, at last! 
      return 42;
    }, cancellationToken);

    // ProgressReporter can be used to report successful completion,
    //  cancelation, or failure to the UI thread. 
    progressReporter.RegisterContinuation(task, () =&amp;gt;
    {
      // Update UI to reflect completion.
      this.progressBar.Value = 100;

      // Display results.
      if (task.Exception != null)
        MessageBox.Show("Background task error: " + task.Exception.ToString());
      else if (task.IsCanceled)
        MessageBox.Show("Background task cancelled");
      else
        MessageBox.Show("Background task result: " + task.Result);

      // Reset UI.
      this.TaskIsComplete();
    });
  }
}
&lt;/pre&gt;

&lt;p&gt;You can copy and paste this code into a cs file in the Windows Forms solution, such as MainForm.cs. The solution won't build until you add the code for the ProgressReporter class below.&lt;/p&gt;

&lt;h4&gt;The ProgressReporter Class&lt;/h4&gt;

&lt;p&gt;The ProgressReporter class is responsible for two things: the reporting of &lt;i&gt;progress&lt;/i&gt; by a background task, and the reporting of a &lt;i&gt;final result&lt;/i&gt; by the background task.&lt;/p&gt;

&lt;p&gt;A background Task calls ProgressReporter.ReportProgress to report progress to the UI thread. This method will pause the background task until the UI has finished updating; if the task does not need to wait, then it can call ProgressReporter.ReportProgressAsync.&lt;/p&gt;

&lt;p&gt;The code starting the background Task can also use ProgressReporter to retrieve the final result of the background task. This is done by calling the ProgressReporter.RegisterContinuation method. The delegate passed to this method is executed in the UI thread context after the background task completes. The delegate can then examine the Task object for its status (see the example code above).&lt;/p&gt;

&lt;p&gt;In addition to the RegisterContinuation method, the ProgressReporter provides RegisterSucceededHandler, RegisterFaultedHandler, and RegisterCancelledHandler methods if it is easier to handle these situations separately.&lt;/p&gt;

&lt;p&gt;The code for this class is not very complex:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Threading;
using System.Threading.Tasks;

/// &amp;lt;summary&amp;gt; 
/// A class used by Tasks to report progress or completion updates back to the UI. 
/// &amp;lt;/summary&amp;gt; 
public sealed class ProgressReporter
{
  /// &amp;lt;summary&amp;gt; 
  /// The underlying scheduler for the UI&amp;#39;s synchronization context. 
  /// &amp;lt;/summary&amp;gt; 
  private readonly TaskScheduler scheduler;

  /// &amp;lt;summary&amp;gt; 
  /// Initializes a new instance of the &amp;lt;see cref=&amp;quot;ProgressReporter&amp;quot;/&amp;gt; class.
  /// This should be run on a UI thread. 
  /// &amp;lt;/summary&amp;gt; 
  public ProgressReporter()
  {
    this.scheduler = TaskScheduler.FromCurrentSynchronizationContext();
  }

  /// &amp;lt;summary&amp;gt; 
  /// Gets the task scheduler which executes tasks on the UI thread. 
  /// &amp;lt;/summary&amp;gt; 
  public TaskScheduler Scheduler
  {
    get { return this.scheduler; }
  }

  /// &amp;lt;summary&amp;gt; 
  /// Reports the progress to the UI thread. This method should be called from the task.
  /// Note that the progress update is asynchronous with respect to the reporting Task.
  /// For a synchronous progress update, wait on the returned &amp;lt;see cref=&amp;quot;Task&amp;quot;/&amp;gt;. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to perform in the context of the UI thread.
  /// Note that this action is run asynchronously on the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The task queued to the UI thread.&amp;lt;/returns&amp;gt; 
  public Task ReportProgressAsync(Action action)
  {
    return Task.Factory.StartNew(action, CancellationToken.None, TaskCreationOptions.None, this.scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Reports the progress to the UI thread, and waits for the UI thread to process
  /// the update before returning. This method should be called from the task. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to perform in the context of the UI thread.&amp;lt;/param&amp;gt; 
  public void ReportProgress(Action action)
  {
    this.ReportProgressAsync(action).Wait();
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task finishes execution,
  /// whether it finishes with success, failiure, or cancellation. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for completion.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task has completed, in the context of the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle completion. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterContinuation(Task task, Action action)
  {
    return task.ContinueWith(_ =&amp;gt; action(), CancellationToken.None, TaskContinuationOptions.None, this.scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task finishes execution,
  /// whether it finishes with success, failiure, or cancellation. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;typeparam name=&amp;quot;TResult&amp;quot;&amp;gt;The type of the task result.&amp;lt;/typeparam&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for completion.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task has completed, in the context of the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle completion. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterContinuation&amp;lt;TResult&amp;gt;(Task&amp;lt;TResult&amp;gt; task, Action action)
  {
    return task.ContinueWith(_ =&amp;gt; action(), CancellationToken.None, TaskContinuationOptions.None, this.scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task successfully finishes execution. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for successful completion.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task has successfully completed, in the context of the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle successful completion. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterSucceededHandler(Task task, Action action)
  {
    return task.ContinueWith(_ =&amp;gt; action(), CancellationToken.None, TaskContinuationOptions.OnlyOnRanToCompletion, this.scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task successfully finishes execution
  /// and returns a result. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;typeparam name=&amp;quot;TResult&amp;quot;&amp;gt;The type of the task result.&amp;lt;/typeparam&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for successful completion.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task has successfully completed, in the context of the UI thread.
  /// The argument to the action is the return value of the task.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle successful completion. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterSucceededHandler&amp;lt;TResult&amp;gt;(Task&amp;lt;TResult&amp;gt; task, Action&amp;lt;TResult&amp;gt; action)
  {
    return task.ContinueWith(t =&amp;gt; action(t.Result), CancellationToken.None, TaskContinuationOptions.OnlyOnRanToCompletion, this.Scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task becomes faulted. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for faulting.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task has faulted, in the context of the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle faulting. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterFaultedHandler(Task task, Action&amp;lt;Exception&amp;gt; action)
  {
    return task.ContinueWith(t =&amp;gt; action(t.Exception), CancellationToken.None, TaskContinuationOptions.OnlyOnFaulted, this.Scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task becomes faulted. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;typeparam name=&amp;quot;TResult&amp;quot;&amp;gt;The type of the task result.&amp;lt;/typeparam&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for faulting.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task has faulted, in the context of the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle faulting. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterFaultedHandler&amp;lt;TResult&amp;gt;(Task&amp;lt;TResult&amp;gt; task, Action&amp;lt;Exception&amp;gt; action)
  {
    return task.ContinueWith(t =&amp;gt; action(t.Exception), CancellationToken.None, TaskContinuationOptions.OnlyOnFaulted, this.Scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task is cancelled. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for cancellation.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task is cancelled, in the context of the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle cancellation. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterCancelledHandler(Task task, Action action)
  {
    return task.ContinueWith(_ =&amp;gt; action(), CancellationToken.None, TaskContinuationOptions.OnlyOnCanceled, this.Scheduler);
  }

  /// &amp;lt;summary&amp;gt; 
  /// Registers a UI thread handler for when the specified task is cancelled. 
  /// &amp;lt;/summary&amp;gt; 
  /// &amp;lt;typeparam name=&amp;quot;TResult&amp;quot;&amp;gt;The type of the task result.&amp;lt;/typeparam&amp;gt; 
  /// &amp;lt;param name=&amp;quot;task&amp;quot;&amp;gt;The task to monitor for cancellation.&amp;lt;/param&amp;gt; 
  /// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The action to take when the task is cancelled, in the context of the UI thread.&amp;lt;/param&amp;gt; 
  /// &amp;lt;returns&amp;gt;The continuation created to handle cancellation. This is normally ignored.&amp;lt;/returns&amp;gt; 
  public Task RegisterCancelledHandler&amp;lt;TResult&amp;gt;(Task&amp;lt;TResult&amp;gt; task, Action action)
  {
    return task.ContinueWith(_ =&amp;gt; action(), CancellationToken.None, TaskContinuationOptions.OnlyOnCanceled, this.Scheduler);
  }
}
&lt;/pre&gt;

&lt;p&gt;You can copy and paste this code into a cs file in the Windows Forms solution, such as ProgressReporter.cs. The solution should then build, and you can play with the buttons to test all three scenarios (successful completion, error condition, and cancellation).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6505292072998100961/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html#comment-form' title='11 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' title='Reporting Progress from Tasks'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>11</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-251804278062023453</id><published>2010-06-02T12:43:00.001-04:00</published><updated>2010-06-02T12:44:19.046-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>TransactionScope Has a Default Timeout</title><content type='html'>&lt;p&gt;I've been experimenting with using Entity Framework 4.0 hooked up to &lt;a href="http://sqlite.phxsoftware.com/"&gt;System.Data.SQLite&lt;/a&gt;, an ADO.NET provider for &lt;a href="http://www.sqlite.org/"&gt;SQLite&lt;/a&gt;. I ran into an interesting problem last night when a long-running database operation would suddenly abort the process. If run in the debugger, the application would abort (without an error or exception raised). If run outside the debugger, the application would bring up a Windows Error Reporting dialog.&lt;/p&gt;

&lt;p&gt;It's possible to copy the captured minidump while the WER dialog is being shown. When this was loaded into Visual Studio, it was revealed that the crash was due to a System.Data.SQLLite.SQLiteException thrown with the error message "The database file is locked" (SQLITE_BUSY; note that this is different than SQLITE_LOCKED).&lt;/p&gt;

&lt;p&gt;Running the program with &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb896647.aspx"&gt;DebugView&lt;/a&gt; showed more clearly what was happening. The &lt;a href="http://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.aspx"&gt;TransactionScope&lt;/a&gt; class uses a default timeout (&lt;a href="http://msdn.microsoft.com/en-us/library/system.transactions.transactionmanager.defaulttimeout.aspx"&gt;TransactionManager.DefaultTimeout&lt;/a&gt;, which has a default value of 1 minute). When the transaction timed out, it attempted to issue an abort command (SQLiteTransaction.Rollback -&gt; SQLiteCommand.ExecuteNonQuery). However, this command is issued from a timer callback (on a threadpool thread), so SQLite rejects the rollback operation because another thread is still using those tables.&lt;/p&gt;

&lt;p&gt;Passing TimeSpan.Zero into the TransactionScope constructor will instruct it to use the maximum timeout (TransactionManager.MaximumTimeout, which has a default value of 10 minutes) instead of the default. Unfortunately, the maximum timeout can only be increased by editing the machine.config file.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/251804278062023453/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/06/transactionscope-has-default-timeout.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/251804278062023453'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/251804278062023453'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/transactionscope-has-default-timeout.html' title='TransactionScope Has a Default Timeout'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4938756474476264122</id><published>2010-05-17T10:26:00.000-04:00</published><updated>2010-05-17T10:26:29.005-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Books'/><title type='text'>Review of Bill Wagner's Effective C# (2nd ed), Part 1</title><content type='html'>&lt;p&gt;I had always flat-out disregarded Effective C#. I was heavily into C++ (i.e., contributing to Boost) when Effective C++ came out, and it jumped onto the "must-read"  C++ shortlist. The only reason it worked, though, was because most of the smartest programmers had decades of experience with C++, so the "dark corners" of the language eventually became known. C#, in constrast, simply hasn't had that kind of adoption for so long. It is also still experiencing drastic changes (e.g., generic variance and dynamic typing in 4.0). My conclusion was that Effective C# cannot possibly be the same as "Effective C++ for C#".&lt;/p&gt;

&lt;p&gt;Indeed, it is not. Martin Shoemaker sums it up well in his &lt;a href="http://www.amazon.com/review/R1Y1O9FX8NU3OS/ref=cm_cr_rdp_perm"&gt;Amazon review&lt;/a&gt;: "Bill Wagner failed to deliver [the same] enlightenment [as Scott Meyers]. But that's a good thing..." After reading his review, I decided to read the book on its own (not expecting it to be the same as Effective C++). Besides, Bill Wagner gave me a copy, which was really nice of him.&lt;/p&gt;

&lt;blockquote&gt;Disclaimer: I've met Bill Wagner and heard him speak. He gave me a copy of the book for free (not even to review; just as a gift). He's also the Microsoft regional director for my region. So hopefully he won't get too mad when I point out the trouble spots along the way. :)&lt;/blockquote&gt;

&lt;p&gt;The book is split into 50 sections, each one addressing in detail a particular coding recommendation. In my review, I treat each section separately, with "plus" and "minus" signs for each of my responses. Since I consider myself an "intermediate" C# programmer (with Jon Skeet and Jeffrey Richter being the only known "expert" C# programmers), anything new I learned is listed as a plus.&lt;/p&gt;

&lt;h4&gt;Item 1: Use Properties Instead of Accessible Data Members&lt;/h4&gt;
&lt;p&gt;+ This is excellent advice, and Bill goes into good detail explaining why, including examples of what happens if this is not followed.&lt;/p&gt;
&lt;p&gt;- This advice is pretty old, though. Who doesn't already know this?&lt;/p&gt;
&lt;p&gt;- Structures used for p/Invoke interop should be mentioned as an exception to this rule.&lt;/p&gt;

&lt;h4&gt;Item 2: Prefer readonly to const&lt;/h4&gt;
&lt;p&gt;+ I had never really thought of this before, but he's right.&lt;/p&gt;
&lt;p&gt;+ Includes a few examples where const is OK, and even required.&lt;/p&gt;
&lt;p&gt;+ Also points out that default values for optional parameters may be implicitly const values.&lt;/p&gt;

&lt;h4&gt;Item 3: Prefer the is or as Operators to Casts&lt;/h4&gt;
&lt;p&gt;+ Clearly explains the semantic difference between is/as and casting, particularly regarding user-defined conversions (which I didn't know previously).&lt;/p&gt;
&lt;p&gt;- Correctly points out that as-casting does not work for value types but fails to point out the easy solution of as-casting to the corresponding nullable value type.&lt;/p&gt;
&lt;p&gt;+ Delves a bit into how foreach uses casing (again, something new I learned).&lt;/p&gt;

&lt;h4&gt;Item 4: Use Conditional Attributes Instead of #if&lt;/h4&gt;
&lt;p&gt;- The only examples given for #if usage are contract checking and tracing. The usage of #if for cross-platform compatibility (e.g., Silverlight / WPF) is ignored, though this is a perfectly valid use of #if where conditional attributes are not even a possible alternative.&lt;/p&gt;
&lt;p&gt;- Conditional attributes are suggested instead of #if statements for contract checking, when the users should have been directed to the new Contracts support in .NET 4.&lt;/p&gt;
&lt;p&gt;- Conditional attributes are suggested instead of #if statements for tracing, but the majority of applications would benefit from leaving tracing on in the field (controlled via app.config).&lt;/p&gt;

&lt;h4&gt;Item 5: Always Provide ToString()&lt;/h4&gt;
&lt;p&gt;+ Excellent advice that is often overlooked.&lt;/p&gt;
&lt;p&gt;+ Also includes helpful advice regarding IFormattable.&lt;/p&gt;
&lt;p&gt;- Minor technical error: the book states that IFormattable should accept an empty string "format" parameter, but &lt;a href="http://msdn.microsoft.com/en-us/library/system.iformattable.tostring.aspx"&gt;MSDN disagrees&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4938756474476264122/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/05/review-of-bill-wagners-effective-c-2nd.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4938756474476264122'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4938756474476264122'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/05/review-of-bill-wagners-effective-c-2nd.html' title='Review of Bill Wagner&apos;s Effective C# (2nd ed), Part 1'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-125242398816966382</id><published>2010-05-01T15:28:00.001-04:00</published><updated>2010-05-13T14:10:28.397-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MSbug'/><title type='text'>MS Bug: MvcBuildViews with One-Click Publish</title><content type='html'>&lt;p&gt;If you set MvcBuildViews to true in your web application project file, one-click publishing (at least to the local file system) will fail with a rather obscure error message:&lt;/p&gt;

&lt;blockquote&gt;It is an error to use a section registered as allowDefinition='MachineToApplication' beyond application level.  This error can be caused by a virtual directory not being configured as an application in IIS.&lt;/blockquote&gt;

&lt;p&gt;The steps to reproduce this situation (in VS2010) are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;File -&amp;gt; New Project -&amp;gt; ASP.NET MVC 2 Empty Web Application&lt;/li&gt;
&lt;li&gt;Right-click project file -&amp;gt; Unload Project&lt;/li&gt;
&lt;li&gt;Right-click project file -&amp;gt; Edit .csproj&lt;/li&gt;
&lt;li&gt;Change &amp;lt;MvcBuildViews&amp;gt; to true and save&lt;/li&gt;
&lt;li&gt;Right-click project file -&amp;gt; Reload project&lt;/li&gt;
&lt;li&gt;Create Publish Settings (File System, c:\_test, Delete all existing files prior to publish)&lt;/li&gt;
&lt;li&gt;Publish (succeeds)&lt;/li&gt;
&lt;li&gt;Publish (fails); all future Publish or Build commands will fail&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a simple workaround: run the Clean command on the web project, and then the Publish command will work again (once).&lt;/p&gt;

&lt;p&gt;This bug has been posted to &lt;a href="http://connect.microsoft.com/VisualStudio/feedback/details/556312/mvcbuildviews-does-not-play-well-with-one-click-publish"&gt;Microsoft Connect&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Why Post It Here?&lt;/h4&gt;

&lt;p&gt;Just this morning, I realized that two critical Microsoft bugs that I was watching were quietly removed from Microsoft Connect. These are bugs that I had invested a lot of time in discovering, exploring, reproducing, and detailing. One of them was closed recently as "external," so I posted a comment asking which group I should ask about the bug. Instead of replying, both of those bugs were silently removed from the entire Microsoft Connect system.&lt;/p&gt;

&lt;p&gt;I attempted to retrieve the detailed bug reports, which had cost me many hours of development time. Google had refreshed since my bugs were censored, so the Google cache was no help; same with Bing. The Internet Archive wasn't even able to get those pages; apparently Microsoft Connect disabled the Archive's access way back in May of 2008.&lt;/p&gt;

&lt;p&gt;The end result: all of the hard work I had put into those bug reports is gone. Some Microsoft team probably got brownie points for reducing their bug count. And I no longer trust Microsoft Connect. From now on, I will cross-post all Microsoft bugs to my blog.&lt;/p&gt;

&lt;h4&gt;Update (2010-05-13):&lt;/h4&gt;

&lt;p&gt;After contacting Microsoft Connect technical support, my deleted bugs have been recovered. I do still plan to cross-post, however, just in case.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/125242398816966382/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/05/ms-bug-mvcbuildviews-with-one-click.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/125242398816966382'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/125242398816966382'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/05/ms-bug-mvcbuildviews-with-one-click.html' title='MS Bug: MvcBuildViews with One-Click Publish'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6855458069268564997</id><published>2010-05-01T12:25:00.000-04:00</published><updated>2013-05-17T10:38:19.112-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>Russian Translation of "Implementing IDisposable and Finalizers: 3 Simple Rules"</title><content type='html'>&lt;p&gt;So, I was poking around &lt;a href="http://www.google.com/analytics/"&gt;Google Analytics&lt;/a&gt; today just for fun, and noticed that someone translated my post &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;"How to Implement IDisposable and Finalizers: 3 Simple Rules"&lt;/a&gt; into &lt;a href="http://habrahabr.ru/blogs/net/89720/"&gt;Russian&lt;/a&gt;. The translated article also includes each of my detailed posts.&lt;/p&gt;

&lt;p&gt;Cool! :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6855458069268564997/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/05/russian-translation-of-implementing.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6855458069268564997'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6855458069268564997'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/05/russian-translation-of-implementing.html' title='Russian Translation of &quot;Implementing IDisposable and Finalizers: 3 Simple Rules&quot;'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7831323574942590090</id><published>2010-04-30T14:07:00.000-04:00</published><updated>2010-04-30T14:07:03.916-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='dynamic'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><title type='text'>Dynamically Binding to Static (Class-Scoped) Members</title><content type='html'>&lt;p&gt;.NET 4.0 was a huge release, containing a wide variety of much-anticipated features. One of these features is the C# support for dynamic languages via the new keyword &lt;i&gt;dynamic&lt;/i&gt;. Dynamic brings some very powerful semantics into the language, and naturally also comes with a few limitations.&lt;/p&gt;

&lt;p&gt;One limitation is dynamically accessing static (class-scoped) members. The &lt;i&gt;dynamic&lt;/i&gt; type is intended to represent a dynamic instance, not a dynamic class. For example, if two different classes have the same static method defined, there is no way to use &lt;i&gt;dynamic&lt;/i&gt; to invoke those static methods.&lt;/p&gt;

&lt;p&gt;One can use the &lt;a href="http://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx"&gt;DynamicObject&lt;/a&gt; class to redirect instance member access to static member access. This approach was first explored in David Ebbo's blog post &lt;a href="http://blogs.msdn.com/davidebb/archive/2009/10/23/using-c-dynamic-to-call-static-members.aspx"&gt;"Using C# dynamic to call static members"&lt;/a&gt;. However, this approach brings with it its own limitation.&lt;/p&gt;

&lt;p&gt;The general concept is to implement a DynamicObject type that uses reflection to access static members. This makes sense since &lt;i&gt;dynamic&lt;/i&gt; may be seen as a more user-friendly type of reflection (of course, this simple interpretation ignores a lot of other DLR benefits). Unfortunately, DynamicObject does not support the concept of ref/out parameters, even though they are fully supported by &lt;i&gt;dynamic&lt;/i&gt;. There is a work-around for this: wrapping ref or out parameters, adding a layer of indirection. The RefOutArg class was invented for this purpose (&lt;a href="http://nitokitchensink.codeplex.com/SourceControl/changeset/view/51391#1073961"&gt;official source&lt;/a&gt;):&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
/// &amp;lt;summary&amp;gt;
/// A wrapper around a &amp;quot;ref&amp;quot; or &amp;quot;out&amp;quot; argument invoked dynamically.
/// &amp;lt;/summary&amp;gt;
public sealed class RefOutArg
{
    /// &amp;lt;summary&amp;gt;
    /// Initializes a new instance of the &amp;lt;see cref=&amp;quot;RefOutArg&amp;quot;/&amp;gt; class.
    /// &amp;lt;/summary&amp;gt;
    private RefOutArg()
    {
    }

    /// &amp;lt;summary&amp;gt;
    /// Gets or sets the wrapped value as an object.
    /// &amp;lt;/summary&amp;gt;
    public object ValueAsObject { get; set; }

    /// &amp;lt;summary&amp;gt;
    /// Gets or sets the wrapped value.
    /// &amp;lt;/summary&amp;gt;
    public dynamic Value
    {
        get
        {
            return this.ValueAsObject;
        }

        set
        {
            this.ValueAsObject = value;
        }
    }

    /// &amp;lt;summary&amp;gt;
    /// Creates a new instance of the &amp;lt;see cref=&amp;quot;RefOutArg&amp;quot;/&amp;gt; class wrapping the default value of &amp;lt;typeparamref name=&amp;quot;T&amp;quot;/&amp;gt;.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The type of value to wrap.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;returns&amp;gt;A new instance of the &amp;lt;see cref=&amp;quot;RefOutArg&amp;quot;/&amp;gt; class wrapping the default value of &amp;lt;typeparamref name=&amp;quot;T&amp;quot;/&amp;gt;.&amp;lt;/returns&amp;gt;
    public static RefOutArg Create&amp;lt;T&amp;gt;()
    {
        return new RefOutArg { ValueAsObject = default(T) };
    }

    /// &amp;lt;summary&amp;gt;
    /// Creates a new instance of the &amp;lt;see cref=&amp;quot;RefOutArg&amp;quot;/&amp;gt; class wrapping the specified value.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;The value to wrap.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;A new instance of the &amp;lt;see cref=&amp;quot;RefOutArg&amp;quot;/&amp;gt; class wrapping the specified value.&amp;lt;/returns&amp;gt;
    public static RefOutArg Create(object value)
    {
        return new RefOutArg { ValueAsObject = value };
    }
}
&lt;/pre&gt;

&lt;p&gt;RefOutArg is a very simple class that contains a single value (which can be accessed either as &lt;i&gt;object&lt;/i&gt; or &lt;i&gt;dynamic&lt;/i&gt;).&lt;/p&gt;

&lt;p&gt;The DynamicStaticTypeMembers class enables dynamic access to static members. It is similar to David's StaticMembersDynamicWrapper, only this class allows setting static properties, invoking overloaded static methods, and ref/out parameters using RefOutArg (&lt;a href="http://nitokitchensink.codeplex.com/SourceControl/changeset/view/51391#1073960"&gt;official source&lt;/a&gt;):&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
using System;
using System.Diagnostics;
using System.Diagnostics.Contracts;
using System.Dynamic;
using System.Linq;
using System.Reflection;

/// &amp;lt;summary&amp;gt;
/// A dynamic object that allows access to a type&amp;#39;s static members, resolved dynamically at runtime.
/// &amp;lt;/summary&amp;gt;
public sealed class DynamicStaticTypeMembers : DynamicObject
{
    /// &amp;lt;summary&amp;gt;
    /// The underlying type.
    /// &amp;lt;/summary&amp;gt;
    private readonly Type type;

    /// &amp;lt;summary&amp;gt;
    /// Initializes a new instance of the &amp;lt;see cref=&amp;quot;DynamicStaticTypeMembers&amp;quot;/&amp;gt; class wrapping the specified type.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;type&amp;quot;&amp;gt;The underlying type to wrap.&amp;lt;/param&amp;gt;
    private DynamicStaticTypeMembers(Type type)
    {
        this.type = type;
    }

    /// &amp;lt;summary&amp;gt;
    /// Gets a value for a static property defined by the wrapped type.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;binder&amp;quot;&amp;gt;Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the &amp;lt;see cref=&amp;quot;T:System.Dynamic.DynamicObject&amp;quot;/&amp;gt; class, binder.Name returns &amp;quot;SampleProperty&amp;quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;result&amp;quot;&amp;gt;The result of the get operation. For example, if the method is called for a property, you can assign the property value to &amp;lt;paramref name=&amp;quot;result&amp;quot;/&amp;gt;.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;
    /// true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
    /// &amp;lt;/returns&amp;gt;
    public override bool TryGetMember(GetMemberBinder binder, out object result)
    {
        var prop = this.type.GetProperty(binder.Name, BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.Public);
        if (prop == null)
        {
            result = null;
            return false;
        }

        result = prop.GetValue(null, null);
        return true;
    }

    /// &amp;lt;summary&amp;gt;
    /// Sets a value for a static property defined by the wrapped type.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;binder&amp;quot;&amp;gt;Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = &amp;quot;Test&amp;quot;, where sampleObject is an instance of the class derived from the &amp;lt;see cref=&amp;quot;T:System.Dynamic.DynamicObject&amp;quot;/&amp;gt; class, binder.Name returns &amp;quot;SampleProperty&amp;quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;The value to set to the member. For example, for sampleObject.SampleProperty = &amp;quot;Test&amp;quot;, where sampleObject is an instance of the class derived from the &amp;lt;see cref=&amp;quot;T:System.Dynamic.DynamicObject&amp;quot;/&amp;gt; class, the &amp;lt;paramref name=&amp;quot;value&amp;quot;/&amp;gt; is &amp;quot;Test&amp;quot;.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;
    /// true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
    /// &amp;lt;/returns&amp;gt;
    public override bool TrySetMember(SetMemberBinder binder, object value)
    {
        var prop = this.type.GetProperty(binder.Name, BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.Public);
        if (prop == null)
        {
            return false;
        }

        prop.SetValue(null, value, null);
        return true;
    }

    /// &amp;lt;summary&amp;gt;
    /// Calls a static method defined by the wrapped type.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;binder&amp;quot;&amp;gt;Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the &amp;lt;see cref=&amp;quot;T:System.Dynamic.DynamicObject&amp;quot;/&amp;gt; class, binder.Name returns &amp;quot;SampleMethod&amp;quot;. The binder.IgnoreCase property specifies whether the member name is case-sensitive.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;args&amp;quot;&amp;gt;The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the &amp;lt;see cref=&amp;quot;T:System.Dynamic.DynamicObject&amp;quot;/&amp;gt; class, &amp;lt;c&amp;gt;args[0]&amp;lt;/c&amp;gt; is equal to 100.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;result&amp;quot;&amp;gt;The result of the member invocation.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;
    /// true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
    /// &amp;lt;/returns&amp;gt;
    public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    {
        // Convert any RefOutArg arguments into ref/out arguments
        var refArguments = new RefOutArg[args.Length];
        for (int i = 0; i != args.Length; ++i)
        {
            refArguments[i] = args[i] as RefOutArg;
            if (refArguments[i] != null)
            {
                args[i] = refArguments[i].ValueAsObject;
            }
        }

        // Resolve the method
        const BindingFlags flags = BindingFlags.InvokeMethod | BindingFlags.FlattenHierarchy | BindingFlags.Static | BindingFlags.Public;
        object state;
        MethodBase method;

        var methods = this.type.GetMethods(flags).Where(x =&amp;gt; x.Name == binder.Name);
        method = Type.DefaultBinder.BindToMethod(flags, methods.ToArray(), ref args, null, null, null, out state);

        // Ensure that all ref/out arguments were properly wrapped
        if (method.GetParameters().Count(x =&amp;gt; x.ParameterType.IsByRef) != refArguments.Count(x =&amp;gt; x != null))
        {
            throw new ArgumentException(&amp;quot;ref/out parameters need a RefOutArg wrapper when invoking &amp;quot; + this.type.Name + &amp;quot;.&amp;quot; + binder.Name + &amp;quot;.&amp;quot;);
        }

        // Invoke the method, allowing exceptions to propogate
        try
        {
            result = method.Invoke(null, args);
        }
        finally
        {
            if (state != null)
            {
                Type.DefaultBinder.ReorderArgumentArray(ref args, state);
            }

            // Convert any ref/out arguments into RefOutArg results
            for (int i = 0; i != args.Length; ++i)
            {
                if (refArguments[i] != null)
                {
                    refArguments[i].ValueAsObject = args[i];
                }
            }
        }

        return true;
    }

    /// &amp;lt;summary&amp;gt;
    /// Creates a new instance of the &amp;lt;see cref=&amp;quot;DynamicStaticTypeMembers&amp;quot;/&amp;gt; class wrapping the specified type.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;type&amp;quot;&amp;gt;The underlying type to wrap. May not be &amp;lt;c&amp;gt;null&amp;lt;/c&amp;gt;.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;An instance of &amp;lt;see cref=&amp;quot;DynamicStaticTypeMembers&amp;quot;/&amp;gt;, as a dynamic type.&amp;lt;/returns&amp;gt;
    public static dynamic Create(Type type)
    {
        Contract.Requires&amp;lt;ArgumentNullException&amp;gt;(type != null);
        return new DynamicStaticTypeMembers(type);
    }

    /// &amp;lt;summary&amp;gt;
    /// Creates a new instance of the &amp;lt;see cref=&amp;quot;DynamicStaticTypeMembers&amp;quot;/&amp;gt; class wrapping the specified type.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;typeparam name=&amp;quot;T&amp;quot;&amp;gt;The underlying type to wrap.&amp;lt;/typeparam&amp;gt;
    /// &amp;lt;returns&amp;gt;An instance of &amp;lt;see cref=&amp;quot;DynamicStaticTypeMembers&amp;quot;/&amp;gt;, as a dynamic type.&amp;lt;/returns&amp;gt;
    public static dynamic Create&amp;lt;T&amp;gt;()
    {
        return new DynamicStaticTypeMembers(typeof(T));
    }
}
&lt;/pre&gt;

&lt;p&gt;An instance of DynamicStaticTypeMembers may be constructed by passing either a generic type or Type instance into the Create method:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
var mathClass = DynamicStaticTypeMembers.Create(typeof(Math));
var intEqualityComparerClass = DynamicStaticTypeMembers.Create&amp;lt;EqualityComparer&amp;lt;int&amp;gt;&amp;gt;();
var threadClass = DynamicStaticTypeMembers.Create&amp;lt;Thread&amp;gt;();
var intClass = DynamicStaticTypeMembers.Create&amp;lt;int&amp;gt;();
&lt;/pre&gt;

&lt;p&gt;Once created, any static property or method of that class may be invoked using instance syntax:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
int result0 = mathClass.Min(13, 15); // invokes Math.Min(int, int)
var comparer = intEqualityComparerClass.Default; // gets EqualityComparer&amp;lt;int&amp;gt;.Default
threadClass.CurrentPrincipal = new GenericPrincipal(new GenericIdentity("Bob"), new string[] { }); // sets Thread.CurrentPrincipal
&lt;/pre&gt;

&lt;p&gt;Invoking methods with ref or out parameters is more awkward, but possible:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
int result1;
var result1arg = RefOutArg.Create&amp;lt;int&amp;gt;(); // or: RefOutArg.Create(0);
intClass.TryParse("13", result1arg); // invokes int.TryParse(string, out int)
result1 = result1arg.Value;
&lt;/pre&gt;

&lt;p&gt;This can be a powerful tool in some cases, allowing a higher form of "duck typing." For instance, the new &lt;a href="http://msdn.microsoft.com/en-us/library/system.numerics.biginteger.aspx"&gt;BigInteger&lt;/a&gt; numeric type defines its own &lt;i&gt;DivRem&lt;/i&gt; method similar to the existing &lt;i&gt;DivRem&lt;/i&gt; methods defined on the &lt;a href="http://msdn.microsoft.com/en-us/library/system.math.aspx"&gt;Math&lt;/a&gt; class for &lt;i&gt;int&lt;/i&gt; and &lt;i&gt;long&lt;/i&gt;. Using DynamicStaticTypeMembers, it is possible to define a generic &lt;i&gt;DivRem&lt;/i&gt; that attempts to invoke &lt;i&gt;Math.DivRem&lt;/i&gt; but falls back on a &lt;i&gt;DivRem&lt;/i&gt; defined by the numeric type:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
public static T DivRem&amp;lt;T&amp;gt;(T dividend, T divisor, out T remainder)
{
    var remainderArg = RefOutArg.Create&amp;lt;T&amp;gt;();
    dynamic ret;
    try
    {
        var dT = DynamicStaticTypeMembers.Create(typeof(Math));
        ret = dT.DivRem(dividend, divisor, remainderArg);
    }
    catch
    {
        var dT = DynamicStaticTypeMembers.Create&amp;lt;T&amp;gt;();
        ret = dT.DivRem(dividend, divisor, remainderArg);
    }

    remainder = remainderArg.Value;
    return ret;
}
&lt;/pre&gt;

&lt;p&gt;Our generic &lt;i&gt;DivRem&lt;/i&gt; can be invoked with T being &lt;i&gt;int&lt;/i&gt;, &lt;i&gt;long&lt;/i&gt;, &lt;i&gt;BigInteger&lt;/i&gt;, or any other type as long as that type defines its own &lt;i&gt;DivRem&lt;/i&gt; with a compatible signature.&lt;/p&gt;

&lt;p&gt;Most programs will not require this level of type flexibility, but it's nice to know it's there for those few cases that do need it.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7831323574942590090/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/dynamically-binding-to-static-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7831323574942590090'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7831323574942590090'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/dynamically-binding-to-static-class.html' title='Dynamically Binding to Static (Class-Scoped) Members'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7825436537386870298</id><published>2010-04-26T10:20:00.001-04:00</published><updated>2010-04-26T13:41:27.365-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Lighter Notes'/><title type='text'>Innovations Are Great, but Content Is Necessary</title><content type='html'>&lt;p&gt;Remember when Bing came out? It was a little freaky how every single Microsoft blogger &lt;i&gt;simultaneously&lt;/i&gt; started referencing Bing instead of Google. In fact, Google has become something of a taboo among Microsoft bloggers. Shortly after Bing's launch, I heard a couple of Microsoft presenters make light of the topic ("so if you Google this... ah, I mean... &lt;i&gt;Bing&lt;/i&gt; this, because we don't use that &lt;i&gt;other&lt;/i&gt; search engine, right?" as he continues to use Google); but they were careful not to get on record (their blog entries always do use Bing).&lt;/p&gt;

&lt;p&gt;Bing has some pretty good innovations. I saw a video of Bing Maps in particular, where they showed not only the 3-D perspective with skylines and everything, but also live video if it was being shared with location data. That was pretty cool, I thought. I've also read how their street view is higher resolution than Google's (though Google has now gone near-HD as well, and are gradually redoing all their older street views).&lt;/p&gt;

&lt;p&gt;The other day, I was looking for a good street view of an unfamiliar nearby location; Google's was too fuzzy to make out the name of the business, so I figured I'd give Bing a try. Bing didn't have any at all, which is not too surprising (since I live in Northern Michigan). I tried looking up a much larger city, with no luck. How about the state capital? No.&lt;/p&gt;

&lt;p&gt;It turns out that all of Bing's street view coverage in the entire state is just a few streets in downtown Detroit. So all of Bing's innovation is completely worthless to me (and the more than 9 million other people in non-Detroit Michigan). Google, on the other hand, kept their innovation secret until they could provide it to the majority of people in the country. Their "street view" innovation was immediately useful when it was announced.&lt;/p&gt;

&lt;p&gt;Because they had content.&lt;/p&gt;

&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="http://2.bp.blogspot.com/_lkN-6AUYgOI/S9WMFuew6QI/AAAAAAAADJA/2urMRxCoqN4/s1600/bing-cropped.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/_lkN-6AUYgOI/S9WMFuew6QI/AAAAAAAADJA/2urMRxCoqN4/s320/bing-cropped.PNG" tt="true" /&gt;&lt;/a&gt;
&lt;a href="http://3.bp.blogspot.com/_lkN-6AUYgOI/S9WMGtzRWnI/AAAAAAAADJI/vt7YJTEBvfo/s1600/google-cropped.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/_lkN-6AUYgOI/S9WMGtzRWnI/AAAAAAAADJI/vt7YJTEBvfo/s320/google-cropped.PNG" tt="true" /&gt;&lt;/a&gt;
&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7825436537386870298/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/innovations-are-great-but-content-is.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7825436537386870298'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7825436537386870298'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/innovations-are-great-but-content-is.html' title='Innovations Are Great, but Content Is Necessary'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/_lkN-6AUYgOI/S9WMFuew6QI/AAAAAAAADJA/2urMRxCoqN4/s72-c/bing-cropped.PNG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5795958772371687</id><published>2010-04-23T16:33:00.001-04:00</published><updated>2010-04-23T16:34:49.618-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='dynamic'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Generic Methods with Dynamic Implementations</title><content type='html'>&lt;p&gt;Dynamic binding is one of the many new features included in .NET 4.0. I've been doing some testing today with mixing dynamic and generics, and came across a slightly obscure scenario that may or may not prove useful in the future.&lt;/p&gt;

&lt;p&gt;When a dynamic object performs method resolution at runtime, the result is cached by the DLR in a "call site". The next time this code is run, the call site is only recomputed if there is a cache miss (i.e., different types of arguments are passed to the method).&lt;/p&gt;

&lt;p&gt;We can use generics to turn one call site into many call sites, all cached independently, thereby improving performance when invoked later:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static dynamic SingleCallSite(dynamic arg1, dynamic arg2)
{
    return arg1 + arg2;
}

static T MultipleCallSites&amp;lt;T&amp;gt;(T arg1, T arg2)
{
    dynamic darg1 = arg1;
    return darg1 + arg2;
}
&lt;/pre&gt;

&lt;p&gt;Even though the &lt;b&gt;SingleCallSite&lt;/b&gt; method only has one call site (for the &lt;b&gt;+&lt;/b&gt; operator) and the &lt;b&gt;MultipleCallSites&lt;/b&gt; method has two call sites (one for the &lt;b&gt;+&lt;/b&gt; operator, and one for converting the dynamic result to &lt;b&gt;T&lt;/b&gt;), &lt;b&gt;MultipleCallSites&lt;/b&gt; reliably runs faster, as this remarkably unscientific test code demonstrates:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static void Main(string[] args)
{
    try
    {
        int count = 1000000;
        Stopwatch sw = Stopwatch.StartNew();
        for (int i = 0; i != count; ++i)
        {
            MultipleCallSites(13, 17);
            MultipleCallSites("test1", "merged");
            MultipleCallSites(30.5, 23.5);
        }
        sw.Stop();
        Console.WriteLine("Multiple call sites: " + sw.Elapsed);
        sw.Restart();
        for (int i = 0; i != count; ++i)
        {
            SingleCallSite(13, 17);
            SingleCallSite("test1", "merged");
            SingleCallSite(30.5, 23.5);
        }
        sw.Stop();
        Console.WriteLine("Single call site: " + sw.Elapsed);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error: [" + ex.GetType().Name + "]: " + ex.Message);
    }

    Console.ReadKey();
}
&lt;/pre&gt;

&lt;p&gt;This idea came from Luca Bolognese's blog post &lt;a href="http://blogs.msdn.com/lucabol/archive/2009/02/05/simulating-inumeric-with-dynamic-in-c-4-0.aspx"&gt;Simulating INumeric with dynamic in C# 4.0&lt;/a&gt;, where he states that with a generic signature "you get a different call site with each combination of type arguments and, since they are separate, the binding caches should stay small."&lt;/p&gt;

&lt;p&gt;Final note: this is only an implementation detail of the DLR. These performance characteristics may change in a .NET service pack or future version.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5795958772371687/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/generic-methods-with-dynamic.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5795958772371687'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5795958772371687'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/generic-methods-with-dynamic.html' title='Generic Methods with Dynamic Implementations'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5548205258777910940</id><published>2010-04-19T11:56:00.000-04:00</published><updated>2010-04-19T11:56:39.310-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='PDBs'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><title type='text'>SVN Source Indexing to CodePlex</title><content type='html'>&lt;p&gt;Open-source libraries naturally come with source code. However, the source is often not easy to use; compiling from source usually includes duplicating another programmer's toolset. Most programmers who use open-source libraries only use the executables, and ignore the source. They act as a "consumer programmer," a technologically-savvy end-user of the library, which was created by a "producer programmer."&lt;/p&gt;

&lt;p&gt;When the consumer programmer is debugging, it would certainly be nice to step into the producer programmer's source code. Microsoft has enabled this for many of the .NET source files in their libraries. There is a way to enable a similar capability for open-source libraries as well.&lt;/p&gt;

&lt;h4&gt;The PDB&lt;/h4&gt;

&lt;p&gt;The symbol file (PDB) for an executable (DLL) includes information about where the original source files were (see &lt;a href="http://www.wintellect.com/CS/blogs/jrobbins/archive/2009/05/11/pdb-files-what-every-developer-must-know.aspx"&gt;PDB Files: What Every Developer Must Know&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/magazine/cc163563.aspx"&gt;Source Server Helps You Kill Bugs Dead&lt;/a&gt;, and of course the &lt;a href="http://www.amazon.com/gp/product/0735622027?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735622027"&gt;Debugging .NET Apps&lt;/a&gt; book from the bugslayer man himself). Normally, this is just a simple file path, so the source file will only be found if the producer programmer is debugging his own code. The consumer programmer is out of luck.&lt;/p&gt;

&lt;p&gt;However, there's a way for the producer programmer to add information to the PDB; specifically, he can add instructions to the PDB to check files out of version control on demand. This works great for the consumer programmer if the producer programmer uses a public source control server like CodePlex. In this case, if the consumer programmer needs to debug the library code, they can literally just step into it, and Visual Studio will automatically check out the correct source file from the matching revision and load it into its workspace!&lt;/p&gt;

&lt;p&gt;There's a bit of setup to be done, and it's not &lt;i&gt;quite&lt;/i&gt; automatic (there are a few prompts for security reasons). But it is still cool.&lt;/p&gt;

&lt;h4&gt;The Producer Programmer: Distribute Source-Indexed PDBs&lt;/h4&gt;

&lt;p&gt;The programmer who is developing the library must distribute "source-indexed" PDBs along with his library DLLs. A "source-indexed" PDB is a PDB that has extra information so it knows how to check out the appropriate source file. There are a few installation prerequisites for the producer programmer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.microsoft.com/whdc/Devtools/Debugging/default.mspx"&gt;Debugging Tools for Windows&lt;/a&gt; - This includes the executables, command scripts, and Perl scripts necessary to source-index a PDB.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.activestate.com/activeperl/"&gt;Perl&lt;/a&gt; - Necessary to run the Perl scripts.&lt;/li&gt;
&lt;li&gt;svn.exe (in %PATH%) - This is usually installed (and placed in %PATH%) by a &lt;a href="http://subversion.apache.org/packages.html#windows"&gt;Subversion binary package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the producer programmer is ready to create a release of his library, he follows these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build the library binaries (and PDBs).&lt;/li&gt;
&lt;li&gt;Ensure all source code is checked in.&lt;/li&gt;
&lt;li&gt;Source-index the PDBs; assuming the PDBs are in the "..\Binaries" directory and DTfW was installed in "c:\Program Files\Debugging Tools for Windows (x86)":&lt;br/&gt;
&lt;i&gt;"c:\Program Files\Debugging Tools for Windows (x86)\srcsrv\ssindex.cmd" /SYSTEM=SVN /SYMBOLS=..\Binaries /Debug&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the PDBs in "..\Binaries" are updated in-place to point to the current source in source control. They are now ready to be released (note that the PDBs should be included in every release along with DLLs and XML documentation files).&lt;/p&gt;

&lt;blockquote&gt;Note that the "/Debug" switch is just an output verbosity option for SSIndex.cmd. The output from SSIndex should include a "wrote stream" message for each PDB. If there is anything in the output that looks like "[ERROR]", "zero source files found", or if no PDB files were found, then the source indexing was &lt;b&gt;not&lt;/b&gt; successful for those PDB files.&lt;/blockquote&gt;

&lt;p&gt;The following command can be used to verify that the PDB was correctly source indexed:&lt;br/&gt;
&lt;i&gt;"c:\Program Files\Debugging Tools for Windows (x86)\srcsrv\srctool.exe" MyLibrary.pdb&lt;/i&gt;&lt;br/&gt;
If the PDB is not source indexed, srctool will simply print "MyLibrary.pdb is not source indexed". If it is source indexed, then it will display all the source server commands that will retrieve the correct source files.&lt;/p&gt;

&lt;h4&gt;The Consumer Programmer: Allow Source-Indexed PDBs&lt;/h4&gt;

&lt;p&gt;The consumer programmer does have an installation prerequisite; since Visual Studio will use svn.exe to retrieve the source files, it must first be installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;svn.exe (in %PATH%) - This is usually installed (and placed in %PATH%) by a &lt;a href="http://subversion.apache.org/packages.html#windows"&gt;Subversion binary package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once svn.exe is in %PATH%, the consumer programmer may enable source-indexed PDBs by checking the following option box in Visual Studio 2010: Options -&amp;gt; Debugging -&amp;gt; General -&amp;gt; Enable source server support.&lt;/p&gt;

&lt;p&gt;At this point, a consumer programmer may step into the library code, and (after prompting for permission) Visual Studio will download the correct source file and allow stepping through the source.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5548205258777910940/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/svn-source-indexing-to-codeplex.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5548205258777910940'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5548205258777910940'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/svn-source-indexing-to-codeplex.html' title='SVN Source Indexing to CodePlex'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2774290211569828595</id><published>2010-04-15T23:20:00.004-04:00</published><updated>2010-04-19T11:57:25.572-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Language design'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MVVM/WPF'/><category scheme='http://www.blogger.com/atom/ns#' term='Linq'/><title type='text'>Declarative Programming Languages</title><content type='html'>&lt;p&gt;There's a lot of excitement about declarative languages, as opposed to imperative languages.&lt;/p&gt;

&lt;p&gt;Any programmer who has been around for a while knows that there's &lt;i&gt;always been&lt;/i&gt; a lot of excitement about declarative languages. There's a tendency to overinflate their importance. Why, by using declarative constructs, we can program more efficiently (developer time gains)! Why, by using declarative constructs, we can have more intelligent interpreters (run-time gains)! Why, by using declarative constructs, we can have threadsafe programs (safety gains)!&lt;/p&gt;

&lt;p&gt;And all of this is true, &lt;b&gt;but only to a point.&lt;/b&gt; That point is at a very specific location: where the designers of the declarative language &lt;i&gt;stopped adding features.&lt;/i&gt; So, declarative languages work great when the programmers stay within the box. However, no declarative language can do everything, and one of two things happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The declarative language eventually ceases to evolve; e.g., a standards body decides that it is complete.&lt;/li&gt;
&lt;li&gt;The declarative language includes extension points (which are not written in the declarative language itself), so that others may add to the language; this results in a handful of experts feeding libraries to the masses.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neither solution is maintainable in the long term.&lt;/p&gt;

&lt;blockquote&gt;Note that I'm only addressing declarative &lt;i&gt;programming&lt;/i&gt; here; declarative languages are perfectly well-suited for &lt;i&gt;declaring&lt;/i&gt; things, such as file structure or GUI layouts. But why do we take a perfectly good declarative language and try to shove programs into it?&lt;/blockquote&gt;

&lt;h4&gt;Blast from the Past&lt;/h4&gt;

&lt;p&gt;I'm a relatively new programmer, entering the workforce in 1995. There was a big, new thing that came out around that time. It was called XML. XML was a declarative language, and if you believed all the hype about it, it could cure cancer.&lt;/p&gt;

&lt;p&gt;XML was perfectly fine for what it was used for: structuring text data. Binary data was a bit more complex, but there were ways to make it work. Relational databases didn't fit perfectly into the XML world, but there were mappings that worked sufficiently. XML was even used to represent function calls (as data).&lt;/p&gt;

&lt;p&gt;So, XML worked for data, and worked well. But then some genius decided to write an XML &lt;i&gt;programming language.&lt;/i&gt; There was lot of talk about how XML declarative languages would be the future of all programming - seriously!&lt;/p&gt;

&lt;p&gt;A lot of work went into designing various XML languages, only one of which has survived. It is called XSLT, and pretty much everyone hates it. Is it possible to program in XML? Yes. It is fun? No.&lt;/p&gt;

&lt;h4&gt;A Word about Functional Languages&lt;/h4&gt;

&lt;p&gt;Functional languages are sometimes called declarative languages, but I disagree with this classification. Imperative languages and functional languages are both concerned with &lt;i&gt;how&lt;/i&gt; a program is supposed to run. Declarative languages attempt to make the semantic leap to only being concerned with &lt;i&gt;what&lt;/i&gt; a program is supposed to do.&lt;/p&gt;

&lt;p&gt;When looked at from this perspective, functional languages are really the same as imperative languages; they are just inside-out from each other. Declarative languages are completely different.&lt;/p&gt;

&lt;h4&gt;Partially-Declarative Languages&lt;/h4&gt;

&lt;p&gt;LINQ is an example of a declarative sub-language within an imperative language (C# or VB). LINQ, when used with the Queryable system, will actually build a complete expression tree. The LINQ provider can then use that higher-level view of the code to generate the most efficient implementation.&lt;/p&gt;

&lt;p&gt;Since anyone is free to implement a LINQ provider, LINQ is an example of a declarative language with an extension point (the Queryable system). People have written providers for an amazing array of data sources.&lt;/p&gt;

&lt;p&gt;The problem: implementing a LINQ provider is &lt;a href="http://blogs.msdn.com/mattwar/pages/linq-links.aspx"&gt;hard!&lt;/a&gt; Getting one working is hard enough; making it general-purpose (i.e., intelligently handling all LINQ operations) is a nightmare; and creating one that is efficient is next to impossible. So, this leads us to the predictable conclusion: a handful of provider authors attempting to satisfy the demands of the masses. Furthermore, the vast majority of LINQ providers only do the minimum necessary to get it working; they are neither general-purpose nor efficient.&lt;/p&gt;

&lt;h4&gt;Declarative Languages Aren't All Bad&lt;/h4&gt;

&lt;p&gt;If a programmer can stay within the existing boundaries of a declarative language, then they are very useful! I love LINQ and I love XAML data binding, both of which are declarative. I'm just trying to point out that "declarative languages" are not general-purpose solutions for all problems.&lt;/p&gt;

&lt;p&gt;Microsoft made a genius decision with regards to LINQ in particular: they allow a programmer to "step out" of the declarative language when the language falls short. They did this by including LINQ to Objects, which is &lt;i&gt;functional&lt;/i&gt; and not &lt;i&gt;declarative,&lt;/i&gt; technically speaking. Every LINQ provider has its own limitations (that "point" where the implementors stopped adding features), and at that point one can use "AsEnumerable" to transfer from the declarative system to a functional one.&lt;/p&gt;

&lt;blockquote&gt;Example: LINQ to Entities cannot select new object instances like this: "db.ServiceSet.Select(x =&amp;gt; new SelectListItem { Text = x.Name, Value = x.Id.ToString(), Selected = x.Id == serviceId });"&lt;br/&gt;However, one can use LINQ to Entities to retrieve the entity set and then switch to LINQ to Objects to complete the transformation: "db.ServiceSet.AsEnumerable().Select(x =&amp;gt; new SelectListItem { Text = x.Name, Value = x.Id.ToString(), Selected = x.Id == serviceId });"&lt;/blockquote&gt;

&lt;h4&gt;Final Rant: Declarative Code Is Still Code&lt;/h4&gt;

&lt;p&gt;Remember a few years ago when XAML came out? I had a hard time keeping from laughing out loud at some of those demos.&lt;/p&gt;

&lt;p&gt;First off, the central breakthrough is that we're now using &lt;i&gt;declarations&lt;/i&gt; to &lt;i&gt;declare&lt;/i&gt; the UI (instead of doing it with code, a la WinForms)... But it's kind of funny that before WinForms, the way to declare the UI was using an old thing called a dialog resource... and this dialog resource was &lt;i&gt;declared&lt;/i&gt; within an RC file, which was written in a &lt;i&gt;declarative language&lt;/i&gt;. Going in circles is always amusing.&lt;/p&gt;

&lt;p&gt;The &lt;i&gt;really&lt;/i&gt; funny part of a lot of these demos, though, is when they would try to code in XAML. After showing how &lt;i&gt;amazing&lt;/i&gt; it was to declare a UI in XML, they showed us how it could even support (limited) programming! Without fail, after cutting and pasting tons of XAML, they would show some fancy UI animation and proudly proclaim: &lt;i&gt;"with zero lines of code!"&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;So... um... you just took a dozen lines of C# and replaced it with a couple hundred lines of XAML? And that's an improvement? I'm sorry to break it to you, fella, but &lt;b&gt;XAML is still code!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Of course, XAML is good for declaring things like UIs or even animation sequences. But programmers trying to do real &lt;i&gt;programming&lt;/i&gt; in XAML quickly run into its limitations. Ever try to chain a converter? Or apply a filter on a collection? Just like LINQ, XAML can be extended, but it is surprisingly difficult.&lt;/p&gt;

&lt;p&gt;MVVM advocates originally attempted to achieve the "no code-behind nirvana," but quickly ran into the limitations of the declarative language (XAML). A handful of brave souls attempted to fill the gaps - at least for their specific needs - but the general advice from the MVVM community has shifted to the more practical "minimal code-behind."&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;The fundamental problem with every declarative language is that the programmer has to place themselves at the complete mercy of the language designer(s). It's simply unmaintainable as a permanent solution. I believe that every sane programmer will continue &lt;i&gt;programming&lt;/i&gt; in imperative languages and continue &lt;i&gt;declaring&lt;/i&gt; in declarative languages.&lt;/p&gt;

&lt;p&gt;And there's nothing wrong with that, in spite of the declarative programming hype.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2774290211569828595/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/declarative-programming-languages.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2774290211569828595'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2774290211569828595'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/declarative-programming-languages.html' title='Declarative Programming Languages'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8162587305798208266</id><published>2010-04-13T23:15:00.001-04:00</published><updated>2010-04-15T23:25:24.072-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Oops'/><title type='text'>VS2010 WebDeploy and VS2010 Web Deployment Projects Beta 1</title><content type='html'>&lt;h4&gt;Edit 2010-04-15&lt;/h4&gt;

&lt;p&gt;&lt;b&gt;VS2010 will overwrite SourceWebPhysicalPath when re-loading a solution containing a WDP, so the fix below will not work. It is kept on this site for historical purposes only.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;VS2010 includes a &lt;a href="http://live.visitmix.com/MIX10/Sessions/FT14"&gt;number of enhancements&lt;/a&gt; to web deployment, as &lt;a href="http://www.hanselman.com/blog/"&gt;Scott&lt;/a&gt; points out. One of the coolest is the &lt;a href="http://msdn.microsoft.com/en-us/library/dd465326(VS.100).aspx"&gt;web.config transformations&lt;/a&gt;. They also included all kinds of functionality for automatically setting up IIS as part of a "deployment package" (getting pretty close to re-writing Windows Installer, actually).&lt;/p&gt;

&lt;p&gt;The end result is a really powerful solution that a mom-and-pop web guy like me doesn't really need. I would like the ability to precompile a web application, and this is one of the "blind spots" of VS2010.&lt;/p&gt;

&lt;p&gt;Web Deployment Projects (WDP) does have a (beta) release for VS2010, though it starts to show its age when lined up next to VS2010's web deployment. It does, however, have the capability to precompile web apps.&lt;/p&gt;

&lt;p&gt;It's possible to have the best of both worlds: web.config transformations from VS2010 and precompiling from WDP. All you have to do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a VS2010 deployment to the local file system, in a "staging" directory. Set up the web.config transformations and make any other necessary changes.&lt;/li&gt;
&lt;li&gt;Create a WDP for the web application. By default, it will copy the web application project itself rather than the deployment output.&lt;/li&gt;
&lt;li&gt;Change the WDP project file to set the SourceWebPhysicalPath property to your staging directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre class="brush:xml"&gt;
&amp;lt;SourceWebPhysicalPath&amp;gt;c:\staging\mywebsite&amp;lt;/SourceWebPhysicalPath&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This will work as long as you don't need the advanced IIS application setup options available through VS2010 deployment. If you do, then you're probably better off incorporating ASP.NET compilation and merging as a post-build event or within the MSBuild file.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8162587305798208266/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/vs2010-webdeploy-and-vs2010-web.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8162587305798208266'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8162587305798208266'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/vs2010-webdeploy-and-vs2010-web.html' title='VS2010 WebDeploy and VS2010 Web Deployment Projects Beta 1'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8838231509345255188</id><published>2010-04-13T21:33:00.001-04:00</published><updated>2010-04-13T21:42:27.652-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MSBuild'/><title type='text'>VS2010 Without Web Deployment Projects</title><content type='html'>&lt;p&gt;Visual Studio 2010 was released yesterday, as just about everyone knows. I didn't find out until tonight that the &lt;a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=711a2eef-b107-4784-9063-c978edc498cd"&gt;Beta 1 of WDP for VS2010&lt;/a&gt; is also available.&lt;/p&gt;

&lt;p&gt;I've been working on getting the &lt;a href="http://www.landmarkbaptist.ws/"&gt;church website&lt;/a&gt; moved to the new platform. It has gone fairly smoothly, aside from a &lt;a href="http://forums.asp.net/t/1546705.aspx"&gt;compilation error&lt;/a&gt; which forced me to move the EF model into a separate assembly (but since that's best practice anyway, I didn't mind).&lt;/p&gt;

&lt;h4&gt;Excluding Files&lt;/h4&gt;

&lt;p&gt;We have limited bandwidth at home (Northern Michigan, remember...), so I've used WDP in the past to exclude many of the files during deployment (pdbs and xmldoc in particular). VS2010 has greatly enhanced deployment support, but it doesn't quite cover WDP's feature set.&lt;/p&gt;

&lt;p&gt;VS2010 will ignore pdb files if you check the "Exclude generated debug symbols" under the "Package/Publish Web" tab. Other files are still thrown in the mix, though, unless you add this to your project file:&lt;/p&gt;

&lt;pre class="brush:xml"&gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;ExcludeFilesFromPackage&amp;gt;true&amp;lt;/ExcludeFilesFromPackage&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;ExcludeFromPackageFiles Include=&amp;quot;$(ProjectDir)bin\*.xml&amp;quot;&amp;gt;
      &amp;lt;FromTarget&amp;gt;Project&amp;lt;/FromTarget&amp;gt;
    &amp;lt;/ExcludeFromPackageFiles&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This is very similar to WDP's ExcludeFromBuild item group that uses the SourceWebPhysicalPath property. There are two major differences: the ExcludeFilesFromPackage property needs to be set (otherwise, the ExcludeFromPackageFiles item group would be ignored), and the ProjectDir property ends in a backslash (whereas the SourceWebPhysicalPath property did not).&lt;/p&gt;

&lt;h4&gt;Precompiling (sort of)&lt;/h4&gt;

&lt;p&gt;VS2010 does not have the option of precompiling ASP.NET web applications (it will, however, precompile ASP.NET web sites). This is sad, but there is sort-of a workaround.&lt;/p&gt;

&lt;p&gt;It's possible to force MVC views to be precompiled by placing this in a PropertyGroup in the project file (I prefer placing it in the PropertyGroup with the condition "Release|AnyCPU", so that it only takes effect on release builds):&lt;/p&gt;

&lt;pre class="brush:xml"&gt;
&amp;lt;MvcBuildViews&amp;gt;true&amp;lt;/MvcBuildViews&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This will cause the MVC views to be compiled, catching all compile-time errors at build time. Unfortunately, the compiled views are then thrown away instead of being merged into the web application assembly.&lt;/p&gt;

&lt;p&gt;Full precompiling (and merging with the web application) is available in &lt;a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=711a2eef-b107-4784-9063-c978edc498cd"&gt;WDP Beta 1&lt;/a&gt;. Or, if you enjoy painful programming, you can do it yourself in MSBuild. ;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8838231509345255188/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/vs2010-without-web-deployment-projects.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8838231509345255188'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8838231509345255188'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/vs2010-without-web-deployment-projects.html' title='VS2010 Without Web Deployment Projects'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8847043079261510339</id><published>2010-04-13T20:34:00.000-04:00</published><updated>2010-04-13T20:34:52.343-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>T4: Almost Complete</title><content type='html'>&lt;p&gt;Visual Studio 2010 was released today, and one of the (many) improvements is that T4 gets better support. T4 is a promising addition to the VS family of languages.&lt;/p&gt;

&lt;p&gt;Currently, .NET languages do not have built-in metaprogramming support (which C++ has had for years). They do have generics and dynamic dispatch, which do handle some of the metaprogramming use cases, but they also have their own limitations. Both of these solutions generate code at runtime.&lt;/p&gt;

&lt;p&gt;There are two other metaprogramming solutions currently available. T4 is a solution that generates code before compiling. The other solution exists at the other end of the spectrum: IL rewriters such as &lt;a href="http://ccisamples.codeplex.com/wikipage?title=CciSharp"&gt;CciSharp&lt;/a&gt; can be used to modify (and generate) code after compiling.&lt;/p&gt;

&lt;p&gt;T4 is a good step in the metaprogramming evolution. It allows generating one (or more) classes from a given template. T4 templates allow you to use an ASP-like syntax to create C# code using C# code. [Side note: T4 can generate a lot more than C# code; it can generate any kind of text files].&lt;/p&gt;

&lt;p&gt;This is excellent, but there is one little part left out: the T4 template must be executed for it to generate its classes. It would be really great if there was a way for a T4 template to declare it can create class names matching a certain pattern (and receive a "requested class name" as a parameter). Then the compiler (or a compiler wrapper such as an MSBuild task) could execute the template "on demand," as those classes are used by other code.&lt;/p&gt;

&lt;p&gt;Of course, this is a non-trivial change to make to the build system. But if we ever get there, then C# will become a language with complete metaprogramming support. As it currently stands, there's a small hole remaining.&lt;/p&gt;

&lt;blockquote&gt;Example: I recently wrote CRC16 and CRC32 classes, but they're based off a generic CRC algorithm that is valid for any bit length. They are currently independent classes, but they can be fairly easily changed to a single T4 template that can generate CRC classes for different bit lengths.&lt;br/&gt;
The problem: any code that needed a different bit length would have to &lt;a href="http://www.olegsych.com/2008/04/t4-template-design/"&gt;modify the template parameters&lt;/a&gt; in order to generate another CRC class, instead of letting the class name itself act as an implicit template usage.&lt;/blockquote&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8847043079261510339/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/t4-almost-complete.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8847043079261510339'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8847043079261510339'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/t4-almost-complete.html' title='T4: Almost Complete'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4743989992218015725</id><published>2010-04-06T10:34:00.001-04:00</published><updated>2010-04-26T10:28:55.303-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Sharp Corners'/><title type='text'>Sharp Corners: IList&lt;T&gt;.IsReadOnly != IList.IsReadOnly</title><content type='html'>&lt;p&gt;Here's a "sharp corner" of sorts, though it's with the BCL rather than the C# language. It turns out that the property &lt;b&gt;IsReadOnly&lt;/b&gt; changed meanings from &lt;b&gt;IList&lt;/b&gt; to &lt;b&gt;IList&amp;lt;T&amp;gt;&lt;/b&gt;. As of this writing, it's unclear whether this change in meaning was intentional; the MSDN documentation for both properties is identical (and ambiguous).&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[TestMethod]
public void IListOfT_IsReadOnly_IsDifferentThan_IList_IsReadOnly()
{
    int[] array = new[] { 13 };
    IList&amp;lt;int&amp;gt; generic = array;
    System.Collections.IList nongeneric = array;

    Assert.AreNotEqual(generic.IsReadOnly, nongeneric.IsReadOnly);
}
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4743989992218015725/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4743989992218015725'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4743989992218015725'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html' title='Sharp Corners: IList&amp;lt;T&amp;gt;.IsReadOnly != IList.IsReadOnly'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8700776967766110188</id><published>2010-03-27T18:40:00.001-04:00</published><updated>2010-03-27T18:42:38.230-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='xmldoc'/><title type='text'>XmlDocs: Linking to the Overloads Page</title><content type='html'>&lt;p&gt;XML documentation has a natural "link to code" element: the &lt;a href="http://msdn.microsoft.com/en-us/library/acd0tfbe.aspx"&gt;&amp;lt;see&amp;gt; tag&lt;/a&gt;. When a function is overloaded, the resulting help file contains an "overloads" page &lt;a href="http://msdn.microsoft.com/en-us/library/system.text.encoding.getstring.aspx" title="MSDN: Encoding.GetString"&gt;like this&lt;/a&gt;, but getting the &lt;b&gt;see&lt;/b&gt; element to link to the overloads page is not exactly straightforward.&lt;/p&gt;

&lt;p&gt;The &amp;lt;see&amp;gt; tag is one of the tags that is verified by the compiler, so it's not possible to just stick anything in there. The &lt;b&gt;see.cref&lt;/b&gt; attribute must be a resolvable code element. The compiler doesn't allow you to resolve to a method group; it wants a single, unambiguous member reference.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Example warning/error message when attempting to link to an overload group:&lt;/b&gt;&lt;br/&gt;
Warning as Error: Ambiguous reference in cref attribute: 'FindFiles'. Assuming 'Nito.KitchenSink.WinInet.FtpHandle.FindFiles(string, Nito.KitchenSink.WinInet.FtpHandle.FindFilesFlags)', but could have also matched other overloads including 'Nito.KitchenSink.WinInet.FtpHandle.FindFiles()'.
&lt;/blockquote&gt;

&lt;p&gt;Here's a little-known fact about the &amp;lt;see&amp;gt; tag: it will &lt;i&gt;not&lt;/i&gt; verify any &lt;b&gt;see.cref&lt;/b&gt; values that start with a single character followed by a colon. This enables specifying full DocumentationId links such as "T:Nito.Async.ActionDispatcher".&lt;/p&gt;

&lt;p&gt;There is a standard extension of the DocumentationId format for overloads that is understood by Sandcastle: it uses the "Overload:" prefix as such: "Overload:System.Windows.Threading.Dispatcher.Invoke". Unfortunately, Visual Studio (as of 2008) will attempt to resolve a link like this, and will fail.&lt;/p&gt;

&lt;p&gt;The workaround is to use the "O:" prefix for such links (this prefix is unused by the DocumentationId format), and modify the XML documentation file before it is passed to Sandcastle. The "O:" prefix bypasses Visual Studio's verification, and the "Overload:" prefix is correctly understood by Sandcastle.&lt;/p&gt;

&lt;p&gt;In my projects, I use the following XSLT transformation to automatically translate &lt;b&gt;see.cref&lt;/b&gt; references starting with "O:" to have a prefix of "Overload:" instead:&lt;/p&gt;

&lt;pre class="brush:xml"&gt;
&amp;lt;?xml version='1.0'?&amp;gt;
&amp;lt;xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'&amp;gt;
 &amp;lt;xsl:output method=&amp;quot;xml&amp;quot; indent=&amp;quot;yes&amp;quot;/&amp;gt;

   &amp;lt;!-- Copy all documentation as-is except for what matches other rules --&amp;gt;
   &amp;lt;xsl:template match=&amp;quot;@* | node()&amp;quot;&amp;gt;
    &amp;lt;xsl:copy&amp;gt;
     &amp;lt;xsl:apply-templates select=&amp;quot;@* | node()&amp;quot;/&amp;gt;
    &amp;lt;/xsl:copy&amp;gt;
   &amp;lt;/xsl:template&amp;gt;

   &amp;lt;!-- Convert &amp;quot;cref&amp;quot; references that start with &amp;quot;O:&amp;quot; to starting with &amp;quot;Overload:&amp;quot;. --&amp;gt;
   &amp;lt;xsl:template match=&amp;quot;@cref[starts-with(., 'O:')]&amp;quot;&amp;gt;
    &amp;lt;xsl:attribute name=&amp;quot;cref&amp;quot;&amp;gt;
     &amp;lt;xsl:value-of select=&amp;quot;concat('Overload:', substring-after(., 'O:'))&amp;quot;/&amp;gt;
    &amp;lt;/xsl:attribute&amp;gt;
   &amp;lt;/xsl:template&amp;gt;
&amp;lt;/xsl:stylesheet&amp;gt;
&lt;/pre&gt;

&lt;p&gt;By the way, it's not difficult to include an XSLT transformation as part of an MSBuild project file (with the &lt;a href="http://msbuildextensionpack.codeplex.com/"&gt;MSBuild Extension Pack&lt;/a&gt;). It's beyond the scope of this blog post, but you can check out the &lt;a href="http://nitoasync.codeplex.com/SourceControl/changeset/view/40861#324550"&gt;Nito.Async main project build file&lt;/a&gt; for an example.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8700776967766110188/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/03/xmldocs-linking-to-overloads-page.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8700776967766110188'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8700776967766110188'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/03/xmldocs-linking-to-overloads-page.html' title='XmlDocs: Linking to the Overloads Page'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8471637448439938728</id><published>2010-03-27T18:05:00.000-04:00</published><updated>2010-03-27T18:05:54.305-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='xmldoc'/><title type='text'>XML Documentation: The Basics</title><content type='html'>&lt;p&gt;This is the first in a new topic of blog posts: dealing with XML documentation. XML docs are great, but suffer from a bit of a lack of tooling. I put most of my focus on using XML documentation for IntelliSense and CHM output, since there isn't an end-user distribution story for Help v2. (As of this writing, there isn't an end-user distribution story for Help v3 a.k.a. "Microsoft Help 1" either...)&lt;/p&gt;

&lt;p&gt;IntelliSense help is easy; just tell Visual Studio to generate an XML documentation file along with the binary, and it will be detected and used as long as it stays in the same directory as the binary.&lt;/p&gt;

&lt;p&gt;CHM help files are a bit more complex; you'll need a suite of tools to transform the XML into HTML, which is then compressed into a CHM file. Historically, there has been a lot of "project churn" as solutions were developed and abandoned. However, the current leader appears to have a lot of staying power, and even has concessions of former-leader compatibility.&lt;/p&gt;

&lt;p&gt;This current leader is SandCastle. My preferred toolset includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sandcastle.codeplex.com/"&gt;Sandcastle&lt;/a&gt; - the core "compiler" for xml documentation.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sandcastlestyles.codeplex.com/"&gt;Sandcastle Styles - bug fixes and style updates for Sandcastle.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shfb.codeplex.com/"&gt;Sandcastle Help File Builder&lt;/a&gt; - a nice GUI (now within Visual Studio) for working with Help project files.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms669985.aspx"&gt;HTML Help Workshop&lt;/a&gt; - the same, sad old buggy software we've been dependent on for years...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you've got all those installed, then you're ready to start authoring XML docs that can be used for CHM output as well as IntelliSense.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8471637448439938728/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/03/xml-documentation-basics.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8471637448439938728'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8471637448439938728'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/03/xml-documentation-basics.html' title='XML Documentation: The Basics'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4995184888568908365</id><published>2010-03-20T23:44:00.001-04:00</published><updated>2010-03-20T23:53:39.206-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Inheritance in General, and Deriving from HashAlgorithm in Particular</title><content type='html'>&lt;p&gt;In the early days of OOP, the general consensus was that inheritance would become the key to software reusability. After experience showed that multiple implementation inheritance was too easily misused (e.g., C++), modern OOP languages adjusted to only allow multiple interface inheritance (e.g., C#).&lt;/p&gt;

&lt;p&gt;Furthermore, in recent years the true difficulty of designing for inheritance has become known. The main problem is that when designing a base class, instead of one API there are two: the public API and the protected API. If an "API" was just a set of methods, then this would not be too much; however, one must consider invariants (for each API) as well as how the invariants behave when both APIs are used simultaneously.&lt;/p&gt;

&lt;p&gt;This quickly becomes complex for all but the simplest classes, which has led to the modern design guideline "prefer composition over inheritance." This guideline seeks to simplify the inheritance situation by only using one API. Such renowned C# gurus as Jon Skeet &lt;a href="http://stackoverflow.com/questions/252257/why-arent-classes-sealed-by-default"&gt;have stated&lt;/a&gt; that classes should be sealed (non-inheritable) by default, and we may yet see the next OOP language following that advice.&lt;/p&gt;

&lt;p&gt;Most classes are not designed for inheritance. Even for classes that &lt;i&gt;are&lt;/i&gt; designed for inheritance, a common problem surfaces: only the public API is sufficiently documented. Since this is the API used by the vast majority of developers, the protected API is too often neglected.&lt;/p&gt;

&lt;p&gt;I ran into an example of this today, when writing up a &lt;a href="http://nitokitchensink.codeplex.com/SourceControl/changeset/view/48149#1012328"&gt;general CRC-32 implementation&lt;/a&gt;. Naturally, I wanted to derive from &lt;a href="http://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm.aspx"&gt;HashAlgorithm&lt;/a&gt;, but the MSDN documentation is completely lacking. After surfing around a few other implementations, I kept seeing a lot of the same mistakes.&lt;/p&gt;

&lt;p&gt;Plunging into Reflector, I dissected HashAlgorithm once and for all, and here's what &lt;i&gt;should&lt;/i&gt; be on MSDN under "Notes to Inheritors":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should invoke Initialize in your constructor. The "all-in-one" methods like ComputeHash do not start by calling Initialize (but do call it at the end).&lt;/li&gt;
&lt;li&gt;You should set HashSizeValue in your constructor to set the return value for HashSize. Overriding HashSize is unnecessary.&lt;/li&gt;
&lt;li&gt;The State value is set to nonzero after TransformBlock and reset to 0 after TransformFinalBlock. This enables derived classes to restrict their set of legal operations when in the middle of calculating a hash.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After performing this exercise, I pondered previous similar encounters. To my surprise, I cannot recall one time when I needed to derive from a class and was actually able to do it supported only by the documentation. Every time I've had to implement a derived type, I've &lt;i&gt;always&lt;/i&gt; had to peek into the implementation of the base because the protected API was insufficiently documented.&lt;/p&gt;

&lt;p&gt;Hence the guideline, "prefer composition over inheritance." I go one step futher: every class I write is sealed unless it truly needs to be a base class (and even then, usually every base class is abstract and the non-abstract classes are sealed). This is a design guideline that I've followed since my C++ days, and it serves me equally well in C#.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4995184888568908365/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/03/inheritance-in-general-and-deriving.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4995184888568908365'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4995184888568908365'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/03/inheritance-in-general-and-deriving.html' title='Inheritance in General, and Deriving from HashAlgorithm in Particular'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2800726489901840407</id><published>2010-03-17T15:35:00.002-04:00</published><updated>2014-05-16T16:31:34.011-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.Async'/><title type='text'>I/O Limitation in Windows</title><content type='html'>&lt;p&gt;Earlier today I was stress-testing a SerialPort component for &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt; when I ran into an unusual error: ERROR_NO_SYSTEM_RESOURCES (1450).&lt;/p&gt;

&lt;p&gt;This error can be caused by exhausting any of several OS resources, though all the examples I've found deal with exhausing memory-related resources. In my particular example, I was trying to shove a 600 MB file across a serial port all at once.&lt;/p&gt;

&lt;p&gt;There's a limit to how big of a user-mode buffer one can send to a device driver (so this comes into play if you're talking to a &lt;i&gt;device&lt;/i&gt;, such as a serial port or named pipe; it also affects I/O to regular files if FILE_FLAG_NO_BUFFERING was used). According to Dan Moseley of Microsoft, the basis of this limitation is in how the I/O Manager creates its memory descriptor list (MDL).&lt;/p&gt;

&lt;p&gt;I'm in a position where I will need to transfer large amounts of data over serial ports, so I wanted to know how much data can be transferred in a single call. &lt;a href="http://msdn.microsoft.com/en-us/library/aa365747(VS.85).aspx"&gt;Dan Moseley's original description&lt;/a&gt; updated with the &lt;a href="http://msdn.microsoft.com/en-us/library/aa490866.aspx"&gt;IoAllocateMdl MSDN docs&lt;/a&gt;, along with the page size information from the &lt;a href="http://www.amazon.com/gp/product/0735625301?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735625301"&gt;latest revision of Windows Internals&lt;/a&gt; was enough information to calculate the answer, which I've summarized below.&lt;/p&gt;

&lt;table border="1"&gt;
&lt;caption&gt;Maximum I/O Buffer Size for Individual Unbuffered Read/Write Operations&lt;/caption&gt;
&lt;tr&gt;&lt;th&gt;Operating System&lt;/th&gt;&lt;th&gt;Architecture&lt;/th&gt;&lt;th&gt;Page Size&lt;/th&gt;&lt;th&gt;Calculation&lt;/th&gt;&lt;th&gt;Maximum I/O Buffer Size&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2K/XP/2K3&lt;/td&gt;&lt;td&gt;x86&lt;/td&gt;&lt;td&gt;4096&lt;/td&gt;&lt;td&gt;PAGE_SIZE * (65535 - sizeof(MDL)) / sizeof(ULONG_PTR)&lt;/td&gt;&lt;td&gt;67076096 bytes (63.97 MB)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;XP/2K3&lt;/td&gt;&lt;td&gt;x64&lt;/td&gt;&lt;td&gt;4096&lt;/td&gt;&lt;td&gt;PAGE_SIZE * (65535 - sizeof(MDL)) / sizeof(ULONG_PTR)&lt;/td&gt;&lt;td&gt;33525760 bytes (31.97 MB)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2K/XP/2K3&lt;/td&gt;&lt;td&gt;IA-64&lt;/td&gt;&lt;td&gt;8192&lt;/td&gt;&lt;td&gt;PAGE_SIZE * (65535 - sizeof(MDL)) / sizeof(ULONG_PTR)&lt;/td&gt;&lt;td&gt;67051520 bytes (63.95 MB)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vista/2K8&lt;/td&gt;&lt;td&gt;x86 &amp;amp; x64&lt;/td&gt;&lt;td&gt;4096&lt;/td&gt;&lt;td&gt;(2 GB - PAGE_SIZE)&lt;/td&gt;&lt;td&gt;2147479552 bytes (1.999996 GB)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vista/2K8&lt;/td&gt;&lt;td&gt;IA-64&lt;/td&gt;&lt;td&gt;8192&lt;/td&gt;&lt;td&gt;(2 GB - PAGE_SIZE)&lt;/td&gt;&lt;td&gt;2147479552 bytes (1.999992 GB)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Win7/2K8R2&lt;/td&gt;&lt;td&gt;x86 &amp;amp; x64&lt;/td&gt;&lt;td&gt;4096&lt;/td&gt;&lt;td&gt;(4 GB - PAGE_SIZE)&lt;/td&gt;&lt;td&gt;4294963200 bytes (3.999996 GB)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Win7/2K8R2&lt;/td&gt;&lt;td&gt;IA-64&lt;/td&gt;&lt;td&gt;8192&lt;/td&gt;&lt;td&gt;(4 GB - PAGE_SIZE)&lt;/td&gt;&lt;td&gt;4294959104 bytes (3.999992 GB)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The lowest entry here is for XP/2K3 running on x64. So, if 64-bit XP is important, then you should not use I/O buffers over ~31 MB. If you ignore 64-bit XP, then you can use I/O buffers up to ~63 MB. Newer operating systems take great strides towards removing this limitation completely.&lt;/p&gt;

&lt;p&gt;Note that this table only applies to the buffer passed to a &lt;i&gt;single&lt;/i&gt; API call. There are other I/O-related restrictions; in particular, I cannot simply split up my 600 MB file into 16 MB chunks and still send them all at once; the serial port will not be able to keep up with the requests and will eventually run into another limitation (with the same error code, ERROR_NO_SYSTEM_RESOURCES (1450)). The solution is to implement buffering in the application.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2800726489901840407/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/03/io-limitation-in-windows.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2800726489901840407'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2800726489901840407'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/03/io-limitation-in-windows.html' title='I/O Limitation in Windows'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5392932782318282992</id><published>2010-03-14T23:24:00.000-04:00</published><updated>2010-03-15T01:10:11.046-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Sharp Corners'/><title type='text'>Sharp Corner: Value Types Are Never Reference-Equal</title><content type='html'>&lt;p&gt;There are two types of equality testing in the .NET framework: reference equality and value equality (if the type being tested supports value equality). There are numerous ways to test for equality (object.Equals, operator ==, IEqualityComparer&amp;lt;T&amp;gt;, etc), but at the end every one of them resolves to either value equality or reference equality.&lt;/p&gt;

&lt;p&gt;Conceptually, two objects are "reference equal" iff they are actually the same object. For example, two strings may have the same value (and thus be "value equal"), but they may be two different objects (and thus not "reference equal").&lt;/p&gt;

&lt;p&gt;Eventually, one hits a corner:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[TestMethod]
public void ValueTypes_AreNeverReferenceEqual()
{
    var num = 13;
    
    Assert.IsFalse(object.ReferenceEquals(num, num));
}
&lt;/pre&gt;

&lt;p&gt;Of course, people rarely wish to test value types for reference equality; this corner is more likely to be found while testing instances of a generic type for reference equality. This result is often surprising; if everything in C# is an object (including a value of type Int32, which derives from ValueType, which derives from object), then why can't they be compared for reference equality?&lt;/p&gt;

&lt;p&gt;The reason that this does not work is because &lt;b&gt;unboxed value types are not objects&lt;/b&gt;. They are a "special case" in the C#/.NET world, given special treatment for efficiency reasons. They are &lt;i&gt;convertible&lt;/i&gt; to an object (via a boxing conversion), but they are not actually objects themselves. C# really goes far to &lt;i&gt;pretend&lt;/i&gt; that they are objects (e.g., "7.ToString()"), but it can't cover every corner.&lt;/p&gt;

&lt;p&gt;In the example above, the value instance is implicitly &lt;i&gt;converted&lt;/i&gt; to an object - twice - and then these objects are compared. Naturally, they refer to different objects, so they are not reference-equal.&lt;/p&gt;

&lt;p&gt;Boxed value types are real objects (though they lose their compile-time type information). They may be compared for reference equality:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[TestMethod]
public void BoxedValueTypes_CanBeReferenceEqual()
{
    var num = (object)13;

    Assert.IsTrue(object.ReferenceEquals(num, num));
}
&lt;/pre&gt;

&lt;p&gt;Conclusion: contrary to popular opinion, not everything in C# is an object.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5392932782318282992/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/03/sharp-corner-value-types-are-never.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5392932782318282992'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5392932782318282992'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/03/sharp-corner-value-types-are-never.html' title='Sharp Corner: Value Types Are Never Reference-Equal'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1695546604335924269</id><published>2010-03-13T14:20:00.000-05:00</published><updated>2010-03-13T14:20:54.690-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Sharp Corners'/><title type='text'>Introducing Sharp Corners</title><content type='html'>&lt;p&gt;Every language, no matter how well-designed, has its "corners." These are the Dark Places that every programmer eventually runs into. I define such a "corner" as a situation where the language has surprising results. Corners are discovered as a programmer moves from one phase to the next in language mastery; e.g., as a programmer who has an "intermediate" skill in the language becomes "advanced," he will discover corners during that transition.&lt;/p&gt;

&lt;p&gt;Most modern languages are easy to learn and contain few if any surprises at the beginner and intermediate level. It is when one begins to push the boundaries of the language that one finds the corners. Corners are a valuable learning experience. Languages are based on logical rules, defined by the language specification; when a programmer begins learning a language, he seldomly begins with the spec. As time goes on, the programmer develops a "feel" for the language based on experience rather than the language spec; internally, he develops an assumed set of rules for the language.&lt;/p&gt;

&lt;p&gt;Eventually the programmer will extend their assumptions and realize that his assumed rules are &lt;i&gt;not&lt;/i&gt; the same as the language specification (in many cases, in fact, there is a &lt;i&gt;drastic&lt;/i&gt; difference). At this point, the good developer will explore this newly-uncovered corner and discover the actual rule being used by the language. When the developer discards their previously-held assumptions and embraces the language rule, he takes another step towards language mastery.&lt;/p&gt;

&lt;p&gt;"Corners" are slightly different than "warts." A "wart" is usually a holdover from an earlier revision of the language that is mainained only for backwards compatibility. The "recommended way" of programming a given language avoids the warts (since they have been replaced with a new and better way of accomplishing the objective). However, corners are the result of the language's underlying logic and cannot be avoided.&lt;/p&gt;

&lt;p&gt;There are a few programmers who do read (and understand) language specifications. Most, however, follow a natural process of discovering and exploring corners.&lt;/p&gt;

&lt;p&gt;On my blog, I hope to build up a small collection of corners for the C# language (hence the name "Sharp Corners"). The intention is to help educate any C# programmer on their way to language mastery.&lt;/p&gt;

&lt;p&gt;Of course I must end with a reference Jon Skeet's famous &lt;a href="http://www.yoda.arachsys.com/csharp/teasers.html"&gt;C# Brainteasers&lt;/a&gt; page, which is like a collection of guru-level C# corners. Mine will probably not be &lt;i&gt;that&lt;/i&gt; complex. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1695546604335924269/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/03/introducing-sharp-corners.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1695546604335924269'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1695546604335924269'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/03/introducing-sharp-corners.html' title='Introducing Sharp Corners'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9204121986707176083</id><published>2010-02-24T13:29:00.003-05:00</published><updated>2010-03-15T01:10:27.155-04:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Implementing Value Comparison for Structs</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9204121986707176083'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9204121986707176083'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6952979544522775999</id><published>2010-02-24T13:29:00.001-05:00</published><updated>2010-03-15T01:10:27.155-04:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Implementing Value Equality for Structs</title><content type='html'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6952979544522775999'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6952979544522775999'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6339210955722211762</id><published>2010-02-23T12:24:00.001-05:00</published><updated>2013-05-17T10:33:18.678-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Certification'/><title type='text'>Crazy Saturday</title><content type='html'>&lt;p&gt;My MCPD logo has been updated to include my new ASP.NET and Enterprise certifications. They were the result of a Crazy Saturday.&lt;/p&gt;

&lt;p&gt;This last Saturday, February 20th, there was a fundraising dinner in Grand Rapids for the &lt;a href="http://www.constitutionparty.com/"&gt;Constitution Party&lt;/a&gt;. Since we were going to be in town anyway, we figured I should go ahead and take a couple of certification exams. (Grand Rapids is ~3.5 hours away from our house, and that's where the closest testing center is). Due to various difficulties, I had almost no time to prepare for the exams.&lt;/p&gt;

&lt;p&gt;Due to a scheduling bug on Prometric's website, I was able to schedule overlapping exams. I originally planned to take three exams (just getting the Enterprise certification), but trimmed it down to two because I didn't want the stress. Leaving the house at 5:30am, we got to the testing center right when they opened at 9:30.&lt;/p&gt;

&lt;p&gt;After taking &lt;a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-561"&gt;70-561 (TS: ADO.NET)&lt;/a&gt; and &lt;a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-562"&gt;70-562 (TS: ASP.NET)&lt;/a&gt;, I still had a bit of time. The "expected time" for those exams was 3:45 and 3:30, respectively, but it was only 11:45 when I finished (including a break for breakfast).&lt;/p&gt;

&lt;p&gt;The test administrators were really nice and suggested that I "quick-test" another one... if I could help them figure out how to do it using their Prometric control panel application. I decided to try to take &lt;i&gt;both&lt;/i&gt; remaining tests, which would save me a trip down in March. The only catch was that I had to finish the next test in a very short time, because the last test &lt;i&gt;had&lt;/i&gt; to start by 1pm (it was 3 hours long and the testing center closed at 4:00).&lt;/p&gt;

&lt;p&gt;Fortunately, I finished &lt;a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-565"&gt;70-565 (PRO: Enterprise)&lt;/a&gt; in about 45 minutes, with just enough time to schedule &lt;a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-564"&gt;70-564 (PRO: ASP.NET)&lt;/a&gt;. I had a full three hours for that exam, but ended up leaving at around 1:45pm. By that time, I was hungry. :)&lt;/p&gt;

&lt;p&gt;My wife was pleased when I told her that I had taken four tests instead of two that day, meaning that March 13th would now be spent at home instead of in Grand Rapids. I was a little wiped out during the fundraising dinner, though.&lt;/p&gt;

&lt;p&gt;Four exams; total "expected time" of 13:15; completed in a little over four hours; earning two MCPD certifications. Crazy Saturday!&lt;/p&gt;

&lt;p&gt;Even if my &lt;a href="http://blog.stephencleary.com/2009/09/mcpd-achieved.html"&gt;previous experience&lt;/a&gt; hadn't taught me, this last weekend sure would have: Jesus Christ is an awesome God to serve! He assisted me in each step of this process, and I encourage any of my readers to get to know Him! If you're interested in knowing Him, the &lt;a href="http://www.landmarkbaptist.ws/salvation"&gt;first step is getting saved&lt;/a&gt;. Feel free to contact me if you have any questions!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6339210955722211762/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/crazy-saturday.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6339210955722211762'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6339210955722211762'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/crazy-saturday.html' title='Crazy Saturday'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6780912148651514364</id><published>2010-02-17T13:12:00.002-05:00</published><updated>2013-05-17T10:33:03.155-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>Q&amp;A: Should I Set Variables to Null to Assist Garbage Collection?</title><content type='html'>&lt;p&gt;This is a common question with rather complex reasoning behind the answer.&lt;/p&gt;

&lt;p&gt;First off, setting a variable to null &lt;i&gt;to assist garbage collection&lt;/i&gt; is different than setting a variable to null &lt;i&gt;to indicate state&lt;/i&gt;. It's always proper to use "null" as a state indicator (e.g., the &lt;a href="http://blog.stephencleary.com/2009/04/asynchronous-callback-contexts.html"&gt;CallbackContext&lt;/a&gt; class has a field which is set to null to indicate the context is invalid).&lt;/p&gt;

&lt;p&gt;Secondly, the "variable" being set to null may be either a &lt;i&gt;field&lt;/i&gt; (possibly via a property) or a &lt;i&gt;local variable&lt;/i&gt;. Local variables include &lt;i&gt;method parameters&lt;/i&gt;. A field may be a &lt;i&gt;static field&lt;/i&gt; or an &lt;i&gt;instance field&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;This blog entry is only concerned with the question "Should I set variables &lt;i&gt;to null to assist garbage collection?"&lt;/i&gt; and will consider each type of "variable".&lt;/p&gt;

&lt;h4&gt;The Short Answer, for the Impatient&lt;/h4&gt;

&lt;p&gt;Yes, if the variable is a static field, or if you are writing an enumerable method (using &lt;b&gt;yield return&lt;/b&gt;) or an asynchronous method (using &lt;b&gt;async&lt;/b&gt; and &lt;b&gt;await&lt;/b&gt;). Otherwise, no.&lt;/p&gt;

&lt;p&gt;This means that in regular methods (non-enumerable and non-asynchronous), you do not set local variables, method parameters, or instance fields to null.&lt;/p&gt;

&lt;p&gt;(&lt;i&gt;Even if you're implementing IDisposable.Dispose&lt;/i&gt;, you &lt;i&gt;still&lt;/i&gt; should not set variables to null).&lt;/p&gt;

&lt;h4&gt;The Longer Answer&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Static fields should be set to null when they are no longer needed - unless the process is shutting down, in which case setting static fields to null is unnecessary.&lt;/li&gt;
&lt;li&gt;Local variables hardly ever need to be set to null. There is only one exception:
&lt;ul&gt;
&lt;li&gt;It &lt;i&gt;may&lt;/i&gt; be beneficial to set local variables to null if running on a non-Microsoft CLR.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Instance fields hardly ever need to be set to null. There is only one exception:
&lt;ul&gt;
&lt;li&gt;An instance field may be set to null if the referencing object is expected to outlive the referenced object.&lt;/li&gt;
&lt;li&gt;[Note that the semi-common practice of setting instance fields to null in IDisposable.Dispose does &lt;i&gt;not&lt;/i&gt; meet this test, and should not be encouraged].&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a special consideration for enumerable and asynchronous methods. When compiling these methods, the compiler transforms the method into its own object. As a result, all local variables (including method parameters) are actually instance fields. If the "method object" is expected to outlive any of the objects referred to by those variables, then they &lt;i&gt;should&lt;/i&gt; be set to null.&lt;/p&gt;

&lt;p&gt;In conclusion: generally speaking, setting variables to null to help the garbage collector is not recommended. If it is deemed necessary, then an unusual condition exists and it should be carefully documented in the code.&lt;/p&gt;

&lt;p&gt;The rest of this post deals with the reasoning behind this recommendation.&lt;/p&gt;

&lt;h4&gt;Required Reading&lt;/h4&gt;

&lt;p&gt;Most of this post relies heavily on Jeffrey Richter's awesome book &lt;a href="http://www.amazon.com/gp/product/0735627045?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735627045"&gt;CLR via C#&lt;/a&gt;. Unfortunately, even though the 3rd edition is out, I only have the 2nd; so all page numbers in this blog post are for the 2nd edition. The section "The Garbage Collection Algorithm" (pg 461) covers GC in general, and the section "Garbage Collections and Debugging" (pg 465) is particularly useful when considering this question.&lt;/p&gt;

&lt;h4&gt;Determining Root Objects&lt;/h4&gt;

&lt;p&gt;The garbage collector is based on a "mark and sweep" design, starting from a set of root objects and walking any nested references to determine which objects are still in use. Any objects not marked are declared unused and become eligible for garbage collection [this is a simplification, but it's the general idea]. Logically, all the marked objects form a "graph" of live objects.&lt;/p&gt;

&lt;p&gt;The idea behind "setting variables to null" is that it would help the garbage collector to detect that the referenced object is no longer used. Before we can determine if this truly is helpful or not, we must first determine what constitutes a "root object".&lt;/p&gt;

&lt;p&gt;First: any static field is a root object. That's the easy part (we'll handle static fields in more detail later).&lt;/p&gt;

&lt;p&gt;Instance fields are used to build the graph of referenced objects, so it's possible that setting an instance field to null may "trim" objects from the graph (we'll handle instance fields in more detail later, too).&lt;/p&gt;

&lt;p&gt;Method-local variables (including parameters and the implicit "this" reference) are much tricker: they are &lt;i&gt;sometimes&lt;/i&gt; root objects.&lt;/p&gt;

&lt;p&gt;As described in &lt;a href="http://www.amazon.com/gp/product/0735627045?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735627045"&gt;CLR via C#&lt;/a&gt;, the JIT compiler for a method will determine which native code blocks reference which variables by building a "root table" for the method. It's important to note that this table is quite accurate (though not 100% accurate - it &lt;i&gt;may&lt;/i&gt; "hold onto" references slightly longer than necessary if it simplifies the table). Examine the simple code below:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
static object CheckType(object a, Type b)
{
  Type t = a.GetType();
  // The object referenced by "a" may be eligible for GC here
  if (t == b)
  {
    Console.WriteLine("match!");
    return b;
  }
  else
  {
    Console.WriteLine("no match...");
    return null;
  }
}
&lt;/pre&gt;

&lt;p&gt;The object referenced by "a" may be garbage collected as noted by the comments in this method (if it is not referenced elsewhere, of course). This is because the method's root table would declare that this method uses the "a" variable just for the code doing the "a.GetType()".&lt;/p&gt;

&lt;h4&gt;When the JIT Compiler Behaves Differently (Debug)&lt;/h4&gt;

&lt;p&gt;There are two situations where the JIT compiler will &lt;i&gt;artificially extend&lt;/i&gt; the lifetime of local variables to the end of the method. The first is when the code is &lt;b&gt;compiled without optimizations and running under the debugger&lt;/b&gt;. The second is when the code is &lt;b&gt;compiled with full debug information&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;If either of these situations is detected, the JIT compiler will change how it builds the root table so that in our example above, the object referenced by "a" cannot be eligible for garbage collection at least until the method returns.&lt;/p&gt;

&lt;p&gt;By default, VS includes full debug information in "Debug" configuration builds but only includes pdb debug information in "Release" configuration builds. This means that the garbage collector does work differently when running "Debug" configuration code, even when run outside the debugger.&lt;/p&gt;

&lt;h4&gt;When the JIT Compiler Behaves Differently (Release)&lt;/h4&gt;

&lt;p&gt;An interesting behavior of the JIT compiler is that when optimizations are enabled (by default in "Release" configurations), one of the optimizations it performs is &lt;i&gt;removing code that sets a local variable to null&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;It is rather ironic that some people religiously scatter "a = null;" throughout their methods, only to have them completely removed by the runtime.&lt;/p&gt;

&lt;p&gt;By this point, it should be obvious that setting local variables to null (with the goal of helping the GC) is not beneficial. This practice only complicates the code and provides no help to the GC since it is removed anyway.&lt;/p&gt;

&lt;h4&gt;Other CLRs and JIT Compilers&lt;/h4&gt;

&lt;p&gt;The above description of JIT compiler behavior is only applicable to the current Microsoft implementation. &lt;a href="http://www.mono-project.com/Compacting_GC"&gt;Mono&lt;/a&gt;, in particular, does &lt;i&gt;not&lt;/i&gt; build a root table when JIT-compiling a method (it treats all local variables as referenced until the end of the method).&lt;/p&gt;

&lt;p&gt;Because of this different implementation, it may be useful to set local variables to null if the code will be running on Mono.&lt;/p&gt;

&lt;h4&gt;Static Fields&lt;/h4&gt;

&lt;p&gt;Static fields are always root objects, so they are always considered "alive" by the garbage collector. If a static field references an object that is no longer needed, it &lt;i&gt;should&lt;/i&gt; be set to null so that the garbage collector will treat it as eligible for collection.&lt;/p&gt;

&lt;p&gt;Setting static fields to null is meaningless if the entire process is shutting down. The entire heap is about to be garbage collected at that point, including all the root objects.&lt;/p&gt;

&lt;h4&gt;Instance Fields&lt;/h4&gt;

&lt;p&gt;An instance field is how one object references another object. The garbage collector uses instance fields to build its graph of objects that are referenced (and thus uneligible for garbage collection).&lt;/p&gt;

&lt;p&gt;Usually, when one object becomes eligible for garbage collection, it simultaneously makes all of its owned objects eligible for garbage collection as well. This happens perfectly naturally, without the need to set any instance fields to null.&lt;/p&gt;

&lt;p&gt;Setting instance fields to null does not help the garbage collector in this case, since it marks the &lt;i&gt;referenced&lt;/i&gt; objects. The fact that one unreferenced object no longer references another unreferenced object has absolutely no bearing on how the GC builds its graph.&lt;/p&gt;

&lt;p&gt;However, there is one case where setting an instance field to null &lt;i&gt;would&lt;/i&gt; help the garbage collector: if the owned (child) object is no longer necessary but the owning (parent) object will still be referenced for some time. In this case, setting the parent object's instance field to null would make the child object eligible for garbage collection. Note that this is a rare situation.&lt;/p&gt;

&lt;p&gt;In particular, setting instance fields to null in an IDisposable.Dispose implementation is unnecessary. The parent object is being disposed; it cannot expect to be referenced much longer, and so it will not significantly outlive its child object(s).&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Static fields; that's about it. Anything else is a waste of time.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6780912148651514364/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/q-should-i-set-variables-to-null-to.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6780912148651514364'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6780912148651514364'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/q-should-i-set-variables-to-null-to.html' title='Q&amp;A: Should I Set Variables to Null to Assist Garbage Collection?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1098449644560179392</id><published>2010-02-16T13:24:00.002-05:00</published><updated>2010-03-22T14:56:36.753-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='P/Invoke'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><title type='text'>Interop: Multidimensional Arrays of Characters in a Structure</title><content type='html'>&lt;p&gt;Yesterday an interesting problem was brought up on the MSDN forums. An unmanaged structure had a form like this:&lt;/p&gt;

&lt;pre class="brush:cpp"&gt;
struct MyStruct
{
  int id;
  char names[6][25];
};
&lt;/pre&gt;

&lt;p&gt;Each structure has 6 strings of up to 25 characters each. Marshaling a single "flattened" string in a structure is not difficult (UnmanagedType.ByValTStr with SizeConst), and marshaling a "flattened" array of simple types in a structure is likewise not difficult (UnmanagedType.ByValArray with SizeConst and optionally ArraySubType). However, marshaling a flattened array of flattened strings is not exactly straightforward (there is no "ArraySubTypeSizeConst" option).&lt;/p&gt;

&lt;p&gt;The answer is to split off the "25 character string" type into its own structure (containing a single flattened string), and define a flattened array of those structures in the parent structure, as such:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct MyStruct
{
    public void Init()
    {
        this.names = new StringSizeConst25AsString[6];
    }

    public int id;

    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 6)]
    public StringSizeConst25AsString[] names;

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
    public struct StringSizeConst25AsString
    {
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 25)]
        private string Value;

        public static implicit operator string(StringSizeConst25AsString source)
        {
            return source.Value;
        }

        public static implicit operator StringSizeConst25AsString(string source)
        {
            // Note that longer strings would be silently truncated
            //  if we didn't explicitly check this.
            if (source.Length &amp;gt;= 25)
                throw new Exception("String too large for field: " + source);

            return new StringSizeConst25AsString { Value = source };
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;(The implicit conversions on the inner structure are for convenience; note that the default marshaling will silently truncate string values that are more than 24 characters).&lt;/p&gt;

&lt;p&gt;The inner structure "StringSizeConst25AsString" marshals its string as a 25-character array, and the outer structure "MyStruct" marshals an array of the inner structures. Both of them end up getting flattened correctly into a single multidimensional unmanaged character array.&lt;/p&gt;

&lt;p&gt;If we have an unmanaged function as such:&lt;/p&gt;

&lt;pre class="brush:cpp"&gt;
// ByValArrayOfStrings.h:
extern "C" __declspec(dllexport) void AddMultipleNames(const MyStruct* DSNames);

// ByValArrayOfStrings.cpp:
#include &amp;lt;string&amp;gt;
#include &amp;lt;sstream&amp;gt;

__declspec(dllexport) void AddMultipleNames(const MyStruct* DSNames)
{
 {
  std::ostringstream out;
  out &amp;lt;&amp;lt; "DSNames-&amp;gt;id: " &amp;lt;&amp;lt; DSNames-&amp;gt;id;
  OutputDebugStringA(out.str().c_str());
 }

 for (int i = 0; i != 6; ++i)
 {
  std::ostringstream out;
  out &amp;lt;&amp;lt; "DSNames-&amp;gt;names[" &amp;lt;&amp;lt; i &amp;lt;&amp;lt; "]: " &amp;lt;&amp;lt; DSNames-&amp;gt;names[i];
  OutputDebugStringA(out.str().c_str());
 }
}
&lt;/pre&gt;

&lt;p&gt;Then we can use the managed interop definitions above like this:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[DllImport("ByValArrayOfStrings.dll", CharSet = CharSet.Ansi)]
static extern void AddMultipleNames(ref MyStruct DSNames);

private void button1_Click(object sender, EventArgs e)
{
    try
    {
        MyStruct tmp = new MyStruct();
        tmp.Init();
        tmp.id = 17;
        tmp.names[0] = "Hi";
        tmp.names[2] = "There";
        tmp.names[3] = "123456789012345678901234";

        // The following assignment would throw
        //tmp.names[4] = "1234567890123456789012345";
        tmp.names[5] = "x";

        AddMultipleNames(ref tmp);
    }
    catch (Exception ex)
    {
        MessageBox.Show("[" + ex.GetType().Name + "] " + ex.Message);
    }
}
&lt;/pre&gt;

&lt;p&gt;And this would cause the unmanaged DLL to send to its debug output:&lt;/p&gt;

&lt;pre&gt;
DSNames-&amp;gt;id: 17
DSNames-&amp;gt;names[0]: Hi
DSNames-&amp;gt;names[1]: 
DSNames-&amp;gt;names[2]: There
DSNames-&amp;gt;names[3]: 123456789012345678901234
DSNames-&amp;gt;names[4]: 
DSNames-&amp;gt;names[5]: x
&lt;/pre&gt;

&lt;h4&gt;Non-Null-Terminated Strings&lt;/h4&gt;

&lt;p&gt;The above solution works well if each of the strings in the unmanaged structure are null-terminated. There are some APIs, however, which work with implicitly-terminated strings. It is possible that an unmanaged function may treat these strings as having an implicit length of 25 characters.&lt;/p&gt;

&lt;p&gt;In this case, string marshaling cannot be used in the managed code. The above solution can be modified to marshal an array of characters instead:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct MyStruct
{
    public void Init()
    {
        this.names = new StringSizeConst25AsCharArray[6];
    }

    public int id;

    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 6)]
    public StringSizeConst25AsCharArray[] names;

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
    public struct StringSizeConst25AsCharArray
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 25)]
        private char[] Value;

        public static implicit operator string(StringSizeConst25AsCharArray source)
        {
            return new string(source.Value);
        }

        public static implicit operator StringSizeConst25AsCharArray(string source)
        {
            if (source.Length &amp;gt; 25)
                throw new Exception("String too large for field: " + source);

            var ret = new StringSizeConst25AsCharArray() { Value = new char[25] };
            Array.Copy(source.ToCharArray(), ret.Value, source.Length);
            return ret;
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;This solution allows sending a 25-character, non-null-terminated string as a member of the unmanaged string array:&lt;/p&gt;

&lt;pre class="brush:csharp"&gt;
private void button1_Click(object sender, EventArgs e)
{
    try
    {
        MyStruct tmp = new MyStruct();
        tmp.Init();
        tmp.id = 17;
        tmp.names[0] = "Hi";
        tmp.names[2] = "There";
        tmp.names[3] = "123456789012345678901234";

        // The following assignment would throw
        //tmp.names[4] = "12345678901234567890123456";
        tmp.names[4] = "1234567890123456789012345";
        tmp.names[5] = "x";

        AddMultipleNames(ref tmp);
    }
    catch (Exception ex)
    {
        MessageBox.Show("[" + ex.GetType().Name + "] " + ex.Message);
    }
}
&lt;/pre&gt;

&lt;p&gt;Which produces this debug output:&lt;/p&gt;

&lt;pre&gt;
DSNames-&amp;gt;id: 17
DSNames-&amp;gt;names[0]: Hi
DSNames-&amp;gt;names[1]: 
DSNames-&amp;gt;names[2]: There
DSNames-&amp;gt;names[3]: 123456789012345678901234
DSNames-&amp;gt;names[4]: 1234567890123456789012345x
DSNames-&amp;gt;names[5]: x
&lt;/pre&gt;

&lt;p&gt;Note that our unmanaged function is still interpreting the strings as null-terminated, and we're marshaling them as implicitly-terminated. This is why entry [4] above "spills over" and picks up entry [5]. If the unmanaged function actually interpreted the strings as having a length of 25 (or a maximum length of 25), then this "spill over" would not happen.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1098449644560179392/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1098449644560179392'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1098449644560179392'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html' title='Interop: Multidimensional Arrays of Characters in a Structure'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4984290264686516328</id><published>2010-02-16T11:18:00.000-05:00</published><updated>2013-05-17T10:32:38.006-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>How to Implement IDisposable and Finalizers: Matrix and Flowchart</title><content type='html'>&lt;p&gt;I've decided to split off the matrix and flowchart from my original &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;How to Implement IDisposable and Finalizers: 3 Simple Rules&lt;/a&gt; post, and put them into their own post here.&lt;/p&gt;

&lt;h4&gt;Summary: A Decision Matrix for IDisposable and Finalize&lt;/h4&gt;

&lt;p&gt;The flowchart and decision matrix below use these terms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Managed resource - an instance of any class implementing IDisposable.&lt;/li&gt;
&lt;li&gt;Unmanaged resource - a handle of some type representing a resource that requires a p/Invoke function to "free" the handle; OR an IntPtr allocated by one of the "allocation" functions in the &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.aspx"&gt;Marshal&lt;/a&gt; class; OR a &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.gchandle.aspx"&gt;GCHandle&lt;/a&gt; or its equivalent IntPtr.&lt;/li&gt;
&lt;li&gt;Own - a resource is "owned" by a class if the lifetime of the resource is scoped to an instance of that class. Some classes &lt;i&gt;share&lt;/i&gt; resources but do not own them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Decision Matrix as a Table&lt;/h5&gt;

&lt;table border="1"&gt;
&lt;caption&gt;Decision Matrix for IDisposable and Finalize&lt;/caption&gt;
&lt;tr&gt;&lt;th/&gt;&lt;th&gt;Class does not own managed resources&lt;/th&gt;&lt;th&gt;Class owns at least one managed resource&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Class does not own unmanaged resources&lt;/th&gt;&lt;td&gt;Apply &lt;a href="http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html"&gt;Rule 1&lt;/a&gt;: no IDisposable or Finalizer&lt;/td&gt;&lt;td&gt;Apply &lt;a href="http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html"&gt;Rule 2&lt;/a&gt;: IDisposable but no Finalizer&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Class owns one unmanaged resource&lt;/th&gt;&lt;td&gt;Apply &lt;a href="http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html"&gt;Rule 3&lt;/a&gt;: both IDisposable and Finalizer&lt;/td&gt;&lt;td&gt;Refactor&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Class owns more than one unmanaged resource&lt;/th&gt;&lt;td&gt;Refactor&lt;/td&gt;&lt;td&gt;Refactor&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h5&gt;Decision Matrix as a Flowchart&lt;/h5&gt;

&lt;p&gt;Step 1 - Does the class own a managed resource? If not, go to Step 2.&lt;/p&gt;

&lt;p&gt;Step 1.1 - Does the class own an unmanaged resource? If it does, refactor the class into two classes, so that any class owns either unmanaged or managed resources, but not both. Then apply this flowchart to each resulting class.&lt;/p&gt;

&lt;p&gt;Step 1.2 - The class owns at least one managed resource and no unmanaged resources. Apply &lt;a href="http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html"&gt;Rule 2&lt;/a&gt; to the class, and you're done.&lt;/p&gt;

&lt;p&gt;Step 2 - Does the class own an unmanaged resource? If not, then apply &lt;a href="http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html"&gt;Rule 1&lt;/a&gt; to the class, and you're done.&lt;/p&gt;

&lt;p&gt;Step 2.1 - Does the class own more than one unmanaged resource? If it does, refactor the class so that any class only owns at most one unmanaged resource, and then apply this flowchart to each of the resulting classes.&lt;/p&gt;

&lt;p&gt;Step 2.2 - The class owns exactly one unmanaged resource and no managed resources. Apply &lt;a href="http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html"&gt;Rule 3&lt;/a&gt; to the class.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4984290264686516328/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/how-to-implement-idisposable-and.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4984290264686516328'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4984290264686516328'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/how-to-implement-idisposable-and.html' title='How to Implement IDisposable and Finalizers: Matrix and Flowchart'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2437305033139440566</id><published>2010-02-15T23:08:00.000-05:00</published><updated>2013-05-17T10:32:00.908-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Books'/><title type='text'>Evolution of Framework Design Guidelines?</title><content type='html'>&lt;p&gt;Joe Duffy recently &lt;a href="http://www.bluebytesoftware.com/blog/PermaLink,guid,b9072376-beaf-4d17-a6c4-4bfccfbd34b0.aspx"&gt;blogged about one of his comments&lt;/a&gt; in the book &lt;a href="http://www.amazon.com/gp/product/0321545613?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321545613"&gt;Framework Design Guidelines&lt;/a&gt;. His comment is rather brief in the book, but he expounds on it nicely in his blog: essentially, he suggests defining only the minimum set of operations in an interface, and using extension methods to provide "default" implementations of other "interface methods". This is the approach that I've been calling &lt;a href="http://blog.stephencleary.com/2010/01/extension-based-types.html"&gt;extension-based types&lt;/a&gt;. He also calls out the problems with extension properties and the non-virtual nature of overriding extension functions (these problems are explored on my earlier blog post as well).&lt;/p&gt;

&lt;p&gt;I've hesitated mentioning the book in the past, because any review coming from me would be a bit harsh... To be blunt, I think a good amount of the book is obviously correct (in some cases, painfully obvious), and a good amount is flat-out bad advice. If you want an explaination of why the first version of the BCL was designed the way it was, then this is a decent reference. However, the book suggests that its guidelines should be accepted for other general .NET libraries, and there I must disagree. Microsoft themselves have evolved far from many of the guidelines in this book.&lt;/p&gt;

&lt;p&gt;That said, there are a few gems. I would say that it's worth owning; just keep in mind while reading that it is not the gospel. I'd like to see a third edition, updated with the current Microsoft practices and spending more than a couple sentences on newer concepts such as extension-based types.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2437305033139440566/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/evolution-of-framework-design.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2437305033139440566'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2437305033139440566'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/evolution-of-framework-design.html' title='Evolution of Framework Design Guidelines?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-30115567664151616</id><published>2010-02-15T22:39:00.000-05:00</published><updated>2010-02-15T22:39:19.673-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>ASP.NET Slides Available</title><content type='html'>&lt;p&gt;Last week I gave my first ASP.NET-oriented presentation, "ASP.NET MVC, Silverlight, and jQuery as Friends" (slides available &lt;a href="http://nmichigan.net/2010/02/great-asp-net-presentation-in-traverse-city-mi/"&gt;here&lt;/a&gt;). There's a lot of setup tips to get those technologies working together (using VS2008 SP1).&lt;/p&gt;

&lt;p&gt;I used my &lt;a href="http://www.landmarkbaptist.ws/"&gt;church website&lt;/a&gt; as an example of a static site I recently transitioned to ASP.NET MVC. The most interesting element of this website is the Silverlight menu. Just like CSS/JavaScript menus, it builds itself dynamically from &amp;lt;ul&amp;gt;'s containing &amp;lt;a&amp;gt;'s. In the talk I also covered less common aspects in this site: using ASP.NET routing to ensure the old links to *.html pages stay functional, and how to build your own HTML helpers (and why they aren't as useful as one might think).&lt;/p&gt;

&lt;p&gt;All in all, it was much better than my first talk. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/30115567664151616/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/aspnet-slides-available.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/30115567664151616'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/30115567664151616'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/aspnet-slides-available.html' title='ASP.NET Slides Available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1043109607452197955</id><published>2010-02-06T00:45:00.000-05:00</published><updated>2010-02-06T00:45:51.541-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Nito.Assimilation - the Assembly Manipulator</title><content type='html'>&lt;p&gt;There's a growing need for a nicer "cross-platform" story. The &lt;a href="http://nitolinq.codeplex.com/"&gt;Nito.Linq&lt;/a&gt; library has temporarily stalled, due to the complexity of the project with regards to multiple platforms. Currently, we support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET 3.5 SP1 (Client profile compatible) with Rx&lt;/li&gt;
&lt;li&gt;.NET 3.5 SP1 (Client profile compatible) without Rx&lt;/li&gt;
&lt;li&gt;Compact Framework 3.5&lt;/li&gt;
&lt;li&gt;Silverlight 3 with Rx&lt;/li&gt;
&lt;li&gt;Silverlight 3 without Rx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, we're going to have to add .NET 4.0 Beta 2 to the mix (with and without Rx), and other targets will only continue to add to what is already a mess. The current source code situation is not difficult, but Visual Studio is having an absolute fit.&lt;/p&gt;

&lt;p&gt;Microsoft's Rx team had a similar problem; they have a single code base to run on a number of different platforms. Their solution was ingenious: they developed some in-house tools to manage the definitions of these various platforms and retarget an already-existing assembly.&lt;/p&gt;

&lt;p&gt;Nito.Assimilation is the open-source equivalent. It's intended to be a tool for .NET library writers needing to target multiple versions/editions of the framework. The current roadmap is to provide a few primary tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating metadata assemblies from reference assemblies.&lt;/li&gt;
&lt;li&gt;Combining multiple metadata assemblies into a multitarget metadata assembly.&lt;/li&gt;
&lt;li&gt;Providing assembly targeting (converting a multitargeted library assembly into a targeted assembly). A "multitargeted library assembly" is one that has multitarget metadata assemblies as its assembly references; and a "targeted assembly" is an assembly that has been bound to a specific platform.&lt;/li&gt;
&lt;li&gt;(Possibly) Defining a standard means to define "profiles", "targets", and "multitargets".&lt;/li&gt;
&lt;li&gt;(Possibly) Providing assembly retargeting (converting a targeted assembly into a multitargeted library assembly).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The terminology can certainly get confusing! I'm still brainstorming for better words.&lt;/p&gt;

&lt;p&gt;Anyway, Nito.Assimilation has reached its first milestone: it is capable of creating metadata assemblies from regular assemblies (along with XML documentation, of course). It is currently included in the source code of the &lt;a href="http://nitolinq.codeplex.com/"&gt;Nito.Linq&lt;/a&gt; library (though eventually it will probably become its own project). It's been successfully used to create "metadata profiles" of the .NET 3.5 SP1 Client profile and the .NET 3.5 Compact Framework. Applications built against these metadata assemblies have working IntelliSense and execute without problems (binding to the real assemblies at runtime).&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1043109607452197955/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/nitoassimilation-assembly-manipulator.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1043109607452197955'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1043109607452197955'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/nitoassimilation-assembly-manipulator.html' title='Nito.Assimilation - the Assembly Manipulator'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2168993197738371622</id><published>2010-02-01T11:18:00.006-05:00</published><updated>2010-02-03T03:45:33.738-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='jQuery'/><title type='text'>jQuery hosted on Google's CDN with IntelliSense</title><content type='html'>&lt;p&gt;ASP.NET MVC (which I'm using for my church's web site) comes packaged with &lt;a href="http://jquery.com/"&gt;jQuery&lt;/a&gt;; the appropriate JavaScript files are placed into the Scripts folder of the default MVC project. It is a good idea, though, to &lt;a href="http://encosia.com/2008/12/10/3-reasons-why-you-should-let-google-host-jquery-for-you/"&gt;let Google (or Microsoft) host jQuery for you&lt;/a&gt; over their CDN (content delivery network).&lt;/p&gt;

&lt;p&gt;However, you lose out on the cool jQuery IntelliSense! There are various workarounds to fix this, but most of them only succeed on VS2010 (which works much better with JavaScript IntelliSense). I'm still using VS2008; if you find yourself in the same boat, be sure to install &lt;a href="http://code.msdn.microsoft.com/KB958502/Release/ProjectReleases.aspx?ReleaseId=1736"&gt;KB958502&lt;/a&gt; first. Then you can do this:&lt;/p&gt;

&lt;pre class="brush: xml"&gt;
&amp;lt;%= "&amp;lt;script type='text/jscript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js'&amp;gt;&amp;lt;/script&amp;gt;" %&amp;gt;
&amp;lt;% if (false) { %&amp;gt;&amp;lt;script type="text/javascript" src="../../App_Data/jquery-1.3.2.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;% } %&amp;gt;
&lt;/pre&gt;

&lt;p&gt;It's a nice little trick to make the Visual Studio editor ignore the jQuery on Google's CDN (because it's injected as a string into the ASP.NET response stream), while ignoring the local file when executed.&lt;/p&gt;

&lt;p&gt;You may notice that I've stuck my local jquery-1.3.2.js and jquery-1.3.2-vsdoc.js files into the App_Data directory of my project. This is just because it's easier to Publish the web site that way (they don't actually get copied). The code in this post will work for any local JavaScript file, regardless of its location.&lt;/p&gt;

&lt;h4&gt;Update (2010-02-03)&lt;/h4&gt;

&lt;p&gt;The original solution above used a comment block instead of an "if (false)" block:&lt;/p&gt;

&lt;pre class="brush: xml"&gt;
&amp;lt;%= "&amp;lt;script type='text/jscript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js'&amp;gt;&amp;lt;/script&amp;gt;" %&amp;gt;
&amp;lt;% /* %&amp;gt;&amp;lt;script type="text/javascript" src="../../App_Data/jquery-1.3.2.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;% */ %&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Unfortunately, this caused C# IntelliSense to fail! The new solution allows both C# and JavaScript IntelliSense.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2168993197738371622/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/jquery-hosted-on-googles-cdn-with.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2168993197738371622'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2168993197738371622'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/jquery-hosted-on-googles-cdn-with.html' title='jQuery hosted on Google&apos;s CDN with IntelliSense'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2698972288584901372</id><published>2010-02-01T07:31:00.001-05:00</published><updated>2010-02-01T07:32:23.875-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Silverlight'/><title type='text'>Cross-browser Silverlight</title><content type='html'>&lt;p&gt;I tried becoming a web developer back in the version 4 browser war days; my scars from that time made me swear off web page writing for years, until recently. In my mind, one of the greatest advantages of Silverlight is that it completely kills all that nasty browser compatibility stuff. However, when writing Silverlight controls that interact more heavily with HTML, cross-browser issues begin to rise up from the grave.&lt;/p&gt;

&lt;h4&gt;Partial URLs&lt;/h4&gt;

&lt;p&gt;Partial URLs are transformed by Internet Exporer into absolute URLs as they enter the object model. This can cause exceptions from the Uri constructor if you're only passing a single string argument. The workaround that I've opted to use is to always use the Uri constructor that takes a Uri and a string as arguments, and I pass in the current page's Uri as the first argument.&lt;/p&gt;

&lt;p&gt;I recommend never using the Uri constructor taking a single string parameter; in the following example, the &amp;lt;a&amp;gt; item has an href attribute similar to "/", which is quietly transformed by IE into a full "http://www.tempuri.org/":&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
// Fails on Google Chrome
new Uri(item.GetAttribute("href"))
&lt;/pre&gt;

&lt;p&gt;Instead, pass the document Uri as the context of the relative Uri string. If the second parameter is actually an absolute Uri (e.g., when running in Internet Explorer), the context Uri is ignored:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
// Works on both Chrome and IE
new Uri(HtmlPage.Document.DocumentUri, item.GetAttribute("href"))
&lt;/pre&gt;

&lt;h4&gt;Text Content&lt;/h4&gt;

&lt;p&gt;Internet Explorer has an "innerText" attribute, while the DOM supports a "textContent" property. A simple extension method on HtmlElement suffices to get the text content of a node:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public static string GetTextContent(this HtmlElement htmlElement)
{
    string ret = htmlElement.GetProperty("textContent") as string;
    if (string.IsNullOrEmpty(ret))
    {
         ret = htmlElement.GetAttribute("innerText");
         if (ret == null)
         {
             return string.Empty;
         }
    }

    return ret;
}
&lt;/pre&gt;

&lt;h4&gt;DocumentReady&lt;/h4&gt;

&lt;p&gt;A long-standing bug in Internet Explorer (at least since IE6; still present in IE8) causes document.onreadystatechange to be fired incorrectly, and the standard DOMContentLoaded isn't suppored. This means that HtmlPage.Document.DocumentReady &lt;i&gt;will fire&lt;/i&gt; when the document is not ready. This behavior has &lt;a href="http://forums.silverlight.net/forums/p/82810/193149.aspx#193149"&gt;been discussed&lt;/a&gt; on a Silverlight forum.&lt;/p&gt;

&lt;p&gt;I've also seen some situations where the jQuery ready handlers (and the window.onload handlers) will fire before the Silverlight control begins executing; this can happen if the page contains several images. To be safe, I recommend having both jQuery and Silverlight register "readyness", and the last one to register kicks off the initialization code.&lt;/p&gt;

&lt;p&gt;This has a few steps; I'll be using as an example a Silverlight menu control I wrote that dynamically builds its menu from an unordered list in the HTML. First, the "initialization" code must be made a separate method in the Silverlight control (in this example, it's "BuildMenu"):&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
// In the Page constructor (there's only one page in this simple menu control):
HtmlPage.RegisterScriptableObject("SLMenu", this);

// Also defined as part of the Page class:
[ScriptableMember]
public void BuildMenu()
&lt;/pre&gt;

&lt;p&gt;Define the "readyness" flags in plain, top-level JavaScript before the Silverlight control; this ensures that they're interpreted immediately:&lt;/p&gt;

&lt;pre class="brush: jscript"&gt;
// Top-level code; not in a function!
var silverlightLoaded = false;
var htmlLoaded = false;
&lt;/pre&gt;

&lt;p&gt;Also define the JavaScript function that the Silverlight control should call in top-level JavaScript before the Silverlight control:&lt;/p&gt;

&lt;pre class="brush: jscript"&gt;
// Top-level code; not in a function!
MenuOnLoad = function() {
  if (!silverlightLoaded) {
    silverlightLoaded = true;
    if (htmlLoaded) {
      menuControl.Content.SLMenu.BuildMenu();
    }
  }
}
&lt;/pre&gt;

&lt;p&gt;The code above is straightforward; it marks Silverlight as having loaded and then invokes the initialization code if the HTML has already loaded. The code run by the HTML when it loads is similar (shown here using jQuery, but window.onload could be used as well):&lt;/p&gt;

&lt;pre class="brush: jscript"&gt;
$(function() {
  if (!htmlLoaded) {
    htmlLoaded = true;
    if (silverlightLoaded) {
      menuControl.Content.SLMenu.BuildMenu();
    }
  }
});
&lt;/pre&gt;

&lt;p&gt;Finally, the Silverlight control must invoke the JavaScript "MenuOnLoad" function when it is loaded. This must come after its registration with the browser:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
// In the Page constructor (there's only one page in this simple menu control):
HtmlPage.RegisterScriptableObject("SLMenu", this);
HtmlPage.Window.Invoke("MenuOnLoad");
&lt;/pre&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Of course, these few examples are just minor inconsistencies. I'm sure that many more ugly browser incompatibilities will become troublesome over the next few months.&lt;/p&gt;

&lt;p&gt;The Silverlight menu used as the example above is live at this site: &lt;a href="http://www.landmarkbaptist.ws/"&gt;http://www.landmarkbaptist.ws/&lt;/a&gt;. If it doesn't work properly for you, please let me know! (I'm particularly interested if there are any holes in my initialization serialization logic).&lt;/p&gt;

&lt;p&gt;I'll keep posting as I find more problems. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2698972288584901372/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/02/cross-browser-silverlight.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2698972288584901372'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2698972288584901372'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/cross-browser-silverlight.html' title='Cross-browser Silverlight'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2403623053664225294</id><published>2010-01-18T13:55:00.000-05:00</published><updated>2010-01-28T14:41:41.524-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ASP.NET'/><title type='text'>ASP.NET MVC Faking Web Services</title><content type='html'>&lt;p&gt;At the most recent &lt;a href="http://nmichigan.net/"&gt;Northern Michigan .NET User's Group&lt;/a&gt; meeting, Derek Smith gave a great introduction to ASP.NET MVC. One thing that he touched on in his presentation was the URL routing feature of MVC (which can be used independently of the rest of the MVC framework). In response to my question, he went on to explain that the MVC controllers (which are routed to by the URL routing) may return data instead of just a view (in particular, XML and JSON).&lt;/p&gt;

&lt;p&gt;This means that ASP.NET MVC may be used to directly expose the controllers as web services, without all the configuration necessary to set up a web-friendly WCF interface hosted in IIS. In going the MVC route, one would lose the automatic metadata export for the WCF service, but one would gain ease of implementation and an easy-to-use "friendly URL" router.&lt;/p&gt;

&lt;p&gt;This is an interesting concept (and Google reveals that it's one that's been kicking around a few years). Manning has a &lt;a href="http://www.manning.com/palermo/"&gt;free chapter covering URL routing&lt;/a&gt; from their "ASP.NET MVC in Action" book (which I just bought; it is 50% off today only).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2403623053664225294/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/01/aspnet-mvc-faking-web-services.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2403623053664225294'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2403623053664225294'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/aspnet-mvc-faking-web-services.html' title='ASP.NET MVC Faking Web Services'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4111774602817740749</id><published>2010-01-18T11:54:00.000-05:00</published><updated>2012-09-28T10:22:45.650-04:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><title type='text'>Super-Agile or Cowboy-Coding?</title><content type='html'>&lt;p&gt;This is not one of my normal "hey, I found an obscure .NET thing" kind of posts. This is a brain-dump of something I've been thinking about for a while.&lt;/p&gt;

&lt;p&gt;A few months ago, there was a bit of discussion on the 'ol blog-o-sphere. Somebody said something about "shipping is a feature" and somebody else said something about "cowboy coding". If you missed it, no big deal; it's the old &lt;i&gt;how much design is the right amount&lt;/i&gt; debate. Earlier this week at lunch, I was reading a magazine article where the author made the implicit assumption that &lt;i&gt;coupling is bad&lt;/i&gt;, and that prompted this blog post.&lt;/p&gt;

&lt;p&gt;To summarize, there are two extreme positions in the argument. Some people push towards perfect designs: there's no coupling, everything is interface-based, every class has high cohesion, and it's documented completely. Other people push towards a working product: something that actually ships, works, has all the expected features, and generates income for the company.&lt;/p&gt;

&lt;p&gt;It's an interesting read, but I take a moderate position. I've been pushed both ways in my career: one time I was told to remove the dependency on the Dependency Injection component (&lt;i&gt;just in case&lt;/i&gt; we decided to change to a different DI component); another time I was told to just "make it work, and &lt;i&gt;fast&lt;/i&gt;" (due to an unethical coworker, the project was dumped on me with no code two weeks &lt;i&gt;after&lt;/i&gt; the contracted ship date). I can say from experience: neither extreme is pretty.&lt;/p&gt;

&lt;h4&gt;Coding with Engineers&lt;/h4&gt;

&lt;p&gt;I must say, I really enjoy my new job. I'm back at a small engineering company, where everyone you meet is an engineer of &lt;i&gt;some&lt;/i&gt; kind. [Even the guy in charge of the network is an ME; and I don't mean an IT guy with an ME degree - I mean an ME who just does the IT stuff in his spare time]. I'm now in my 8th year working at an engineering shop, and let me say that it takes a special kind of programmer to work in this kind of environment.&lt;/p&gt;

&lt;p&gt;Engineering companies (at least the small ones in Northern Michigan) don't really know how to do software. After all, that's what programmers are for, right? If &lt;i&gt;they&lt;/i&gt; don't know how to do software, who &lt;i&gt;would?&lt;/i&gt; Programming positions in engineering shops end up being of the "sink or swim" variety; you either know what you're doing and excel, or don't and are let go.&lt;/p&gt;

&lt;p&gt;There &lt;i&gt;is&lt;/i&gt; a distinction between good programmers and great programmers; based on my experience, great programmers are between 5 and 12 &lt;i&gt;times&lt;/i&gt; more productive than good programmers. Engineering shops cannot afford to hire an entire division of programmers and let them all "balance each other out;" they can only afford to hire the great programmers.&lt;/p&gt;

&lt;h4&gt;Aside - What Makes a Naturally Great Programmer?&lt;/h4&gt;

&lt;p&gt;I remember reading the &lt;a href="http://catb.org/~esr/faqs/hacker-howto.html"&gt;Hacker HOWTO&lt;/a&gt; years ago and realizing how true it was; there are a few things mentioned in that article as being common among naturally great programmers. I repeat the ones I've found most accurate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Learn to write your native language well." It is almost always the case that people who spell correctly, capitalize correctly, and use proper grammar also are great programmers. Similarly, it is almost always true that bad spellers, inconsistent capitalizers, and abusers of sentence structure produce worse code.&lt;/li&gt;
&lt;li&gt;"Train in a martial-arts form." The great programmer seems drawn to martial arts of some kind, especially "those which emphasize mental discipline, relaxed awareness, and control". It's been a few years since I've done Tae Kwon Do, but I still enjoy running through my exercises from time to time.&lt;/li&gt;
&lt;li&gt;"Develop an analytical ear for music... Learn to play some musical instrument well, or how to sing." Again, there is an eerie correlation between good programmers and musical abilities; I myself play the violin and sing (getting into barbershop recently).&lt;/li&gt;
&lt;li&gt;"Develop your appreciation of puns and wordplay." Great programmers do seem to enjoy these types of amusements. This is the reason why a lot of programmers have a dry sense of humor; they prefer jokes that require some thought. One of my favorite books is Pride and Prejudice, simply because of Mr. Bennet's statements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is rather strange that all these things show up so commonly among the greatest programmers. The Hacker HOWTO postulates a reason, with which I agree wholeheartedly: "they're connected with a mix of left- and right-brain skills that seems to be important; hackers need to be able to both reason logically and step outside the apparent logic of a problem at a moment's notice." I've taken several "measure your brain" tests, and every single one shows a perfectly equal balance; I am neither right-brained nor left-brained. Furthermore, I believe that this is important in being a naturally great programmer: it's possible to break down larger problems into small steps and be very detail-oriented, and it's possible to make the intuitive leaps into new algorithms - at the same time.&lt;/p&gt;

&lt;p&gt;For the record, I do believe that a good programmer may &lt;i&gt;learn&lt;/i&gt; to become a great programmer. The previous few paragraphs are only discussing common traits of &lt;i&gt;naturally&lt;/i&gt; great programmers.&lt;/p&gt;

&lt;h4&gt;Back to the Engineer Shop&lt;/h4&gt;

&lt;p&gt;As mentioned, engineer shops cannot afford a software division. If the truth were told, a lot of software methodologies are designed around "balancing" the good and great programmers; there's a constant training of the good programmers and a "holding back" of the great programmers (e.g., by putting off changes until everyone understands them, or just rejecting such changes).&lt;/p&gt;

&lt;p&gt;Engineer shops follow a different principle: only hire the great programmers. Usually, there is a probation period that lasts several months, during which time the other engineers determine whether you are a good programmer or a great programmer. At the end of that time, if you don't make the cut, you are shown the door. That might sound harsh, but we are talking about small engineer shops in Northern Michigan here; it's a simple matter of the survival of the company.&lt;/p&gt;

&lt;p&gt;In order to make the cut at an engineer shop, each and every prospective programmer must be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Motivated - you've got to be self-starting. There is always more work to do, and sometimes you won't have any work assigned. It is up to you to find the work that needs doing and "task it to yourself".&lt;/li&gt;
&lt;li&gt;Able to communicate - part of self-starting is &lt;i&gt;proactively&lt;/i&gt; gathering requirements. In an engineering shop, there are no market analysts, designers, or architects. Alternatively, one could say that &lt;i&gt;every&lt;/i&gt; programmer is a market analyst, designer, and architect. It's normal for a single programmer to be responsible for gathering requirements, designing, implementing, testing, and supporting (in the field) the software.&lt;/li&gt;
&lt;li&gt;Always learning - no one trains you; there is no programmer with enough time to teach you to be a programmer. Engineering shops generally do not pay for software conferences or seminars. They will provide you the Internet; it is up to you to keep your skills up-to-date.&lt;/li&gt;
&lt;li&gt;Conservative - the decision of when to jump on new technology falls on you; if you jump too soon, you can seriously impact the success of the entire company. In most engineering shops, there's a kind of informal consensus for big decisions; but if everyone knows you championed the MegaFrizzle Software Development Paradigm that just impacted everyone's bottom line, you don't last long.&lt;/li&gt;
&lt;li&gt;Experienced - to make the correct design and architectural decisions, you must be experienced both deeply and widely. "Deep" experience is more than writing some test programs; it's knowing the limitations of an approach by having felt them. "Wide" experience is necessary as well, so that you may choose the best path. I've utilized object-oriented, generic, procedural, and functional designs in various projects, and none of them is inherently better than another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple of advantages of being a programmer in an engineer shop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Empowerment - we know the true meaning of the word. We have true empowerment.&lt;/li&gt;
&lt;li&gt;Left alone (mostly) - the only people we really have to talk to are all really smart. All the people we work on a day-to-day basis are engineers (even our customer contacts). The data-to-noise ratio of conversations has a high average. :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, there are a few disadvantages of being a programmer in an engineer shop, especially in Northern Michigan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Difficult to use social programming techniques - in my current job I'm the only .NET programmer. What's even more scary, I've never met anyone in my life who has ever done pair programming or a design or code review. It can be difficult to get others to participate in user "stories". There's a lot of work being done now exploring this kind of "social programming", which is near impossible for us.&lt;/li&gt;
&lt;li&gt;Pressure - we have to stay the best, not just be the best once or twice. This is not so much a risk of losing our jobs, but it's a weight to have that much of the company's success riding on our decisions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Each engineering programmer stands or falls on their own, with a tremendous amount of autonomy. We almost have too much empowerment...&lt;/p&gt;

&lt;p&gt;This brings up the question that started this blog post: Am I "Super-Agile" or just a "Cowboy Coder"?&lt;/p&gt;

&lt;p&gt;I don't know the answer, but I'm interested in knowing. If I ever find out, I'll post the results. :)&lt;/p&gt;</content><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/01/super-agile-or-cowboy-coding.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4111774602817740749'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4111774602817740749'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8059256841693975248</id><published>2010-01-05T18:10:00.001-05:00</published><updated>2014-05-16T16:33:29.862-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Extension-Based Types</title><content type='html'>&lt;p&gt;There's a new paradign rising in .NET: &lt;i&gt;extension-based types (EBTs)&lt;/i&gt;.&lt;/p&gt;

&lt;h4&gt;Introduction&lt;/h4&gt;

&lt;p&gt;It's an exciting time to be a .NET developer. I'm reminded of the time when Boost was young, and programmers were first starting to realize the capabilities of templates. Generic programming became a powerful mainstream paradign, producing techniques now described in &lt;a href="http://www.amazon.com/gp/product/0201734842?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201734842"&gt;C++ Templates&lt;/a&gt; and &lt;a href="http://www.amazon.com/gp/product/0321227255?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321227255"&gt;C++ Template Metaprogramming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Currently, we're seeing a similar transformation taking place with C# generics. The adoption of generics is just beginning to reach a critical mass, where new and inventive approches are discovered. The thrust towards generic programming is driven by a desire for higher levels of &lt;i&gt;abstraction&lt;/i&gt; and &lt;i&gt;extensibility&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The EBT approach allows writing .NET libraries that permit an unprecedented level of end-user extensibility while discouraging leaky abstractions. This approach combines the clean abstraction of "programming to an interface" with the convenience of additional, more complex operations (some of which may be contributed by end-user code).&lt;/p&gt;

&lt;h4&gt;Extension-Based Types&lt;/h4&gt;

&lt;p&gt;An EBT is a type that is primarily defined through extension methods on interfaces. Only a few core methods are defined on the interfaces themselves. Properly-designed EBTs have the minimal set of methods defined in their interface (often only one, and sometimes none).&lt;/p&gt;

&lt;p&gt;EBTs are useful for end-user extensibility (and raising the level of abstraction), but they also have a few "gotchas" since they are dependent on the compile-time nature of method overload resolution.&lt;/p&gt;

&lt;p&gt;Here's an example of an EBT that defines a single method, MethodA:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IMyInterface { }
public sealed class MyImplementation : IMyInterface { }

public static class MyMethods
{
    public static void MethodA(this IMyInterface @this) { Console.WriteLine("IMyInterface.MethodA()"); }
}

class Program
{
    static void Main()
    {
        var obj = new MyImplementation();
        obj.MethodA(); // Prints: "IMyInterface.MethodA()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;h4&gt;Simple Inheritance&lt;/h4&gt;

&lt;p&gt;EBT inheritance is performed using interface inheritance. Here's an example of a base interface that defines MethodA and a derived interface defining MethodB; the derived interface ends up supporting both methods:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBase { }
public interface IDerived : IBase { }
public sealed class Derived : IDerived { }

public static class MyMethods
{
    public static void MethodA(this IBase @this) { Console.WriteLine("IBase.MethodA()"); }
    public static void MethodB(this IDerived @this) { Console.WriteLine("IDerived.MethodB()"); }
}

class Program
{
    static void Main()
    {
        var obj = new Derived();
        obj.MethodA(); // Prints: "IBase.MethodA()"
        obj.MethodB(); // Prints: "IDerived.MethodB()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;h4&gt;Overriding Inherited Methods: Simple Overriding&lt;/h4&gt;

&lt;p&gt;A derived EBT may override a base EBT method by defining its own method with an identical signature. Here's a derived type that overrides the MethodA defined by its base type:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBase { }
public sealed class Base : IBase { }
public interface IDerived : IBase { }
public sealed class Derived : IDerived { }

public static class MyMethods
{
    public static void MethodA(this IBase @this) { Console.WriteLine("IBase.MethodA()"); }
    public static void MethodA(this IDerived @this) { Console.WriteLine("IDerived.MethodA()"); }
}

class Program
{
    static void Main()
    {
        var obj1 = new Base();
        obj1.MethodA(); // Prints: "IBase.MethodA()"

        var obj2 = new Derived();
        obj2.MethodA(); // Prints: "IDerived.MethodA()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;h4&gt;Overriding Inherited Methods: Invoking the Base Method&lt;/h4&gt;

&lt;p&gt;In order to invoke the base method when the derived EBT overrides it, the compile-time type of the variable must explicitly be the base type. Here's an example that invokes the derived and base MethodA implementations on the same object:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBase { }
public interface IDerived : IBase { }
public sealed class Derived : IDerived { }

public static class MyMethods
{
    public static void MethodA(this IBase @this) { Console.WriteLine("IBase.MethodA()"); }
    public static void MethodA(this IDerived @this) { Console.WriteLine("IDerived.MethodA()"); }
}

class Program
{
    static void Main()
    {
        var d = new Derived();
        d.MethodA(); // Prints: "IDerived.MethodA()"

        IBase b = d;
        b.MethodA(); // Prints: "IBase.MethodA()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;p&gt;For convenience, an "identity transformation method" is usually provided that restricts the type of a subexpression; this way, a separate variable is not necessary. By convention, the identity transformation method is named "As{I}". The following example shows how an "AsBase" method removes the need for the IBase variable:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBase { }
public interface IDerived : IBase { }
public sealed class Derived : IDerived { }

public static class MyMethods
{
    public static IBase AsBase(this IBase @this) { return @this; }
    public static void MethodA(this IBase @this) { Console.WriteLine("IBase.MethodA()"); }
    public static void MethodA(this IDerived @this) { Console.WriteLine("IDerived.MethodA()"); }
}

class Program
{
    static void Main()
    {
        var obj = new Derived().AsBase();
        obj.MethodA(); // Prints: "IBase.MethodA()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;h4&gt;Overriding Inherited Methods: The Importance of Compile-Time Types&lt;/h4&gt;

&lt;p&gt;It's important to note that the compile-time type of the expression is what's used for method overloading, so the EBT style of overriding inherited methods is &lt;i&gt;not&lt;/i&gt; like object-oriented virtual function overriding:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBase { }
public interface IDerived : IBase { }
public sealed class Derived : IDerived { }

public static class MyMethods
{
    public static IBase AsBase(this IBase @this) { return @this; }
    public static void MethodA(this IBase @this) { Console.WriteLine("IBase.MethodA()"); }
    public static void MethodA(this IDerived @this) { Console.WriteLine("IDerived.MethodA()"); }
}

class Program
{
    static void Main()
    {
        IBase obj = new Derived();
        obj.MethodA(); // Prints: "IBase.MethodA()", NOT "IDervied.MethodA()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;p&gt;In fact, even something as minor as missing a "using" statement could cause the wrong method to be called. Consider the case where "MethodA(this IDerived)" is defined in a class in a different namespace. It must be brought into scope via a "using" statement before it could be considered by method resolution.&lt;/p&gt;

&lt;h4&gt;Multiple Inheritance&lt;/h4&gt;

&lt;p&gt;Multiple inheritance is supported for EBTs; any ambiguity causes a compiler error:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBaseA { }
public interface IBaseB { }
public interface IDerived : IBaseA, IBaseB { }
public sealed class Derived : IDerived { }

public static class MyMethods
{
    public static void MethodA(this IBaseA @this) { Console.WriteLine("IBaseA.MethodA()"); }
    public static void MethodA(this IBaseB @this) { Console.WriteLine("IBaseB.MethodA()"); }
}

class Program
{
    static void Main()
    {
        var obj = new Derived();
        obj.MethodA(); // Compiler error: ambiguous

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;p&gt;Ambiguity may be resolved by overriding the method in the derived EBT, or by constraining the compile-time type using the identity transformation method. The second approach is more flexible, since it allows any user-defined extensions. This example uses the second approach:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBaseA { }
public interface IBaseB { }
public interface IDerived : IBaseA, IBaseB { }
public sealed class Derived : IDerived { }

public static class MyMethods
{
    public static IBaseA AsBaseA(this IBaseA @this) { return @this; }
    public static void MethodA(this IBaseA @this) { Console.WriteLine("IBaseA.MethodA()"); }
    public static IBaseB AsBaseB(this IBaseB @this) { return @this; }
    public static void MethodA(this IBaseB @this) { Console.WriteLine("IBaseB.MethodA()"); }
}

class Program
{
    static void Main()
    {
        var obj = new Derived();
        obj.AsBaseA().MethodA(); // Prints: "IBaseA.MethodA()"
        obj.AsBaseB().MethodA(); // Prints: "IBaseB.MethodA()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;h4&gt;Properties&lt;/h4&gt;

&lt;p&gt;Due to .NET limitations, properties may only be defined on interfaces (there's no such thing as an "extension property"). However, they may be simulated:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBase { int Property { get; } }
public interface IDerived : IBase { }
public sealed class Derived : IDerived
{
    int IBase.Property
    {
        get { return this.GetProperty(); }
    }
}

public static class MyMethods
{
    public static IBase AsBase(this IBase @this) { return @this; }
    public static int GetProperty(this IDerived @this) { Console.WriteLine("IDerived.GetProperty()"); return 13; }
}

class Program
{
    static void Main()
    {
        var obj = new Derived();
        obj.GetProperty(); // Prints: "IDerived.GetProperty()"
        int test = obj.AsBase().Property; // Prints: "IDerived.GetProperty()"

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;p&gt;One may think of this as the interface holding the property &lt;i&gt;declaration&lt;/i&gt; while the extension methods (derived EBT methods) hold the property &lt;i&gt;definition&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Note that the property getter will always call the same derived method, regardless of whether it is accessed through an IBase interface. However, the extension method "GetProperty" (if it were defined on IBase) would call either the IBase or IDerived implementation, depending on the compile-time type.&lt;/p&gt;

&lt;h4&gt;Limitations: Inability to Override Interface Methods&lt;/h4&gt;

&lt;p&gt;If a method is defined in the interface instead of as an extension method, then that method may never be overridden by a derived EBT type:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
public interface IBase { }
public interface IDerived : IBase { void MethodA(); }
public sealed class Derived : IDerived
{
    public void MethodA() { Console.WriteLine("Derived.MethodA()"); }
}

public static class MyMethods
{
    public static IBase AsBase(this IBase @this) { return @this; }
    public static void MethodA(this IBase @this) { Console.WriteLine("IBase.MethodA()"); }
    public static IDerived AsDerived(this IDerived @this) { return @this; }
    public static void MethodA(this IDerived @this) { Console.WriteLine("IDerived.MethodA()"); }
}

class Program
{
    static void Main()
    {
        var obj = new Derived();
        obj.MethodA(); // Prints: "Derived.MethodA()"
        obj.AsBase().MethodA(); // Prints: "IBase.MethodA()"
        obj.AsDerived().MethodA(); // Prints: "Derived.MethodA()" (NOT "IDerived.MethodA")

        Console.ReadKey();
    }
}
&lt;/pre&gt;

&lt;p&gt;For this reason, it is important to distill as many methods as possible out of the interface that defines the EBT.&lt;/p&gt;

&lt;h4&gt;Limitations: Dependency on Compile-Time Types&lt;/h4&gt;

&lt;p&gt;Code that uses EBTs must "see" all the associated methods in order for overridden derived methods to work properly. The parallel problem for C++ templates eventually resulted in "header file libraries", where libraries transitioned from dlls to source code that was included in the program using the library.&lt;/p&gt;

&lt;p&gt;A similar transition will probably occur if EBTs are embraced. Currently, if EBTs are compiled into a library (e.g., System.Core.dll), then end-user code may supplement but not replace existing behavior.&lt;/p&gt;

&lt;h4&gt;Real-World Examples from LINQ&lt;/h4&gt;

&lt;p&gt;As LINQ continues to evolve, it approaches EBTs. In particular, the &lt;a href="http://msdn.microsoft.com/en-us/library/9eekhta0.aspx"&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/a&gt; interface is extended by the &lt;a href="http://msdn.microsoft.com/en-us/library/system.linq.enumerable.aspx"&gt;Enumerable&lt;/a&gt; class, including an &lt;a href="http://msdn.microsoft.com/en-us/library/bb335435.aspx"&gt;AsEnumerable&lt;/a&gt; identity transformation method. &lt;a href="http://msdn.microsoft.com/en-us/library/bb534852.aspx"&gt;IOrderedEnumerable&amp;lt;T&amp;gt;&lt;/a&gt; is one derived type; the interface adds no methods, but the Enumerable class does. The rarely-used &lt;a href="http://msdn.microsoft.com/en-us/library/bb351562.aspx"&gt;IQueryable&amp;lt;T&amp;gt;&lt;/a&gt; derived type is extended by &lt;a href="http://msdn.microsoft.com/en-us/library/system.linq.queryable.aspx"&gt;Queryable&lt;/a&gt;. Grouping and ordering follow the same pattern.&lt;/p&gt;

&lt;p&gt;The new PLINQ has a similar structure (though the derived &lt;a href="http://msdn.microsoft.com/en-us/library/dd383736(VS.100).aspx"&gt;ParallelQuery&amp;lt;T&amp;gt;&lt;/a&gt; is a class instead of an interface).&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;Rx&lt;/a&gt; (a.k.a. "LINQ to Events") continues the tradition. IObservable&amp;lt;T&amp;gt;, IObserver&amp;lt;T&amp;gt;, and IScheduler&amp;lt;T&amp;gt; provide basic definitions of types, with extension methods in the Observable, Observer, and Scheduler classes. Rx follows the EBT pattern in defining minimal interfaces; for example, IObservable&amp;lt;T&amp;gt; only defines one method (Subscribe), and extension methods are used to provide 5 overloads for Subscribe. The Rx team has a &lt;a href="http://channel9.msdn.com/posts/J.Van.Gogh/Controlling-concurrency-in-Rx/"&gt;video&lt;/a&gt; in which they describe some of the design behind IScheduler/Scheduler.&lt;/p&gt;

&lt;h4&gt;Future Blog Posts&lt;/h4&gt;

&lt;p&gt;In the (hopefully near) future, I'll be showing how to use EBTs to do compile-time generic specialization (including partial specialization, generic method specialization, and inheritance specialization). I also intend to cover "namespaces" and wrapper objects. Lots of fun! :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8059256841693975248/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/01/extension-based-types.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8059256841693975248'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8059256841693975248'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/extension-based-types.html' title='Extension-Based Types'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6294581162388509563</id><published>2010-01-05T15:43:00.001-05:00</published><updated>2010-01-05T15:45:36.525-05:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Generic Specialization</title><content type='html'>&lt;p&gt;C++ templates allow for a technique called &lt;i&gt;template specialization&lt;/i&gt;. Essentially, the idea is to have one generic implementation and also provide an alternate implementation if the type argument is a specific type.&lt;/p&gt;

&lt;p&gt;C# supports .NET generics, which are sort of like C++ templates, only they're centered around run-time rather than compile-time.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6294581162388509563'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6294581162388509563'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8219041667609113888</id><published>2010-01-02T23:30:00.000-05:00</published><updated>2010-01-02T23:30:11.619-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Books'/><title type='text'>Best Computer Programming Book Ever</title><content type='html'>&lt;p&gt;I had heard rave reviews of &lt;a href="http://www.amazon.com/gp/product/0735619670?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735619670"&gt;Code Complete&lt;/a&gt; for years. Supposedly, it's required reading for every Microsoft employee. Programmers I respect glowed about it. Rumors abounded about its ability to cure warts... OK, maybe the rumors didn't quite say that, but they were pretty close.&lt;/p&gt;

&lt;p&gt;Perhaps I'm a bit of a skeptic (which is funny, considering that I'm a Christian as well - but even in church, where things must be taken on faith, I do view everything in a highly skeptical light unless it is grounded on the Bible). "Surely," I thought, "no programming book is &lt;i&gt;that&lt;/i&gt; good!"&lt;/p&gt;

&lt;p&gt;I now stand corrected. I have nearly completed my first reading of this book (and I really took my time with this one). It is, without doubt, the best programming book I have ever read.&lt;/p&gt;

&lt;p&gt;It reads as the collective wisdom of many independent programmers brought together from years of experience, which is the only true teacher in our profession. The book does an excellent job of identifying common pitfalls in a language-agnostic fashion.&lt;/p&gt;

&lt;p&gt;There are only a handful of problems with it; the most major of these is that it could use some updating. For example, the C# language sidesteps entire sections of problems due to its design. There are also a couple of very minor points where I disagree with the author, and one tiny omission (I hope to blog more about these in detail later).&lt;/p&gt;

&lt;p&gt;I say again: this is the best book on programming I have ever read. I fully intend to read it continuously (starting again each time I finish). It should be read by anyone entering the field as well as anyone working in the field.&lt;/p&gt;

&lt;p&gt;The name is &lt;a href="http://www.amazon.com/gp/product/0735619670?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735619670"&gt;Code Complete&lt;/a&gt;, and it is a "must-read." No programmer's bookshelf is complete without a copy.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8219041667609113888/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8219041667609113888'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8219041667609113888'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html' title='Best Computer Programming Book Ever'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4869939957942164979</id><published>2010-01-02T23:17:00.000-05:00</published><updated>2010-01-02T23:17:03.794-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>View of 2010</title><content type='html'>&lt;p&gt;Last year ended in a very busy fashion. I ended up not getting my MCPD/Enterprise, though I did take the WCF test. Furthermore, with my new job and other responsibilities, getting the MCPD/Enterprise is no longer of a high enough priority to warrant the time.&lt;/p&gt;

&lt;p&gt;Regarding the new year (2010), expect some of my posts to take a web-based turn. Up until this point, I've almost entirely done desktop applications with a little dabbling in Silverlight. Starting in the next few days, however, I'll be transitioning a web site to ASP.NET; and I'll be kept busy in the foreseeable future maintaining it.&lt;/p&gt;

&lt;p&gt;Of course, my desktop days are not over. The web site is only an additional responsibility; my day job is entirely desktop-based, so there will be plenty of multithreading and asynchronous posts (especially as VS2010 is released), as well as adding to the TCP/IP FAQ.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4869939957942164979/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2010/01/view-of-2010.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4869939957942164979'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4869939957942164979'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/view-of-2010.html' title='View of 2010'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3766796478105137404</id><published>2009-12-18T15:35:00.000-05:00</published><updated>2009-12-18T15:35:56.757-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Linq'/><title type='text'>(Pre)Announcement of Nito.Linq!</title><content type='html'>&lt;p&gt;I know that it's not actually released yet, but I just couldn't keep quiet any longer!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nitolinq.codeplex.com/"&gt;Nito.Linq&lt;/a&gt; is a library that helps "fill in the gaps" in the existing LINQ system. It will be compatible with .NET 3.5 SP1, .NET 4.0, and Silverlight 3 (all with or without &lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;Rx&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The primary focus of this library is the development of operators around random-access sequences (IList&amp;lt;T&amp;gt;). Secondary focii include sorted sequence and list operators; a translation of all C++ STL algorithms into sequence/list operators (finally!); compatibility shims for working between .NET 3.5, .NET 4.0, and Rx; and a handful of little "extra" items such as LexicographicalComparer, CircularBuffer, and Deque.&lt;/p&gt;

&lt;p&gt;The source code is currently available to play with. These classes are actually being used in production code (at my day job), and most of them have thorough unit tests as well. The implementation is actually quite stable at this point, though the interface may change before the first release.&lt;/p&gt;

&lt;p&gt;To whet your appetite, here's a few things that one can do with Nito.Linq:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
int[] a = { 1, 2, 3 };
int[] b = { 4, 5, 6 };
IList&amp;lt;int&amp;gt; result = a.Concat(b);
&lt;/pre&gt;

&lt;p&gt;In the code above, &lt;i&gt;result&lt;/i&gt; is a list that contains { 1, 2, 3, 4, 5, 6 }. Nothing too surprising there, except that &lt;i&gt;result&lt;/i&gt; is actually a concatenated view of the original lists. In other words, &lt;i&gt;result&lt;/i&gt; uses delayed execution, just like LINQ.&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
int[] a = { 1, 2, 3, 4, 5, 6 };
IList&amp;lt;int&amp;gt; result = a.Skip(2);
&lt;/pre&gt;

&lt;p&gt;In the code above, &lt;i&gt;result&lt;/i&gt; contains the elements you'd expect from using the LINQ Skip operator. However, its type is not IEnumerable&amp;lt;T&amp;gt;; it is IList&amp;lt;T&amp;gt;, which means that it knows how many elements are in it and provides O(1) random-access element retrieval.&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
int[] a = { 1, 2, 3 };
int[] b = { 4, 5, 6 };
IList&amp;lt;int&amp;gt; result = a.Zip(b, (x, y) =&gt; x + y);
&lt;/pre&gt;

&lt;p&gt;In the code above, &lt;i&gt;result&lt;/i&gt; contains the elements { 5, 7, 9 }. This is identical to how the Rx Zip operator works, except that Rx's Zip only performs on sequences; &lt;i&gt;result&lt;/i&gt; is an IList&amp;lt;T&amp;gt;. Not only does this provide efficient random access to the resulting elements, it also delays execution of the zip delegate until a resulting element is accessed.&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
var a = new[] { 1, 2, 3 }.AsSorted();
int i = a.IndexOf(2);
&lt;/pre&gt;

&lt;p&gt;In the code above, &lt;i&gt;IndexOf&lt;/i&gt; is actually implemented using a binary search, rather than a simple linear search.&lt;/p&gt;

&lt;p&gt;If you're interested at all, get the source and play around with it (check out the unit tests for simple examples). Let me know what you think!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3766796478105137404/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/12/preannouncement-of-nitolinq.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3766796478105137404'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3766796478105137404'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/12/preannouncement-of-nitolinq.html' title='(Pre)Announcement of Nito.Linq!'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3523765442219888209</id><published>2009-12-03T06:28:00.000-05:00</published><updated>2009-12-03T06:28:41.989-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Slides from nmNUG Available</title><content type='html'>&lt;p&gt;Last month I spoke at nmNUG (the &lt;a href="http://nmichigan.net/"&gt;Northern Michigan .NET User's Group&lt;/a&gt;) on the topic of multithreading.&lt;/p&gt;

&lt;p&gt;It wasn't my best presentation: I spoke too fast, had too many slides and not enough code, and assumed a level of existing knowledge that was too high (I had assumed that everyone had done &lt;i&gt;some&lt;/i&gt; multithreading, but this was not the case). Even with my mistakes, though, it was still helpful for many.&lt;/p&gt;

&lt;p&gt;Slides are available &lt;a href="http://nmichigan.net/wp-content/uploads/2009/12/Multithreading.pptx"&gt;here&lt;/a&gt;. Topics include an overview of IAsyncResult, challenges in correctly marshaling events, more information on SynchronizationContext than anyone wants to know ;) , and a small amount of asynchronous component design.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3523765442219888209/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/12/slides-from-nmnug-available.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3523765442219888209'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3523765442219888209'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/12/slides-from-nmnug-available.html' title='Slides from nmNUG Available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7984443892728949560</id><published>2009-11-28T16:13:00.001-05:00</published><updated>2010-01-08T15:54:53.045-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Rx Release Brings Nice Surprises!</title><content type='html'>&lt;p&gt;Just in case you haven't heard, last week the &lt;a href="http://msdn.microsoft.com/en-us/devlabs/ee794896.aspx"&gt;Rx Framework&lt;/a&gt; has been (pre)released!&lt;/p&gt;

&lt;p&gt;This is an exciting event! And I don't get excited often... :)&lt;/p&gt;

&lt;p&gt;Up until the release, what had come out of Microsoft amounted to this: the .NET 4.0 BCL would include the basic supporting types for Rx, but some of the useful operators (e.g., conversions back and forth between IEnumerable and IObservable) would not be included; those additional operators would be released as the Rx framework after .NET 4.0 comes out.&lt;/p&gt;

&lt;p&gt;However, last week's Rx prerelease had a very nice surprise: Microsoft is (currently) planning to backport Rx to .NET 3.5 SP1! This includes not just all the Rx operators, but also the gaps that the Rx team been filling in LINQ.&lt;/p&gt;

&lt;p&gt;Even better: the Rx backport also has backports of Tasks and PLINQ!&lt;/p&gt;

&lt;p&gt;I think this is &lt;b&gt;awesome!&lt;/b&gt; It enables software companies to take advantage of the tremendous Task/PLINQ/Rx enhancements without having to upgrade everything to .NET 4.0 / VS2010. There is still motivation to eventually move to .NET 4, of course: DLR, better distribution story, etc. But backporting Task/PLINQ/Rx is a great help to those of us who don't have time to upgrade everything just yet.&lt;/p&gt;

&lt;p&gt;I've downloaded the (prerelease) Rx for .NET 3.5 SP1 backport. It appears to include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System.CoreEx.dll: General-purpose supporting types.&lt;/li&gt;
&lt;li&gt;System.Threading.dll: Tasks, PLINQ, and other .NET 4 concurrency stuff (Concurrent collections, Lazy initialization, new synchronization objects, etc).&lt;/li&gt;
&lt;li&gt;System.Reactive.dll: Rx&lt;/li&gt;
&lt;li&gt;System.Interactive.dll: Additions to LINQ, several of which were inspired by Rx operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tasks, PLINQ, and other System.Threading items like the concurrent collections have been discussed elsewhere; for pre-release software, there's a surprising amount of documentation already available.&lt;/p&gt;

&lt;p&gt;The Rx framework is a relative newcomer, and they're currently on fast-forward to get videos and blog posts out, so there's at least some documentation on Rx. Rx can be a bit confusing for many programmers because it's rooted in functional programming concepts, and the majority of programmers have traditionally only used imperative languages. Anyway, there's currently not much documentation, but keep an eye on the new &lt;a href="http://blogs.msdn.com/rxteam/default.aspx"&gt;Rx Team blog&lt;/a&gt;; they're currently doing a video per day, with blog posts (on individual team member blogs) as well.&lt;/p&gt;

&lt;p&gt;One piece of the Rx framework isn't getting the love that the others are getting, though: the LINQ extensions. I've decided to document at least a little bit on some of the operators that the Rx team has added to IEnumerable. I've been working on some of my own additional LINQ operators, and Jon Skeet has a &lt;a href="http://code.google.com/p/morelinq/"&gt;MoreLINQ&lt;/a&gt; project in the same vein.&lt;/p&gt;

&lt;p&gt;One place to bookmark for Rx is the &lt;a href="http://rxwiki.wikidot.com/"&gt;Rx Wiki&lt;/a&gt;, a community-run site about all things Rx.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7984443892728949560/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/11/rx-release-brings-nice-surprises.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7984443892728949560'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7984443892728949560'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/rx-release-brings-nice-surprises.html' title='Rx Release Brings Nice Surprises!'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7894332539606402865</id><published>2009-11-18T12:26:00.000-05:00</published><updated>2009-11-18T12:26:17.750-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Generic Generics and Method Overloads</title><content type='html'>&lt;p&gt;I was happily coding along this week, adding more IList&amp;lt;T&amp;gt; extension methods to my general utility library, when I came across an annoying problem. The following code works fine:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
int test1&amp;lt;T&amp;gt;(IList&amp;lt;T&amp;gt; x) { return 0; }
int test1&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; x) { return 1; }

[TestMethod]
public void TestMethod1()
{
    var list = new[] { 13 };
    IEnumerable&amp;lt;int&amp;gt; seq = list;

    Assert.AreEqual(0, test1(list));
    Assert.AreEqual(1, test1(seq));
}
&lt;/pre&gt;

&lt;p&gt;The behavior is just as you'd expect; the correct overloaded method is chosen based on the &lt;a href="http://msdn.microsoft.com/en-us/library/aa691339(VS.71).aspx"&gt;better conversion&lt;/a&gt; of the static types of the arguments.&lt;/p&gt;

&lt;p&gt;So far, so good. The problem that I came across is when generic generics are used:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
int test2&amp;lt;T&amp;gt;(IList&amp;lt;IList&amp;lt;T&amp;gt;&amp;gt; x) { return 0; }
int test2&amp;lt;T&amp;gt;(IEnumerable&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt; x) { return 1; }

[TestMethod]
public void TestMethod2()
{
    var list = new[] { 13 };
    IList&amp;lt;IList&amp;lt;int&amp;gt;&amp;gt; list2 = new[] { list };
    var list3 = new[] { list };

    Assert.AreEqual(0, test2(list2));
    // The following line does not compile:
    //  "The call is ambiguous between the following methods or properties..."
    //Assert.AreEqual(0, test2(list3));
}
&lt;/pre&gt;

&lt;p&gt;The compiler can choose the correct overload when the argument matches the specific expected type (e.g., "list2"), but fails to deduce that one overload is better than another when the argument is not as specific (e.g., "list3").&lt;/p&gt;

&lt;p&gt;The reasoning behind this is a bit obscure, but understandable. The compiler determines that it is able to convert the argument to either type:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
// These implicit conversions are why both methods are considered.
IList&amp;lt;IList&amp;lt;int&amp;gt;&amp;gt; tmp1 = list3;
IEnumerable&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt; tmp2 = list3;
&lt;/pre&gt;

&lt;p&gt;However, when determining which overload is "better", the compiler &lt;i&gt;cannot&lt;/i&gt; convert from IList&amp;lt;IList&amp;lt;int&amp;gt;&amp;gt; to IEnumerable&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt;, so it decides that neither overload is better, and therefore they are ambiguous. The first example worked because there &lt;i&gt;is&lt;/i&gt; a conversion from IList&amp;lt;T&amp;gt; to IEnumerable&amp;lt;T&amp;gt;, so the IList&amp;lt;T&amp;gt; overload was chosen.&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
// The lack of this implicit conversion is why the methods are ambiguous.
//tmp2 = tmp1;
&lt;/pre&gt;

&lt;p&gt;Note also that this situation &lt;i&gt;may&lt;/i&gt; change when .NET 4 comes out. .NET 4 introduces covariance and contravariance for generics. The concepts don't apply to APIs that are both readable and writeable (e.g., IList&amp;lt;T&amp;gt;), but they do apply to APIs that are one or the other (e.g., IEnumerable&amp;lt;T&amp;gt;). It's expected that .NET 4 will have an implicit conversion from IList&amp;lt;IList&amp;lt;int&amp;gt;&amp;gt; to IEnumerable&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt; (because IList&amp;lt;IList&amp;lt;int&amp;gt;&amp;gt; implements IEnumerable&amp;lt;IList&amp;lt;int&amp;gt;&amp;gt;), but it's unclear exactly how "smart" the compiler will be while resolving overload resolution.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/May_you_live_in_interesting_times"&gt;We live in interesting times.&lt;/a&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7894332539606402865/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/11/generic-generics-and-method-overloads.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7894332539606402865'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7894332539606402865'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/generic-generics-and-method-overloads.html' title='Generic Generics and Method Overloads'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5318845104100651317</id><published>2009-11-18T09:49:00.001-05:00</published><updated>2009-11-18T09:50:47.397-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Unit Testing Without Design Suicide</title><content type='html'>&lt;p&gt;One of the big problems when doing unit testing is that it's easy enough to test simple classes (without many dependencies), but testing more complex classes requires changes to the actual &lt;i&gt;design&lt;/i&gt; of the code.&lt;/p&gt;

&lt;p&gt;Mocks and stubs are common approaches to substitute other types on which the class under test depends. A number of frameworks have sprung up to make mocking and stubbing easier (I like &lt;a href="http://code.google.com/p/moq/"&gt;Moq&lt;/a&gt;). However, every mock or stub has another problem: how does one force the class under test to use the mock/stub instead of the real implementation?&lt;/p&gt;

&lt;p&gt;There are a few common solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define an interface for each dependency, and pass references to the interfaces into the constructor for the class.&lt;/li&gt;
&lt;li&gt;Define an interface for each dependency, and add a property to the class for each interface with a public setter.&lt;/li&gt;
&lt;li&gt;Make every class unsealed and virtual, moving the dependency code to one of many protected virtual methods, and then create a new derived type that is used for testing, overriding the virtual methods representing dependent code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;None of these approaches are suitable for all situations. They become particularly problematic when the type under test depends on &lt;i&gt;static&lt;/i&gt; properties or methods.&lt;/p&gt;

&lt;p&gt;I had a choice two weeks ago when writing unit tests for a rollover logger. It depended on DateTime.Now as well as a few static methods from the File and Directory classes. Should I create an interface for getting the current date and time (which is unlikely to change)? An interface for the file system (also unlikely to change)? Should I make the class unsealed and all methods virtual (opening up a second API - the protected API - that would have required &lt;i&gt;much&lt;/i&gt; more work in terms of API definition and documentation)?&lt;/p&gt;

&lt;p&gt;Some unit testing advocates say those are good ideas. I say it's design suicide.&lt;/p&gt;

&lt;p&gt;I ended up just writing integration tests; I didn't want to overcomplicate my design &lt;i&gt;just&lt;/i&gt; for the sake of some unit tests.&lt;/p&gt;

&lt;h4&gt;A Better Solution&lt;/h4&gt;

&lt;p&gt;Just this morning I was reading a PDC-related &lt;a href="http://blogs.microsoft.co.il/blogs/sasha/archive/2009/11/18/pdc-2009-day-1-code-contracts-and-pex-power-charge-your-assertions-and-unit-tests.aspx"&gt;blog post&lt;/a&gt; (man, I wish I could go some year...), and Sasha mentioned the existence of &lt;a href="http://research.microsoft.com/en-us/projects/stubs/"&gt;Moles/Stubs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The whole idea behind the Moles/Stubs framework is to inject replacement implementation code for &lt;i&gt;any&lt;/i&gt; public property or method of &lt;i&gt;any&lt;/i&gt; type. This includes &lt;i&gt;static&lt;/i&gt; properties and methods. This also includes methods and properties of &lt;i&gt;sealed&lt;/i&gt; types.&lt;/p&gt;

&lt;p&gt;Now that's sweet.&lt;/p&gt;

&lt;p&gt;I haven't had a chance to play with it much, but it apparently uses profiling hooks to forward any types defined in an XML file. So, you could stub out mscorlib.dll by adding mscorlib.stubx. The Moles framework then creates a substitute types for mscorlib.dll, which have &lt;i&gt;delegate properties&lt;/i&gt; that you can set to override the properties/methods of the original class.&lt;/p&gt;

&lt;p&gt;If we wanted to override the getter for System.DateTime.Now, then we would set a property on System.Stubs.MDateTime. Here's the DateTime.Now example code from the Moles/Stubs site:&lt;/p&gt;

&lt;pre class="brush: csharp"&gt;
// let's detour DateTime.Now
MDateTime.NowGet = () =&gt; new DateTime(2000,1,1);

if (DateTime.Now == new DateTime(2000, 1, 1))
    throw new Y2KBugException(); // take cover!
&lt;/pre&gt;

&lt;p&gt;By setting the MDateTime.NowGet property, you're able to specify the behavior of DateTime.Now.&lt;/p&gt;

&lt;p&gt;I don't often get excited, but this is one of the exceptions. There are some limitations to the Mole framework: it's not an official/production level release, and the replaced properties/methods "must match one of the predefined set of code signatures" that they support. However, even with these limitations, I think it's something I'll be using quite a lot of!&lt;/p&gt;

&lt;p&gt;Because it allows me to do unit testing without design suicide.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5318845104100651317/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/11/unit-testing-without-design-suicide.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5318845104100651317'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5318845104100651317'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/unit-testing-without-design-suicide.html' title='Unit Testing Without Design Suicide'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2888715206586520261</id><published>2009-11-17T17:12:00.001-05:00</published><updated>2013-05-17T23:07:28.765-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>ICollection.IsReadOnly (and Arrays)</title><content type='html'>&lt;p&gt;Today I had a simple question that ended up having a bit of a complex answer: how does one implement ICollection&amp;lt;T&amp;gt;.IsReadOnly?&lt;/p&gt;

&lt;p&gt;The fundamental problem is that there's more than one definition of "read-only". Various collection types permit different types of updates. Generally, updates fall into one of two categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An update that changes the value of an element already in the collection, and does not change the number of elements in the collection. e.g., the index setter.&lt;/li&gt;
&lt;li&gt;An update that changes the number of values in the collection, but does not change any of the values of the elements in the collection. e.g., Add(), Clear(), etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I Googled for the proper semantics to use, and was able to find three decent sources of information: a &lt;a href="http://stackoverflow.com/questions/1073522/contract-of-icollectiont-isreadonly"&gt;StackOverflow question on the Contract of ICollection&amp;lt;T&amp;gt;.IsReadOnly&lt;/a&gt;, a &lt;a href="http://www.wintellect.com/CS/blogs/pgolde/archive/2005/05/12/ilist-icollection-and-isreadonly.aspx"&gt;blog post by Peter Golde titled "IList, ICollection, and IsReadOnly"&lt;/a&gt;, and a &lt;a href="http://blogs.msdn.com/kcwalina/archive/2005/05/18/419203.aspx"&gt;blog post by Krzysztof Cwalina on "Generic interfaces, IsReadOnly, IsFixedSize, and array"&lt;/a&gt;. From the (older) blog posts and some quick tests on array behavior, I've reached the conclusions below regarding the history and current state of the IsReadOnly property.&lt;/p&gt;

&lt;h4&gt;The Traditional Interpretation&lt;/h4&gt;

&lt;p&gt;The value of IsReadOnly is false if &lt;i&gt;either&lt;/i&gt; type of update is allowed. It is only set to true if &lt;i&gt;both&lt;/i&gt; types of updates are &lt;i&gt;not&lt;/i&gt; allowed.&lt;/p&gt;

&lt;p&gt;The built-in array type (which only allows one type of update) honors this interpretation by returning false for IsReadOnly:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;[TestMethod]
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Array_IsNotReadOnly()
{
    &lt;span class="keyword"&gt;int&lt;/span&gt;[] array = &lt;span class="keyword"&gt;new&lt;/span&gt;[] { 1, 2, 3, 4 };
    Assert.AreEqual(&lt;span class="string"&gt;&amp;quot;Int32[]&amp;quot;&lt;/span&gt;, array.GetType().Name);
    &lt;span class="keyword"&gt;bool&lt;/span&gt; arrayIsReadOnly = array.IsReadOnly;
    Assert.IsFalse(arrayIsReadOnly);
 
    System.Collections.IList arrayAsIList = array;
    Assert.AreEqual(&lt;span class="string"&gt;&amp;quot;Int32[]&amp;quot;&lt;/span&gt;, arrayAsIList.GetType().Name);
    &lt;span class="keyword"&gt;bool&lt;/span&gt; arrayAsIListIsReadOnly = arrayAsIList.IsReadOnly;
    Assert.IsFalse(arrayAsIListIsReadOnly);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;The Modern Interpretation&lt;/h4&gt;

&lt;p&gt;It appears that with .NET 2.0, the meaning of IsReadOnly has changed. It should now be true if &lt;i&gt;either&lt;/i&gt; type of update is &lt;i&gt;not&lt;/i&gt; allowed. It is only set to false if &lt;i&gt;both&lt;/i&gt; types of updates are allowed.&lt;/p&gt;

&lt;p&gt;Interestingly, the built-in array type honors this interpretation as well. It returns true for IsReadOnly (but only if accessed through a generic interface):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;[TestMethod]
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Array_IsReadOnly()
{
    &lt;span class="keyword"&gt;int&lt;/span&gt;[] array = &lt;span class="keyword"&gt;new&lt;/span&gt;[] { 1, 2, 3, 4 };
 
    IList&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; arrayAsIListOfT = array;
    Assert.AreEqual(&lt;span class="string"&gt;&amp;quot;Int32[]&amp;quot;&lt;/span&gt;, arrayAsIListOfT.GetType().Name);
    &lt;span class="keyword"&gt;bool&lt;/span&gt; arrayAsIListOfTIsReadOnly = arrayAsIListOfT.IsReadOnly;
    Assert.IsTrue(arrayAsIListOfTIsReadOnly);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Presumably, any new list types that implement IList as well as IList&amp;lt;T&amp;gt; may need to return different values for IList.IsReadOnly and IList&amp;lt;T&amp;gt;.IsReadOnly. This is confusing, to say the least.&lt;/p&gt;

&lt;h4&gt;Identical Documentation; Confusing Behavior&lt;/h4&gt;

&lt;p&gt;As of the time of blog post, the Microsoft documentation for IList.IsReadOnly and ICollection&amp;lt;T&amp;gt;.IsReadOnly are nearly identical, ignoring the fact that the semantics are quite different:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/system.collections.ilist.isreadonly.aspx"&gt;IList.IsReadOnly&lt;/a&gt;: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created."&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/0cfatk9t.aspx"&gt;ICollection&amp;lt;T&amp;gt;.IsReadOnly&lt;/a&gt;: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created."&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Furthermore, the behavior of the common array class is confusing, especially in light of the current Microsoft documentation for &lt;a href="http://msdn.microsoft.com/en-us/library/system.array.isreadonly.aspx"&gt;Array.IsReadOnly&lt;/a&gt;: "This property is always false for all arrays."&lt;/p&gt;

&lt;h4&gt;Conclusion: Does Anyone Care?&lt;/h4&gt;

&lt;p&gt;This blog post has been an attempt to sort out the proper way of implementing IsReadOnly. However, due to the complexity of the semantics, it seems unlikely that any client code is actually using it correctly.&lt;/p&gt;

&lt;p&gt;For future code, I recommend only implementing IList&amp;lt;T&amp;gt; with the modern interpretation, and not implementing IList. If one does need IList, however (e.g., for binding purposes), then they must implement both interpretations.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2888715206586520261/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/11/icollection-isreadonly-and-arrays.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2888715206586520261'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2888715206586520261'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/icollection-isreadonly-and-arrays.html' title='ICollection&lt;T&gt;.IsReadOnly (and Arrays)'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044</id><published>2009-11-16T12:04:00.004-05:00</published><updated>2014-05-16T16:34:55.042-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Reverse Compiling Windows Forms</title><content type='html'>&lt;p&gt;Today I had a fun task: the source code for an existing executable had been lost, and I got the job of getting it back. The good news is that &lt;a href="http://www.red-gate.com/products/reflector/"&gt;Red Gate's Reflector&lt;/a&gt; (formerly Lutz Roeder's Reflector) is a standard tool for any serious .NET programmer, and it does quite a decent job of decompiling (nonobfuscated) .NET code. The bad news is that I had to also reverse-engineer the GUI.&lt;/p&gt;

&lt;p&gt;After finding nothing on Google, and a bit of trial and error, I discovered the following procedure worked adequately, at least for my (simple) executable on Visual Studio 2008:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, export the source from Reflector, create a solution, and ensure it builds.&lt;/li&gt;
&lt;li&gt;Convert the ".resources" files into ".resx" files. Reflector just dumps out the binary .NET resources, but VS prefers them as XML. Fire up your VS command prompt and run this command: "resgen My.Long.Resource.Name.resources Name.resx".&lt;/li&gt;
&lt;li&gt;Move the resulting ".resx" files into their appropriate directories (e.g., "My\Long\Resource"). The rest of these steps must be done for each ".resx" file.&lt;/li&gt;
&lt;li&gt;Add the ".resx" files to your solution (they should be inserted under the matching ".cs" file), remove the old ".resources" file from the solution, and rebuild.&lt;/li&gt;
&lt;li&gt;Add a new empty C# code file named "Name.Designer.cs" file in the same directory, and paste in the following code:
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;namespace&lt;/span&gt; My.Long.Resource
{
    &lt;span class="keyword"&gt;partial&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; Name
    {
        &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="comment"&gt;/// Required designer variable.&lt;/span&gt;
        &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="keyword"&gt;private&lt;/span&gt; System.ComponentModel.IContainer components = &lt;span class="keyword"&gt;null&lt;/span&gt;;
 
        &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="comment"&gt;/// Clean up any resources being used.&lt;/span&gt;
        &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="keyword"&gt;protected&lt;/span&gt; &lt;span class="keyword"&gt;override&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose(&lt;span class="keyword"&gt;bool&lt;/span&gt; disposing)
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (disposing &amp;amp;&amp;amp; (components != &lt;span class="keyword"&gt;null&lt;/span&gt;))
            {
                components.Dispose();
            }
            &lt;span class="keyword"&gt;base&lt;/span&gt;.Dispose(disposing);
        }
 
        #region Windows Form Designer generated code
        &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="comment"&gt;/// Required method for Designer support - do not modify&lt;/span&gt;
        &lt;span class="comment"&gt;/// the contents of this method with the code editor.&lt;/span&gt;
        &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
 
        #endregion
 
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Open up the parent "Name.cs" file (right-click -&gt; View Code) and add the "partial" attribute to its class declaration.&lt;/li&gt;
&lt;li&gt;Delete the member variable "components".&lt;/li&gt;
&lt;li&gt;Move all GUI member variables from "Name.cs" to the end of "Name.Designer.cs" (placing them after the "#endregion"). GUI member variables are anything that is added from the Toolbox, so that would include System.Windows.Forms.Timer components, etc.&lt;/li&gt;
&lt;li&gt;Delete the "Name.Dispose" method from the "Name.cs" file.&lt;/li&gt;
&lt;li&gt;Move "Name.InitializeComponent" from the "Name.cs" file into the "Name.Designer.cs" file, placing it before the "#endregion".&lt;/li&gt;
&lt;li&gt;For each unrecognized type in the member variables and InitializeComponent, either fully qualify it or add a using declaration. Fully qualifying each type is more time consuming, but matches exactly what the designer expects. After this step, the solution should build.&lt;/li&gt;
&lt;li&gt;If InitializeComponent contains a line assigning the member variable "this.components = new Container();", then it must be changed to be "this.components = new System.ComponentModel.Container();" &lt;i&gt;and&lt;/i&gt; moved to the top of the method.&lt;/li&gt;
&lt;li&gt;If InitializeComponent contains a line creating a resource manager, e.g., "ComponentResourceManager manager = new ComponentResourceManager(typeof(Name));", the local variable "manager" &lt;i&gt;must&lt;/i&gt; be renamed to "resources" (and update references to the renamed object).&lt;/li&gt;
&lt;li&gt;Repeat attempting to load it in the designer, fully qualifying any types that it complains about (this step is necessary because the designer's code parser is not as smart as the C# compiler):
&lt;ul&gt;
&lt;li&gt;"The designer cannot process the code..." - Any enum member variables that have the same name as their type need to have their value fully qualified, e.g., "base.AutoScaleMode = AutoScaleMode.Font;" needs to be "base.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;").&lt;/li&gt;
&lt;li&gt;"The variable ... is either undeclared or was never assigned" - Many types seem to require fully qualified type names when declared (e.g., "private OpenFileDialog openFileDialog;" needs to be "private System.Windows.Forms.OpenFileDialog openFileDialog;").&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After following the (rather tedious) procedure above, you should have a form that can be opened in the VS designer. If I had more time, I'd wrap it up as a Reflector add-in, but time seems to be a fleeting resource these days.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6474634844717706044/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html#comment-form' title='17 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' title='Reverse Compiling Windows Forms'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>17</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3578009884916216599</id><published>2009-10-22T18:41:00.003-04:00</published><updated>2011-03-03T20:53:44.522-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows Services'/><title type='text'>Windows Services and the Network</title><content type='html'>&lt;p&gt;Let's make this very clear: &lt;b&gt;a service should not use or change drive mappings &lt;i&gt;at all&lt;/i&gt;&lt;/b&gt;. See &lt;a href="http://support.microsoft.com/kb/180362"&gt;KB180362 (INFO: Services and Redirected Drives)&lt;/a&gt; &lt;a href="http://www.webcitation.org/5wvCVoiMW"&gt;(webcite)&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/ms685143.aspx"&gt;Services and Redirected Drives (MSDN)&lt;/a&gt; &lt;a href="http://www.webcitation.org/5wvCgBLpy"&gt;(webcite)&lt;/a&gt; for more information. If a service needs to use network resources, it should use UNC paths.&lt;/p&gt;

&lt;p&gt;Network drive mappings are handled differently on different Windows versions. In addition, network drive mappings are one type of an "MS-DOS Device Name", so they fall under the additional complications described in &lt;a href="http://msdn.microsoft.com/en-us/library/ff554302.aspx"&gt;Local and Global MS-DOS Device Names&lt;/a&gt; &lt;a href="http://www.webcitation.org/5wvCJn9TO"&gt;(webcite)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that a service running as &lt;a href="http://msdn.microsoft.com/en-us/library/ms684188.aspx"&gt;LocalService&lt;/a&gt; &lt;a href="http://www.webcitation.org/5wvCjwaeD"&gt;(webcite)&lt;/a&gt; uses anonymous credentials to access network resources, and services running as &lt;a href="http://msdn.microsoft.com/en-us/library/ms684272.aspx"&gt;NetworkService&lt;/a&gt; &lt;a href="http://www.webcitation.org/5wvCoNkZK"&gt;(webcite)&lt;/a&gt; or &lt;a href="http://msdn.microsoft.com/en-us/library/ms684190(VS.85).aspx"&gt;LocalSystem&lt;/a&gt; &lt;a href="http://www.webcitation.org/5wvCtIBSx"&gt;(webcite)&lt;/a&gt; use machine account credentials.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3578009884916216599/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/10/windows-services-and-network.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3578009884916216599'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3578009884916216599'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/windows-services-and-network.html' title='Windows Services and the Network'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2298481796935864895</id><published>2009-10-21T19:49:00.000-04:00</published><updated>2013-05-17T23:03:35.711-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Windows Services'/><title type='text'>Managed Windows Services - The Basics</title><content type='html'>&lt;p&gt;Managed (.NET) Windows Services suffer from a lack of sufficient information in the .NET MSDN documentation. Earlier this year, the BCL team put a post on their blog that fills in the gaps: &lt;a href="http://blogs.msdn.com/bclteam/archive/2009/02/19/in-depth-how-net-managed-services-interact-with-the-servicecontrolmanager-scm-kim-hamilton.aspx"&gt;How .NET Managed Services Interact with the Service Control Manager&lt;/a&gt;. The Service Control Manager (SCM) is the part of Windows that controls starting and stopping Windows Services.&lt;/p&gt;

&lt;h4&gt;Services and the .NET ServiceBase Class&lt;/h4&gt;

&lt;p&gt;In a nutshell, the static &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.run.aspx"&gt;ServiceBase.Run&lt;/a&gt; method provides a main loop for services, giving the service's main thread to the SCM. Once control has been passed off, &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.aspx"&gt;ServiceBase&lt;/a&gt; will invoke the service entry points such as &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.onstart.aspx"&gt;ServiceBase.OnStart&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.onstop.aspx"&gt;ServiceBase.OnStop&lt;/a&gt; as a response to SCM requests.&lt;/p&gt;

&lt;h4&gt;Properly Implementing ServiceBase.OnStart and ServiceBase.OnStop&lt;/h4&gt;

&lt;p&gt;The service enters the "starting" state before &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.onstart.aspx"&gt;ServiceBase.OnStart&lt;/a&gt; is called, and only enters the "started" state when OnStart returns. So, a service that is always "starting" and never "started" is a pretty good indication that OnStart isn't returning.&lt;/p&gt;

&lt;p&gt;OnStart cannot be a "main loop" for a service. Many services work just fine without a main loop, but if one is required, then OnStart should start a thread and then return, letting the thread run the actual main loop. If OnStart will take more than 30 seconds to return, then it should call &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.requestadditionaltime.aspx"&gt;ServiceBase.RequestAdditionalTime&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, the service enters the "stopping" state before &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.onstop.aspx"&gt;ServiceBase.OnStop&lt;/a&gt; is called, and enters the "stopped" state when OnStop returns. If OnStop will take more than 20 seconds, then it should call &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.requestadditionaltime.aspx"&gt;ServiceBase.RequestAdditionalTime&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;The Current Directory&lt;/h4&gt;

&lt;p&gt;Services do not start with their current directory set to where their executable is. They usually end up running with their current directory set to the Windows or Windows System folder. It's not unusual for Windows Services to set their current directory near the beginning of their Main method, before calling &lt;a href="http://msdn.microsoft.com/en-us/library/system.serviceprocess.servicebase.run.aspx"&gt;ServiceBase.Run&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;Environment.CurrentDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Services and Threading&lt;/h4&gt;

&lt;p&gt;Deep within the bowels of the OS, Windows Services are treated as a special sort of Console application. A Console application has a single thread by default and exits when that thread returns from Main; a Windows Service starts as a Console application and then passes ownership of its thread to the SCM by calling ServiceBase.Run. When the SCM decides to exit the service process (after all its services have been stopped), it will return control back to Main, which is expected to immediately exit.&lt;/p&gt;

&lt;p&gt;The ServiceBase events (such as OnStart and OnStop) execute within the context of a worker thread. Therefore, the default synchronization context for .NET services is unsynchronized (e.g., &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.current.aspx"&gt;SynchronizationContext.Current&lt;/a&gt; is null). Windows Services usually employ one of two threading models:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a "main loop" thread within OnStart, and have this thread respond to events (including the OnStop event).&lt;/li&gt;
&lt;li&gt;Start at least one asynchronous operation (such as a Timer, listening socket, or FileSystemWatcher), and have the completion handlers take the appropriate actions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that both of these models return from OnStart after a short period of time (either starting the main thread or starting an asynchronous operation).&lt;/p&gt;

&lt;p&gt;A reminder about garbage collection is in order: if the only reference to an object is in a completion routine, then that object is eligible for garbage collection. This is true for any type of .NET process, but most often causes problems with services that choose to use the second threading model described above.&lt;/p&gt;

&lt;p&gt;Even if a service uses a "main loop" thread, the default SynchronizationContext is still in effect, resulting in free-threaded completion routines even for EBAP components (EBAP: &lt;a href="http://msdn.microsoft.com/en-us/library/wewwczdw.aspx"&gt;Event-Based Asynchronous Pattern&lt;/a&gt;). This means that EBAP components such as &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx"&gt;BackgroundWorker&lt;/a&gt; may not perform as expected. The &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt; library contains an ActionThread that is ideal for the "main loop" thread of a Windows Service; see the Nito.Async documentation for details and examples.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2298481796935864895/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/10/managed-windows-services-basics.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2298481796935864895'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2298481796935864895'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/managed-windows-services-basics.html' title='Managed Windows Services - The Basics'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4553412254046769562</id><published>2009-10-20T15:59:00.002-04:00</published><updated>2013-05-17T10:29:03.378-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><title type='text'>SynchronizationContext Properties Summary</title><content type='html'>&lt;p&gt;A few of my posts recently have dealt with surprises that I've found when interacting with different implementations of &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx"&gt;SynchronizationContext&lt;/a&gt;. This post is a summary of my findings.&lt;/p&gt;

&lt;table border="1"&gt;
&lt;caption&gt;SynchronizationContext Implementation Properties&lt;/caption&gt;
&lt;tr&gt;&lt;th/&gt;
  &lt;th&gt;Specific Associated Thread&lt;/th&gt;
  &lt;th&gt;Synchronized Execution&lt;/th&gt;
  &lt;th&gt;Sequential Execution&lt;/th&gt;
  &lt;th&gt;Reentrant Send&lt;/th&gt;
  &lt;th&gt;Reentrant Post&lt;/th&gt;
  &lt;th&gt;Supports Equality Comparision&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Windows Forms&lt;/th&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Sometimes [1]&lt;/td&gt;
  &lt;td&gt;Never&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Windows Presentation Foundation and Silverlight&lt;/th&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Sometimes [1]&lt;/td&gt;
  &lt;td&gt;Never&lt;/td&gt;
  &lt;td&gt;No [3]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Nito&lt;/th&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;Never [2]&lt;/td&gt;
  &lt;td&gt;Never&lt;/td&gt;
  &lt;td&gt;No [4]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Default&lt;/th&gt;
  &lt;td&gt;No&lt;/td&gt;
  &lt;td&gt;No&lt;/td&gt;
  &lt;td&gt;No&lt;/td&gt;
  &lt;td&gt;Always&lt;/td&gt;
  &lt;td&gt;Never&lt;/td&gt;
  &lt;td&gt;N/A [5]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;ASP.NET&lt;/th&gt;
  &lt;td&gt;No&lt;/td&gt;
  &lt;td&gt;Yes&lt;/td&gt;
  &lt;td&gt;No&lt;/td&gt;
  &lt;td&gt;Always&lt;/td&gt;
  &lt;td&gt;Always [6]&lt;/td&gt;
  &lt;td&gt;N/A [5]&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h4&gt;Notes&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Send is reentrant when invoked from the same GUI thread; it is not reentrant when invoked from other threads.&lt;/li&gt;
&lt;li&gt;Invoking Send from the thread associated with a Nito.Async.ActionDispatcherSynchronizationContext is not allowed.&lt;/li&gt;
&lt;li&gt;As of .NET 3.5 SP1, WPF will create a separate DispatcherSynchronizationContext for each window, even if both windows are on the same thread.&lt;/li&gt;
&lt;li&gt;It is possible to create two different Nito.Async.ActionDispatcherSynchronizationContext instances that refer to the same underlying Nito.Async.ActionDispatcher.&lt;/li&gt;
&lt;li&gt;The "Supports Equality Comparision" property is meaningless because this SynchronizationContext type does not have a Specific Associated Thread.&lt;/li&gt;
&lt;li&gt;The rationale behind this surprising reentrancy is that the AspNetSynchronizationContext is not associated with any threads at all, so it borrows the thread from its caller.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;SynchronizationContext Implementations&lt;/h4&gt;

&lt;p&gt;The "Windows Forms" entry refers to the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.windowsformssynchronizationcontext.aspx"&gt;System.Windows.Forms.WindowsFormsSynchronizationContext&lt;/a&gt;, which is used by the GUI thread(s) in Windows Forms applications. Other threads in the same application may use different SynchronizationContext implementations.&lt;/p&gt;
&lt;p&gt;The "Windows Presentation Foundation and Silverlight" entry refers to the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatchersynchronizationcontext.aspx"&gt;System.Windows.Threading.DispatcherSynchronizationContext&lt;/a&gt;, which is used by the GUI thread(s) in Windows Presentation Foundation and Silverlight applications. Other threads in the same application may use different SynchronizationContext implementations.&lt;/p&gt;
&lt;p&gt;The "Nito" entry refers to the Nito.Async.ActionDispatcherSynchronizationContext from the &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt; library. This includes Nito.Async.ActionThread threads.&lt;/p&gt;
&lt;p&gt;The "Default" entry refers the default implementation of &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx"&gt;System.Threading.SynchronizationContext&lt;/a&gt;. This includes ThreadPool and Thread class threads, Windows Services, and Console applications, unless that thread replaces the default with a different SynchronizationContext.&lt;/p&gt;
&lt;p&gt;The "ASP.NET" entry refers to the System.Web.dll:System.Web.AspNetSynchronizationContext, which is used by threads running in an application hosted by the ASP.NET runtime.&lt;/p&gt;

&lt;h4&gt;SynchronizationContext Properties&lt;/h4&gt;

&lt;p&gt;The "Specific Associated Thread" property means that the SynchronizationContext refers to a single, specific thread, and that queueing work to the SynchronizationContext will queue work to that thread. Note that multiple SynchronizationContexts may still refer to the same thread, even if this property is true.&lt;/p&gt;
&lt;p&gt;The "Synchronized Execution" property means that all work queued to the SynchronizationContext will execute one at a time.&lt;/p&gt;
&lt;p&gt;The "Sequential Execution" property means that all work queued to the SynchronizationContext will execute in order. If a SynchronizationContext supports Sequential Execution, then it also supports Synchronized Execution.&lt;/p&gt;
&lt;p&gt;The "Reentrant Send" property means that the implementation of SynchronizationContext.Send will directly invoke its delegate on the current thread.&lt;/p&gt;
&lt;p&gt;The "Reentrant Post" property means that the implementation of SynchronizationContext.Post will directly invoke its delegate on the current thread.&lt;/p&gt;
&lt;p&gt;The "Supports Equality Comparision" property means that instances of that SynchronizationContext type may be compared for equality, and that equality implies that they refer to the same Specific Associated Thread.&lt;/p&gt;

&lt;h4&gt;Further Reading and a Useful Library&lt;/h4&gt;

&lt;p&gt;For more details, see the previous SynchronizationContext-related posts &lt;a href="http://blog.stephencleary.com/2009/08/gotchas-from-synchronizationcontext.html"&gt;Gotchas from SynchronizationContext!&lt;/a&gt; and &lt;a href="http://blog.stephencleary.com/2009/09/another-synchronizationcontext-gotcha.html"&gt;Another SynchronizationContext Gotcha: InvokeRequired?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nitoasync.codeplex.com/"&gt;The Nito.Async library&lt;/a&gt; contains a Nito.Async.SynchronizationContextRegister that can be used by a program to query properties of a SynchronizationContext implementation (except the "Supports Equality Comparision" property). This is useful when writing .NET multi-host-compatible asynchronous components.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4553412254046769562/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/10/synchronizationcontext-properties.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4553412254046769562'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4553412254046769562'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/synchronizationcontext-properties.html' title='SynchronizationContext Properties Summary'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5093624662645963791</id><published>2009-10-07T12:25:00.000-04:00</published><updated>2009-10-14T08:54:10.991-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MSBuild'/><title type='text'>DynamicExecute Now Official</title><content type='html'>&lt;p&gt;Version 3.5.4.0 of the &lt;a href="http://www.codeplex.com/MSBuildExtensionPack"&gt;MSBuild Extension Pack&lt;/a&gt; has recently been released!&lt;/p&gt;

&lt;p&gt;This release of the project includes my DynamicExecute class &lt;a href="http://www.msbuildextensionpack.com/help/3.5.4.0/html/2e32aa32-13c7-6374-e53e-241ff534fe1c.htm"&gt;(online docs)&lt;/a&gt;, which allows build masters to include C# code right in their MSBuild scripts. This code is compiled and executed at build time, which provides a whole new level of MSBuild extensibility.&lt;/p&gt;

&lt;p&gt;If you've ever found yourself frustrated by the lack of MSBuild usability, this should come as a real relief. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5093624662645963791/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/10/dynamicexecute-now-official.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5093624662645963791'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5093624662645963791'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/dynamicexecute-now-official.html' title='DynamicExecute Now Official'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8547834822719598291</id><published>2009-10-01T15:35:00.000-04:00</published><updated>2009-10-14T08:54:01.931-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><title type='text'>Threading in the Business Layer</title><content type='html'>&lt;p&gt;I don't have a great deal to say on the matter. This is just something that I've observed when working on a few different projects.&lt;/p&gt;

&lt;p&gt;When writing end-user applications, I find my business layer tends to be stateful and affinitized to the UI thread. This just makes it easier, particularly when doing MVVM.&lt;/p&gt;

&lt;p&gt;However, when writing web services, I find my business layer tends to be stateless and free-threaded. Well, sometimes they're not stateless, but they're nearly always free-threaded. This makes it easier (and more scalable) when dealing with web requests.&lt;/p&gt;

&lt;p&gt;I don't know if this is good or bad. &lt;a href="http://www.amazon.com/gp/product/1430210192?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1430210192"&gt;Lhotka&lt;/a&gt;, for example, has a very different approach to business objects. I really enjoyed reading his book (especially the first few chapters which deal with enterprise-level design in general), but I'm still not sold on his idea of literally moving business objects from one process to another. Maybe I'm just stuck in the 1980's...&lt;/p&gt;

&lt;p&gt;Then again, I've never had to deal with a truly distributed application. Lhotka's examples are really based on a &lt;i&gt;single&lt;/i&gt; application that needs to be distributed for performance or reliability reasons. When I work with GUI apps and web services, I always end up treating them as &lt;i&gt;different&lt;/i&gt; applications. I think that's where the differences in our BO models come from.&lt;/p&gt;

&lt;p&gt;Like I said, I don't know if my approach is best or not. This was just an observation. If you do have an opinion, feel free to let me know!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8547834822719598291/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/10/threading-in-business-layer.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8547834822719598291'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8547834822719598291'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/threading-in-business-layer.html' title='Threading in the Business Layer'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3115449230557179038</id><published>2009-09-26T22:19:00.000-04:00</published><updated>2009-09-26T22:19:49.825-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Certification'/><title type='text'>MCPD Achieved</title><content type='html'>&lt;p&gt;Today I passed 70-505 and 70-563, officially becoming a Microsoft Certified Professional Developer (Windows Developer 3.5 on Visual Studio 2008). Then I got to return home and feed our baby for the first time! :)&lt;/p&gt;

&lt;p&gt;Baby has been sick this week, so once again my preparation for these exams was lacking. By the grace of God, however, I did pass.&lt;/p&gt;

&lt;p&gt;Now I'm thinking, why not go for the Enterprise Developer certification before the end of the year? It's only four more exams. Hmmm... Maybe.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3115449230557179038/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/mcpd-achieved.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3115449230557179038'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3115449230557179038'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/mcpd-achieved.html' title='MCPD Achieved'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6581531877972738424</id><published>2009-09-22T23:14:00.000-04:00</published><updated>2009-09-22T23:14:14.941-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.Async'/><title type='text'>Nito.Async 1.4 Released</title><content type='html'>&lt;p&gt;Today marks a good day: at long last, &lt;a href="http://www.codeplex.com/NitoAsync"&gt;Nito.Async&lt;/a&gt; Version 1.4 has been released!&lt;/p&gt;

&lt;p&gt;One thing I'm proud of in this release is my unit test coverage. Those were some very adventerous unit tests to write, too!&lt;/p&gt;

&lt;p&gt;The major additions this time around are the ActionThread (an ActionDispatcher with a dedicated Thread) and the SynchronizationContextRegister (which the Nito.Async classes now use to check if their SynchronizationContexts satisfy their requirements).&lt;/p&gt;

&lt;p&gt;There were a slew of other "cleanup" kinds of changes as well: publisher policy files were added, the help system updated, source-indexed pdbs were included, samples were added to documentation, etc.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6581531877972738424/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/nitoasync-14-released.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6581531877972738424'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6581531877972738424'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/nitoasync-14-released.html' title='Nito.Async 1.4 Released'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1173125931302363122</id><published>2009-09-22T18:44:00.000-04:00</published><updated>2013-05-17T10:28:19.838-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Another SynchronizationContext Gotcha: InvokeRequired?</title><content type='html'>&lt;p&gt;There was a good post today by the Parallel Programming .NET Team where they clarify &lt;a href="http://blogs.msdn.com/pfxteam/archive/2009/09/22/9898090.aspx"&gt;how the upcoming Task class can make use of SynchronizationContext&lt;/a&gt;. In reading that post, I was reminded of Yet Another SynchronizationContext Gotcha.&lt;/p&gt;

&lt;p&gt;Given a &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx"&gt;SynchronizationContext&lt;/a&gt; of unknown type, you &lt;i&gt;cannot tell&lt;/i&gt; if you are on a thread that is associated with that SynchronizationContext. This is the old "Do I need to invoke?" question that is answered by &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.isynchronizeinvoke.invokerequired.aspx"&gt;ISynchronizeInvoke.InvokeRequired&lt;/a&gt; on Windows Forms and &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.checkaccess.aspx"&gt;Dispatcher.CheckAccess&lt;/a&gt; on Windows Presentation Foundation. However, use of these methods is usually an earmark of poor design; most methods should not be designed to be called "from any thread" (unless they are part of a class used for thread synchronization).&lt;/p&gt;

&lt;p&gt;Back to the original statement: SynchronizationContext does not provide any way to determine if the current thread is associated with that SynchronizationContext. Note the vague term "associated with": normally, when people think of a SynchronizationContext, they assume that there is a single, specific associated thread with that SynchronizationContext, or that SynchronizationContext instances may be compared. However, that is not necessarily the case. In fact, &lt;b&gt;there is not a 1:1 correspondence between a SynchronizationContext and a Thread&lt;/b&gt;. Consider the various types of SynchronizationContexts provided in the 3.5 framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.windowsformssynchronizationcontext.aspx"&gt;WindowsFormsSynchronizationContext&lt;/a&gt; - The Windows Forms implementation does in fact have a single, specific associated thread. Furthermore, there appears to be a 1:1 correspondence between SynchronizationContext instances and GUI threads.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatchersynchronizationcontext.aspx"&gt;DispatcherSynchronizationContext&lt;/a&gt; - The WPF implementation also has a single, specific associated thread. However, there is not a 1:1 correspondence between SynchronizationContext instances and GUI threads. In particular, each WPF window gets its own SynchronizationContext instance, even though they all use the same Dispatcher for synchronization (assuming a single GUI thread). This is easy enough to test: create a solution with two windows, show them both, and have a button on each one access SynchronizationContext.Current; they will result in different instances even though they are both running on the same thread.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx"&gt;SynchronizationContext&lt;/a&gt; - The base SynchronizationContext class itself is used as the ThreadPool implementation. This type doesn't even have a single, specific associated thread; it has a &lt;i&gt;set&lt;/i&gt; of associated threads which may grow and shrink over time.&lt;/li&gt;
&lt;li&gt;AspNetSynchronizationContext - The strangest implementation of them all. Conceptually, this type does not have &lt;i&gt;any&lt;/i&gt; associated threads! When queueing delegates to its SynchronizationContext, ASP.NET applications just execute them directly. AspNetSynchronizationContext temporarily borrows its thread from the caller, so to speak.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By now, it should be clear that there is not a 1:1 correspondence between SynchronizationContext instances and threads. Furthermore, implementations of SynchronizationContext may have a specific associated thread, a set of associated threads, or no associated threads at all.&lt;/p&gt;

&lt;p&gt;SynchronizationContext implementations also do not override equality to indicate whether they are in the same "associated thread set". While it is possible to do this with the current implementations, it is easy to imagine an implementation where this would be much more difficult (a custom thread pool, for instance, comprised of foreground threads).&lt;/p&gt;

&lt;p&gt;This situation is problematic for the asynchronous component designer. Starting with Version 1.4, the &lt;a href="http://www.codeplex.com/NitoAsync"&gt;Nito.Async&lt;/a&gt; library contains a SynchronizationContextRegister that understands which guarantees are provided by which implementations of SynchronizationContext. The &lt;a href="http://blog.stephencleary.com/2009/08/gotchas-from-synchronizationcontext.html"&gt;previous gotchas&lt;/a&gt; I mentioned are included (e.g., whether Post is non-reentrant), and the "single specific associated thread" guarantee covered in this post is also included. This is done in a generic way, allowing programs to override the built-in default values and also provide their own if they have their own implementations of SynchronizationContext.&lt;/p&gt;

&lt;p&gt;However, the fact remains that there is no generic way to determine if a SynchronizationContext is "associated" with the current thread. That is one "gotcha" that remains.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1173125931302363122/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/another-synchronizationcontext-gotcha.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1173125931302363122'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1173125931302363122'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/another-synchronizationcontext-gotcha.html' title='Another SynchronizationContext Gotcha: InvokeRequired?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3097109801188156056</id><published>2009-09-21T14:55:00.000-04:00</published><updated>2014-05-16T16:38:20.089-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Language design'/><title type='text'>Minor Improvements for Language Design</title><content type='html'>&lt;p&gt;From time to time, I find myself having to design a new computer language. The smallest of these languages only contain expressions, but some have branched out into statements. The design of languages is a fascinating topic, and one which I believe is very benificial to any programmer.&lt;/p&gt;

&lt;p&gt;Of course, the best way to go about designing a language is to find out what worked and didn't work for other languages. For example, the &lt;a href="http://www.gnu.org/software/gawk/manual/gawk.html"&gt;official Gawk manual&lt;/a&gt; starts its section on string concatenation with the quote "It seemed like a good idea at the time," so it's probably best not to use a space character as a string concatenation operator... Likewise, Bjarne Stroustrup started out in favor of resumption-based exception handling, but "over the next four years, I learned otherwise..." (he tells the fascinating story about Cedar/Mesa in section 16.6 of &lt;a href="http://www.amazon.com/gp/product/0201543303?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201543303"&gt;The Design and Evolution of C++&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;One of the best sources for language design is the Python mailing list archives; not a single change is made to the language without being carefully scrutinized by some of the brightest minds in language design. Python, as a result, is one of the finest languages. I personally recall being positively electrified watching generator syntax evolve; and this same idea several years later was brought into C# (where they're called "iterator blocks").&lt;/p&gt;

&lt;p&gt;However, many new languages do continue to make the mistakes of the old languages, simply because "it's always been done that way." In particular, there are three syntactical elements that I always put in my languages now, and I think they're underused in modern language design. Two of them are stolen straight from Python; one is my own invention. The next time you need to design a language, please consider these.&lt;/p&gt;

&lt;h4&gt;Math Conditionals&lt;/h4&gt;

&lt;p&gt;It seems like everyone has a different way of writing "if (x &amp;gt; 3 &amp;amp;&amp;amp; x &amp;lt; 7)". If you're a strict follower of &lt;a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=stepheclearys-20&amp;linkId=JWZPA42GZ3AY3CE3"&gt;Code Complete&lt;/a&gt;, that would be "if (3 &amp;lt; x &amp;amp;&amp;amp; x &amp;lt; 7)". I like to allow in my languages the "math conditionals", which look like "if (3 &amp;lt; x &amp;lt; 7)". It doesn't have a big impact on your EBNF to support this. More complex math conditionals are also not difficult: "if (3 &amp;lt; x &amp;lt; y &amp;lt;= z &amp;lt; 7)".&lt;/p&gt;

&lt;h4&gt;Indentation Defines Scope&lt;/h4&gt;

&lt;p&gt;One of Python's trademark features is the use of indentation to define scope. It seems like people either love it or hate it, and I'm in the former camp. Furthermore, it's not that hard to get working once you discover the trick of using indentation as a lexical symbol instead of whitespace.&lt;/p&gt;

&lt;h4&gt;Forcing Parenthesis in Logical and Bitwise Expressions&lt;/h4&gt;

&lt;p&gt;OK, &lt;i&gt;anyone&lt;/i&gt; who's been programming any reasonable amount of time has been bitten by this one at least once. The logical operators (&amp;amp;&amp;amp;, ||) and bitwise operators (&amp;amp;, |) have had strictly defined precedence since the beginning days of C. But &lt;i&gt;why?&lt;/i&gt; Whoever writes "(x | y == 0 &amp;amp;&amp;amp; !z &amp;amp;&amp;amp; y &amp;amp; x == 1)" should be dragged out into the street and shot.&lt;/p&gt;

&lt;p&gt;That's why my languages define all the logical operators on the same precedence level, and all the bitwise operators on the same precedence level. It does allow chaining, but only for the same operator. E.g., "(x &amp;amp;&amp;amp; y &amp;amp;&amp;amp; z)" is legal, but "(x &amp;amp;&amp;amp; y || z)" is not; likewise, "(x | y | z)" is accepted, but "(x | y &amp;amp; z)" is rejected. This restriction enforces the use of parenthesis whenever the interpretation is not immediately obvious. I usually also combine the precedence levels of bitwise and logical operators, so that expressions like "(x | y &amp;amp;&amp;amp; y &amp;amp; z)" require additional parenthesis.&lt;/p&gt;

&lt;p&gt;Unlike the other two recommendations above, this one does have a bigger impact on the EBNF grammar, "partitioning" the set of allowed expressions. I do believe the increased complexity is totally worth it, though.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3097109801188156056/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/minor-improvements-for-language-design.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3097109801188156056'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3097109801188156056'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/minor-improvements-for-language-design.html' title='Minor Improvements for Language Design'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7548847340505594880</id><published>2009-09-18T12:01:00.000-04:00</published><updated>2013-05-17T10:27:54.675-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>If PusleEvent is broken, what about Monitor.Pulse?</title><content type='html'>&lt;p&gt;In a post not too long ago, I mentioned that &lt;a href="http://blog.stephencleary.com/2009/09/iasyncresultasyncwaithandle-and.html"&gt;PulseEvent was broken&lt;/a&gt;. That got me to thinking: &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx"&gt;Monitor&lt;/a&gt; has Pulse/PulseAll methods; are they broken, too?&lt;/p&gt;

&lt;p&gt;Many years ago, when &lt;a href="http://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; was young, I recall reading several articles and mailing list discussions about the difficulty of implementing a monitor (a.k.a. condition variable) on Windows platforms. It turns out that the built-in manual-reset and auto-reset events are very different than a monitor, though they appear similar at first glance. Many wrong monitor implementations have been written around a simple mutex/event pairing (sometimes with a second event), using PulseEvent.&lt;/p&gt;

&lt;p&gt;Unfortunately, a true monitor implementation cannot be implemented simply on Windows. It is actually necessary to manage the wait queues manually in order to implement it correctly.&lt;/p&gt;

&lt;p&gt;Fortunately, Microsoft did implement their monitor correctly. This is good, because it means I won't have to do it. ;)&lt;/p&gt;

&lt;p&gt;I did Google around for details of Microsoft's monitor implementation, but wasn't able to find anything specifically addressing the PulseEvent problem. So, I downloaded &lt;a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=8C09FD61-3F26-4555-AE17-3121B4F51D4D"&gt;Rotor&lt;/a&gt; and verified it myself. I did not verify the entire Monitor implementation - that would take a lot of time that I don't have at the moment. However, I did verify that it is not based on PulseEvent and manintains its own wait queues.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7548847340505594880/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/if-pusleevent-is-broken-what-about.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7548847340505594880'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7548847340505594880'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/if-pusleevent-is-broken-what-about.html' title='If PusleEvent is broken, what about Monitor.Pulse?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7470717361911887859</id><published>2009-09-16T08:50:00.000-04:00</published><updated>2009-09-16T08:50:53.518-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>IAsyncResult.AsyncWaitHandle and ThreadPool.RegisterWaitForSingleObject</title><content type='html'>&lt;p&gt;The other day, I was working on a project that had several layers of abstraction, each one exposing a purely asynchronous API (using &lt;a href="http://msdn.microsoft.com/en-us/library/system.iasyncresult.aspx"&gt;IAsyncResult&lt;/a&gt;) to the next higher layer. At one point, I wanted to add an "additional handler" to an &lt;a href="http://msdn.microsoft.com/en-us/library/system.iasyncresult.asyncwaithandle.aspx"&gt;IAsyncResult.AsyncWaitHandle&lt;/a&gt; from a lower layer. The regular handler would take care of getting the results (calling &lt;i&gt;End*&lt;/i&gt;), and the additional handler would perform an additional action when the operation completed.&lt;/p&gt;

&lt;p&gt;Well, that's what &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.threadpool.registerwaitforsingleobject.aspx"&gt;ThreadPool.RegisterWaitForSingleObject&lt;/a&gt; is for, right? I coded it up, but there was a little nagging feeling in the back of my mind...&lt;/p&gt;

&lt;p&gt;The catch is that IAsyncResult-based APIs use &lt;i&gt;Begin*&lt;/i&gt; methods to construct IAsyncResult objects, and &lt;i&gt;End*&lt;/i&gt; methods are used in place of IDisposable. So, when the asynchronous operation completes, the normal handler passes it to &lt;i&gt;End*&lt;/i&gt;, which may include the semantics of IDisposable for that IAsyncResult object.&lt;/p&gt;

&lt;p&gt;The problem: What happens if the IAsyncResult object is disposed while the thread pool is still waiting on its AsyncWaitHandle? More generally, could the handle be set to an unsignalled state, causing the thread pool to wait forever?&lt;/p&gt;

&lt;p&gt;The handle in question was to a &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.manualresetevent.aspx"&gt;ManualResetEvent&lt;/a&gt;, which is a common implementation of IAsyncResult.AsyncWaitHandle (but not the only possible implementation). In my particular case, though, I thought that multiple threads waiting on a single ManualResetEvent should all get triggered if the event is set. Still, it seemed like this wasn't quite correct.&lt;/p&gt;

&lt;p&gt;Indeed, it turns out to be wrong in the general case. &lt;a href="http://tinyurl.com/ConcurrentProgrammingOnWindows"&gt;Concurrent Programming on Windows (pg 231)&lt;/a&gt; clarified the issue nicely: when a thread is waiting on a handle, it may be interrupted by a kernel-mode asynchronous procedure call. [Many programmers are surprised that device drivers may "steal" their threads, but it happens all the time; most device drivers do not have a thread of their own, and just borrow whatever user-mode thread happens to be running when they need to do some processing]. This implies, among other things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms684914(VS.85).aspx"&gt;PulseEvent&lt;/a&gt; is &lt;a href="http://blogs.msdn.com/oldnewthing/archive/2005/01/05/346888.aspx"&gt;completely broken&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Multiple threads waiting on a manual reset event may cause a missed signal (resulting in an infinite wait) when one of the waiters resets or closes the event.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The situation where multiple threads are waiting on a manual reset event and one of the waiters &lt;i&gt;resets&lt;/i&gt; the event is fundamentally broken. It suffers from the same problem as PulseEvent.&lt;/p&gt;

&lt;p&gt;On the other hand, it turns out that ThreadPool.RegisterWaitForSingleObject does actually have a workaround for the situation where multiple threads are waiting on a manual reset event and one of the waiters &lt;i&gt;closes&lt;/i&gt; the event. Internally, it increments the reference count for the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.waithandle.aspx"&gt;WaitHandle&lt;/a&gt;'s &lt;a href="http://msdn.microsoft.com/en-us/library/microsoft.win32.safehandles.safewaithandle.aspx"&gt;SafeWaitHandle&lt;/a&gt;. Then, the decrementing of the reference count is treated as an unmanaged resource wrapped in the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.registeredwaithandle.aspx"&gt;RegisteredWaitHandle&lt;/a&gt; object.&lt;/p&gt;

&lt;p&gt;This is why we do need to try to Dispose all RegisteredWaitHandle objects: to decrement the reference count of the waitable handles passed to ThreadPool.RegisterWaitForSingleObject. I had always wondered why that was recommended "even if you specify true for executeOnlyOnce".&lt;/p&gt;

&lt;p&gt;Note: there is one other caveat for passing IAsyncResult.AsyncWaitHandle to ThreadPool.RegisterWaitForSingleObject: the same handle value can't be passed twice to that method. My particular situation never exposed the IAsyncResult to the end-user, but if it did, I'd have to &lt;a href="http://msdn.microsoft.com/en-us/library/ms724251(VS.85).aspx"&gt;DuplicateHandle&lt;/a&gt; the waitable handle first.&lt;/p&gt;

&lt;p&gt;It's interesting to consider that once you bring DuplicateHandle into the mix, you actually end up with reference counted reference counts...&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7470717361911887859/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/iasyncresultasyncwaithandle-and.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7470717361911887859'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7470717361911887859'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/iasyncresultasyncwaithandle-and.html' title='IAsyncResult.AsyncWaitHandle and ThreadPool.RegisterWaitForSingleObject'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6512986870944537687</id><published>2009-09-14T15:39:00.001-04:00</published><updated>2009-09-14T15:43:52.958-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Lighter Notes'/><title type='text'>On a Lighter Note: Infinite Visual Studio Error</title><content type='html'>&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;img border="0" mq="true" src="http://3.bp.blogspot.com/_lkN-6AUYgOI/Sq6bpG7aLJI/AAAAAAAACMM/Njez8Wt3XLE/s1600/VS+Infinite+Error.png"
style="clear: right; cssfloat: right; float: right; margin-bottom: 1em; margin-left: 1em;" /&gt;&lt;/div&gt;
&lt;p&gt;A bit earlier this summer, I was loading some Compact Framework code when this interesting error popped up. The error message is very detailed but completely meaningless to me.&lt;/p&gt;

&lt;p&gt;The most fun part of this error is that it was an "infinite error" - that is, no matter how many times you would click the "OK" button, the same exact error would pop up again. Eventually, I had to kill Visual Studio to reclaim my machine.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6512986870944537687/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/on-lighter-note-infinite-visual-studio.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6512986870944537687'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6512986870944537687'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/on-lighter-note-infinite-visual-studio.html' title='On a Lighter Note: Infinite Visual Studio Error'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8665620110038632821</id><published>2009-09-14T13:19:00.002-04:00</published><updated>2009-11-19T11:38:27.888-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Preventing Undesired Side-Effects in Enumerators</title><content type='html'>&lt;p&gt;I normally don't write a post just to link to a post on another blog, because I want this blog to be mostly original content. However, today I read an excellent article/blog post on the B# blog: &lt;a href="http://bartdesmet.net/blogs/bart/archive/2009/09/12/taming-your-sequence-s-side-effects-through-ienumerable-let.aspx"&gt;Taming Your Sequence's Side-Effects Through IEnumerable.Let&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The author does a great job describing how side effects in sequences can be problematic, and how to create a "MemoizeEnumerable" to prevent multiple evaluations of a source sequence. It's a great application of dynamic programming (see &lt;a href="http://www.amazon.com/gp/product/1848000693?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1848000693"&gt;The Algorithm Design Manual&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Side effects when dealing with enumerables are rare; few people have needed an "IEnumerable.Let" operator. Side effects are much more common when dealing with events, e.g., the up-and-coming Rx framework. I highly recommend reading the B# blog entry to understand the rationale behind "Let" for enumerables; it will prove good background information to understand "Let" for observables.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8665620110038632821/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/preventing-undesired-side-effects-in.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8665620110038632821'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8665620110038632821'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/preventing-undesired-side-effects-in.html' title='Preventing Undesired Side-Effects in Enumerators'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1460028152278201669</id><published>2009-09-12T17:38:00.008-04:00</published><updated>2009-09-14T14:30:59.680-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Certification'/><title type='text'>70-536 In the Bag</title><content type='html'>&lt;p&gt;I haven't been blogging a great deal the last week or so. I wish I could say it was because I was studying for the &lt;a href="http://www.microsoft.com/learning/en/us/Exam.aspx?ID=70-536"&gt;70-536&lt;/a&gt;, but the truth is that it's because I have a 6-week-old at home. :)&lt;/p&gt;

&lt;p&gt;Saturday morning, I was a little nervous to be taking my first MS certification exam without adequate preparation, but I said a short prayer and hopped in the car (the closest exam site is about 3 hours away). The exam oversight guy (I'm sure he has a more proper title...) stated that I passed "with flying colors" (and seemed almost surprised!). So, I give thanks to God for that one; it sure wasn't because I was prepared for it!&lt;/p&gt;

&lt;p&gt;I wasn't able to get the &lt;a href="http://www.amazon.com/gp/product/0735626197?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735626197"&gt;MCTS Self-Paced Training Kit&lt;/a&gt;, which would have been nice to have, but I did find the book &lt;a href="http://www.amazon.com/gp/product/0470191376?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0470191376"&gt;Professional C#&lt;/a&gt; (which I already owned) to be very helpful. I was able to shore up some weak areas (e.g., caspol), but didn't have time for others (e.g., globalization).&lt;/p&gt;

&lt;p&gt;So, now I may be an MCP. Or maybe not. The web page is pretty ambiguous on the topic. If I understand it correctly, I'm not an MCP but I'm allowed to use the MCP logo. Go figure on that one. It doesn't matter a great deal, because I've signed up for &lt;a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-505"&gt;70-505&lt;/a&gt; and &lt;a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-563"&gt;70-563&lt;/a&gt; in two weeks. After 70-505, I'll be an MCP/MCTS, and by the end of the day, I'll be an MCP/MCTS/MCPD. If I pass. :)&lt;/p&gt;

&lt;p&gt;Hopefully the baby will let me study for these ones. :)  Or maybe I'll finally learn that I can't do everything. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1460028152278201669/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/70-536-in-bag.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1460028152278201669'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1460028152278201669'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/70-536-in-bag.html' title='70-536 In the Bag'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3902565242415050614</id><published>2009-09-03T10:14:00.007-04:00</published><updated>2014-05-16T16:40:23.440-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Rx'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Notes from the Rx talk</title><content type='html'>&lt;p&gt;As someone who does a lot of asynchronous programming on .NET, I had heard about the Rx ("reactive") framework some time ago. The details online have been a little sketchy, so I finally took some time to watch &lt;a href="http://www.langnetsymposium.com/2009/talks/23-ErikMeijer-LiveLabsReactiveFramework.html"&gt;Erik Meijer's talk&lt;/a&gt;. Below are my notes and initial thoughts. I haven't had time to play with the actual framework itself, but it's something that is definitely coming to .NET eventually (it's rumored to be in 4.0).&lt;/p&gt;

&lt;p&gt;This talk is titled "Live Labs Reactive Framework", given by Erik Meijer at the 2009 Lang.NET Symposium.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LINQ is derived from Haskell ideas.&lt;/li&gt;
&lt;li&gt;Reactive programming is where the program asks the environment for input. But not with blocking, like Console.ReadLine does.&lt;/li&gt;
&lt;li&gt;Enumerable: consumer pulls successive elements from the collection, with blocking.&lt;/li&gt;
&lt;li&gt;Observable: producer pushes successive elements from the collection.&lt;/li&gt;
&lt;li&gt;There is a mathematical duality between Enumerable and Observable, which allows theorems proven for one system to have a dual theorem in the other system.&lt;/li&gt;
&lt;li&gt;Consider Enumerable:
&lt;ul&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;interface&lt;/span&gt; IEnumerable&amp;lt;&lt;span class="keyword"&gt;out&lt;/span&gt; T&amp;gt; { IEnumerator&amp;lt;T&amp;gt; GetEnumerator(); }
&lt;span class="keyword"&gt;interface&lt;/span&gt; IEnumerator&amp;lt;&lt;span class="keyword"&gt;out&lt;/span&gt; T&amp;gt; : IDisposable { &lt;span class="keyword"&gt;bool&lt;/span&gt; MoveNext(); T Current { &lt;span class="keyword"&gt;get&lt;/span&gt;; } /* Implicit &lt;span class="keyword"&gt;throw&lt;/span&gt; */ }
&lt;/code&gt;&lt;/pre&gt;
  &lt;li&gt;There are actually two interface concepts here (Enumerable and Disposable). For now, ignore Disposable.&lt;/li&gt;
  &lt;li&gt;Swap arguments and results (mathematical duality):&lt;/li&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;interface&lt;/span&gt; IObservable&amp;lt;&lt;span class="keyword"&gt;in&lt;/span&gt; T&amp;gt; { IDisposable Register(IObserver&amp;lt;T&amp;gt; o); }
&lt;span class="keyword"&gt;interface&lt;/span&gt; IObserver&amp;lt;&lt;span class="keyword"&gt;in&lt;/span&gt; T&amp;gt; { &lt;span class="keyword"&gt;void&lt;/span&gt; OnCompleted(&lt;span class="keyword"&gt;bool&lt;/span&gt; done); T OnUpdate { &lt;span class="keyword"&gt;set&lt;/span&gt;; } &lt;span class="keyword"&gt;void&lt;/span&gt; OnError(Exception e); }
&lt;/code&gt;&lt;/pre&gt;
  &lt;li&gt;A cleaner interface (getting rid of "bool done" by only calling "OnCompleted" when it's true; changing OnUpdate to a method):&lt;/li&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;interface&lt;/span&gt; IObservable&amp;lt;&lt;span class="keyword"&gt;in&lt;/span&gt; T&amp;gt; { IDisposable Attach(IObserver&amp;lt;T&amp;gt; o); }
&lt;span class="keyword"&gt;interface&lt;/span&gt; IObserver&amp;lt;&lt;span class="keyword"&gt;in&lt;/span&gt; T&amp;gt; { &lt;span class="keyword"&gt;void&lt;/span&gt; OnCompleted(); &lt;span class="keyword"&gt;void&lt;/span&gt; OnUpdate(T &lt;span class="keyword"&gt;value&lt;/span&gt;); &lt;span class="keyword"&gt;void&lt;/span&gt; OnError(Exception e); }
&lt;/code&gt;&lt;/pre&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This makes the Iterator pattern (Enumerable) related to Subject Observer pattern (Observable).&lt;/li&gt;
&lt;li&gt;Java has Observable/Observer, but in non-generic and noisy interfaces.&lt;/li&gt;
&lt;li&gt;Since Enumerables are monads, Observables are monads. Since LINQ concepts work on monads, then there is a LINQ for Observables.&lt;/li&gt;
&lt;li&gt;(At this point, Erik skipped some slides; everything under this point is my own interpretation of those slides)
&lt;ul&gt;&lt;li&gt;Combinators include Select, Where, Flatten, and SelectMany (which is Select + Flatten). [Note: Enumerable LINQ also supports flattening through SelectMany].
  &lt;ul&gt;
    &lt;li&gt;Interactive SelectMany uses a nested foreach, which iterates each element of each sequence, moving on to the next sequence when it's empty.&lt;/li&gt;
    &lt;li&gt;Reactive SelectMany uses a parallel foreach, which iterates each element of any sequence as they are pushed.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;Additional combinators include:
  &lt;ul&gt;
    &lt;li&gt;Until (to "cancel" reactions for an event)&lt;/li&gt;
    &lt;li&gt;TimeOut&lt;/li&gt;
    &lt;li&gt;Zip (to perform a logical combination of two event sequences)&lt;/li&gt;
    &lt;li&gt;Scan (?)&lt;/li&gt;
    &lt;li&gt;Take, Drop - like TakeWhile/SkipWhile (?)&lt;/li&gt;
    &lt;li&gt;Sample, Buffer&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AJAX is all about responding to events and performing asynchronous computations; it's ideal for Rx.&lt;/li&gt;
&lt;li&gt;Rx has bridges from .NET events into an Observable collection.&lt;/li&gt;
&lt;li&gt;A common bug is being dependent on the order of asynchronous completions.&lt;/li&gt;
&lt;li&gt;Preemption operator (".Until") to listen for an event until there's another situation (like another async computation being started, so the results of the previous computation should be ignored).&lt;/li&gt;
&lt;li&gt;The let operator (".Let") avoids undesired side effects (similar to a local variable).
&lt;ul&gt;
  &lt;li&gt;Lazy evaluation with Observable makes this difficult.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Comega join patterns (zips) and parser combinators can also be supported.
&lt;ul&gt;
  &lt;li&gt;Zip enables logic such as "(an A event and B event were pushed) or (a B event and C event were pushed)" to be treated as its own event stream.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Related work:
&lt;ul&gt;
  &lt;li&gt;F# first-class events&lt;/li&gt;
  &lt;li&gt;F# async workflows&lt;/li&gt;
  &lt;li&gt;Thomasp Reactive LINQ&lt;/li&gt;
  &lt;li&gt;Esterelle, Lustre&lt;/li&gt;
  &lt;li&gt;Functional reactive programming&lt;/li&gt;
  &lt;li&gt;Using iterators for async&lt;/li&gt;
  &lt;li&gt;PowerShell, SSIS, WWF&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rx is a way of composing delimited continuations: see paper "Delimited continuations in Operating Systems".&lt;/li&gt;
&lt;li&gt;(At this point, Erik skipped some more slides; everything under this point is my own interpretation of those slides)
&lt;ul&gt;
  &lt;li&gt;C# pseudocode (using object expressions / anonymous inner classes) to convert a C# event to an Observable:
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;class&lt;/span&gt; Control { &lt;span class="keyword"&gt;event&lt;/span&gt; Action&amp;lt;T&amp;gt; KeyUp; }
IObservable&amp;lt;T&amp;gt; GetKeyUp(&lt;span class="keyword"&gt;this&lt;/span&gt; Control w)
{
  &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; IObservible&amp;lt;T&amp;gt;
  {
    IDisposable Attach(IObserver&amp;lt;T&amp;gt; h)
    {
      &lt;span class="keyword"&gt;var&lt;/span&gt; d = &lt;span class="keyword"&gt;new&lt;/span&gt; Action&amp;lt;T&amp;gt;(h.Yield); &lt;span class="comment"&gt;// Create delegate to call observer&lt;/span&gt;
      w.KeyUp += d; &lt;span class="comment"&gt;// Attach observer to event directly&lt;/span&gt;
      &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; IDisposable
      {
        &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose() { w.KeyUp -= d; } &lt;span class="comment"&gt;// Disconnect on dispose&lt;/span&gt;
      };
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;Two IObservable&amp;lt;T&amp;gt; extension methods exist for attaching delegates:
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;static&lt;/span&gt; IDisposable Attach&amp;lt;T&amp;gt;(&lt;span class="keyword"&gt;this&lt;/span&gt; IObservable&amp;lt;T&amp;gt; src, Action&amp;lt;T&amp;gt; &lt;span class="keyword"&gt;yield&lt;/span&gt;);
&lt;span class="keyword"&gt;static&lt;/span&gt; IDisposable Attach&amp;lt;T&amp;gt;(&lt;span class="keyword"&gt;this&lt;/span&gt; IObservable&amp;lt;T&amp;gt; src, Action&amp;lt;T&amp;gt; &lt;span class="keyword"&gt;yield&lt;/span&gt;, Action&amp;lt;Exception&amp;gt; &lt;span class="keyword"&gt;throw&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;ul&gt;
    &lt;li&gt;The original style of event subscription treats the handler as a first-class object:
&lt;pre&gt;&lt;code class="csharp"&gt;Action&amp;lt;T&amp;gt; handler = ...;
txtbox.KeyUp += handler;
txtbox.KeyUp -= handler;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;The Observable style of event subscription treats the event as a first-class object:
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; keyup = txtbox.GetKeyUp();
&lt;span class="keyword"&gt;var&lt;/span&gt; detacher = keyup.Attach(...);
detacher.Dispose();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;Observable event collections when used with combinators allow implicit state variables. e.g., consider a "drag &amp;amp; drop":
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; W = ... control to be dragged ...;
 
&lt;span class="comment"&gt;// Set up mouse down/up detector&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; mouseDowns = &lt;span class="keyword"&gt;from&lt;/span&gt; md &lt;span class="keyword"&gt;in&lt;/span&gt; W.GetMouseDown() &lt;span class="keyword"&gt;select&lt;/span&gt; &lt;span class="keyword"&gt;true&lt;/span&gt;; &lt;span class="comment"&gt;// Pushes &amp;quot;true&amp;quot; every time the mouse button goes down&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; mouseUps = &lt;span class="keyword"&gt;from&lt;/span&gt; md &lt;span class="keyword"&gt;in&lt;/span&gt; W.GetMouseUp() &lt;span class="keyword"&gt;select&lt;/span&gt; &lt;span class="keyword"&gt;false&lt;/span&gt;; &lt;span class="comment"&gt;// Pushes &amp;quot;false&amp;quot; every time the mouse button goes up&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; mouseClicks = mouseDowns.Merge(mouseUps); &lt;span class="comment"&gt;// A simple combination; pushes &amp;quot;true&amp;quot; when down, &amp;quot;false&amp;quot; when up&lt;/span&gt;
 
&lt;span class="comment"&gt;// Set up mouse movement detector and measurer&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; mouseMoves = &lt;span class="keyword"&gt;from&lt;/span&gt; mm &lt;span class="keyword"&gt;in&lt;/span&gt; W.GetMouseMove() &lt;span class="keyword"&gt;select&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; { mm.X, mm.Y }; &lt;span class="comment"&gt;// Pushes the X,Y location of the mouse every time it moves&lt;/span&gt;
&lt;span class="comment"&gt;// (This next line has a bug)&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; mouseDiffs = &lt;span class="keyword"&gt;from&lt;/span&gt; diff &lt;span class="keyword"&gt;in&lt;/span&gt; mouseMoves.Skip(1).Zip(mouseMoves) &lt;span class="comment"&gt;// This part pushes the current and last location of the mouse every time it moves&lt;/span&gt;
                 &lt;span class="keyword"&gt;select&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; { dX = diff.First.X - diff.Second.X,
                              dY = diff.First.Y - diff.Second.Y }; &lt;span class="comment"&gt;// Pushes the difference in location each time the mouse moves&lt;/span&gt;
 
&lt;span class="comment"&gt;// Set up mouse drag &amp;amp; drop detector&lt;/span&gt;
&lt;span class="keyword"&gt;var&lt;/span&gt; mouseDrag = &lt;span class="keyword"&gt;from&lt;/span&gt; mousedown &lt;span class="keyword"&gt;in&lt;/span&gt; mouseClicks
                &lt;span class="keyword"&gt;from&lt;/span&gt; delta &lt;span class="keyword"&gt;in&lt;/span&gt; mouseDiffs &lt;span class="keyword"&gt;where&lt;/span&gt; leftdown
                &lt;span class="keyword"&gt;select&lt;/span&gt; delta; &lt;span class="comment"&gt;// Pushes the difference in location each time the mouse moves while a button is down&lt;/span&gt;
 
mouseDrag.Attach(delta =&amp;gt; { ... move W according to delta ... });
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;You always need to be aware of side effects; use the Let operator to tame them:
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; mouseDiffs = &lt;span class="keyword"&gt;from&lt;/span&gt; diff &lt;span class="keyword"&gt;in&lt;/span&gt; mouseMoves.Skip(1).Zip(mouseMoves) &lt;span class="comment"&gt;// This part pushes the current and last location of the mouse every time it moves&lt;/span&gt;
                 &lt;span class="keyword"&gt;select&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; { dX = diff.First.X - diff.Second.X,
                              dY = diff.First.Y - diff.Second.Y }; &lt;span class="comment"&gt;// Pushes the difference in location each time the mouse moves&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    should be:
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;var&lt;/span&gt; mouseDiffs = mouseMoves.Let(_mouseMoves =&amp;gt; &lt;span class="comment"&gt;// This part avoids side effects on mouseMoves&lt;/span&gt;
                 &lt;span class="keyword"&gt;from&lt;/span&gt; diff &lt;span class="keyword"&gt;in&lt;/span&gt; _mouseMoves.Skip(1).Zip(_mouseMoves) &lt;span class="comment"&gt;// This part pushes the current and last location of the mouse every time it moves&lt;/span&gt;
                 &lt;span class="keyword"&gt;select&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; { dX = diff.First.X - diff.Second.X,
                              dY = diff.First.Y - diff.Second.Y }; &lt;span class="comment"&gt;// Pushes the difference in location each time the mouse moves&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;My thoughts&lt;/h4&gt;

&lt;p&gt;Asynchronous programming has always been difficult. One of the hardest parts is the correct handling of "asynchronous state", objects whose sole purpose in life is to track the state of input as events come in. I expect the Rx framework will really shine at removing the need for explicitly tracking state, especially noticeable in situations where keeping "asynchronous state" is complex.&lt;/p&gt;

&lt;p&gt;The documentation will have to be good regarding side effects, so that programmers can more easily determine when Let/Until operators are required. Currently, I'm not aware of any documentation, even on the .NET 4.0 beta MSDN. This is just a preemptive warning: the docs will have to be really, really good; better than what was done for LINQ (where the docs are often unclear which operators cause buffering).&lt;/p&gt;

&lt;p&gt;There is still a missing piece in the "pipeline story". Historically, every language has gradually developed the same ideas: consumers, then producers, then a full pipeline. Push algorithms are usually the response to the "tee problem" in a pull-based framework. I did the same thing in C++ about 6 years ago, developing what I called "pipe algorithms", named after the Unix pipe. Currently, we have Enumerable (pull) and Observable (push) models, but there are no easy translators between the two (these "translators" require dedicated threads).&lt;/p&gt;

&lt;p&gt;It's also important to note that one is not "better" than the other. Most algorithms are more naturally defined in an Enumerable model, so that is the one that is more intuitive. Other algorithms are a more natural fit to the Observable model. Once we have translators back and forth between the two models, then we'll have a more mature language.&lt;/p&gt;

&lt;p&gt;One person stated that the Rx framework will remove the need for EBAP components. I have not yet been convinced of this; I see EBAP as still being a useful technique for synchronizing events. The synchronized events can then be used as input to an Rx query. In this sense, I see the EBAP and Rx approaches as complementing each other.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3902565242415050614/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html#comment-form' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3902565242415050614'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3902565242415050614'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html' title='Notes from the Rx talk'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8709744714255159141</id><published>2009-09-01T09:26:00.004-04:00</published><updated>2009-09-26T22:06:40.846-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Naming Unit Tests</title><content type='html'>&lt;p&gt;I spent some of this last weekend writing my first real unit tests, and I noticed by the end of the weekend that they were not exactly maintainable (a common problem for first-time unit testers). I understood the theory of unit tests, so I didn't make the mistakes of having dependent tests or testing multiple failures in a single unit test. However, my unit tests are on the long side (up to ~20 lines), mainly because I'm testing a complex threading and synchronization library (&lt;a href="http://www.codeplex.com/NitoAsync"&gt;Nito.Async&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;My biggest problem was naming. There are many different situations that need to be tested when working with these low-level synchronization objects (indeed, I've been enlightened that code coverage is a nearly useless metric for the Nito.Async library). As a result, there are more than 100 unit tests already, and I still have one of the more complex components to test. Even though the unit tests are grouped by component, the individual test names are still inadequate.&lt;/p&gt;

&lt;p&gt;Take one example unit test method for the ActionDispatcher, named "TestCurrentPropertyInsideAction". Not a very good name; it does describe the &lt;i&gt;situation&lt;/i&gt; (the Current property is accessed from inside an action), but it doesn't describe the &lt;i&gt;expected behavior&lt;/i&gt; (that the Current property should be that action's ActionDispatcher). For that matter, the situation could read better, too. I wanted to fix this test name, but also develop a consistent naming scheme.&lt;/p&gt;

&lt;p&gt;So, I turned to my trusty book (which I have not finished reading), &lt;a href="http://www.amazon.com/gp/product/1933988274?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1933988274"&gt;The Art of Unit Testing&lt;/a&gt; and skipped to the tips on maintainable unit tests. Long story short: he had some recommendations I didn't particularly care for regarding naming unit tests. Unit testing is still relatively new, and "best practices" are still in development, so I turned to Google, and there are a couple of independently discovered alternatives.&lt;/p&gt;

&lt;p&gt;Here's my opinion on three different approaches I've found. Each one is tested with my problem case "TestCurrentPropertyInsideAction" as an example.&lt;/p&gt;

&lt;h4&gt;Common Elements&lt;/h4&gt;

&lt;p&gt;Each of the naming conventions have a "method", "stimulus", or "subject" that they are testing. They also have a "state", "context" or "scenario" defining the situation in which the test takes place. Finally, each convention has a "behavior" or "result" that is expected. These naming conventions were developed independently, from different perspectives, and they still show a remarkable commonality. The obvious conclusion is that these three elements are criticial components in any unit test name.&lt;/p&gt;

&lt;h4&gt;Option 1 - Method/State/Behavior&lt;/h4&gt;

&lt;p&gt;This is the method recommended by &lt;a href="http://www.amazon.com/gp/product/1933988274?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1933988274"&gt;The Art of Unit Testing&lt;/a&gt;; if you're following along at home, this pattern is also described on &lt;a href="http://weblogs.asp.net/rosherove/archive/2005/04/03/TestNamingStandards.aspx"&gt;the author's blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The "Method" is the name of the method/property that is being tested. The "State" is the state of the object and parameters passed to that method. The "Behavior" is the expected behavior of that method or expected value of that property.&lt;/p&gt;

&lt;p&gt;Original example: "Sum_NegativeNumberAs1stParam_ExceptionThrown()"&lt;/p&gt;

&lt;p&gt;Applied example: "Current_FromInsideAction_ActionDispatcherForThatAction()"&lt;/p&gt;

&lt;p&gt;The main reason I dislike this approach is because it has an emphasis on method and property testing. In general, I think this would lead to more "procedural tests" rather than "object-oriented tests"; I'm not talking about the unit test methods themselves (which are of course procedural), but rather about &lt;i&gt;how one conceives of the component under test&lt;/i&gt;. This would have the side effect of writing unit tests to achieve code coverage, rather than testing state as well as behaviour.&lt;/p&gt;

&lt;p&gt;Another reason I'm not too fond is that it does suffer from some readability problems. More readable examples would be "Sum_WhenFirstParamIsNegative_ThrowsException()" or "Current_WhenReadFromInsideAction_IsTheActionDispatcherForThatAction()".&lt;/p&gt;

&lt;h4&gt;Option 2 - Stimulus/Result/Context&lt;/h4&gt;

&lt;p&gt;The Stimulus/Result/Context approach is described &lt;a href="http://weblogs.asp.net/pgielens/archive/2006/04/30/444517.aspx"&gt;on this blog post&lt;/a&gt;.  The "Stimulus" is what the object is requested to do. The "Result" is the expected behavior. The "Context" is the relevant state of the object.&lt;/p&gt;

&lt;p&gt;The original example was a bit unreadable for my taste: "CalculatePayIncludingSalesBonusAfterSalesBonusGrantedToEmployee()".&lt;/p&gt;

&lt;p&gt;Splitting the components with underscores makes it better: "CalculatePay_IncludingSalesBonus_AfterSalesBonusGrantedToEmployee()".&lt;/p&gt;

&lt;p&gt;Applied example: "CurrentProperty_IsSameActionDispatcherAsScopingAction_WithinActionScope()".&lt;/p&gt;

&lt;p&gt;Still not too readable. Better examples would be "CalculatedPay_IncludesSalesBonus_AfterSalesBonusGrantedToEmployee()" and "CurrentProperty_IsSameActionDispatcherAsScopingAction_WhenWithinActionScope()".&lt;/p&gt;

&lt;p&gt;The main reason I don't like this approach is that it places the result in the middle and the context last. I think it's more natural to think of context in the middle and the result last. For example, I think it's more natural to state "&lt;i&gt;if&lt;/i&gt; the car is exceeding the speed limit, &lt;i&gt;then&lt;/i&gt; it becomes eligible to receive a ticket" rather than "a car becomes eligible to receive a ticket &lt;i&gt;if&lt;/i&gt; it exceeds the speed limit". This is personal opinion (like the rest of this post!); I just prefer "if/then" rather than "then/if".&lt;/p&gt;

&lt;p&gt;Another reason is that it does seem to emphasize testing behavior rather than state. It is, however, more object-oriented than option 1.&lt;/p&gt;

&lt;h4&gt;Option 3 - Subject/Scenario/Result&lt;/h4&gt;

&lt;p&gt;Described &lt;a href="http://blog.codeville.net/2009/08/24/writing-great-unit-tests-best-and-worst-practises/"&gt;here&lt;/a&gt;, this approach seems to combine a data-oriented mindset with placing the result last.&lt;/p&gt;

&lt;p&gt;The "Subject" is the item under test. The "Scenario" is the context of the test. The "Result" is the expected result of the test.&lt;/p&gt;

&lt;p&gt;Original example: "ProductPurchaseAction_IfStockIsZero_RendersOutOfStockView()".&lt;/p&gt;

&lt;p&gt;Applied example: "Current_FromInsideAction_IsActionDispatcherForThatAction()".&lt;/p&gt;

&lt;p&gt;This naming convention is more data-centered (note the "ProductPurchase&lt;i&gt;Action&lt;/i&gt;" subject), so it should work well with MVVM-based designs. If "subject" could be interpreted as "object method" as well, then this approach could be called more object-oriented.&lt;/p&gt;

&lt;p&gt;In short, this option is a more readable and more object-oriented version of the first option. I've decided to go forward with this one for my project; your mileage may vary.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8709744714255159141/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/09/naming-unit-tests.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8709744714255159141'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8709744714255159141'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/naming-unit-tests.html' title='Naming Unit Tests'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8509063995624958145</id><published>2009-08-28T14:27:00.001-04:00</published><updated>2014-05-16T16:41:48.557-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>Q&amp;A: If Dispose calls SuppressFinalize, is KeepAlive required?</title><content type='html'>&lt;h5&gt;Question: If we include a call to GC.SuppressFinalize(this) in Dispose, is the the call to GC.KeepAlive(this) still required?&lt;/h5&gt;

&lt;h5&gt;Answer: No.&lt;/h5&gt;

&lt;h4&gt;Rationale:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;As &lt;a href="http://blog.stephencleary.com/2009/08/q-can-gcsuppressfinalizethis-be-called.html"&gt;has been established&lt;/a&gt;, a call to GC.SuppressFinalize anywhere will suppress the finalizer.&lt;/li&gt;
&lt;li&gt;The object must be live at the point GC.SuppressFinalize is called because it must be passed as an argument to that method.&lt;/li&gt;
&lt;li&gt;The call to GC.KeepAlive(this) was only put in Dispose to prevent the finalizer from being invoked while Dispose was still running.&lt;/li&gt;
&lt;li&gt;The GC.KeepAlive(this) call is not necessary because the object will be reachable until its finalizer is suppressed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Example requiring GC.SuppressFinalize(this)&lt;/h4&gt;

&lt;p&gt;This is almost identical to the test code used in &lt;a href="http://blog.stephencleary.com/2009/08/q-is-call-to-gckeepalivethis-required.html"&gt;my last Q&amp;amp;A: "Is a call to GC.KeepAlive(this) required in Dispose?"&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Do not run these tests from a Debug build or under the debugger. A standalone release build is required.&lt;/span&gt;
&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading;
 
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; Test : IDisposable
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; HandleHolder
    {
        &lt;span class="comment"&gt;// 0 is the invalid handle value&lt;/span&gt;
        &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; Handle { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
    }
 
    &lt;span class="keyword"&gt;private&lt;/span&gt; HandleHolder handleHolder;
 
    Test()
    {
        &lt;span class="comment"&gt;// Set the handle to a valid value for the test&lt;/span&gt;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.handleHolder = &lt;span class="keyword"&gt;new&lt;/span&gt; HandleHolder { Handle = 0x1 };
    }
 
    ~Test()
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: Finalizer called&amp;quot;&lt;/span&gt;);
        &lt;span class="comment"&gt;// This is just a check to ensure the constructor completed&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.handleHolder != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle(&lt;span class="keyword"&gt;true&lt;/span&gt;);
        }
    }
 
    &lt;span class="comment"&gt;// This method is pretending to be a p/Invoke function to free a handle&lt;/span&gt;
    &lt;span class="keyword"&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;, &lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; freedHandles = &lt;span class="keyword"&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;, &lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; ReleaseHandle(&lt;span class="keyword"&gt;int&lt;/span&gt; handle)
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: Released handle 0x&amp;quot;&lt;/span&gt; + handle.ToString(&lt;span class="string"&gt;&amp;quot;X&amp;quot;&lt;/span&gt;));
 
        &lt;span class="keyword"&gt;if&lt;/span&gt; (handle == 0)
        {
            Console.WriteLine(&lt;span class="string"&gt;&amp;quot;  ReleaseHandle released a bad handle! Bad, bad, bad!&amp;quot;&lt;/span&gt;);
        }
        &lt;span class="keyword"&gt;else&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;lock&lt;/span&gt; (freedHandles)
            {
                &lt;span class="keyword"&gt;if&lt;/span&gt; (freedHandles.ContainsKey(handle))
                {
                    Console.WriteLine(&lt;span class="string"&gt;&amp;quot;  ReleaseHandle double-released a handle! Bad, bad, bad!&amp;quot;&lt;/span&gt;);
                }
                &lt;span class="keyword"&gt;else&lt;/span&gt;
                {
                    freedHandles.Add(handle, handle);
                }
            }
        }
    }
 
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; CloseHandle(&lt;span class="keyword"&gt;bool&lt;/span&gt; calledFromFinalizer)
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: CloseHandle starting&amp;quot;&lt;/span&gt;);
 
        &lt;span class="comment"&gt;// (real code)&lt;/span&gt;
        HandleHolder myHandleHolder = &lt;span class="keyword"&gt;this&lt;/span&gt;.handleHolder;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (myHandleHolder.Handle == 0)
        {
            &lt;span class="comment"&gt;// Handle is already free&amp;#39;d&lt;/span&gt;
            &lt;span class="keyword"&gt;return&lt;/span&gt;;
        }
 
        &lt;span class="comment"&gt;// (code inserted to duplicate problems)&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (!calledFromFinalizer)
        {
            Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
                &lt;span class="string"&gt;&amp;quot;: Garbage collection in CloseHandle!&amp;quot;&lt;/span&gt;);
            GC.Collect();
            Thread.Sleep(500); &lt;span class="comment"&gt;// Let the finalizer thread run&lt;/span&gt;
            Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
                &lt;span class="string"&gt;&amp;quot;: CloseHandle continuing after garbage collection&amp;quot;&lt;/span&gt;);
        }
 
        &lt;span class="comment"&gt;// (real code)&lt;/span&gt;
        ReleaseHandle(myHandleHolder.Handle);
 
        &lt;span class="comment"&gt;// (code inserted to duplicate problems)&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (calledFromFinalizer)
        {
            &lt;span class="comment"&gt;// With this Thread.Sleep call, you get a double handle release&lt;/span&gt;
            &lt;span class="comment"&gt;// Without this Thread.Sleep call, you get a bad handle released&lt;/span&gt;
            Thread.Sleep(500); &lt;span class="comment"&gt;// Let the Dispose thread run    [1]&lt;/span&gt;
        }
 
        &lt;span class="comment"&gt;// (real code)&lt;/span&gt;
        myHandleHolder.Handle = 0;
 
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: CloseHandle ending&amp;quot;&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle(&lt;span class="keyword"&gt;false&lt;/span&gt;);
         
        &lt;span class="comment"&gt;// Uncomment the next line to fix the handle problems&lt;/span&gt;
        &lt;span class="comment"&gt;//GC.SuppressFinalize(this);    [2]&lt;/span&gt;
    }
 
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main()
    {
        Test t = &lt;span class="keyword"&gt;new&lt;/span&gt; Test();
        t.Dispose();
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: Returning from Main&amp;quot;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output with [2] commented out (as written above):&lt;/h4&gt;

&lt;pre&gt;
Thread 1: CloseHandle starting
Thread 1: Garbage collection in CloseHandle!
Thread 2: Finalizer called
Thread 2: CloseHandle starting
Thread 2: Released handle 0x1
Thread 1: CloseHandle continuing after garbage collection
Thread 1: Released handle 0x1
  ReleaseHandle double-released a handle! Bad, bad, bad!
Thread 1: CloseHandle ending
Thread 1: Returning from Main
Thread 2: CloseHandle ending
&lt;/pre&gt;

&lt;h4&gt;Output with [1] and [2] commented out:&lt;/h4&gt;

&lt;pre&gt;
Thread 1: CloseHandle starting
Thread 1: Garbage collection in CloseHandle!
Thread 2: Finalizer called
Thread 2: CloseHandle starting
Thread 2: Released handle 0x1
Thread 2: CloseHandle ending
Thread 1: CloseHandle continuing after garbage collection
Thread 1: Released handle 0x0
  ReleaseHandle released a bad handle! Bad, bad, bad!
Thread 1: CloseHandle ending
Thread 1: Returning from Main
&lt;/pre&gt;

&lt;h4&gt;Output with neither line commented out, OR with just [1] commented out:&lt;/h4&gt;

&lt;pre&gt;
Thread 1: CloseHandle starting
Thread 1: Garbage collection in CloseHandle!
Thread 1: CloseHandle continuing after garbage collection
Thread 1: Released handle 0x1
Thread 1: CloseHandle ending
Thread 1: Returning from Main
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8509063995624958145/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8509063995624958145'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8509063995624958145'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html' title='Q&amp;A: If Dispose calls SuppressFinalize, is KeepAlive required?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5451582519368391108</id><published>2009-08-28T14:04:00.003-04:00</published><updated>2013-05-17T22:49:57.725-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>Q&amp;A: Is a call to GC.KeepAlive(this) required in Dispose?</title><content type='html'>&lt;h5&gt;Question: Is a call to GC.KeepAlive(this) required in Dispose?&lt;/h5&gt;

&lt;h5&gt;Answer: Only in pathological cases.&lt;/h5&gt;

&lt;h4&gt;Rationale:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Dispose() must be safe to call multiple times.&lt;/li&gt;
&lt;li&gt;To prevent multiple disposal of unmanaged resources, there must exist some kind of object-level flag (e.g., "bool disposed") or state (e.g., an invalid handle value) to detect if the object has been disposed.&lt;/li&gt;
&lt;li&gt;This flag must be set by Dispose (or a method invoked by Dispose) &lt;i&gt;after&lt;/i&gt; it is checked.&lt;/li&gt;
&lt;li&gt;If the flag is set after disposing the unmanaged resource, then it acts as an equivalent to GC.KeepAlive(this).&lt;/li&gt;
&lt;li&gt;This flag must be checked by the finalizer (or a method invoked by the finalizer).&lt;/li&gt;
&lt;li&gt;If the flag is set before disposing the unmanaged resource, it is still set after it has been checked.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://www.bluebytesoftware.com/blog/2007/11/10/CLR20MemoryModel.aspx"&gt;concurrency rules for the Microsoft CLR&lt;/a&gt; guarantee that this is safe for any reasonable type of flag (bool, IntPtr, or reference type).&lt;/li&gt;
&lt;li&gt;Therefore, GC.KeepAlive(this) is only required if the flag is of a very unusual type (such as a Double) OR if the flag is inside &lt;i&gt;another&lt;/i&gt; object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This reasoning concludes that for 99% of handle objects, a call to GC.KeepAlive(this) is not required. Furthermore, for 99% of the remaining objects, &lt;a href="http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html"&gt;a call to GC.SuppressFinalize should be used instead of a call to GC.KeepAlive&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Example 1 not requiring GC.KeepAlive(this)&lt;/h4&gt;

&lt;p&gt;This example uses a "bool disposed" flag, set &lt;i&gt;before&lt;/i&gt; disposing the unmanaged resource:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Do not run these tests from a Debug build or under the debugger. A standalone release build is required.&lt;/span&gt;
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; disposed;
 
~Test()
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (!&lt;span class="keyword"&gt;this&lt;/span&gt;.disposed)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
    }
}
 
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (!&lt;span class="keyword"&gt;this&lt;/span&gt;.disposed)
    {
        &lt;span class="comment"&gt;// At this point, if a GC occurs, the object is still reachable&lt;/span&gt;
 
        &lt;span class="keyword"&gt;this&lt;/span&gt;.disposed = &lt;span class="keyword"&gt;true&lt;/span&gt;;
 
        &lt;span class="comment"&gt;// This is the soonest point that a GC can occur calling this object&amp;#39;s finalizer&lt;/span&gt;
        &lt;span class="comment"&gt;//  and this.disposed has already been set to true.&lt;/span&gt;
 
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Example 2 not requiring GC.KeepAlive(this)&lt;/h4&gt;

&lt;p&gt;This example uses a "bool disposed" flag, set &lt;i&gt;after&lt;/i&gt; disposing the unmanaged resource:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Do not run these tests from a Debug build or under the debugger. A standalone release build is required.&lt;/span&gt;
&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; disposed;
 
~Test()
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (!&lt;span class="keyword"&gt;this&lt;/span&gt;.disposed)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
    }
}
 
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (!&lt;span class="keyword"&gt;this&lt;/span&gt;.disposed)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
 
        &lt;span class="comment"&gt;// At this point, if a GC occurs, the object is still reachable&lt;/span&gt;
 
        &lt;span class="keyword"&gt;this&lt;/span&gt;.disposed = &lt;span class="keyword"&gt;true&lt;/span&gt;;
 
        &lt;span class="comment"&gt;// This is the soonest point that a GC can occur calling this object&amp;#39;s finalizer&lt;/span&gt;
        &lt;span class="comment"&gt;//  and this.disposed has already been set to true.&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Example 3 not requiring GC.KeepAlive(this)&lt;/h4&gt;

&lt;p&gt;This example uses an "invalid handle" flag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Do not run these tests from a Debug build or under the debugger. A standalone release build is required.&lt;/span&gt;
&lt;span class="keyword"&gt;private&lt;/span&gt; IntPtr handle;
 
~Test()
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.handle != IntPtr.Zero)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
    }
}
 
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.handle != IntPtr.Zero)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
 
        &lt;span class="comment"&gt;// At this point, if a GC occurs, the object is still reachable&lt;/span&gt;
 
        &lt;span class="keyword"&gt;this&lt;/span&gt;.handle = IntPtr.Zero;
 
        &lt;span class="comment"&gt;// This is the soonest point that a GC can occur calling this object&amp;#39;s finalizer&lt;/span&gt;
        &lt;span class="comment"&gt;//  and this.handle has already been set to IntPtr.Zero.&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Example 4 - requiring GC.KeepAlive(this)&lt;/h4&gt;

&lt;p&gt;It is possible to create a more pathological case where GC.KeepAlive(this) is required; the code below requires GC.KeepAlive because it holds its actual handle value inside of another class:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Do not run these tests from a Debug build or under the debugger. A standalone release build is required.&lt;/span&gt;
&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading;
 
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; Test : IDisposable
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; HandleHolder
    {
        &lt;span class="comment"&gt;// 0 is the invalid handle value&lt;/span&gt;
        &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; Handle { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
    }
 
    &lt;span class="keyword"&gt;private&lt;/span&gt; HandleHolder handleHolder;
 
    Test()
    {
        &lt;span class="comment"&gt;// Set the handle to a valid value for the test&lt;/span&gt;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.handleHolder = &lt;span class="keyword"&gt;new&lt;/span&gt; HandleHolder { Handle = 0x1 };
    }
 
    ~Test()
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: Finalizer called&amp;quot;&lt;/span&gt;);
        &lt;span class="comment"&gt;// This is just a check to ensure the constructor completed&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.handleHolder != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle(&lt;span class="keyword"&gt;true&lt;/span&gt;);
        }
    }
 
    &lt;span class="comment"&gt;// This method is pretending to be a p/Invoke function to free a handle&lt;/span&gt;
    &lt;span class="keyword"&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;, &lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt; freedHandles = &lt;span class="keyword"&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span class="keyword"&gt;int&lt;/span&gt;, &lt;span class="keyword"&gt;int&lt;/span&gt;&amp;gt;();
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; ReleaseHandle(&lt;span class="keyword"&gt;int&lt;/span&gt; handle)
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: Released handle 0x&amp;quot;&lt;/span&gt; + handle.ToString(&lt;span class="string"&gt;&amp;quot;X&amp;quot;&lt;/span&gt;));
 
        &lt;span class="keyword"&gt;if&lt;/span&gt; (handle == 0)
        {
            Console.WriteLine(&lt;span class="string"&gt;&amp;quot;  ReleaseHandle released a bad handle! Bad, bad, bad!&amp;quot;&lt;/span&gt;);
        }
        &lt;span class="keyword"&gt;else&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;lock&lt;/span&gt; (freedHandles)
            {
                &lt;span class="keyword"&gt;if&lt;/span&gt; (freedHandles.ContainsKey(handle))
                {
                    Console.WriteLine(&lt;span class="string"&gt;&amp;quot;  ReleaseHandle double-released a handle! Bad, bad, bad!&amp;quot;&lt;/span&gt;);
                }
                &lt;span class="keyword"&gt;else&lt;/span&gt;
                {
                    freedHandles.Add(handle, handle);
                }
            }
        }
    }
 
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; CloseHandle(&lt;span class="keyword"&gt;bool&lt;/span&gt; calledFromFinalizer)
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: CloseHandle starting&amp;quot;&lt;/span&gt;);
 
        &lt;span class="comment"&gt;// (real code)&lt;/span&gt;
        HandleHolder myHandleHolder = &lt;span class="keyword"&gt;this&lt;/span&gt;.handleHolder;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (myHandleHolder.Handle == 0)
        {
            &lt;span class="comment"&gt;// Handle is already free&amp;#39;d&lt;/span&gt;
            &lt;span class="keyword"&gt;return&lt;/span&gt;;
        }
 
        &lt;span class="comment"&gt;// (code inserted to duplicate problems)&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (!calledFromFinalizer)
        {
            Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
                &lt;span class="string"&gt;&amp;quot;: Garbage collection in CloseHandle!&amp;quot;&lt;/span&gt;);
            GC.Collect();
            Thread.Sleep(500); &lt;span class="comment"&gt;// Let the finalizer thread run&lt;/span&gt;
            Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
                &lt;span class="string"&gt;&amp;quot;: CloseHandle continuing after garbage collection&amp;quot;&lt;/span&gt;);
        }
 
        &lt;span class="comment"&gt;// (real code)&lt;/span&gt;
        ReleaseHandle(myHandleHolder.Handle);
 
        &lt;span class="comment"&gt;// (code inserted to duplicate problems)&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (calledFromFinalizer)
        {
            &lt;span class="comment"&gt;// With this Thread.Sleep call, you get a double handle release&lt;/span&gt;
            &lt;span class="comment"&gt;// Without this Thread.Sleep call, you get a bad handle released&lt;/span&gt;
            Thread.Sleep(500); &lt;span class="comment"&gt;// Let the Dispose thread run     [1]&lt;/span&gt;
        }
 
        &lt;span class="comment"&gt;// (real code)&lt;/span&gt;
        myHandleHolder.Handle = 0;
 
        &lt;span class="comment"&gt;// If you uncomment the next line, then you won&amp;#39;t get handle release errors&lt;/span&gt;
        &lt;span class="comment"&gt;//  regardless of the Thread.Sleep above.&lt;/span&gt;
        &lt;span class="comment"&gt;//GC.KeepAlive(this);     [2]&lt;/span&gt;
 
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: CloseHandle ending&amp;quot;&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle(&lt;span class="keyword"&gt;false&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main()
    {
        Test t = &lt;span class="keyword"&gt;new&lt;/span&gt; Test();
        t.Dispose();
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Thread &amp;quot;&lt;/span&gt; + Thread.CurrentThread.ManagedThreadId +
            &lt;span class="string"&gt;&amp;quot;: Returning from Main&amp;quot;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output with [2] commented out (as written above):&lt;/h4&gt;

&lt;pre&gt;
Thread 1: CloseHandle starting
Thread 1: Garbage collection in CloseHandle!
Thread 2: Finalizer called
Thread 2: CloseHandle starting
Thread 2: Released handle 0x1
Thread 1: CloseHandle continuing after garbage collection
Thread 1: Released handle 0x1
  ReleaseHandle double-released a handle! Bad, bad, bad!
Thread 1: CloseHandle ending
Thread 1: Returning from Main
Thread 2: CloseHandle ending
&lt;/pre&gt;

&lt;h4&gt;Output with [1] and [2] commented out:&lt;/h4&gt;

&lt;pre&gt;
Thread 1: CloseHandle starting
Thread 1: Garbage collection in CloseHandle!
Thread 2: Finalizer called
Thread 2: CloseHandle starting
Thread 2: Released handle 0x1
Thread 2: CloseHandle ending
Thread 1: CloseHandle continuing after garbage collection
Thread 1: Released handle 0x0
  ReleaseHandle released a bad handle! Bad, bad, bad!
Thread 1: CloseHandle ending
Thread 1: Returning from Main
&lt;/pre&gt;

&lt;h4&gt;Output with neither line commented out, OR with just [1] commented out:&lt;/h4&gt;

&lt;pre&gt;
Thread 1: CloseHandle starting
Thread 1: Garbage collection in CloseHandle!
Thread 1: CloseHandle continuing after garbage collection
Thread 1: Released handle 0x1
Thread 1: CloseHandle ending
Thread 1: Returning from Main
Thread 2: Finalizer called
Thread 2: CloseHandle starting
&lt;/pre&gt;

&lt;h4&gt;Closing Notes&lt;/h4&gt;

&lt;p&gt;It is cleaner and more efficient to &lt;a href="http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html"&gt;include a call to GC.SuppressFinalize(this) instead of a call to GC.KeepAlive(this)&lt;/a&gt;. The only true reason a call to GC.KeepAlive should be required is if the disposed flag is of an unusual type (like Double).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5451582519368391108/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/q-is-call-to-gckeepalivethis-required.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5451582519368391108'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5451582519368391108'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/q-is-call-to-gckeepalivethis-required.html' title='Q&amp;A: Is a call to GC.KeepAlive(this) required in Dispose?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-324881394132422688</id><published>2009-08-28T12:01:00.010-04:00</published><updated>2014-05-16T16:42:44.578-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>Q&amp;A: Can GC.SuppressFinalize(this) be called at any time?</title><content type='html'>&lt;p&gt;Today I was asked by a colleague about some of my blog posts yesterday regarding IDisposable and Finalize. So here's the first post in a series of Q&amp;amp;A regarding finalizers. Enjoy!&lt;/p&gt;

&lt;h5&gt;Question: Does GC.SuppressFinalize(this) work if the object is not already on the finalize queue?&lt;/h5&gt;

&lt;h5&gt;Answer: Yes, it does.&lt;/h5&gt;

&lt;h4&gt;Additional Information&lt;/h4&gt;

&lt;p&gt;There's some confusion on what exactly GC.SuppressFinalize does, because the &lt;a href="http://www.webcitation.org/5wPLddgo3"&gt;.NET 1.1 docs&lt;/a&gt; state "The method removes &lt;i&gt;obj&lt;/i&gt; from the set of objects that require finalization." However, since .NET 2.0, the &lt;a href="http://www.webcitation.org/5wPLgw9IJ"&gt;docs&lt;/a&gt; have been updated to read "This method sets a bit in the object header, which the system checks when calling finalizers." This clarifies GC.SuppressFinalize semantics nicely.&lt;/p&gt;

&lt;p&gt;Because of the old docs, there is some FUD regarding GC.SuppressFinalize floating around in old forum and newsgroup posts. Some people insist that it must be the last thing done by a Dispose() implementation. However, the truth is that it is safe to call at any time. In fact, &lt;a href="http://www.webcitation.org/5wPLXTCHO"&gt;some BCL classes even call GC.SuppressFinalize in their constructors&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;There is an argument that &lt;a href="http://www.webcitation.org/5wPLnd2En"&gt;can be made&lt;/a&gt; for calling GC.SuppressFinalize as the last statement in a Dispose method: it ensures that the finalizer is only suppressed if Dispose does not throw. However, it is very poor practice to have a Dispose method that throws, so this argument has little merit.&lt;/p&gt;

&lt;h4&gt;Test Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Do not run these tests from a Debug build or under the debugger. A standalone release build is required.&lt;/span&gt;
&lt;span class="keyword"&gt;using&lt;/span&gt; System;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Threading;
&lt;span class="keyword"&gt;using&lt;/span&gt; System.Diagnostics;
 
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; Test : IDisposable
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; Test test;
 
    ~Test()
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Finalizer called&amp;quot;&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; RemoveMyFinalizer()
    {
        GC.SuppressFinalize(&lt;span class="keyword"&gt;this&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Dispose called&amp;quot;&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Report()
    {
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Test object is still alive!&amp;quot;&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Main()
    {
        &lt;span class="comment"&gt;// We use a static object here to ensure it is reachable&lt;/span&gt;
        Test.test = &lt;span class="keyword"&gt;new&lt;/span&gt; Test();
        &lt;span class="comment"&gt;// Since the test object is reachable, it cannot be in the finalizer queue at this point&lt;/span&gt;
        Test.test.RemoveMyFinalizer();
        Test.test.Report();
        Console.WriteLine(&lt;span class="string"&gt;&amp;quot;Returning from Main&amp;quot;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Output of Test Code:&lt;/h4&gt;

&lt;pre&gt;
Test object is still alive!
Returning from Main
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/324881394132422688/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/q-can-gcsuppressfinalizethis-be-called.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/324881394132422688'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/324881394132422688'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/q-can-gcsuppressfinalizethis-be-called.html' title='Q&amp;A: Can GC.SuppressFinalize(this) be called at any time?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-431595782877712191</id><published>2009-08-27T19:15:00.005-04:00</published><updated>2013-05-17T22:43:01.738-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>The Third Rule of Implementing IDisposable and Finalizers</title><content type='html'>&lt;p&gt;This post is part of &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;How to Implement IDisposable and Finalizers: 3 Easy Rules&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;For a class owning a single unmanaged resource, implement IDisposable and a finalizer&lt;/h4&gt;

&lt;p&gt;A class that owns a single unmanaged resource should not be responsible for anything else. It should &lt;i&gt;only&lt;/i&gt; be responsible for &lt;i&gt;closing&lt;/i&gt; that resource.&lt;/p&gt;

&lt;p&gt;No classes should be responsible for multiple unmanaged resources. It's hard enough to properly free a single resource; writing a class that handles multiple unmanaged resources is much more difficult.&lt;/p&gt;

&lt;p&gt;No classes should be responsible for both managed and unmanaged resources. It's &lt;i&gt;possible&lt;/i&gt; to write a class that handles both unmanaged and managed resource, but this is extremely difficult to code correctly. Trust me; don't go there. Even if the class is bug-free, it's a maintenance nightmare. Microsoft re-wrote a &lt;i&gt;lot&lt;/i&gt; of core classes in the BCL when .NET 2.0 came out, specifically so they could divide the classes with unmanaged resources from the classes with managed resources.&lt;/p&gt;

&lt;blockquote&gt;Note: a lot of the really overly-complex Microsoft IDisposable documentation is because they assume your class will want to handle both managed and unmanaged resources. This is a holdover from .NET 1.0, and it's kept only for backwards compatibility. Take a clue from Microsoft: their own classes don't even follow that old pattern (they were changed in .NET 2.0 to follow the pattern described in this blog post). FxCop will yell at you because you need to &lt;a href="http://msdn.microsoft.com/en-us/library/ms244737.aspx"&gt;implement IDisposable "correctly"&lt;/a&gt; (i.e., using the old pattern); ignore it - FxCop is wrong.&lt;/blockquote&gt;

&lt;p&gt;The class should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// This is an example of a correct IDisposable implementation.&lt;/span&gt;
&lt;span class="comment"&gt;// It is not ideal, however, because it does not inherit from SafeHandle&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; WindowStationHandle : IDisposable
{
    &lt;span class="keyword"&gt;public&lt;/span&gt; WindowStationHandle(IntPtr handle)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.Handle = handle;
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; WindowStationHandle()
        : &lt;span class="keyword"&gt;this&lt;/span&gt;(IntPtr.Zero)
    {
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; IsInvalid
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.Handle == IntPtr.Zero); }
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; IntPtr Handle { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
 
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; CloseHandle()
    {
        &lt;span class="comment"&gt;// Do nothing if the handle is invalid&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.IsInvalid)
        {
            &lt;span class="keyword"&gt;return&lt;/span&gt;;
        }
 
        &lt;span class="comment"&gt;// Close the handle, logging but otherwise ignoring errors&lt;/span&gt;
        &lt;span class="keyword"&gt;if&lt;/span&gt; (!NativeMethods.CloseWindowStation(&lt;span class="keyword"&gt;this&lt;/span&gt;.Handle))
        {
            Trace.WriteLine(&lt;span class="string"&gt;&amp;quot;CloseWindowStation: &amp;quot;&lt;/span&gt; + &lt;span class="keyword"&gt;new&lt;/span&gt; Win32Exception().Message);
        }
 
        &lt;span class="comment"&gt;// Set the handle to an invalid value&lt;/span&gt;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.Handle = IntPtr.Zero;
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
        GC.SuppressFinalize(&lt;span class="keyword"&gt;this&lt;/span&gt;);
    }
 
    ~WindowStationHandle()
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.CloseHandle();
    }
}
 
&lt;span class="keyword"&gt;internal&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;partial&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; NativeMethods
{
    [DllImport(&lt;span class="string"&gt;&amp;quot;user32.dll&amp;quot;&lt;/span&gt;, SetLastError = &lt;span class="keyword"&gt;true&lt;/span&gt;)]
    [&lt;span class="keyword"&gt;return&lt;/span&gt;: MarshalAs(UnmanagedType.Bool)]
    &lt;span class="keyword"&gt;internal&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;extern&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; CloseWindowStation(IntPtr hWinSta);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IDisposable.Dispose ends with a call to &lt;a href="http://msdn.microsoft.com/en-us/library/system.gc.suppressfinalize.aspx"&gt;GC.SuppressFinalize(this)&lt;/a&gt;. This ensures that the object will remain live until after its finalizer has been suppressed.&lt;/p&gt;

&lt;p&gt;If Dispose is not explicitly invoked, then the finalizer will eventually be invoked, which calls CloseHandle directly.&lt;/p&gt;

&lt;p&gt;CloseHandle first checks if the handle is invalid. Then it closes the handle, being careful &lt;i&gt;not&lt;/i&gt; to throw exceptions; CloseHandle may be called from the finalizer, and an exception at that point would crash the process. CloseHandle finishes by marking the handle as invalid, making it safe to invoke this method multiple times; this, in turn, makes it safe to invoke Dispose multiple times. It is possible to move this "validity check" into the Dispose method, but placing it in CloseHandle also allows invalid handles to be passed into the constructor or set in the Handle property.&lt;/p&gt;

&lt;p&gt;The only reason that SuppressFinalize is called &lt;i&gt;after&lt;/i&gt; CloseHandle is because this allows the finalizer to run if the Dispose's CloseHandle fails (by throwing an exception). This is &lt;a href="http://www.bluebytesoftware.com/blog/2005/04/08/DGUpdateDisposeFinalizationAndResourceManagement.aspx"&gt;discussed in detail on Joe Duffy's blog&lt;/a&gt;, but is a relatively weak argument; the only way this would really make a difference is if the CloseHandle method closed the handle differently when invoked by the finalizer. While it is possible to write code like this, it is certainly not recommended.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Important!&lt;/b&gt; The WindowStationHandle class does &lt;i&gt;not&lt;/i&gt; obtain a window station handle; it knows nothing of creating or opening window stations. That responsibility (along with all the other window station-related methods) belongs in another class (presumably named "WindowStation"). This helps create a correct implementation, because every finalizer must be able to execute without error on a partially-constructed object if the constructor throws; in practice, this is very difficult, and this is another reason why a wrapper class should be split into a "handle closer" class and a "proper wrapper" class.&lt;/p&gt;

&lt;p&gt;Note: this is the simplest possible solution, and it does have some very obscure resource leaks (e.g., if a thread is aborted immediately after returning from a resource allocation function). If you're developing on the full framework, and are wrapping an IntPtr handle (such as the window station example above), then it is better to derive from &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.aspx"&gt;SafeHandle&lt;/a&gt;. If you need to go a step further and support reliable resource deallocation, things get &lt;a href="http://www.codeproject.com/KB/dotnet/idisposable.aspx"&gt;very complex very quickly!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is part of &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;How to Implement IDisposable and Finalizers: 3 Easy Rules&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/431595782877712191/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/431595782877712191'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/431595782877712191'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html' title='The Third Rule of Implementing IDisposable and Finalizers'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983</id><published>2009-08-27T19:13:00.002-04:00</published><updated>2013-05-17T22:40:37.902-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>The Second Rule of Implementing IDisposable and Finalizers</title><content type='html'>&lt;p&gt;This post is part of &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;How to Implement IDisposable and Finalizers: 3 Easy Rules&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;For a class owning managed resources, implement IDisposable (but not a finalizer)&lt;/h4&gt;

&lt;p&gt;IDisposable only has one method: Dispose. This method has one important guarantee: it must be safe to call multiple times.&lt;/p&gt;

&lt;p&gt;An implementation of Dispose may assume that it is not called from a finalizer thread, that its instance is not being garbage collected, and that a constructor for its instance has completed successfully. These assumptions makes it safe to access other managed objects.&lt;/p&gt;

&lt;p&gt;One mistake is to place a finalizer on a class that only has managed resources; this example code can result in an exception on the finalizer thread, which would crash the application:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// This is an example of an incorrect and buggy finalizer.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; SingleApplicationInstance
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; Mutex namedMutex;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; namedMutexCreatedNew;
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; SingleApplicationInstance(&lt;span class="keyword"&gt;string&lt;/span&gt; applicationName)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.namedMutex = &lt;span class="keyword"&gt;new&lt;/span&gt; Mutex(&lt;span class="keyword"&gt;false&lt;/span&gt;, applicationName, &lt;span class="keyword"&gt;out&lt;/span&gt; namedMutexCreatedNew);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; AlreadyExisted
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; !&lt;span class="keyword"&gt;this&lt;/span&gt;.namedMutexCreatedNew; }
    }
 
    ~SingleApplicationInstance()
    {
        &lt;span class="comment"&gt;// Bad, bad, bad!!!&lt;/span&gt;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.namedMutex.Close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whether or not SingleApplicationInstance implements IDisposable, the fact that it's accessing a managed object in its finalizer is a recipe for disaster.&lt;/p&gt;

&lt;p&gt;Here's an exmple of a class that removes the finalizer and then implements IDisposable in a correct but needlessly complex way:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// This is an example of a needlessly complex IDisposable implementation.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; SingleApplicationInstance : IDisposable
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; Mutex namedMutex;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; namedMutexCreatedNew;
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; SingleApplicationInstance(&lt;span class="keyword"&gt;string&lt;/span&gt; applicationName)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.namedMutex = &lt;span class="keyword"&gt;new&lt;/span&gt; Mutex(&lt;span class="keyword"&gt;false&lt;/span&gt;, applicationName, &lt;span class="keyword"&gt;out&lt;/span&gt; namedMutexCreatedNew);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; AlreadyExisted
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; !&lt;span class="keyword"&gt;this&lt;/span&gt;.namedMutexCreatedNew; }
    }
 
    &lt;span class="comment"&gt;// Needlessly complex&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (namedMutex != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            namedMutex.Close();
            namedMutex = &lt;span class="keyword"&gt;null&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a class owns managed resources, it may forward its Dispose call on to them. No other code is necessary. Remember that some classes rename "Dispose" to "Close", so a Dispose implementation may consist entirely of calls to Dispose and Close methods.&lt;/p&gt;

&lt;p&gt;An equivalent - and simpler - implementation is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// This is an example of a correct IDisposable implementation.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; SingleApplicationInstance : IDisposable
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; Mutex namedMutex;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; namedMutexCreatedNew;
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; SingleApplicationInstance(&lt;span class="keyword"&gt;string&lt;/span&gt; applicationName)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.namedMutex = &lt;span class="keyword"&gt;new&lt;/span&gt; Mutex(&lt;span class="keyword"&gt;false&lt;/span&gt;, applicationName, &lt;span class="keyword"&gt;out&lt;/span&gt; namedMutexCreatedNew);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt; AlreadyExisted
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; !&lt;span class="keyword"&gt;this&lt;/span&gt;.namedMutexCreatedNew; }
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        namedMutex.Close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This IDisposable.Dispose implementation is perfectly safe. It can be safely called multiple times, because each of the IDisposable implementations it invokes can be safely called multiple times. This &lt;i&gt;transitive property&lt;/i&gt; of IDisposable should be used to write simple Dispose implementations like this one.&lt;/p&gt;

&lt;p&gt;This post is part of &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;How to Implement IDisposable and Finalizers: 3 Easy Rules&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8745579675321426983/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html#comment-form' title='22 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' title='The Second Rule of Implementing IDisposable and Finalizers'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>22</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370</id><published>2009-08-27T19:12:00.004-04:00</published><updated>2013-05-17T22:33:23.641-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>The First Rule of Implementing IDisposable and Finalizers</title><content type='html'>&lt;p&gt;This post is part of &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;How to Implement IDisposable and Finalizers: 3 Easy Rules&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Don't do it (unless you need to).&lt;/h4&gt;

&lt;p&gt;IDisposable is not a destructor. Remember that .NET has a garbage collector that works just fine without requiring you to set member variables to null.&lt;/p&gt;

&lt;p&gt;There are only two situations when IDisposable does need to be implemented; apply these tests to a class to determine if IDisposable is needed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The class owns unmanaged resources.&lt;/li&gt;
&lt;li&gt;The class owns managed (IDisposable) resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that only classes that &lt;i&gt;own&lt;/i&gt; resources should free them. In particular, a class may have a reference to a shared resource; in this case, it should not free the resource because other classes may still be using it.&lt;/p&gt;

&lt;p&gt;Here's a code example similar to what many beginner C# programmers write:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// This is an example of an incorrect IDisposable implementation.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; ErrorList : IDisposable
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; category;
    &lt;span class="keyword"&gt;private&lt;/span&gt; List&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt; errors;

    &lt;span class="keyword"&gt;public&lt;/span&gt; ErrorList(&lt;span class="keyword"&gt;string&lt;/span&gt; category)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.category = category;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.errors = &lt;span class="keyword"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;();
    }

    &lt;span class="comment"&gt;// (other methods go here to add/display error messages)&lt;/span&gt;

    &lt;span class="comment"&gt;// Completely unnecessary...&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.errors != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.errors.Clear();
            &lt;span class="keyword"&gt;this&lt;/span&gt;.errors = &lt;span class="keyword"&gt;null&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some programmers (especially with C++ backgrounds) even go a step further and add a finalizer:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// This is an example of an incorrect and buggy IDisposable implementation.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; ErrorList : IDisposable
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; category;
    &lt;span class="keyword"&gt;private&lt;/span&gt; List&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt; errors;

    &lt;span class="keyword"&gt;public&lt;/span&gt; ErrorList(&lt;span class="keyword"&gt;string&lt;/span&gt; category)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.category = category;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.errors = &lt;span class="keyword"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;();
    }

    &lt;span class="comment"&gt;// (other methods go here to add/display error messages)&lt;/span&gt;

    &lt;span class="comment"&gt;// Completely unnecessary...&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; Dispose()
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.errors != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.errors.Clear();
            &lt;span class="keyword"&gt;this&lt;/span&gt;.errors = &lt;span class="keyword"&gt;null&lt;/span&gt;;
        }
    }

    ~ErrorList()
    {
        &lt;span class="comment"&gt;// Very bad!&lt;/span&gt;
        &lt;span class="comment"&gt;// This can cause an exception in the finalizer thread, crashing the application!&lt;/span&gt;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The correct implementation of IDisposable for this type is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// This is an example of a correct IDisposable implementation.&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; ErrorList
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; category;
    &lt;span class="keyword"&gt;private&lt;/span&gt; List&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt; errors;

    &lt;span class="keyword"&gt;public&lt;/span&gt; ErrorList(&lt;span class="keyword"&gt;string&lt;/span&gt; category)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.category = category;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.errors = &lt;span class="keyword"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="keyword"&gt;string&lt;/span&gt;&amp;gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's right, folks. The correct IDisposable implementation for this class is to &lt;i&gt;not&lt;/i&gt; implement IDisposable! When an ErrorList instance becomes unreachable, the garbage collector will automatically reclaim all of its memory and resources.&lt;/p&gt;

&lt;p&gt;Remember the two tests to determine if IDisposable is needed (owning unmanaged resources and owning managed resources). A simple checklist can be done as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does the ErrorList class own unmanaged resources? No, it does not.&lt;/li&gt;
&lt;li&gt;Does the ErrorList class own managed resources? Remember, "managed resources" are any classes implementing IDisposable. So, check each owned member type:
&lt;ol&gt;
&lt;li&gt;Does string implement IDisposable? No, it does not.&lt;/li&gt;
&lt;li&gt;Does List&amp;lt;string&amp;gt; implement IDisposable? No, it does not.&lt;/li&gt;
&lt;li&gt;Since none of the owned members implement IDisposable, the ErrorList class does not own any managed resources.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Since there are no unmanaged resources and no managed resources owned by ErrorList, it does not need to implement IDisposable.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This post is part of &lt;a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html"&gt;How to Implement IDisposable and Finalizers: 3 Easy Rules&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3207474732790799370/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html#comment-form' title='17 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' title='The First Rule of Implementing IDisposable and Finalizers'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>17</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-153949736974106067</id><published>2009-08-27T19:01:00.008-04:00</published><updated>2013-05-17T10:24:28.659-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>How to Implement IDisposable and Finalizers: 3 Easy Rules</title><content type='html'>&lt;p&gt;Microsoft's documentation on IDisposable is needlessly confusing. It really boils down to three simple rules.&lt;/p&gt;

&lt;h4&gt;Rule 1: Don't do it (unless you need to).&lt;/h4&gt;

&lt;p&gt;There are only two situations when IDisposable does need to be implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The class owns unmanaged resources.&lt;/li&gt;
&lt;li&gt;The class owns managed (IDisposable) resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href="http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html"&gt;The First Rule of Implementing IDisposable and Finalizers&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h4&gt;Rule 2: For a class owning managed resources, implement IDisposable (but not a finalizer)&lt;/h4&gt;

&lt;p&gt;This implementation of IDisposable should only call Dispose for each owned resource. It should not have any other code: no "if" statements, no setting anything to null; just calls to Dispose or Close.&lt;/p&gt;

&lt;p&gt;The class should not have a finalizer.&lt;/p&gt;

&lt;p&gt;See &lt;a href="http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html"&gt;The Second Rule of Implementing IDisposable and Finalizers&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h4&gt;Rule 3: For a class owning a single unmanaged resource, implement both IDisposable and a finalizer&lt;/h4&gt;

&lt;p&gt;A class that owns a single unmanaged resource should not be responsible for anything else. It should &lt;i&gt;only&lt;/i&gt; be responsible for &lt;i&gt;closing&lt;/i&gt; that resource.&lt;/p&gt;

&lt;p&gt;No class should be responsible for multiple unmanaged resources.&lt;/p&gt;

&lt;p&gt;No class should be responsible for both managed and unmanaged resources.&lt;/p&gt;

&lt;p&gt;This implementation of IDisposable should call an internal "CloseHandle" method and then end with a call to &lt;a href="http://msdn.microsoft.com/en-us/library/system.gc.suppressfinalize.aspx"&gt;GC.SuppressFinalize(this)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The internal "CloseHandle" method should close the handle if it is a valid value, and then set the handle to an invalid value. This makes "CloseHandle" (and therefore Dispose) safe to call multiple times.&lt;/p&gt;

&lt;p&gt;The finalizer for the class should just call "CloseHandle".&lt;/p&gt;

&lt;p&gt;See &lt;a href="http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html"&gt;The Third Rule of Implementing IDisposable and Finalizers&lt;/a&gt; for more details.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/153949736974106067/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html' title='How to Implement IDisposable and Finalizers: 3 Easy Rules'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7931973420096490820</id><published>2009-08-27T14:12:00.005-04:00</published><updated>2009-08-27T18:28:07.604-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='IDisposable/Finalizers'/><title type='text'>Finalizers at Process Exit</title><content type='html'>&lt;p&gt;I spent too long investigating a problem in a colleague's code today; the bug was something I knew about but had forgotten:&lt;/p&gt;

&lt;blockquote&gt;During process shutdown, finalizers are given a strict timeout. If they overrun their timeout, the process is terminated.&lt;/blockquote&gt;

&lt;p&gt;This can easily happen if, say, someone you work with writes a program that leaves cleaning up database objects to the finalizers. The program works fine with their small test databases, but then seems to have no effect when used with larger databases (database engines tend to get excited and roll back operations when their client programs suddenly terminate).&lt;/p&gt;

&lt;p&gt;I can't believe that I spent over an hour today tracking this down (sigh). So, I researched it out in some depth, and collected wisdom from several others below.&lt;/p&gt;

&lt;h4&gt;Supporting Statements&lt;/h4&gt;

&lt;p&gt;"Finalization during process termination will eventually timeout." (Chris Brumme, &lt;a href="http://blogs.msdn.com/cbrumme/archive/2004/02/20/77460.aspx"&gt;Finalization&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;"We run most of the above shutdown under the protection of a watchdog thread.  By this I mean that the shutdown thread signals the finalizer thread to perform most of the above steps.  Then the shutdown thread enters a wait with a timeout.  If the timeout triggers before the finalizer thread has completed the next stage of the managed shutdown, the shutdown thread wakes up and skips the rest of the managed part of the shutdown." (Chris Brumme, &lt;a href="http://blogs.msdn.com/cbrumme/archive/2003/08/20/51504.aspx"&gt;Startup, Shutdown and related matters&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;"[When a process is gracefully terminating], each Finalize method is given approximately 2 seconds to return. If a Finalize method doesn't return within 2 seconds, the CLR just kills the process - no more Finalize methods are called. Also, if it takes more than 40 seconds to call all objects' Finalize methods, then again, the CLR just kills the process. Note: These timeout values were correct at the time I wrote this text, but Microsoft might change them in the future." (Jeffrey Richter, &lt;a href="http://www.amazon.com/gp/product/0735614229?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735614229"&gt;Applied Microsoft .NET Framework Programming&lt;/a&gt;, pg 467; and &lt;a href="http://www.amazon.com/gp/product/0735621632?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735621632"&gt;CLR via C#, 2nd ed&lt;/a&gt;, pg 478).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7931973420096490820/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/finalizers-at-process-exit.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7931973420096490820'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7931973420096490820'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/finalizers-at-process-exit.html' title='Finalizers at Process Exit'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7139226799188913085</id><published>2009-08-20T22:10:00.002-04:00</published><updated>2009-08-21T08:52:25.547-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>BarCampGR4 Slides Available</title><content type='html'>&lt;p&gt;The slides for my talk, "Designing Application Protocols for TCP/IP" are now &lt;a href="http://barcampgr.org/wiki/BarCampGrandRapids4Presentations"&gt;available&lt;/a&gt;. I'll be giving this talk either Friday night or Saturday sometime.&lt;/p&gt;

&lt;p&gt;If you're from Northern Michigan, &lt;a href="http://barcampgr.org/wiki/BarCampGrandRapids4"&gt;stop on by&lt;/a&gt;!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7139226799188913085/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/barcampgr4-slides-available.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7139226799188913085'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7139226799188913085'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/barcampgr4-slides-available.html' title='BarCampGR4 Slides Available'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6501067069613962905</id><published>2009-08-20T09:37:00.002-04:00</published><updated>2009-08-20T09:52:19.535-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Where Has Steve Been?</title><content type='html'>&lt;p&gt;For those of you who are wondering why I haven't been blogging much the last few weeks, the biggest reason is &lt;a href="http://picasaweb.google.com/stephenandmandy/StephenDanielTheFirstYear?feat=directlink"&gt;right here&lt;/a&gt; - our first baby! He does keep us up at night, but he makes up for it by being cute!&lt;/p&gt;

&lt;p&gt;The other reason is that I'm preparing to give my first programming-related presentation ever. It will be on TCP/IP application protocol design, and will be given at &lt;a href="http://barcampgr.org/wiki/BarCampGrandRapids4"&gt;BarCamp Grand Rapids 4&lt;/a&gt; this weekend. I'll post a link to the slides sometime in the next few days.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6501067069613962905/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/where-has-steve-been.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6501067069613962905'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6501067069613962905'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/where-has-steve-been.html' title='Where Has Steve Been?'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4961528577129893207</id><published>2009-08-17T16:09:00.009-04:00</published><updated>2009-08-20T09:36:48.461-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Alternative GUIDs for mobile devices using SQL Server Compact</title><content type='html'>&lt;p&gt;This is a bit of an obscure topic, but something I had to work on recently. A company I work for does a lot of mobile (compact framework) projects, and all of them use SQL Server CE to store collected data in a database. This data is later synchronized up to a central machine. The synchronization (and other data access) right now is very slow on the devices, since they are using the same code for data access as the desktop applications. As part of a re-thinking of the data layer, I came up with a new type of GUID.&lt;/p&gt;

&lt;h4&gt;Anatomy of a Normal GUID and SqlGuid&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;GUIDs are 128 bits long (16 bytes), normally grouped into 4 bytes + 2 bytes + 2 bytes + 2 bytes + 6 bytes because of its &lt;a href="http://www.faqs.org/rfcs/rfc4122.html"&gt;RFC4122&lt;/a&gt; definition (time-low group, time-mid group, time-high-and-version group, clock-seq-high-and-reserved + clock-seq-low group, and node group).&lt;/li&gt;
&lt;li&gt;GUIDs are compared by SQL server as byte groups right-to-left, then each byte left-to-right within the group. (See &lt;a href="http://blogs.msdn.com/sqlprogrammability/archive/2006/11/06/how-are-guids-compared-in-sql-server-2005.aspx"&gt;http://blogs.msdn.com/sqlprogrammability/archive/2006/11/06/how-are-guids-compared-in-sql-server-2005.aspx&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;The performance benefits of a custom GUID generation based on time (even with most bits left random) are well known. (See &lt;a href="http://www.informit.com/articles/article.aspx?p=25862&amp;seqNum=7"&gt;http://www.informit.com/articles/article.aspx?p=25862&amp;seqNum=7&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;SQL server's newsequentialid() function actually does not return a standards-conforming (RFC 4122) GUID because it reverses the bytes in the first group. (See &lt;a href="http://www.jorriss.net/blog/jorriss/archive/2008/04/24/unraveling-the-mysteries-of-newsequentialid.aspx"&gt;http://www.jorriss.net/blog/jorriss/archive/2008/04/24/unraveling-the-mysteries-of-newsequentialid.aspx&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is that SQL Server Compact Edition does not support newsequentialid(), so I experimented with finding a replacement. UuidCreateSequential is not supported on CE/WM (though there have been some reports of people getting it working), so I decided to write my own GUID generation algorithm.&lt;/p&gt;

&lt;h4&gt;Design Constraints&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The system clock should be considered particularly unreliable; handheld devices often reset their time to a "zero point" after a hard reset.&lt;/li&gt;
&lt;li&gt;The presence of a MAC address can be assumed. All devices have the ability of network connectivity, though not always connected.&lt;/li&gt;
&lt;li&gt;However, the MAC address should not directly be placed in the result, due to security concerns.&lt;/li&gt;
&lt;li&gt;Efficiency of GUID generation is not a high concern; the goal is to produce sequential GUIDs that work well with SQL server indexing.&lt;/li&gt;
&lt;li&gt;Be RFC 4122 conforming if possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Considering RFC 4122 Conformity&lt;/h4&gt;

&lt;p&gt;The version 1 and 4 GUIDs are quite well known. Version 1 is unacceptable because of the exposure of the MAC address, although a 47-bit random number can be substituted. Version 4 does not have a sequential variant because it is fully random. Versions 3 and 5 are name-based GUIDs, but they use one-way hashing, so they are also not sequential.&lt;/p&gt;

&lt;p&gt;It is possible to use a RFC 4122 Version 1 GUID if the MAC address is replaced with a 47-bit random "node" number. However, the SQL Server ordering does not work nicely with the byte ordering of the timestamp in a Version 1 GUID; this is why the newsequentialid() function reverses the bytes in the first group. Technically, this makes it non-RFC 4122-conforming, but if we're going to set RFC 4122 aside, could we make a better GUID? All bits in an RFC 4122 GUID are either used or reserved, so we're going to start from scratch with a completely incompatible GUID structure.&lt;/p&gt;

&lt;h4&gt;An Alternative GUID&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The two most-significant bits are used for the version:
&lt;ul&gt;&lt;li&gt;Version 0 is a MAC-based sequential GUID.&lt;/li&gt;
&lt;li&gt;Version 1 is a random-based sequential GUID.&lt;/li&gt;
&lt;li&gt;Versions 2-3 are reserved.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We can generate a (system-wide) node value by hashing the lowest MAC address, or a 46-bit random value if the MAC address is unavailable. This should be changed whenever the MAC address changes.
&lt;ul&gt;&lt;li&gt;This creates a natural grouping "by source node" in SQL server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The clock sequence is similar to RFC 4122, only it is 20 bits instead of 14 bits, due to the higher possibility of clock resets in handheld devices.
&lt;ul&gt;&lt;li&gt;The clock sequence is incremented when the current timestamp is less than the last timestamp.&lt;/li&gt;
&lt;li&gt;The clock sequence is initialized to a random value when the node value changes (or is first calculated).&lt;/li&gt;
&lt;li&gt;This creates a subgrouping "by run" in SQL server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Timestamp is a 60-bit value identical to RFC 4122. The timestamp must be stored in a system-wide location.
&lt;ul&gt;&lt;li&gt;This creates a subgrouping "by time" in SQL server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;All fields are stored in little-endian instead of big-endian, to maximize the efficiency of SQL server's comparision algorithm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Non-volatile storage needs:
&lt;ul&gt;&lt;li&gt;Lowest MAC address on the device, and its hash; or, the random value used in place of the hash.&lt;/li&gt;
&lt;li&gt;Last clock sequence value.&lt;/li&gt;
&lt;li&gt;Last timestamp generated.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Implementation notes:
&lt;ul&gt;&lt;li&gt;RNGCryptoServiceProvider may be used for random number generation.&lt;/li&gt;
&lt;li&gt;Guid or SqlGuid may be used to hold the result.&lt;/li&gt;
&lt;li&gt;TimeSpan.Ticks may be used for timestamp calculations.&lt;/li&gt;
&lt;li&gt;There is no support for reading the MAC address; we'd have to p/Invoke iphlpapi.dll|GetAdaptersInfo.&lt;/li&gt;
&lt;li&gt;We would need a platform-specific method for non-volatile storage.&lt;/li&gt; 
&lt;li&gt;There is no support for named mutexes. We can p/Invoke CreateMutex from coredll.dll (using them as a WaitHandle instead of an unmanaged wait).&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;h4&gt;Final Words&lt;/h4&gt;

&lt;p&gt;This is just a rough draft of a replacement GUID design. These GUIDs are designed specifically for use as primary keys in a SQL Server database; they are not guaranteed to be unique when compared with normal GUIDs.&lt;/p&gt;

&lt;p&gt;Another application I'm working on is using the excellent ESENT embedded database built into Windows 2000 and higher (it's a portable application, so SQL Server CE isn't usable). ESENT has its own GUID ordering which is different than SQL Server, so I'll probably be using this GUID design with a different byte ordering on that platform.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4961528577129893207/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/alternative-guids-for-mobile-devices.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4961528577129893207'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4961528577129893207'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/alternative-guids-for-mobile-devices.html' title='Alternative GUIDs for mobile devices using SQL Server Compact'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2651760423943705974</id><published>2009-08-14T14:36:00.008-04:00</published><updated>2014-05-16T16:46:45.027-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><title type='text'>Gotchas from SynchronizationContext!</title><content type='html'>&lt;p&gt;This week, I've been designing a &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.aspx"&gt;SynchronizationContext&lt;/a&gt; equivalent for the Compact Framework as groundwork for sharing a layer of asynchronous service objects between desktop and mobile applications. I ran into two difficulties with its semantics. I've encountered both of these before, but now that I'm designing something nearly equivalent, I'm trying to fix them before they cause problems for others.&lt;/p&gt;

&lt;h4&gt;Gotcha #1: Reentrancy&lt;/h4&gt;

&lt;p&gt;Did you know that &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.send.aspx"&gt;SynchronizationContext.Send&lt;/a&gt; can directly invoke the delegate argument? You did? Ah, yes... the default implementation, mscorlib.dll:System.Threading.SynchronizationContext.Send does indeed invoke its delegate argument directly. This is a slightly obscure but not unheard-of fact.&lt;/p&gt;

&lt;p&gt;Now for the one that surprised me this week: &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.post.aspx"&gt;SynchronizationContext.Post&lt;/a&gt; can &lt;i&gt;also&lt;/i&gt; directly invoke its delegate argument! The evidence is in System.Web.dll:System.Web.AspNetSynchronizationContext.Post, which invokes its delegate argument directly.&lt;/p&gt;

&lt;p&gt;A careful reading of the SynchronizationContext documentation leads me to conclude that both Send and Post may result in reentrant behavior. Previously, I had assumed that Post (at least) would not be reentrant.&lt;/p&gt;

&lt;p&gt;If code for an asynchronous component needs to prevent reentrancy from a generic SynchronizationContext, it may easily do so by using the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.threadpool.aspx"&gt;ThreadPool&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// Provides extension methods for &amp;lt;see cref=&amp;quot;SynchronizationContext&amp;quot;/&amp;gt;.&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; SynchronizationContextExtensions
{
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Synchronously invokes a delegate by passing it to a &amp;lt;see cref=&amp;quot;SynchronizationContext&amp;quot;/&amp;gt;, waiting for it to complete.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;synchronizationContext&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;SynchronizationContext&amp;quot;/&amp;gt; to pass the delegate to. May not be null.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The delegate to invoke. May not be null.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;This method is guaranteed to not be reentrant.&amp;lt;/para&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; SafeSend(&lt;span class="keyword"&gt;this&lt;/span&gt; SynchronizationContext synchronizationContext, Action action)
    {
        &lt;span class="comment"&gt;// The semantics of SynchronizationContext.Send allow it to invoke the delegate directly, but we can&amp;#39;t allow that.&lt;/span&gt;
        Action forwardDelegate = () =&amp;gt; synchronizationContext.Send((state) =&amp;gt; action(), &lt;span class="keyword"&gt;null&lt;/span&gt;);
        IAsyncResult result = forwardDelegate.BeginInvoke(&lt;span class="keyword"&gt;null&lt;/span&gt;, &lt;span class="keyword"&gt;null&lt;/span&gt;);
        result.AsyncWaitHandle.WaitOne();
    }

    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Asynchronously invokes a delegate by passing it to a &amp;lt;see cref=&amp;quot;SynchronizationContext&amp;quot;/&amp;gt;, returning immediately.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;synchronizationContext&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;SynchronizationContext&amp;quot;/&amp;gt; to pass the delegate to. May not be null.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;action&amp;quot;&amp;gt;The delegate to invoke. May not be null.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;This method is guaranteed to not be reentrant.&amp;lt;/para&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; SafePost(&lt;span class="keyword"&gt;this&lt;/span&gt; SynchronizationContext synchronizationContext, Action action)
    {
        &lt;span class="comment"&gt;// The semantics of SynchronizationContext.Post allow it to invoke the delegate directly, but we can&amp;#39;t allow that.&lt;/span&gt;
        ThreadPool.QueueUserWorkItem((state) =&amp;gt; synchronizationContext.Post((state2) =&amp;gt; action(), &lt;span class="keyword"&gt;null&lt;/span&gt;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code or something similar may go into the next release of &lt;a href="http://www.codeplex.com/NitoAsync"&gt;Nito.Async&lt;/a&gt;. However, the code as-is will cause a deadlock when used with synchronization contexts that are sometimes reentrant (e.g., WindowsFormsSynchronizationContext.Send or DispatcherSynchronizationContext.Send if called from the specific thread associated with that synchronization context).&lt;/p&gt;

&lt;h4&gt;Gotcha #2: Non-exclusive execution&lt;/h4&gt;

&lt;p&gt;SynchronizationContext does not guarantee that delegates queued to it will be executed exclusively (one at a time). This is obvious; the default implementation (using the ThreadPool) will simply queue them to the ThreadPool, which will execute them in parallel.&lt;/p&gt;

&lt;p&gt;However, this brings up concerns when designing APIs for asynchronous components. In particular, cancellation becomes problematic.&lt;/p&gt;

&lt;p&gt;Some SynchronizationContext instances do execute exclusively: the &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.windowsformssynchronizationcontext.aspx"&gt;WindowsFormsSynchronizationContext&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.threading.dispatchersynchronizationcontext.aspx"&gt;DispatcherSynchronizationContext&lt;/a&gt; and &lt;a href="http://www.codeplex.com/NitoAsync"&gt;Nito.Async.ActionDispatcherSynchronizationContext&lt;/a&gt; all operate on some type of queue internally, which has a single thread processing requests one at a time.&lt;/p&gt;

&lt;p&gt;Most asynchronous components that use the &lt;a href="http://msdn.microsoft.com/en-us/library/wewwczdw.aspx"&gt;event-based asynchronous pattern (EBAP)&lt;/a&gt; - including Nito.Async classes - assume that SynchronizationContext will actually synchronize the delegates with some notion of an "originating thread". However, this is only true for SynchronizationContext instances that execute exclusively. So it works in most cases (Windows Forms, WPF, and explicit ActionDispatcher queues), but would fail in other cases (most notably ASP.NET and in free-threaded/ThreadPool contexts).&lt;/p&gt;

&lt;p&gt;There does not appear to be an EBAP solution that is Clean (keeping the EBAP design), Generic (working with any SynchronizationContext), and Safe (preventing event callbacks after cancellation). In fact, this is another manifestation of the &lt;a href="http://blog.stephencleary.com/2009/06/threadsafe-events.html"&gt;"thread-safe" events problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One approach is to break the EBAP design by passing callbacks to the &lt;i&gt;Operation&lt;/i&gt;Async method; a callback delegate can be made cancelable, returning an "ICancelable" to the caller. By enclosing the callback in a cancelable object, we can introduce a lock scope just for that single callback and its canceller. A (recursive) lock could be held during the delegate invokation and requested by ICancelable.Cancel; normally, holding locks during callbacks is A Fast Road To Pain, but with careful implementation it would work in this instance. This would be a Generic and Safe solution (works with any SynchronizationContext and guarantees not to invoke a callback after ICancelable.Cancel returns). Further development down this design path would yield something very similar to the &lt;a href="http://msdn.microsoft.com/en-us/library/system.threading.tasks.task(VS.100).aspx"&gt;Task&lt;/a&gt; class expected to be in .NET 4.0.&lt;/p&gt;

&lt;p&gt;A second approach is to break thread safety by using &lt;a href="http://blog.stephencleary.com/2009/06/threadsafe-events.html"&gt;"thread-safe events"&lt;/a&gt;, wrong solution #2: the EBAP component can queue a delegate that executes the &lt;i&gt;Operation&lt;/i&gt;Completed event from the component after copying it into a local variable. Cancelling the notification is possible by clearing the event, but the race condition means that the notification may be invoked after &lt;i&gt;Operation&lt;/i&gt;Cancel returns. This solution is Clean and Generic (keeps the &lt;i&gt;Operation&lt;/i&gt;Completed event on the EBAP class and works with any SynchronizationContext). Also, this solution is Safe as long as the SynchronizationContext executes exclusively.&lt;/p&gt;

&lt;p&gt;The third approach is to only support SynchronizationContext instances that execute exclusively. This approach is the one currently taken by Nito.Async EBAP components: each delegate is assumed to be synchronized when it is queued to the SynchronizationContext, and uses a &lt;a href="http://blog.stephencleary.com/2009/04/asynchronous-callback-contexts.html"&gt;callback context&lt;/a&gt; to determine if it has been cancelled. This solution is Clean and Safe (keeping the &lt;i&gt;Operation&lt;/i&gt;Completed event on the EBAP class and guarantees not to invoke it after &lt;i&gt;Operation&lt;/i&gt;Cancel returns).&lt;/p&gt;

&lt;h4&gt;The future&lt;/h4&gt;

&lt;p&gt;I'm a big fan of quiet cancellation over noisy cancellation. If I call "Cancel", then I don't need an event to tell me that I just called "Cancel". The entire Nito.Async library works on the same (quiet cancellation) principle. However, if noisy cancellation is embraced, then the Safe issue goes away (because noisy cancellation EBAP components cannot be Safe, by definition).&lt;/p&gt;

&lt;p&gt;Perhaps - just perhaps - the next version of Nito.Async will change to use noisy cancellation semantics. I'm still exploring alternatives. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2651760423943705974/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/08/gotchas-from-synchronizationcontext.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2651760423943705974'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2651760423943705974'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/gotchas-from-synchronizationcontext.html' title='Gotchas from SynchronizationContext!'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-91778858040501906</id><published>2009-07-28T20:23:00.004-04:00</published><updated>2013-05-17T22:10:18.511-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MVVM/WPF'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><title type='text'>SimplePropertyPath: A Poor Man's Binding</title><content type='html'>&lt;p&gt;This post illustrates one of several utility classes that are in the &lt;a href="http://nitomvvm.codeplex.com/"&gt;Nito.MVVM&lt;/a&gt; library: SimplePropertyPath.&lt;/p&gt;

&lt;p&gt;SimplePropertyPath is used to create a very simple binding using only &lt;a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx"&gt;INotifyPropertyChanged&lt;/a&gt; and not using &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.dependencyproperty.aspx"&gt;DependencyProperty&lt;/a&gt; or &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.dependencyobject.aspx"&gt;DependencyObject&lt;/a&gt;. The &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding.aspx"&gt;System.Windows.Data.Binding&lt;/a&gt; class is much more powerful, but is dependent on the WPF-specific dependency property/object system. SimplePropertyPath only uses INotifyPropertyChanged, which gives it two advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can be used in non-WPF environments with only minor changes, e.g., using the MVVM pattern on a compact device.&lt;/li&gt;
&lt;li&gt;It allows all ViewModel classes to be POCO (utilizing INotifyPropertyChanged) instead of forcing them to be derived from DependencyObject. (In my mind, at least, DependencyObject or FrameworkElement-derived classes are more of a View class).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SimplePropertyPath merely propagates an existing INotifyPropertyChanged implementation "forward" to other listeners, and propogates writes "back" to the original property. It is only capable of understanding a "simple" property path: one comprised entirely of member accessors.&lt;/p&gt;

&lt;p&gt;Some examples will help clarify how this class can be used; the following "fake ViewModel" class is used by these examples. It just has two properties: "int Value" and "FakeVM Child", and implements INotifyPropertyChanged:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; FakeVM : INotifyPropertyChanged
{
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; &lt;span class="keyword"&gt;value&lt;/span&gt;;
    &lt;span class="keyword"&gt;private&lt;/span&gt; FakeVM child;

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; Value
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;this&lt;/span&gt;.&lt;span class="keyword"&gt;value&lt;/span&gt;; }
        &lt;span class="keyword"&gt;set&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.&lt;span class="keyword"&gt;value&lt;/span&gt; = &lt;span class="keyword"&gt;value&lt;/span&gt;;
            &lt;span class="keyword"&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span class="string"&gt;&amp;quot;Value&amp;quot;&lt;/span&gt;);
        }
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; FakeVM Child
    {
        &lt;span class="keyword"&gt;get&lt;/span&gt; { &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;this&lt;/span&gt;.child; }
        &lt;span class="keyword"&gt;set&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.child = &lt;span class="keyword"&gt;value&lt;/span&gt;;
            &lt;span class="keyword"&gt;this&lt;/span&gt;.OnPropertyChanged(&lt;span class="string"&gt;&amp;quot;Child&amp;quot;&lt;/span&gt;);
        }
    }

    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; OnPropertyChanged(&lt;span class="keyword"&gt;string&lt;/span&gt; propertyName)
    {
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.PropertyChanged != &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.PropertyChanged(&lt;span class="keyword"&gt;this&lt;/span&gt;, &lt;span class="keyword"&gt;new&lt;/span&gt; PropertyChangedEventArgs(propertyName));
        }
    }

    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;event&lt;/span&gt; PropertyChangedEventHandler PropertyChanged;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The API of SimplePropertyPath is rather simple:&lt;/p&gt;

&lt;img style="margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 307px; height: 277px;" src="http://2.bp.blogspot.com/_lkN-6AUYgOI/Sm-WsjXaqvI/AAAAAAAACBY/0wfSTT1waVg/s400/SimplePropertyPath.png" border="0" alt="SimplePropertyPath Class Diagram" id="BLOGGER_PHOTO_ID_5363671373373418226" /&gt;

&lt;p&gt;The two properties "Root" and "Path" are used to define the SimplePropertyPath. The "Value" property is used to read or write the nested property.&lt;/p&gt;

&lt;p&gt;A simple example to start off with; to read or write the "Value" property on a FakeVM object:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;FakeVM obj = &lt;span class="keyword"&gt;new&lt;/span&gt; FakeVM { Value = 13 };
SimplePropertyPath path = &lt;span class="keyword"&gt;new&lt;/span&gt; SimplePropertyPath { Root = obj, Path = &lt;span class="string"&gt;&amp;quot;Value&amp;quot;&lt;/span&gt; };

Assert.AreEqual(13, path.Value);

path.Value = 17;
Assert.AreEqual(17, obj.Value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing too difficult there. The next example exercises reading and writing to a longer path:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;FakeVM obj = &lt;span class="keyword"&gt;new&lt;/span&gt; FakeVM { Child = &lt;span class="keyword"&gt;new&lt;/span&gt; FakeVM { Value = 10 } };
SimplePropertyPath path = &lt;span class="keyword"&gt;new&lt;/span&gt; SimplePropertyPath { Root = obj, Path = &lt;span class="string"&gt;&amp;quot;Child.Value&amp;quot;&lt;/span&gt; };

Assert.AreEqual(10, path.Value);

path.Value = 17;
Assert.AreEqual(17, obj.Child.Value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it's starting to act more like a real binding. Invalid property paths will result in a Value of null (writing errors to PresentationTraceSources.DataBindingSource just like WPF data binding does):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;FakeVM obj = &lt;span class="keyword"&gt;new&lt;/span&gt; FakeVM { Value = 13 };
SimplePropertyPath path = &lt;span class="keyword"&gt;new&lt;/span&gt; SimplePropertyPath { Root = obj, Path = &lt;span class="string"&gt;&amp;quot;value&amp;quot;&lt;/span&gt; };

Assert.IsNull(path.Value);

path.Value = 17;
Assert.AreEqual(13, obj.Value);
Assert.IsNull(path.Value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The "childmost" property is not the only one that is being monitored; SimplePropertyPath will monitor INotifyPropertyChanged for each object along the path:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;FakeVM obj = &lt;span class="keyword"&gt;new&lt;/span&gt; FakeVM { Child = &lt;span class="keyword"&gt;new&lt;/span&gt; FakeVM { Value = 100 } };
SimplePropertyPath path = &lt;span class="keyword"&gt;new&lt;/span&gt; SimplePropertyPath { Root = obj, Path = &lt;span class="string"&gt;&amp;quot;Child.Value&amp;quot;&lt;/span&gt; };

Assert.AreEqual(100, path.Value);

obj.Child = &lt;span class="keyword"&gt;new&lt;/span&gt; FakeVM { Value = 113 };
Assert.AreEqual(113, path.Value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, SimplePropertyPath will raise its own INotifyPropertyChanged for its Value property every time it changes, whether it was caused by a change in the "childmost" property or any of the objects along the path.&lt;/p&gt;

&lt;p&gt;SimplePropertyPath is used by the &lt;a href="http://nitomvvm.codeplex.com/"&gt;Nito.MVVM&lt;/a&gt; library as a building block to construct some of the more advanced classes, such as MultiProperty and MultiCommand. However, it can be useful in its own right.&lt;/p&gt;

&lt;p&gt;[Note: all of the examples above were copied almost verbatim from the unit tests in the Nito.MVVM library].&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/91778858040501906/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/07/this-post-illustrates-one-of-several.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/91778858040501906'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/91778858040501906'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/this-post-illustrates-one-of-several.html' title='SimplePropertyPath: A Poor Man&apos;s Binding'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/_lkN-6AUYgOI/Sm-WsjXaqvI/AAAAAAAACBY/0wfSTT1waVg/s72-c/SimplePropertyPath.png' height='72' width='72'/><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6811472591587999096</id><published>2009-07-21T15:29:00.002-04:00</published><updated>2009-07-24T22:16:42.341-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MVVM/WPF'/><title type='text'>First CodeProject Article on Nito.MVVM</title><content type='html'>&lt;p&gt;The &lt;a href="http://www.codeproject.com/KB/WPF/NitoMVVMCommands.aspx"&gt;first Nito.MVVM CodeProject article&lt;/a&gt; is up! This article describes the ICommand implementations that are in the &lt;a href="http://nitomvvm.codeplex.com/"&gt;Nito.MVVM library&lt;/a&gt;, along with some comparisions to existing work.&lt;/p&gt;

&lt;p&gt;The Nito.MVVM library is still a ways away from its first release, but what's there should be stable. Unit tests are included. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6811472591587999096/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/07/first-codeproject-article-on-nitomvvm.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6811472591587999096'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6811472591587999096'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/first-codeproject-article-on-nitomvvm.html' title='First CodeProject Article on Nito.MVVM'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226</id><published>2009-07-16T15:16:00.000-04:00</published><updated>2009-07-16T15:20:38.184-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MVVM/WPF'/><title type='text'>Interpreting NotifyCollectionChangedEventArgs</title><content type='html'>&lt;p&gt;If you've ever consumed &lt;a href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.inotifycollectionchanged.collectionchanged.aspx"&gt;INotifyCollectionChanged.CollectionChanged&lt;/a&gt;, then you've run into some inadequate documentation for &lt;a href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.notifycollectionchangedeventargs.aspx"&gt;NotifyCollectionChangedEventArgs&lt;/a&gt;. I've added the following information to the MSDN "community extensions" (my first contribution), but others have had problems with the stability of community extensions, so the results of my research and Reflector spelunking are also in this blog entry.&lt;/p&gt;

&lt;p&gt;In short, the value of the Action property determines the validity of other properties in this class. NewItems and OldItems are null when they are invalid; NewStartingIndex and OldStartingIndex are -1 when they are invalid.&lt;/p&gt;

&lt;p&gt;If Action is NotifyCollectionChangedAction.Add, then NewItems contains the items that were added. In addition, if NewStartingIndex is not -1, then it contains the index where the new items were added.&lt;/p&gt;

&lt;p&gt;If Action is NotifyCollectionChangedAction.Remove, then OldItems contains the items that were removed. In addition, if OldStartingIndex is not -1, then it contains the index where the old items were removed.&lt;/p&gt;

&lt;p&gt;If Action is NotifyCollectionChangedAction.Replace, then OldItems contains the replaced items and NewItems contains the replacement items. In addition, NewStartingIndex and OldStartingIndex are equal, and if they are not -1, then they contain the index where the items were replaced.&lt;/p&gt;

&lt;p&gt;If Action is NotifyCollectionChangedAction.Move, then NewItems and OldItems are logically equivalent (i.e., they are SequenceEqual, even if they are different instances), and they contain the items that moved. In addition, OldStartingIndex contains the index where the items were moved from, and NewStartingIndex contains the index where the items were moved to. Note that a Move operation is logically treated as a Remove followed by an Add, so NewStartingIndex is interpreted as though the items had already been removed.&lt;/p&gt;

&lt;p&gt;If Action is NotifyCollectionChangedAction.Reset, then no other properties are valid.&lt;/p&gt;

&lt;h4&gt;Sources&lt;/h4&gt;

&lt;p&gt;There are two blog entries that helped me get started: &lt;a href="http://blogs.msdn.com/xtof/archive/2008/02/10/making-sense-of-notifycollectionchangedeventargs.aspx"&gt;Making Sense of NotifyCollectionChangedEventArgs&lt;/a&gt; and &lt;a href="http://baumbartsjourney.wordpress.com/2009/06/01/an-alternative-to-observablecollection/"&gt;An Alternative to ObservableCollection&lt;/a&gt;. However, more details were still lacking; fortunately, Reflector saved the day! The primary .NET sources were: [WindowsBase.dll, 3.0.0.0] System.Collections.ObjectModel.ObservableCollection&amp;lt;T&amp;gt; - SetItem, RemoveItem, MoveItem, etc. and [PresentationFramework.dll, 3.0.0.0] System.Windows.Data.CollectionView - ProcessCollectionChanged, AdjustCurrencyFor*.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3160531574193759226/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html#comment-form' title='7 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' title='Interpreting NotifyCollectionChangedEventArgs'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>7</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-435541951735524578</id><published>2009-07-10T14:27:00.001-04:00</published><updated>2009-07-14T09:00:36.456-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Nito.WeakReference and Nito.WeakCollection</title><content type='html'>&lt;h4&gt;A Replacement for System.WeakReference&lt;/h4&gt;

&lt;p&gt;There are two minor problems with the &lt;a href="http://msdn.microsoft.com/en-us/library/system.weakreference.aspx"&gt;System.WeakReference&lt;/a&gt; class: type safety and garbage collection.&lt;/p&gt;

&lt;p&gt;The first one is a simple problem; System.WeakReference only deals with instances of type &lt;i&gt;object&lt;/i&gt;. However, it is not difficult to write a type-safe wrapper for System.WeakReference that provides type safety.&lt;/p&gt;

&lt;p&gt;The second problem is a little more subtle. A weak reference is a wrapper around a &lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.gchandle.aspx"&gt;System.Runtime.InteropServices.GCHandle&lt;/a&gt;. The core GCHandle type is both powerful and dangerous; it is halfway unmanaged. System.WeakReference provides a safer class that only uses GCHandle as a weak reference.&lt;/p&gt;

&lt;p&gt;The problem is that a GCHandle actually represents an entry in the runtime's GCHandle table. This table interacts with the garbage collector, preventing some objects from being GC'ed or moved. It is also used to create and track weak references. Logically, allocated GCHandles are unmanaged resources, and System.WeakReference does clean up its GCHandle correctly in its finalizer.&lt;/p&gt;

&lt;p&gt;However, System.WeakReference does not implement &lt;a href="http://msdn.microsoft.com/en-us/library/system.idisposable.aspx"&gt;System.IDisposable&lt;/a&gt;. This is not the end of the world, but it does place additional pressure on the garbage collector. It forces every System.WeakReference into an extra generation, holds the GCHandle table entry longer than necessary (possibly causing extra work for the garbage collector, since it must update the GCHandle table entry when that object is collected), and requires the finalizer thread to actually release the resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nitomvvm.codeplex.com/sourcecontrol/changeset/view/27265?projectName=NitoMVVM#453686"&gt;Nito.WeakReference&amp;lt;T&amp;gt;&lt;/a&gt; is a strongly-typed, disposable replacement for System.WeakReference. [Note, however, that Nito.WeakReference&amp;lt;T&amp;gt; does not support resurrection, which is a complex use case that is only required in very rare situations.]&lt;/p&gt;

&lt;h4&gt;A Simple Weak Collection&lt;/h4&gt;

&lt;p&gt;A weak collection (or more properly, a collection of weak references) at any given time may contain references to both live (referenced) and dead (garbage collected) objects. Removing all the dead objects is called a "purge". It's convenient to be able to enumerate the collection both with and without a purge. The &lt;a href="http://nitomvvm.codeplex.com/sourcecontrol/changeset/view/27265?projectName=NitoMVVM#453683"&gt;Nito.IWeakCollection&amp;lt;T&amp;gt;&lt;/a&gt; defines an interface for enumerable collections of weak references, and includes methods for enumerating or counting the collection both with and without purging. Some of its members include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;CompleteList&lt;/b&gt; - Gets a complete sequence of objects from the collection (null entries represent dead objects).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LiveList&lt;/b&gt; - Gets a sequence of live objects from the collection, causing a purge.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;CompleteCount&lt;/b&gt; - Gets the number of live and dead entries in the collection. O(1).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LiveCount&lt;/b&gt; - Gets the number of live entries in the collection, causing a purge. O(n).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://nitomvvm.codeplex.com/sourcecontrol/changeset/view/27265?projectName=NitoMVVM#453683"&gt;Nito.WeakCollection&amp;lt;T&amp;gt;&lt;/a&gt; is a List-based implementation of a weak collection. It is used by the Nito MVVM library to track weak events, but it should be useful in other situations as well.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/435541951735524578/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/07/nitoweakreference-and.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/435541951735524578'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/435541951735524578'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/nitoweakreference-and.html' title='Nito.WeakReference&lt;T&gt; and Nito.WeakCollection&lt;T&gt;'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167</id><published>2009-07-01T23:28:00.005-04:00</published><updated>2013-05-17T22:06:46.072-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><title type='text'>XML over TCP/IP</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;XML is a popular choice when designing communications protocols, since XML parsers are ubiquitous. The phrase "XML over TCP" makes a good executive summary, but this FAQ entry is concerned with how to actually make it work. One should always write an application protocol specification document to clearly define the actual communication.&lt;/p&gt;

&lt;p&gt;Anyone designing an XML protocol should have a good understanding of the terms. Familiarization with the &lt;a href="http://www.w3.org/TR/2008/REC-xml-20081126/"&gt;XML standard&lt;/a&gt; is a bonus; this FAQ entry will define most terms along the way, but the official definitions are in the relevant standards.&lt;/p&gt;

&lt;p&gt;When used as a communications protocol, XML does not usually use processing instructions or entities (except for the normal "escaping entities" such as &amp;amp;lt;, etc.). It also does not normally use XSDs or DTDs; XML used for communication is well-formed but not valid (see the XML standard for the definitions of these terms).&lt;/p&gt;

&lt;p&gt;This FAQ entry is laid out in a sequence of steps, but they do not necessarily have to be done in this sequence; in fact, the last step is often done first. However, they each &lt;i&gt;must&lt;/i&gt; be addressed in an application protocol specification, so they should be viewed more as a "checklist" than a "timeline". This advice should be considered additional to the general advice given in &lt;a href="http://blog.stephencleary.com/2009/06/application-protocol-specifications.html"&gt;Application Protocol Specifications&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Step 1: Encoding&lt;/h4&gt;

&lt;p&gt;XML documents are just a sequence of Unicode characters. However, TCP/IP works with streams of bytes. A translation must be made between Unicode characters and byte sequences, and this translation is called the &lt;i&gt;encoding&lt;/i&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Encoding:&lt;/b&gt; The translation used when converting a Unicode string to or from a byte sequence. The most common encodings are UTF-16 (which uses 2 bytes for most characters; it is recognizable because every other byte is "00" for normal English text) and UTF-8 (which uses 1 byte for normal English characters, but most characters take 2 or more bytes).
&lt;/blockquote&gt;

&lt;p&gt;The encoding may be detected one of several ways (if it is not specified in the application protocol document). A byte order mark may be used to detect the encoding in some situations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Byte Order Mark (BOM):&lt;/b&gt; A special Unicode character that is sometimes inserted at the beginning of a document as it is encoded. The UTF-16 encoding has little-endian and big-endian versions, so it requires a BOM. UTF-8, however, does not require a BOM.
&lt;/blockquote&gt;

&lt;p&gt;The XML file itself may include a prolog, which may specify the encoding being used. This is more difficult to work with, since the prolog itself must be interpreted heuristically by guessing at the encoding. Note that if an XML prolog exists that specifies an incorrect encoding, Microsoft's XML parsers may get confused (this often happens when reading XML from a string or writing XML to a string).&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;XML Prolog:&lt;/b&gt; The "&amp;lt;?xml ... ?&amp;gt;" element at the beginning of some XML files, specifying the XML version and (optionally) the encoding used.
&lt;/blockquote&gt;

&lt;p&gt;Normally, the application protocol document specifies the encoding; this is simpler than dealing with automatically detecting the encoding. If it does specify the encoding, it should also specify whether a BOM should be present, or if a prolog is allowed to specify the encoding. A common choice is "UTF-8 without BOM or prolog", which makes the encoding always UTF-8 without a byte order mark or XML prolog.&lt;/p&gt;

&lt;h4&gt;Working with the System.Text.Encoding class&lt;/h4&gt;

&lt;p&gt;The encoding for an output may be specified by using the XmlWriterSettings class. This is the preferred way to create XmlWriters. Encodings for inputs may also be forced; this is done if the remote side sends incorrect XML prologs, causing problems with XmlReaders.&lt;/p&gt;

&lt;p&gt;Always translate XML to and from byte arrays, not strings. The System.String class actually uses an encoding itself (UTF-16). Using strings as an intermediary between byte arrays and XML classes may cause problems because of this additional encoding; encoding the string to and from a byte array will not update the XML prolog. An encoding may be given to an XmlWriterSettings class, but as the &lt;a href="http://msdn.microsoft.com/en-us/library/system.xml.xmlwritersettings.encoding.aspx"&gt;documentation for XmlWriterSettings.Encoding&lt;/a&gt; states, any encoding on a stream will override that setting. For this reason, it is better to use XmlWriters with a MemoryStream, which does not have an encoding.&lt;/p&gt;

&lt;p&gt;Each instance of an Encoding object must make another choice: whether to throw an exception on invalid input bytes or silently replace them (with the Unicode replacement character U+FFFD, which looks like '?' in a diamond). The default is to silently replace, but this is not generally recommended when implementing application protocols. The example code in this FAQ entry will always use encodings that throw exceptions.&lt;/p&gt;

&lt;p&gt;The following sample code takes an XElement and an Encoding, and translates the XML to a byte array (not including an XML prolog):&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;byte&lt;/span&gt;[] ConvertXmlToByteArray(XElement xml, Encoding encoding)
{
    &lt;span class="keyword"&gt;using&lt;/span&gt; (MemoryStream stream = &lt;span class="keyword"&gt;new&lt;/span&gt; MemoryStream())
    {
        XmlWriterSettings settings = &lt;span class="keyword"&gt;new&lt;/span&gt; XmlWriterSettings();
        &lt;span class="comment"&gt;// Add formatting and other writer options here if desired&lt;/span&gt;
        settings.Encoding = encoding;
        settings.OmitXmlDeclaration = &lt;span class="keyword"&gt;true&lt;/span&gt;; &lt;span class="comment"&gt;// No prolog&lt;/span&gt;
        &lt;span class="keyword"&gt;using&lt;/span&gt; (XmlWriter writer = XmlWriter.Create(stream, settings))
        {
            xml.Save(writer);
        }
        &lt;span class="keyword"&gt;return&lt;/span&gt; stream.ToArray();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When reading XML from a byte array, one may either use an XmlReader or a StreamReader. Using an XmlReader allows incoming XML to use any encoding; however, it will get confused if the XML has an incorrect encoding specified in its prolog. Using a StreamReader will force the byte array to be interpreted according to a particular encoding, but does not allow any other encodings.&lt;/p&gt;

&lt;p&gt;If the application protocol specification does not specify an encoding, then the XmlReader must be used. Incorrect XML prologs cannot be allowed. The following sample code allows any encoding:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;XElement ConvertByteArrayToXml(&lt;span class="keyword"&gt;byte&lt;/span&gt;[] data)
{
    &lt;span class="comment"&gt;// Interpret the byte array allowing any encoding&lt;/span&gt;
    XmlReaderSettings settings = &lt;span class="keyword"&gt;new&lt;/span&gt; XmlReaderSettings();
    &lt;span class="comment"&gt;// Add validation and other reader options here if desired&lt;/span&gt;
    &lt;span class="keyword"&gt;using&lt;/span&gt; (MemoryStream stream = &lt;span class="keyword"&gt;new&lt;/span&gt; MemoryStream(data))
    &lt;span class="keyword"&gt;using&lt;/span&gt; (XmlReader reader = XmlReader.Create(stream, settings))
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; XElement.Load(reader);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the application protocol specification does specify a particular encoding, then using a StreamReader will allow incorrect XML prologs. The following sample code forces a specific encoding:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;XElement ConvertByteArrayToXml(&lt;span class="keyword"&gt;byte&lt;/span&gt;[] data, Encoding encoding)
{
    &lt;span class="comment"&gt;// Interpret the byte array according to a specific encoding&lt;/span&gt;
    &lt;span class="keyword"&gt;using&lt;/span&gt; (MemoryStream stream = &lt;span class="keyword"&gt;new&lt;/span&gt; MemoryStream(data))
    &lt;span class="keyword"&gt;using&lt;/span&gt; (StreamReader reader = &lt;span class="keyword"&gt;new&lt;/span&gt; StreamReader(stream, encoding, &lt;span class="keyword"&gt;false&lt;/span&gt;))
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; XElement.Load(reader);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default &lt;a href="http://msdn.microsoft.com/en-us/library/system.text.encoding.unicode.aspx"&gt;Encoding.Unicode&lt;/a&gt; (UTF-16 little endian), &lt;a href="http://msdn.microsoft.com/en-us/library/system.text.encoding.bigendianunicode.aspx"&gt;Encoding.BigEndianUnicode&lt;/a&gt; (UTF-16 big endian), and &lt;a href="http://msdn.microsoft.com/en-us/library/system.text.encoding.utf8.aspx"&gt;Encoding.UTF8&lt;/a&gt; instances always write out BOMs and never throw on errors. A better choice is to create instances of &lt;a href="http://msdn.microsoft.com/en-us/library/system.text.unicodeencoding.aspx"&gt;UnicodeEncoding&lt;/a&gt; (UTF-16) or &lt;a href="http://msdn.microsoft.com/en-us/library/system.text.utf8encoding.aspx"&gt;UTF8Encoding&lt;/a&gt; that are more suitable for application protocols. For example, "new UTF8Encoding(false, true)" will create a UTF-8 encoding without BOM that throws on invalid characters.&lt;/p&gt;

&lt;h4&gt;Step 2: Message Framing&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://blog.stephencleary.com/2009/04/message-framing.html"&gt;Message framing&lt;/a&gt; is highly recommended for XML messages. Technically, message framing is not strictly necessary, but reading XML from a socket without message framing is extremely difficult (the message must be considered complete when the root node is closed).&lt;/p&gt;

&lt;p&gt;When sending, message framing is actually applied after the encoding, so the message framing wraps a byte array. Similarly, when receiving, message framing is applied directly to the received data, and each message (consisting of a byte array) is then passed through the encoding to produce XML.&lt;/p&gt;

&lt;h4&gt;Step 3: Keepalives&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html"&gt;Keepalive messages&lt;/a&gt; are usually necessary. Having a keepalive message defined in the application protocol specification often removes the need for separate timers when implementing the protocol.&lt;/p&gt;

&lt;p&gt;XML keepalive messages (e.g., "&amp;lt;keepalive/&amp;gt;") are not normally used. Usually, a keepalive message may be sent by using the message framing to send an empty (zero-length) message.&lt;/p&gt;

&lt;h4&gt;Step 4: Messages&lt;/h4&gt;

&lt;p&gt;Once the encoding, message framing, and keepalive options have all been chosen, then there is a framework over which XML messages may be exchanged. For each XML message, the following information should be included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the message is meaningful (e.g., a "Response" should only be sent in response to a "Request").&lt;/li&gt;
&lt;li&gt;Which attributes and elements are required and which are optional. This includes complex relations (e.g., a "Log" element must contain at least one "Message" element and exactly one "Source" element). Be sure to use terms with specific definitions ("at least one", "exactly one", etc).&lt;/li&gt;
&lt;li&gt;The format of non-string data such as dates, booleans, and integers. Often, this type of "formatting data" is defined globally near the top of the application protocol specification, and applies to each possible message type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many protocols are based on a request/response or subscription/event model. One thing to watch out for is if the protocol elements begin looking like generic or object-oriented function calls, as though one side is accessing a remote object (e.g., "&amp;lt;CallMethod ObjectID='37' MethodName='GetData'/&amp;gt;"). At this point, the protocol will devolve into something eventually looking like SOAP. There's nothing wrong with SOAP, but there's no need to re-invent the wheel. If that level of abstraction is truly necessary, then just use SOAP instead of creating a separate protocol.&lt;/p&gt;

&lt;h4&gt;Recommendations&lt;/h4&gt;

&lt;p&gt;A choice must be made for encoding, message framing, and keepalives.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The encoding is usually "any" or "UTF-8 without BOM or prolog", but could be anything.&lt;/li&gt;
&lt;li&gt;A common choice for message framing is "4-byte (un)signed little-endian integer length prefix". Delimeter-based message framing may also be used for XML by appointing illegal XML characters to be the delimiters, and scanning for them during decoding (however, this is very difficult to do if the encoding is "any").&lt;/li&gt;
&lt;li&gt;Since most XML protocols use length prefixing, most of them also choose "length prefix of 0 with no message" for keepalives.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One final note: nothing helps track down interfacing errors like verbose logging. It's recommended to log the byte arrays sent and received as well as the actual XML messages. Logging is your friend. :)&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7858157923334325167/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html#comment-form' title='11 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' title='XML over TCP/IP'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>11</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4261467966553024377</id><published>2009-06-30T15:14:00.001-04:00</published><updated>2013-05-17T10:21:02.006-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Application Protocol Specifications</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When designing an application protocol, one should publish an application protocol specification document. Having a clearly-defined specification helps prevent errors on both sides.&lt;/p&gt;

&lt;h4&gt;Versioning&lt;/h4&gt;

&lt;p&gt;The application protocol specification document should include the protocol version number to which it applies. Protocols change over time as additional requirements are added.&lt;/p&gt;

&lt;p&gt;There should also be a way for the protocol to perform some form of version negotiation. Usually, it is enough to have one side send a list of supported versions, and have the other side respond with the chosen version.&lt;/p&gt;

&lt;p&gt;This is a bit of up-front work, but allows partial upgrades in the future without breaking backwards compatibility. When two separate vendors or teams are producing applications on different sides of the protocol, or if the protocol is an open specification, then version negotiation becomes much more important.&lt;/p&gt;

&lt;h4&gt;Terminology&lt;/h4&gt;

&lt;p&gt;The most important words in a specification are "must" and "may". When used consistently, these terms convey specific meanings. "Must" is used when an implementation &lt;i&gt;absolutely&lt;/i&gt; must obey the specification. "May" is used when an implementation &lt;i&gt;optionally&lt;/i&gt; may obey the specification.&lt;/p&gt;

&lt;p&gt;When possible, use long-established terminology. The key reference for this is &lt;a href="http://www.ietf.org/rfc/rfc2119.txt"&gt;RFC 2119&lt;/a&gt;, which unambiguously defines MUST, MAY, SHOULD, etc. However, other standards often come into play; e.g., the Unicode standard has unambiguous definitions for "character", "code point", and "encoding", which are important to distinguish when writing an unambiguous protocol specification. Any special terms should be identified in the document, along with a reference to the defining standard.&lt;/p&gt;

&lt;h4&gt;Server and Client: First Contact&lt;/h4&gt;

&lt;p&gt;The first question that is often answered when writing a TCP/IP protocol is: who contacts whom? More specifically, one side must be chosen as the &lt;i&gt;server&lt;/i&gt; and the other side as the &lt;i&gt;client&lt;/i&gt;. In some cases, the choice of client and server sides is obvious. For other applications, it really doesn't matter which side is chosen for which role. Very loosely coupled applications (following more of a peer-to-peer model) may even act as a client, server, or both (for the same protocol).&lt;/p&gt;

&lt;p&gt;Note that &lt;i&gt;client&lt;/i&gt; and &lt;i&gt;server&lt;/i&gt; only have meaning when the connection is being established. Once the TCP/IP connection is established, it will allow either side to send data to the other side at any time.&lt;/p&gt;

&lt;p&gt;Usually, it is the responsibility of the server side to accept any incoming connections at any time; and it is the responsibility of the client side to retry dropped connections after a timeout. This timeout may be specified in the application protocol document, or it may be left as an implementation detail.&lt;/p&gt;

&lt;h4&gt;Choosing the Port&lt;/h4&gt;

&lt;p&gt;The application protocol document should include the port number used for that protocol. Choosing a port number should be done with care; one must consider reserved port ranges as well as ephemeral port ranges. Ephemeral port ranges must be considered because any random client socket may be given a port in that range, and a server would be unable to bind on its port if that port was already being used by a client socket.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www.iana.org/assignments/port-numbers"&gt;Internet Assigned Numbers Authority&lt;/a&gt; has reserved ports 0-1023 for specific, well-known protocols. A port in this range should never be used unless it is registered with IANA.&lt;/p&gt;

&lt;p&gt;IANA has also reserved ports 1024-49151 in a similar manner (requiring registration). However, most people ignore this, and treat the 1024-49151 port range as available except for their ephemeral port ranges.&lt;/p&gt;

&lt;p&gt;Ephemeral port ranges are trickier, since &lt;a href="http://en.wikipedia.org/wiki/Ephemeral_port"&gt;different operating systems use different ranges&lt;/a&gt;. Windows systems use 1025 to 5000 by default, but the upper value &lt;a href="http://technet.microsoft.com/en-us/library/bb878133.aspx"&gt;may be changed&lt;/a&gt; via the registry.&lt;/p&gt;

&lt;p&gt;In short, private Windows protocols (used only within a certain network) may pick a port from the range 5001-65535, with preference given to higher port numbers (so that individual machines may increase their MaxUserPort registry setting). If Linux compatibility is necessary, the range becomes 5001-32767 and 61001-65535, again prefering higher port numbers.&lt;/p&gt;

&lt;p&gt;Public (published) protocols should be registered with IANA and use the assigned port in the 1024-49151 range. As of this writing, both Windows' and Linux's ephemeral port ranges overlap with this reserved range, so some extra action may need to be taken to prevent any possibility of conflicts (i.e., Windows' ReservedPorts registry key; see &lt;a href="http://support.microsoft.com/default.aspx/kb/812873"&gt;KB812873&lt;/a&gt; or &lt;a href="http://technet.microsoft.com/en-us/library/bb878133.aspx"&gt;The Cable Guy, Dec 2005&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Note: It is highly recommended that the port be configurable by the end user or administrator. Currently, there are not many "well-behaved" programs when it comes to choosing ports, so it is greatly beneficial to give the network admin the ability to change the port.&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4261467966553024377/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/06/application-protocol-specifications.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4261467966553024377'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4261467966553024377'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/application-protocol-specifications.html' title='Application Protocol Specifications'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9184802602754741911</id><published>2009-06-19T22:27:00.004-04:00</published><updated>2013-05-17T10:17:30.058-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><title type='text'>Threadsafe Events</title><content type='html'>&lt;p&gt;Disclaimer: &lt;i&gt;This blog entry only deals with the common case of instance events; static events are ignored. Furthermore, the contents of this blog entry are 100% my own opinion. However, it is the opinion of someone who has specialized in multithreading for 13 years.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;When writing components in a multithreaded world, one question that commonly crops up is, "how do I make my events threadsafe?" The asker is usually concerned with threadsafe subscription and unsubscription, but threadsafe raising must also be taken into consideration.&lt;/p&gt;

&lt;h4&gt;The Wrong Solution #1, from the C# Language Specification&lt;/h4&gt;

&lt;p&gt;The C# language authors attempted to make event subscription and unsubscription threadsafe by default. To do so, they allow (but do not require) locking on &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;this&lt;/span&gt;&lt;/code&gt;, which is generally considered bad. This code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;event&lt;/span&gt; MyEventHandler MyEvent;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Logically becomes this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; MyEventHandler __MyEvent;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;event&lt;/span&gt; MyEventHandler MyEvent
{
    &lt;span class="keyword"&gt;add&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;lock&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.__MyEvent += &lt;span class="keyword"&gt;value&lt;/span&gt;;
        }
    }

    &lt;span class="keyword"&gt;remove&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;lock&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.__MyEvent -= &lt;span class="keyword"&gt;value&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chris Burrows, a Microsoft developer on the C# compiler team, explains why this is bad in his blog post &lt;a href="http://blogs.msdn.com/cburrows/archive/2008/02/18/field-like-events-considered-harmful.aspx"&gt;Field-like Events Considered Harmful&lt;/a&gt;. His blog post covers the reasoning thoroughly, so it won't be repeated here.&lt;/p&gt;

&lt;blockquote&gt;&lt;b&gt;Minor rant:&lt;/b&gt; The Java language fell into the same trap; see &lt;a href="http://wiki.apidesign.org/wiki/Java_Monitor"&gt;Practical API Design's Java Monitor page&lt;/a&gt;. Why is it that some language designers believe they can declaratively solve multithreading problems? If the solution was really as simple as that, then why haven't other people already figured it out? Multithreaded programming has consumed some of the brightest minds for decades, and it's &lt;i&gt;hard&lt;/i&gt;. Language designers can't make multithreading complexities go away by sprinkling some magical fairy powder, even if they name the powder &lt;code class="csharp"&gt;MethodImplOptions.Synchronized&lt;/code&gt;. In fact, most of the time they're just making it worse.
&lt;/blockquote&gt;

&lt;p&gt;Pretend for a minute that locking on &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;this&lt;/span&gt;&lt;/code&gt; is OK. It actually &lt;i&gt;would&lt;/i&gt; work, after all; it just raises the likelihood of unexpected deadlocks. It's also possible that a future C# compiler may lock on a super-secret private field instead of &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;this&lt;/span&gt;&lt;/code&gt;. However, even if the &lt;i&gt;implementation&lt;/i&gt; is OK, the &lt;i&gt;design&lt;/i&gt; is still flawed. The problem becomes clear when one ponders how to raise the event in a threadsafe manner.&lt;/p&gt;

&lt;p&gt;This is the standard, simple, and logical event-raising code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.MyEvent != &lt;span class="keyword"&gt;null&lt;/span&gt;)
{
    &lt;span class="keyword"&gt;this&lt;/span&gt;.MyEvent(&lt;span class="keyword"&gt;this&lt;/span&gt;, args);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there are multiple threads subscribing to and unsubscribing from an event, then the built-in field-like event locking works &lt;i&gt;only&lt;/i&gt; for subscribing and unsubscribing. The event raising code exposes a problem: if another thread unsubscribes from the event after the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;if&lt;/span&gt;&lt;/code&gt; statement but before the event is raised, then this code may result in a NullReferenceException!&lt;/p&gt;

&lt;p&gt;So, it turns out that "thread-safe" events weren't really thread-safe. Moving on...&lt;/p&gt;

&lt;h4&gt;The Wrong Solution #2, from the Framework Design Guidelines and MSDN&lt;/h4&gt;

&lt;p&gt;One solution to the problem described above is to make a copy of the event delegate before testing it. The event raising code becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;MyEventHandler myEvent = &lt;span class="keyword"&gt;this&lt;/span&gt;.MyEvent;
&lt;span class="keyword"&gt;if&lt;/span&gt; (myEvent != &lt;span class="keyword"&gt;null&lt;/span&gt;)
{
    myEvent(&lt;span class="keyword"&gt;this&lt;/span&gt;, args);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the solution used by &lt;a href="http://msdn.microsoft.com/en-us/library/w369ty8x.aspx"&gt;MSDN examples&lt;/a&gt; and recommended by the semi-standard &lt;a href="http://www.amazon.com/gp/product/0321545613?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321545613"&gt;Framework Design Guidelines&lt;/a&gt; (my 2nd edition has it on page 157, but the relevant section of the book is available online &lt;a href="http://blogs.msdn.com/brada/archive/2005/01/14/353132.aspx"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This solution is simple, obvious, and wrong. [By the way, I'm not dissing Framework Design Guidelines. They have lots of good advice, and I don't mean to be critical of the book in general. They're just mistaken in this particular recommendataion.]&lt;/p&gt;

&lt;p&gt;Programmers without a strong background in multithreaded programming may not immediately detect why this solution is wrong. Delegates are immutable reference types, so the local variable copy is atomic; no problem there. The problem exists in the memory model: it is possible that an out-of-date value for the delegate field is held in one processor's cache. Without going into a painful level of detail, in order to ensure that one is reading the current value of a non-volatile field, one must either issue a memory barrier or wrap the copy operation within a lock (and it must be the same lock acquired by the event add/remove methods).&lt;/p&gt;

&lt;p&gt;In short, this solution does prevent the NullReferenceException race condition; but it introduces &lt;i&gt;another&lt;/i&gt; race condition in its place (raising an unsubscribed event handler).&lt;/p&gt;

&lt;h4&gt;The Wrong Solution #3, from Jon Skeet&lt;/h4&gt;

&lt;p&gt;[OK, let me say this first: Jon Skeet is an awesome programmer. I highly recommend his book &lt;a href="http://www.amazon.com/gp/product/1933988363?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1933988363"&gt;C# in Depth&lt;/a&gt; to &lt;i&gt;anyone and everyone using C#&lt;/i&gt; (I own the first edition and will buy the 2nd as soon as it comes out; he's writing it now and I'm so excited!). I follow his blog. I highly respect the man, and I can't believe my first mention of him on my blog is in a negative light... However, he did come up with a wrong solution for thread-safe events. To give him credit, though, he ended his paper recommending the right solution!]&lt;/p&gt;

&lt;p&gt;Jon Skeet has a great treatment of this subject in his paper &lt;a href="http://www.yoda.arachsys.com/csharp/events.html"&gt;Delegates and Events&lt;/a&gt; (you may wish to skip to the section titled "Thread-safe events"). He covers everything that I've described above, but then proceeds on to propose another wrong solution. He dislikes the memory barrier solution (as do I), and attempts to solve it by wrapping the copy operation within the lock. As Jon points out, the event add/remove methods &lt;i&gt;may&lt;/i&gt; lock &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;this&lt;/span&gt;&lt;/code&gt; or they could lock something else (remember, a future C# compiler may choose to lock on a super-secret private field instead). So, the default add/remove methods have to be replaced with ones that perform an explicit lock, as such:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;object&lt;/span&gt; myEventLock = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;object&lt;/span&gt;();
&lt;span class="keyword"&gt;private&lt;/span&gt; MyEventHandler myEvent;
&lt;span class="keyword"&gt;public&lt;/span&gt; MyEventHandler MyEvent
{
    &lt;span class="keyword"&gt;add&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;lock&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.myEventLock)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.myEvent += &lt;span class="keyword"&gt;value&lt;/span&gt;;
        }
    }

    &lt;span class="keyword"&gt;remove&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;lock&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.myEventLock)
        {
            &lt;span class="keyword"&gt;this&lt;/span&gt;.myEvent -= &lt;span class="keyword"&gt;value&lt;/span&gt;;
        }
    }
}

&lt;span class="keyword"&gt;protected&lt;/span&gt; &lt;span class="keyword"&gt;virtual&lt;/span&gt; OnMyEvent(MyEventArgs args)
{
    MyEventHandler localMyEvent;
    &lt;span class="keyword"&gt;lock&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.myEventLock)
    {
        localMyEvent = &lt;span class="keyword"&gt;this&lt;/span&gt;.myEvent;
    }

    &lt;span class="keyword"&gt;if&lt;/span&gt; (localMyEvent != &lt;span class="keyword"&gt;null&lt;/span&gt;)
    {
        localMyEvent(&lt;span class="keyword"&gt;this&lt;/span&gt;, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's a fair amount of code for a single event! Some people have even written helper objects to reduce the amount of code. Before jumping on that bandwagon, though, remember that this solution is also wrong.&lt;/p&gt;

&lt;p&gt;There is &lt;i&gt;still&lt;/i&gt; a race condition.&lt;/p&gt;

&lt;p&gt;Specifically, it is possible that the value of &lt;code class="csharp"&gt;myEvent&lt;/code&gt; is modified after it has been read into &lt;code class="csharp"&gt;localMyEvent&lt;/code&gt; but before it is raised. This can result in an unsubscribed handler being invoked, which could be problematic. So, this solution does solve the last solution's problem (with the memory model and processor cache), but it turns out there was an underlying race condition anyway (this same problem does affect the other two solutions above, too).&lt;/p&gt;

&lt;h4&gt;The Wrong Solution #4, from Nobody (but just in case you were thinking about it!)&lt;/h4&gt;

&lt;p&gt;A natural response is to extend the &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;lock&lt;/span&gt;&lt;/code&gt; statement in Jon's code to include raising the event. That does prevent the race condition problem from all the solutions described above, but it introduces a more serious problem.&lt;/p&gt;

&lt;p&gt;If this solution is used, then an event handler cannot wait on another thread that is attempting to subscribe or unsubscribe a handler to the same event. In other words, it's the original "unexpected deadlock" story (the same reason why locking on &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;this&lt;/span&gt;&lt;/code&gt; is bad). Jon does make a note of this in &lt;a href="http://www.yoda.arachsys.com/csharp/events.html"&gt;Delegates and Events&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To my knowledge, no one has proposed this as a solution. In general, the community seems to favor solutions that fail "loudly" (with exceptions) instead of failing "silently" (with a deadlock).&lt;/p&gt;

&lt;h4&gt;Why All Solutions are Wrong, by Stephen Cleary (that's me!)&lt;/h4&gt;

&lt;p&gt;"Callbacks" (usually events in C#) have always been problematic for multithreaded programming. This is because a good rule of thumb for component design is: &lt;b&gt;Do your best to allow the event handler to do &lt;i&gt;anything.&lt;/i&gt;&lt;/b&gt; Since "communicate with another thread that is attempting to take any lock" is one example of "anything", a natural corollary of this rule is: &lt;b&gt;Never hold locks during callbacks.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is the reasoning behind why locking on exposed objects (such as &lt;code class="csharp"&gt;&lt;span class="keyword"&gt;this&lt;/span&gt;&lt;/code&gt;) is considered bad practice (see &lt;a href="http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx"&gt;MSDN: lock Statement&lt;/a&gt;). Holding that lock while raising an event (such as solution 4 does) makes the bad practice even worse.&lt;/p&gt;

&lt;p&gt;To review, all the solutions above fail in one of two situations.&lt;/p&gt;

&lt;p&gt;Solutions 1-3 above all fail the same use case:
&lt;ul&gt;
&lt;li&gt;Thread A will raise the event.&lt;/li&gt;
&lt;li&gt;Thread B subscribes a handler to the event. The handler code depends on a resource.&lt;/li&gt;
&lt;li&gt;Thread A begins to raise the event. Immediately before the delegate is invoked, Thread A is preempted by Thread B.&lt;/li&gt;
&lt;li&gt;Thread B no longer needs the event notification, so it unsubscribes the handler from the event and disposes of the resource.&lt;/li&gt;
&lt;li&gt;Thread A proceeds to raise the event (that has been unsubscribed). The handler code depends on a resource that has now been disposed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;Solution 4 fails this use case:
&lt;ul&gt;
&lt;li&gt;Thread A will raise the event.&lt;/li&gt;
&lt;li&gt;Thread B subscribes a handler to the event. The handler code communicates with Thread C.&lt;/li&gt;
&lt;li&gt;Thread A begins to raise the event. Immediately before the delegate is invoked, Thread A is preempted by Thread C.&lt;/li&gt;
&lt;li&gt;Thread C subscribes a handler to the event. Thread C blocks.&lt;/li&gt;
&lt;li&gt;Thread A proceeds to raise the event. The handler code cannot communicate with Thread C because it is blocked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;A general-purpose "thread-safe event" solution does not exist - at least, not using the synchronization primitives we currently have at our disposal. The implementation &lt;i&gt;must&lt;/i&gt; either have a race condition or deadlock possibility. A lock can prevent contention (solving the race condition), but only if it is held during the raising of the event (possibly causing deadlock). Alternatively, an unadorned raised event does not have the possibility of a deadlock, but loses the guarantees of the lock (causing a race condition).&lt;/p&gt;

&lt;p&gt;A &lt;i&gt;general-purpose&lt;/i&gt; solution does not exist, but it &lt;i&gt;is&lt;/i&gt; possible to solve the problem for a specific event by imposing special requirements on the user. Some of the solutions above may work if one places restrictions on the event handlers.&lt;/p&gt;

&lt;p&gt;Solution 3 (and solution 2 in Microsoft's current implementations) works if the event handler is coded to handle the situation where it is invoked after it has unsubscribed from the event. It is not difficult to write a handler this way; &lt;a href="http://blog.stephencleary.com/2009/04/asynchronous-callback-contexts.html"&gt;asynchronous callback contexts&lt;/a&gt; would help with the implementation. The drawback is that each event handler must include multithread-awareness code, which complicates the method.&lt;/p&gt;

&lt;p&gt;Solution 4 may also be made to work if the event handler does not block on a thread that subscribes to or unsubscribes from that same event. For simplicity, APIs that take this route often just state that event handlers may not block. The drawback is that this can be difficult to guarantee, since many objects hide their locking logic from their callers.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;A general-purpose solution does not exist, and all other solutions have serious drawbacks (placing severe restrictions on the actions available to the event handler).&lt;/p&gt;

&lt;p&gt;For this reason, I recommend the same approach that Jon Skeet ends up recommending at the end of &lt;a href="http://www.yoda.arachsys.com/csharp/events.html"&gt;Delegates and Events&lt;/a&gt;: "don't do that", i.e., don't use events in a multithreaded fashion. If an event exists on an object, then only one thread should be able to subscribe to or unsubscribe from that event, and it's the same thread that will raise the event.&lt;/p&gt;

&lt;p&gt;One nice side effect of this approach is that the code becomes much simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;event&lt;/span&gt; MyEventHandler MyEvent;

&lt;span class="keyword"&gt;protected&lt;/span&gt; &lt;span class="keyword"&gt;virtual&lt;/span&gt; OnMyEvent(MyEventArgs args)
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.MyEvent != &lt;span class="keyword"&gt;null&lt;/span&gt;)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.MyEvent(&lt;span class="keyword"&gt;this&lt;/span&gt;, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Efficiency freaks can go one step further and explicitly implement the backing field, add handler, and remove handler. By removing the default locking (which is useless), the code is more explicit but also more efficient:&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;private&lt;/span&gt; MyEventHandler myEvent;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;event&lt;/span&gt; MyEventHandler MyEvent
{
    &lt;span class="keyword"&gt;add&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.myEvent += &lt;span class="keyword"&gt;value&lt;/span&gt;;
    }

    &lt;span class="keyword"&gt;remove&lt;/span&gt;
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.myEvent -= &lt;span class="keyword"&gt;value&lt;/span&gt;;
    }
}

&lt;span class="keyword"&gt;protected&lt;/span&gt; &lt;span class="keyword"&gt;virtual&lt;/span&gt; OnMyEvent(MyEventArgs args)
{
    &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.myEvent != &lt;span class="keyword"&gt;null&lt;/span&gt;)
    {
        &lt;span class="keyword"&gt;this&lt;/span&gt;.myEvent(&lt;span class="keyword"&gt;this&lt;/span&gt;, args);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another side effect is that this type of event handling forces one towards &lt;a href="http://msdn.microsoft.com/en-us/library/hkasytyf.aspx"&gt;Event-Based Asynchronous Programming&lt;/a&gt; (or something very similar to it). EBAP is a logical conclusion for asynchronous object design, yielding maximal reusability. EBAP is also more consistent with regards to normal object concurrency restrictions: "Public static members of this type are thread safe. Any instance members are not guaranteed to be thread safe." Events that can only be accessed by one thread follow this common pattern; the event, as an instance member, is not guaranteed to be thread safe.&lt;/p&gt;

&lt;p&gt;A third side effect takes longer to realize: more correct communication among threads. Instead of various threads directly subscribing to events (which would be run on another thread anyway), one must implement some form of thread communication. This forces the programmer to more clearly state the requirements from each thread's perspective, and this in turn results in less buggy multithreading code. Usually, more appropriate ways for thread communciation are found. The event subscription model is naturally discarded as a thread communication method (due to its inherent unsuitability) in favor of much more proven design patterns. This will eventually result in more correct multithreading code, though the process requires a minor redesign.&lt;/p&gt;

&lt;h4&gt;A Final Note&lt;/h4&gt;

&lt;p&gt;As of this writing, it is still popular to promote solution 2 (copy the delegate before raising the event). However, I strongly discourage this practice; it makes the code more obscure, and provides a false sense of security because it &lt;i&gt;does not solve the problem!&lt;/i&gt; It is far better to simply not have "thread-safe events".&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9184802602754741911/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/06/threadsafe-events.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9184802602754741911'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9184802602754741911'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/threadsafe-events.html' title='Threadsafe Events'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7634204289692406306</id><published>2009-06-13T12:50:00.000-04:00</published><updated>2014-05-16T16:47:43.399-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Using Socket as a Connected Socket</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A connected socket is one which has a connection to the remote side. When a client socket connects to a listening server socket, the result is two connected sockets: the client socket becomes connected, and the listening server creates a new socket that is connected. For more details about establishing or listening for socket connections, see &lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html"&gt;Using Socket as a Client Socket&lt;/a&gt; and &lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html"&gt;Using Socket as a Server (Listening) Socket&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Important note: &lt;/b&gt; A socket only &lt;i&gt;believes&lt;/i&gt; it is currently connected; it can never know for sure. It is possible for one side of a connection to realize it is no longer connected, while the other side continues believing it is connected. This is called the "half-open problem", and is covered in detail in &lt;a href="http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html"&gt;Detection of Half-Open (Dropped) Connections&lt;/a&gt;.
&lt;/blockquote&gt;

&lt;p&gt;There are two primary operations performed on connected sockets: Read and Write. Connected sockets may also Disconnect or Close the connection; these operations will be covered in more detail in a future FAQ entry.&lt;/p&gt;

&lt;h4&gt;Writing&lt;/h4&gt;

&lt;p&gt;A socket may be written to at any time. A Write operation places bytes into the outgoing stream. If using asynchronous Write operations, multiple Write operations may be started, and the bytes will be placed into the outgoing stream in the correct order.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Important note: &lt;/b&gt; The completion of a Write operation does &lt;i&gt;not&lt;/i&gt; mean that the remote side has received the data.
&lt;/blockquote&gt;

&lt;p&gt;The Write operation completes when the local OS has copied the entire write buffer, even though those bytes may not have been sent out on the network yet. Beginning TCP programmers often balk at this, because they think that they &lt;i&gt;must know&lt;/i&gt; if data has been received by the remote side. This reaction is called "send anxiety", and will be covered in a future FAQ entry.&lt;/p&gt;

&lt;p&gt;Write operations may not complete immediately. TCP allows one side to inform the other side of how much buffer space it has; therefore, if the remote application is reading the bytes slowly, then the socket's send buffer may fill up, and the socket may not send the outgoing bytes immediately. In fact, it is possible to end up in a deadlock situation if both sides send lots of data but read only a little. This is one reason why seasoned socket programmers almost always use asynchronous Write operations instead of synchronous.&lt;/p&gt;

&lt;p&gt;A Write operation may (immediately) fail; this is the most common way to detect dropped connections. When a Write operation fails, the application should assume that the connection is no longer viable; see &lt;a href="http://blog.stephencleary.com/2009/05/error-handling.html"&gt;Error Handling&lt;/a&gt; for details.&lt;/p&gt;

&lt;h4&gt;Error Detection&lt;/h4&gt;

&lt;p&gt;It is possible that the Write operation may fail &lt;i&gt;after&lt;/i&gt; it completes. TCP has a built-in retry mechanism, so the Write will only fail if it is quite sure the connection is no longer viable. In this situation, there is not a way for the OS to signal the application, so the it places the socket into an error state. This causes future socket operations to fail.&lt;/p&gt;

&lt;p&gt;Most TCP protocols include a notion of a "keepalive message" which is written to the socket periodically (at least if there has been no other socket activity for some time). This enables the application to detect socket errors from "successful" Write operations that later failed. It also enables the application to detect lost connections, preventing the "half-open problem". Keepalive messages are discussed in more detail in &lt;a href="http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html"&gt;Detection of Half-Open (Dropped) Connections&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Reading&lt;/h4&gt;

&lt;p&gt;As long as the socket is connected, the OS is constantly reading on behalf of the application (unless the socket's receive buffer has been disabled). The incoming bytes are stored in the socket's receive buffer and held there until the application starts a Read operation. It is possible to start more than one asynchronous Read operation at a time, but this is strongly discouraged because the operations may complete out of order.&lt;/p&gt;

&lt;p&gt;When an application performs a Read operation, it is requesting to read &lt;i&gt;N&lt;/i&gt; bytes from a socket. The OS will not wait until all &lt;i&gt;N&lt;/i&gt; bytes arrive; rather, it may complete the Read operation when it has at least one byte to return to the application. When an application requests to Read &lt;i&gt;N&lt;/i&gt; bytes, it actually receives at least one byte and at most &lt;i&gt;N&lt;/i&gt; bytes. This clears out the OS receive buffers faster and gets the data to the application sooner, but this also means that the application must deal with "partial receives". Common ways of handling this are covered in &lt;a href="http://blog.stephencleary.com/2009/04/message-framing.html"&gt;Message Framing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is important for an application to Read from the connection on a regular basis, to prevent the deadlock situation described above under "Writing". For this reason, experienced socket programmers usually have a single asynchronous Read operation &lt;i&gt;always&lt;/i&gt; running on a connected socket. Whenever the Read operation completes, another asynchronous Read operation is started.&lt;/p&gt;

&lt;p&gt;Another advantage of reading constantly is that misbehaving applications are immediately detected. Most protocols have certain times when it would be an error for the remote side to send data. If the application does not constantly Read, then any data arriving at that time would be treated as data arriving at a later time. It is easier to debug misbehaving applications if the incoming data is read and logged at the time it arrives at the socket.&lt;/p&gt;

&lt;h4&gt;Reading Zero Bytes&lt;/h4&gt;

&lt;p&gt;Many stream-oriented objects (including sockets) will signal the end of the stream by returning 0 bytes in response to a Read operation. This means that the remote side of the connection has gracefully closed the connection, and the socket should be closed.&lt;/p&gt;

&lt;p&gt;The zero-length read &lt;i&gt;must&lt;/i&gt; be treated as a special case; if it is not, the receiving code usually enters an infinite loop attempting to read more data. A zero-length read is not an error condition; it merely means that the socket has been disconnected.&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Important note: &lt;/b&gt; Most of the MSDN .NET socket examples do &lt;i&gt;not&lt;/i&gt; handle this correctly! They will enter an infinite loop if the socket is closed by the remote side.
&lt;/blockquote&gt;

&lt;h4&gt;Disconnecting&lt;/h4&gt;

&lt;p&gt;Either side of a socket connection may initiate a Disconnect operation or Close the socket. Once one side of the connection starts disconnecting, the socket is no longer fully connected. It is possible for it to be partially connected for some time; this state is called "half-closed". Disconnecting socket connections (including the half-closed state) will be covered in a future FAQ entry.&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7634204289692406306/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html#comment-form' title='6 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html' title='Using Socket as a Connected Socket'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>6</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6128614336078479037</id><published>2009-06-12T19:13:00.002-04:00</published><updated>2009-06-13T12:52:13.551-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='MSBuild'/><title type='text'>MSBuild.ExtensionPack Accepts DynamicExecute Task</title><content type='html'>&lt;p&gt;Sorry for the lack of blog postings lately. I have been busy the last week polishing, refactoring, and documenting my first (and hopefully only) MSBuild custom task: DynamicExecute. DynamicExecute makes it possible to define and execute .NET methods using MSBuild 3.5.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://freetodev.spaces.live.com/default.aspx"&gt;Mike Fourie&lt;/a&gt; has &lt;a href="http://freetodev.spaces.live.com/blog/cns!EC3C8F2028D842D5!927.entry"&gt;accepted&lt;/a&gt; DynamicExecute for the next release of the &lt;a href="http://msbuildextensionpack.codeplex.com/"&gt;MSBuild Extension Pack&lt;/a&gt;. It's available as Beta in the source code download until the next official release, when it will be included in the regular binaries.&lt;/p&gt;

&lt;p&gt;DynamicExecute is similar to the inline tasks that are planned for MSBuild 4.0. Both DynamicExecute and inline tasks allow a build master to write C# code within the build script that is compiled and then executed as part of the build. There are a few differences, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DynamicExecute does not support referencing an assembly in the GAC by a partial name. e.g., the CTP of MSBuild 4.0 allows an assembly reference of "System.Windows.Forms", whereas DynamicExecute requires the full name "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089". Local assemblies may be referenced by short name, however. (This is not actually considered a limitation of DynamicExecute; loading GAC assemblies by partial names is &lt;a href="TODO"&gt;not a good idea&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Once an inline task is created using the task factory, it may be referenced directly just like any other task. DynamicExecute methods must be called using the DynamicExecute task.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DynamicExecute does have one big advantage, though: it can be used now. :) Documentation (temporarily) is available online &lt;a href="http://www.msbuildextensionpack.com/help/3.5.4.0/temp/dynamicexecute.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6128614336078479037/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/06/msbuildextensionpack-accepts.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6128614336078479037'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6128614336078479037'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/msbuildextensionpack-accepts.html' title='MSBuild.ExtensionPack Accepts DynamicExecute Task'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1386133579838467798</id><published>2009-06-02T20:29:00.004-04:00</published><updated>2013-05-17T10:06:50.403-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><category scheme='http://www.blogger.com/atom/ns#' term='MSBuild'/><title type='text'>MSBuild: A Real-World Recursive Application</title><content type='html'>&lt;p&gt;I recently posted on this blog a "toy application" of MSBuild that &lt;a href="http://blog.stephencleary.com/2009/05/msbuild-factorial.html"&gt;calculates factorials&lt;/a&gt;. Well, this weekend I was working on the new build script for the &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async library&lt;/a&gt;, and surprised myself by finding an actual real-world application for this code!&lt;/p&gt;

&lt;p&gt;It turns out that this is useful when autogenerating publisher policies. Nito.Async follows a simple &lt;i&gt;major.minor&lt;/i&gt; version numbering scheme, where changes in &lt;i&gt;minor&lt;/i&gt; are always fully backwards-compatible and changes in &lt;i&gt;major&lt;/i&gt; never are. Publisher policies are a way of declaring backwards compatibility for strongly-named assemblies in the GAC (more info on &lt;a href="http://msdn.microsoft.com/en-us/library/dz32563a.aspx"&gt;MSDN&lt;/a&gt; and in &lt;a href="http://support.microsoft.com/kb/891030"&gt;KB891030&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To autogenerate publisher policies for a version &lt;i&gt;maj.min&lt;/i&gt;, the build script must build a separate dll for each version in the range [&lt;i&gt;maj&lt;/i&gt;.0, &lt;i&gt;maj.min&lt;/i&gt;). It turns out that the recursive behavior in my "factorial.proj" toy was exactly what I needed; I just changed the return value to concatenate a list of numbers instead of multiplying them together.&lt;/p&gt;

&lt;p&gt;There was one other small hurdle to overcome; I had to perform a cross product of two different item groups (the list of "previous minor versions" and the list of library dlls). This is not exactly straightforward in MSBuild, and is a common question (just Google for "MSBuild cross product").&lt;/p&gt;

&lt;p&gt;The updated build script for Nito.Async has been checked into CodePlex, so if you want to see the details on how this works, you can view it online &lt;a href="http://nitoasync.codeplex.com/SourceControl/changeset/view/17989#324550"&gt;here&lt;/a&gt;. I'm not going to post it on the blog here, for sake of space.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1386133579838467798/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/06/msbuild-real-world-recursive.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1386133579838467798'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1386133579838467798'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/msbuild-real-world-recursive.html' title='MSBuild: A Real-World Recursive Application'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1698488373399837718</id><published>2009-05-28T19:52:00.003-04:00</published><updated>2014-05-16T16:49:20.095-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><category scheme='http://www.blogger.com/atom/ns#' term='MSBuild'/><title type='text'>MSBuild: Factorial!</title><content type='html'>&lt;p&gt;I've been doing some exploring of MSBuild as a programming language. There are some interesting results regarding mutability/immutability, but that's for another post.&lt;/p&gt;

&lt;p&gt;This post is about functions. In particular, a Target may be invoked using the MSBuild task, so I'm exploring using Targets as functions. MSBuild can pass parameters to a Target by sending it Properties. Property changes are not propogated back to the caller, though, so getting a return value is a bit trickier.&lt;/p&gt;

&lt;p&gt;It turns out that MSBuild does return one bit of information from a Target: its Outputs. It's possible to set the Outputs of a Target to a Property, and have that Target depend on another Target that sets that Property. In this way, it is possible to create a pair of Targets that can "calculate" the outer Target's Outputs.&lt;/p&gt;

&lt;p&gt;By combining these approaches (setting Properties for arguments, and using the Target's Outputs as a return value), it is possible to treat a Target as a function.&lt;/p&gt;

&lt;p&gt;To demonstrate, I wrote this program, which uses MSBuild to recursively calculate the factorial of the $(Input) property. Have fun playing!&lt;/p&gt;

&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;&lt;span class="Element"&gt;Project&lt;/span&gt; &lt;span class="AttrName"&gt;ToolsVersion&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;xmlns&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="Element"&gt;Import&lt;/span&gt; &lt;span class="AttrName"&gt;Project&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(MSBuildExtensionsPath)\ExtensionPack\MSBuild.ExtensionPack.tasks&amp;quot;&lt;/span&gt;/&amp;gt;

  &lt;span class="Comment"&gt;&amp;lt;!-- Factorial program using MSBuild recursively --&amp;gt;&lt;/span&gt;

  &amp;lt;&lt;span class="Element"&gt;Target&lt;/span&gt; &lt;span class="AttrName"&gt;Name&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Default&amp;quot;&lt;/span&gt;&amp;gt;
    &lt;span class="Comment"&gt;&amp;lt;!-- Display usage --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;Error&lt;/span&gt; &lt;span class="AttrName"&gt;Condition&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;'$(Input)' == ''&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Text&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Usage: msbuild factorial.proj [/nologo] [/clp:v=minimal] /p:Input=nnn&amp;quot;&lt;/span&gt;/&amp;gt;

    &lt;span class="Comment"&gt;&amp;lt;!-- Argument error checking --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;MSBuild.ExtensionPack.Science.Maths&lt;/span&gt; &lt;span class="AttrName"&gt;TaskAction&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Compare&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;P1&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(Input)&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;P2&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Comparison&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;LessThan&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Output&lt;/span&gt; &lt;span class="AttrName"&gt;TaskParameter&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;LogicalResult&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;PropertyName&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;InputCheck&amp;quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;MSBuild.ExtensionPack.Science.Maths&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;Error&lt;/span&gt; &lt;span class="AttrName"&gt;Condition&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;'$(InputCheck)' != 'False'&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Text&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Input cannot be less than 1.&amp;quot;&lt;/span&gt;/&amp;gt;

    &lt;span class="Comment"&gt;&amp;lt;!-- Invoke the Factorial target with the current Input property --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;MSBuild&lt;/span&gt; &lt;span class="AttrName"&gt;Projects&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(MSBuildProjectFile)&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Targets&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Factorial&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Properties&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Input=$(Input)&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Output&lt;/span&gt; &lt;span class="AttrName"&gt;TaskParameter&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;TargetOutputs&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;ItemName&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;FactorialResult&amp;quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;MSBuild&lt;/span&gt;&amp;gt;

    &lt;span class="Comment"&gt;&amp;lt;!-- Display the result --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;Message&lt;/span&gt; &lt;span class="AttrName"&gt;Importance&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;high&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Text&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Result: @(FactorialResult)&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;Target&lt;/span&gt;&amp;gt;

  &lt;span class="Comment"&gt;&amp;lt;!-- The Factorial target uses FactorialCore to do the calculation, storing the result in FactorialResult --&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="Element"&gt;Target&lt;/span&gt; &lt;span class="AttrName"&gt;Name&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Factorial&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;DependsOnTargets&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;FactorialCore&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Outputs&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(FactorialResult)&amp;quot;&lt;/span&gt; /&amp;gt;

  &amp;lt;&lt;span class="Element"&gt;Target&lt;/span&gt; &lt;span class="AttrName"&gt;Name&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;FactorialCore&amp;quot;&lt;/span&gt;&amp;gt;
    &lt;span class="Comment"&gt;&amp;lt;!-- If the input is 1, then the factorial is 1 --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;PropertyGroup&lt;/span&gt; &lt;span class="AttrName"&gt;Condition&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;'$(Input)' == '1'&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;FactorialResult&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span class="Element"&gt;FactorialResult&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;PropertyGroup&lt;/span&gt;&amp;gt;

    &lt;span class="Comment"&gt;&amp;lt;!-- If we don't know the result yet (i.e., the input is not 1), then calculate the factorial --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;CallTarget&lt;/span&gt; &lt;span class="AttrName"&gt;Condition&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;'$(FactorialResult)' == ''&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Targets&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;CalculateFactorial&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;Target&lt;/span&gt;&amp;gt;

  &amp;lt;&lt;span class="Element"&gt;Target&lt;/span&gt; &lt;span class="AttrName"&gt;Name&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;CalculateFactorial&amp;quot;&lt;/span&gt;&amp;gt;
    &lt;span class="Comment"&gt;&amp;lt;!-- Subtract 1 from $(Input) --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;MSBuild.ExtensionPack.Science.Maths&lt;/span&gt; &lt;span class="AttrName"&gt;TaskAction&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Subtract&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Numbers&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(Input);1&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Output&lt;/span&gt; &lt;span class="AttrName"&gt;TaskParameter&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Result&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;PropertyName&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;InputMinus1&amp;quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;MSBuild.ExtensionPack.Science.Maths&lt;/span&gt;&amp;gt;

    &lt;span class="Comment"&gt;&amp;lt;!-- Determine the factorial of $(Input) - 1 --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;MSBuild&lt;/span&gt; &lt;span class="AttrName"&gt;Projects&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(MSBuildProjectFile)&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Targets&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Factorial&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Properties&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Input=$(InputMinus1)&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Output&lt;/span&gt; &lt;span class="AttrName"&gt;TaskParameter&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;TargetOutputs&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;ItemName&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;SubResult&amp;quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;MSBuild&lt;/span&gt;&amp;gt;

    &lt;span class="Comment"&gt;&amp;lt;!-- Multiply !($(Input) - 1) by $(Input) to get the result--&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;MSBuild.ExtensionPack.Science.Maths&lt;/span&gt; &lt;span class="AttrName"&gt;TaskAction&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Multiply&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Numbers&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;@(SubResult);$(Input)&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Output&lt;/span&gt; &lt;span class="AttrName"&gt;TaskParameter&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Result&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;PropertyName&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;FactorialResult&amp;quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;MSBuild.ExtensionPack.Science.Maths&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;Target&lt;/span&gt;&amp;gt;

  &lt;span class="Comment"&gt;&amp;lt;!-- Maybe I just have way too much time on my hands... --&amp;gt;&lt;/span&gt;
&amp;lt;/&lt;span class="Element"&gt;Project&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;msbuild factorial.proj /nologo /clp:v=minimal /p:Input=5&lt;/b&gt;&lt;/p&gt;
&lt;blockquote&gt;Default:&lt;br/&gt;
&amp;#160; Result: 120
&lt;/blockquote&gt;

&lt;p&gt;&lt;b&gt;msbuild factorial.proj /nologo /clp:v=minimal /p:Input=7&lt;/b&gt;&lt;/p&gt;
&lt;blockquote&gt;Default:&lt;br/&gt;
&amp;#160; Result: 5040
&lt;/blockquote&gt;

&lt;p&gt;Useless, but cool nonetheless.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1698488373399837718/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-factorial.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1698488373399837718'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1698488373399837718'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-factorial.html' title='MSBuild: Factorial!'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6092653129381802230</id><published>2009-05-28T00:27:00.003-04:00</published><updated>2013-05-17T19:08:22.923-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><category scheme='http://www.blogger.com/atom/ns#' term='MSBuild'/><title type='text'>MSBuild: ItemGroup Metadata Inversion</title><content type='html'>&lt;p&gt;Sometimes it's useful to treat a piece of metadata as though it were the actual item. This is particularly true if the metadata refers to a file location, so one could pull well-known metadata off the metadata value.&lt;/p&gt;

&lt;p&gt;MSBuild does not support metadata having metadata. However, an "inversion" can be performed, where a new ItemGroup is created with the metadata as the primary item entry. The example below also places the original ItemGroup Identity as metadata on the new ItemGroup entries, creating a bidirectional mapping.&lt;/p&gt;

&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;&lt;span class="Element"&gt;Project&lt;/span&gt; &lt;span class="AttrName"&gt;ToolsVersion&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;xmlns&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="Element"&gt;Import&lt;/span&gt; &lt;span class="AttrName"&gt;Project&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(MSBuildExtensionsPath)\ExtensionPack\MSBuild.ExtensionPack.tasks&amp;quot;&lt;/span&gt;/&amp;gt;
 
  &amp;lt;&lt;span class="Element"&gt;ItemGroup&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt; &lt;span class="AttrName"&gt;Include&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;First&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;ProjectFile&lt;/span&gt;&amp;gt;one.sln&amp;lt;/&lt;span class="Element"&gt;ProjectFile&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt; &lt;span class="AttrName"&gt;Include&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Second&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;ProjectFile&lt;/span&gt;&amp;gt;two.sln&amp;lt;/&lt;span class="Element"&gt;ProjectFile&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt; &lt;span class="AttrName"&gt;Include&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Third&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;ProjectFile&lt;/span&gt;&amp;gt;three.sln&amp;lt;/&lt;span class="Element"&gt;ProjectFile&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;ItemGroup&lt;/span&gt;&amp;gt;
 
  &amp;lt;&lt;span class="Element"&gt;Target&lt;/span&gt; &lt;span class="AttrName"&gt;Name&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Default&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;ItemGroup&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;ProjectFiles&lt;/span&gt; &lt;span class="AttrName"&gt;Include&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;%(ProjectDefinitions.ProjectFile)&amp;quot;&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span class="Element"&gt;ProjectDefinition&lt;/span&gt;&amp;gt;@(ProjectDefinitions-&amp;gt;'%(Identity)')&amp;lt;/&lt;span class="Element"&gt;ProjectDefinition&lt;/span&gt;&amp;gt;
      &amp;lt;/&lt;span class="Element"&gt;ProjectFiles&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;ItemGroup&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;Message&lt;/span&gt; &lt;span class="AttrName"&gt;Text&lt;/span&gt;=&lt;span class="AttrValue"&gt;quot;Project files: @(ProjectFiles) (definitions: @(ProjectFiles-&amp;gt;'%(ProjectDefinition)'))&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;Target&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class="Element"&gt;Project&lt;/span&gt;&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;Project files: one.sln;two.sln;three.sln (definitions: First;Second;Third)&lt;/blockquote&gt;

&lt;p&gt;Note that you do have to watch your grouping; if the metadata being inverted is not unique for all entries in the original ItemGroup, then some entries in the resulting ItemGroup will have multi-valued metadata for their "original Identity" values.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6092653129381802230/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-itemgroup-metadata-inversion.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6092653129381802230'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6092653129381802230'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-itemgroup-metadata-inversion.html' title='MSBuild: ItemGroup Metadata Inversion'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8348903232134988171</id><published>2009-05-27T23:51:00.003-04:00</published><updated>2014-05-16T16:50:18.559-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><category scheme='http://www.blogger.com/atom/ns#' term='MSBuild'/><title type='text'>MSBuild: Filtering an ItemGroup based on a Property</title><content type='html'>&lt;p&gt;I started playing with MSBuild this weekend. It's a little under-documented for my taste, but seems rather powerful. It has a strange combination of functional and procedural styles which make some simple tasks relatively complex.&lt;/p&gt;

&lt;p&gt;This is the first in what I hope will be a series of posts of solutions that I've worked through for MSBuild. Keep in mind that I am still an MSBuild beginner, so there may be a better way to solve these problems.&lt;/p&gt;

&lt;h4&gt;The Problem&lt;/h4&gt;

&lt;p&gt;Given one ItemGroup (including metadata), how can one choose a subset of the items, keeping metadata intact? The subset is determined by a property that is actually a list of keys.&lt;/p&gt;

&lt;h4&gt;The Solution&lt;/h4&gt;

&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;&lt;span class="Element"&gt;Project&lt;/span&gt; &lt;span class="AttrName"&gt;ToolsVersion&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;3.5&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;xmlns&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class="Element"&gt;Import&lt;/span&gt; &lt;span class="AttrName"&gt;Project&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(MSBuildExtensionsPath)\ExtensionPack\MSBuild.ExtensionPack.tasks&amp;quot;&lt;/span&gt;/&amp;gt;
 
  &amp;lt;&lt;span class="Element"&gt;ItemGroup&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt; &lt;span class="AttrName"&gt;Include&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;First&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Argument&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span class="Element"&gt;Argument&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt; &lt;span class="AttrName"&gt;Include&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Second&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Argument&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span class="Element"&gt;Argument&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt; &lt;span class="AttrName"&gt;Include&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Third&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Argument&lt;/span&gt;&amp;gt;3&amp;lt;/&lt;span class="Element"&gt;Argument&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;ProjectDefinitions&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;ItemGroup&lt;/span&gt;&amp;gt;
 
  &amp;lt;&lt;span class="Element"&gt;PropertyGroup&lt;/span&gt;&amp;gt;
    &lt;span class="Comment"&gt;&amp;lt;!-- By default, only build the first and third projects; this property may be overridden on the command line with the &amp;quot;/p&amp;quot; argument --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;Projects&lt;/span&gt;&amp;gt;First;Third&amp;lt;/&lt;span class="Element"&gt;Projects&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;PropertyGroup&lt;/span&gt;&amp;gt;
 
  &amp;lt;&lt;span class="Element"&gt;Target&lt;/span&gt; &lt;span class="AttrName"&gt;Name&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Default&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;DependsOnTargets&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;DetermineProjectsToBuild&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="Element"&gt;Message&lt;/span&gt; &lt;span class="AttrName"&gt;Text&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Projects to build: @(Projects) (arguments: @(Projects-&amp;gt;'%(Argument)'))&amp;quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;Target&lt;/span&gt;&amp;gt;
  
  &lt;span class="Comment"&gt;&amp;lt;!--
  Determines which projects to build, based off the ProjectDefinitions items and the Projects property. Calculates the following item group:
    Projects - containing all ProjectDefinitions specified in the Projects property, with all metadata intact.
  --&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="Element"&gt;Target&lt;/span&gt; &lt;span class="AttrName"&gt;Name&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;DetermineProjectsToBuild&amp;quot;&lt;/span&gt;&amp;gt;
    &lt;span class="Comment"&gt;&amp;lt;!-- Split the Projects property up into an item group ProjectNamesToBuild that has one entry per item name --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;MSBuild.ExtensionPack.Framework.MSBuildHelper&lt;/span&gt; &lt;span class="AttrName"&gt;TaskAction&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;StringToItemCol&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;ItemString&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;$(Projects)&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;Separator&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Output&lt;/span&gt; &lt;span class="AttrName"&gt;TaskParameter&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;OutputItems&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;ItemName&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;ProjectNamesToBuild&amp;quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;MSBuild.ExtensionPack.Framework.MSBuildHelper&lt;/span&gt;&amp;gt;
 
    &lt;span class="Comment"&gt;&amp;lt;!-- Build the Projects item group by looking up the project names in the ProjectDefinitions item group --&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="Element"&gt;FindInList&lt;/span&gt; &lt;span class="AttrName"&gt;CaseSensitive&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;List&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;@(ProjectDefinitions)&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;ItemSpecToFind&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;%(ProjectNamesToBuild.Identity)&amp;quot;&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class="Element"&gt;Output&lt;/span&gt; &lt;span class="AttrName"&gt;TaskParameter&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;ItemFound&amp;quot;&lt;/span&gt; &lt;span class="AttrName"&gt;ItemName&lt;/span&gt;=&lt;span class="AttrValue"&gt;&amp;quot;Projects&amp;quot;&lt;/span&gt;/&amp;gt;
    &amp;lt;/&lt;span class="Element"&gt;FindInList&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class="Element"&gt;Target&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class="Element"&gt;Project&lt;/span&gt;&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;Projects to build: First;Third (arguments: 1;3)&lt;/blockquote&gt;

&lt;p&gt;By default, this example decides to build the first and third projects. However, passing &lt;i&gt;/p:Projects="First;Second"&lt;/i&gt; will change to the first and second projects (shown below). The metadata is preserved, as shown by displaying the arguments.&lt;/p&gt;

&lt;blockquote&gt;Projects to build: First;Second (arguments: 1;2)&lt;/blockquote&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/8348903232134988171/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-filtering-itemgroup-based-on.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8348903232134988171'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/8348903232134988171'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-filtering-itemgroup-based-on.html' title='MSBuild: Filtering an ItemGroup based on a Property'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128</id><published>2009-05-27T23:18:00.005-04:00</published><updated>2014-04-14T10:23:31.740-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Using Socket as a Server (Listening) Socket</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Normally, server sockets may accept multiple client connections. Conceptually, a server socket listens on a known port. When an incoming connection arrives, the listening socket &lt;i&gt;creates a new socket&lt;/i&gt; (the "child" socket), and establishes the connection on the child socket. The listening socket is then free to resume listening on the same port, while the child socket has an established connection with the client that is independent from its parent.&lt;/p&gt;

&lt;p&gt;One result of this architecture is that the listening socket never actually performs a read or write operation. It is only used to create connected sockets.&lt;/p&gt;

&lt;p&gt;The listening socket usually proceeds through the operations below.
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Construct&lt;/b&gt;. Socket construction is identical for all TCP/IP sockets; see &lt;a href="http://blog.stephencleary.com/2009/05/socket-operations.html"&gt;Socket Operations&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Bind&lt;/b&gt;. Binding for listening sockets is usually done only on the port, setting the IP address parameter to IPAddress.Any (&lt;a href="http://msdn.microsoft.com/en-us/library/system.net.ipaddress.any.aspx"&gt;MSDN&lt;/a&gt;). A Bind failure is usually due to another process already bound to that port (possibly another instance of the server process).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Listen&lt;/b&gt;. The listening socket actually begins listening at this point. It is not yet accepting connections, but the OS may accept connections on its behalf.&lt;br/&gt;
&lt;i&gt;The confusing "backlog" parameter&lt;/i&gt;. The "backlog" parameter to Socket.Listen is how many connections the OS may accept on behalf of the application. This is not the total number of active connections; it is only how many connections will be established if the application "gets behind". Once connections are Accepted, they move out of the backlog queue and no longer "count" against the backlog limit.&lt;br/&gt;
&lt;i&gt;The value to pass for the "backlog" parameter&lt;/i&gt;. Historically, this has been restricted to a maximum of 5, though modern systems have a cap of 200. Specifying a backlog higher than the maximum is not considered an error; the maximum value is used instead. The .NET docs fail to mention that int.MaxValue can be used to invoke the "dynamic backlog" feature (Windows Server systems only), essentially leaving it up to the OS. It is tempting to set this value very high (e.g., always passing int.MaxValue), but this would hurt system performance (on non-server machines) by pre-allocating a large amount of scarce resources. This value should be set to a reasonable amount (usually between 2 and 5), based on how many connections one is realistically expecting and how quickly they can be Accepted.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;(repeat) Accept&lt;/b&gt;. When a socket connection is accepted by the listening socket, a new socket connection is created. The listening socket should continue listening on the same port by re-starting the Accept operation as soon as it completes. The result of a completed Accept operation is a new, connected socket. This new socket may be used for reading and writing. For more information on using connected sockets, see &lt;a href="http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html"&gt;Using Socket as a Connected Socket&lt;/a&gt;. The new socket is completely independent from the listening socket; closing either socket does not affect the other socket.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Close&lt;/b&gt;. Since the listening socket is never actually connected (it only accepts connected sockets), there is no Disconnect operation. Rather, closing a listening socket simply informs the OS that the socket is no longer listening and frees those resources immediately.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;There are a few common variations on the above theme:
&lt;ol&gt;
&lt;li&gt;A listening socket may choose to bind to an actual IP address in addition to a port. This is normally done for security reasons. If this is done, then the Bind operation may fail if the network cable is unplugged or wireless router is down.&lt;/li&gt;
&lt;li&gt;A listening socket may choose not to bind (actually, the socket is still bound; it is just bound to an OS-chosen port). This is extremely rare, and only found in very old protocols such as non-PASV FTP. This requires an application protocol that can notify the other side of the port that the OS chose to bind, and this tight coupling of the application protocol (e.g., FTP) with the transport mechanism (e.g., TCP) is not recommended. One reason is that it requires any NAT'ing (network address translating) devices to monitor the protocol and dynamically predict the necessary port forwarding.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5216231873495497128/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html#comment-form' title='16 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' title='Using Socket as a Server (Listening) Socket'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>16</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6285651459642706145</id><published>2009-05-23T13:59:00.003-04:00</published><updated>2014-05-16T16:51:12.846-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Lighter Notes'/><title type='text'>On a Lighter Note: Airport Error</title><content type='html'>&lt;a href="http://4.bp.blogspot.com/_lkN-6AUYgOI/Shg9ahSLAFI/AAAAAAAABYc/pmhmkzlCyik/s1600-h/P4200068.JPG"&gt;&lt;img style="float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 320px; height: 240px;" src="http://4.bp.blogspot.com/_lkN-6AUYgOI/Shg9ahSLAFI/AAAAAAAABYc/pmhmkzlCyik/s320/P4200068.JPG" border="0" alt="" id="BLOGGER_PHOTO_ID_5339084884068204626" /&gt;&lt;/a&gt;

&lt;p&gt;Being the fan of error messages that I am, I have of course seen pictures of bluescreens in airports. I even saw one myself, but that was several years ago (before I had my digital camera, sadly).&lt;/p&gt;

&lt;p&gt;So, I was thrilled when I saw an error message on our way back from Tennessee! It's not quite a bluescreen, but does raise some vendor concerns.&lt;/p&gt; 

&lt;p&gt;The text is difficult to see without zooming in, so here it is: the failing application is "radpinit.exe"; caption: "DLL Initialization Failed"; message: "The application failed to initialize because the window station is shutting down." I think we've all seen that one before. :)&lt;/p&gt;

&lt;p&gt;However, we haven't all seen it from a component of Hewlett Packard's Business Technology Optimization platform. Supposedly, "radpinit" is in charge of automated software deployment and updates.&lt;/p&gt;

&lt;p&gt;It's been many, many years since I've bought a computer and not wiped the entire hard drive within the first 24 hours. Sorry, but OEM software is just buggy to the hilt, and usually ad-ridden to boot. The usual procedure is to create the recovery disks, back up all the drivers (yes, I &lt;i&gt;have&lt;/i&gt; bought computers where the recovery disks did not include the correct drivers!), copy all license keys, and then wipe everything.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6285651459642706145/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/on-lighter-note-airport-error.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6285651459642706145'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6285651459642706145'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/on-lighter-note-airport-error.html' title='On a Lighter Note: Airport Error'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/_lkN-6AUYgOI/Shg9ahSLAFI/AAAAAAAABYc/pmhmkzlCyik/s72-c/P4200068.JPG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2589159950475072525</id><published>2009-05-23T13:40:00.005-04:00</published><updated>2013-05-17T11:27:45.030-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='P/Invoke'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><title type='text'>INI File Reader in C#</title><content type='html'>&lt;p&gt;Most .NET applications do not need access to the old INI file format, so Microsoft decided not to include it in the .NET framework. Multiple other options are available, from .config files to the Registry. However, there are a handful of situations where an old INI file must be read.&lt;/p&gt;

&lt;p&gt;I wrote this class while doing some test development on an ini2reg-style program (a program that would read an existing INI file and then write appropriate Registry entries so that the information is read out of the registry instead; see &lt;a href="http://msdn.microsoft.com/en-us/library/ms724353(VS.85).aspx"&gt;MSDN: GetPrivateProfileString&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/ms794363.aspx"&gt;MSDN: INF Ini2Reg&lt;/a&gt;, and &lt;a href="http://technet.microsoft.com/en-us/library/cc722567.aspx"&gt;MSDN: NT Resource Kit, Chapter 26&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Note that this is not a particularly well-designed class; I wrote it quickly. It's posted here as an example of moderately difficult interop; specifically, how to read a multi-string value, where "multi-string" means a single buffer that is double-null-terminated and may contain embedded (single) nulls.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;sealed&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; IniReader
{
    [DllImport(&lt;span class="string"&gt;&amp;quot;kernel32.dll&amp;quot;&lt;/span&gt;, EntryPoint=&lt;span class="string"&gt;&amp;quot;GetPrivateProfileStringW&amp;quot;&lt;/span&gt;, CharSet=CharSet.Unicode, ExactSpelling=&lt;span class="keyword"&gt;true&lt;/span&gt;, SetLastError=&lt;span class="keyword"&gt;true&lt;/span&gt;), SuppressUnmanagedCodeSecurity]
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;extern&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; GetPrivateProfileString(&lt;span class="keyword"&gt;string&lt;/span&gt; lpAppName, &lt;span class="keyword"&gt;string&lt;/span&gt; lpKeyName, &lt;span class="keyword"&gt;string&lt;/span&gt; lpDefault,
        [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] &lt;span class="keyword"&gt;char&lt;/span&gt;[] lpReturnedString, &lt;span class="keyword"&gt;int&lt;/span&gt; nSize, &lt;span class="keyword"&gt;string&lt;/span&gt; lpFileName);
 
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; GetPrivateProfileString(&lt;span class="keyword"&gt;string&lt;/span&gt; fileName, &lt;span class="keyword"&gt;string&lt;/span&gt; sectionName, &lt;span class="keyword"&gt;string&lt;/span&gt; keyName)
    {
        &lt;span class="keyword"&gt;char&lt;/span&gt;[] ret = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;char&lt;/span&gt;[256];
 
        &lt;span class="keyword"&gt;while&lt;/span&gt; (&lt;span class="keyword"&gt;true&lt;/span&gt;)
        {
            &lt;span class="keyword"&gt;int&lt;/span&gt; length = GetPrivateProfileString(sectionName, keyName, &lt;span class="keyword"&gt;null&lt;/span&gt;, ret, ret.Length, fileName);
            &lt;span class="keyword"&gt;if&lt;/span&gt; (length == 0)
                Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
 
            &lt;span class="comment"&gt;// This function behaves differently if both sectionName and keyName are null&lt;/span&gt;
            &lt;span class="keyword"&gt;if&lt;/span&gt; (sectionName != &lt;span class="keyword"&gt;null&lt;/span&gt; &amp;amp;&amp;amp; keyName != &lt;span class="keyword"&gt;null&lt;/span&gt;)
            {
                &lt;span class="keyword"&gt;if&lt;/span&gt; (length == ret.Length - 1)
                {
                    &lt;span class="comment"&gt;// Double the buffer size and call again&lt;/span&gt;
                    ret = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;char&lt;/span&gt;[ret.Length * 2];
                }
                &lt;span class="keyword"&gt;else&lt;/span&gt;
                {
                    &lt;span class="comment"&gt;// Return simple string&lt;/span&gt;
                    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt;(ret, 0, length);
                }
            }
            &lt;span class="keyword"&gt;else&lt;/span&gt;
            {
                &lt;span class="keyword"&gt;if&lt;/span&gt; (length == ret.Length - 2)
                {
                    &lt;span class="comment"&gt;// Double the buffer size and call again&lt;/span&gt;
                    ret = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;char&lt;/span&gt;[ret.Length * 2];
                }
                &lt;span class="keyword"&gt;else&lt;/span&gt;
                {
                    &lt;span class="comment"&gt;// Return multistring&lt;/span&gt;
                    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt;(ret, 0, length - 1);
                }
            }
        }
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt;[] SectionNames(&lt;span class="keyword"&gt;string&lt;/span&gt; fileName)
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; GetPrivateProfileString(fileName, &lt;span class="keyword"&gt;null&lt;/span&gt;, &lt;span class="keyword"&gt;null&lt;/span&gt;).Split(&lt;span class="string"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt;[] KeyNames(&lt;span class="keyword"&gt;string&lt;/span&gt; fileName, &lt;span class="keyword"&gt;string&lt;/span&gt; sectionName)
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; GetPrivateProfileString(fileName, sectionName, &lt;span class="keyword"&gt;null&lt;/span&gt;).Split(&lt;span class="string"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;);
    }
 
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;string&lt;/span&gt; Value(&lt;span class="keyword"&gt;string&lt;/span&gt; fileName, &lt;span class="keyword"&gt;string&lt;/span&gt; sectionName, &lt;span class="keyword"&gt;string&lt;/span&gt; keyName)
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; GetPrivateProfileString(fileName, sectionName, keyName);
    }
}
&lt;/code&gt;&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2589159950475072525/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/ini-file-reader-in-c.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2589159950475072525'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2589159950475072525'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/ini-file-reader-in-c.html' title='INI File Reader in C#'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3085961155936792245</id><published>2009-05-23T13:19:00.004-04:00</published><updated>2013-05-17T10:04:52.500-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Using Socket as a Client Socket</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A client socket connects to a known server socket. To do so, it usually proceeds through the operations below.
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Construct&lt;/b&gt;. Socket construction is identical for all TCP/IP sockets; see &lt;a href="http://blog.stephencleary.com/2009/05/socket-operations.html"&gt;Socket Operations&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Connect&lt;/b&gt;. The client socket connects to the server socket by specifying the server's IP address and port. If the connection fails, the application may choose to notify the user and/or retry the connection (usually after a timeout), as appropriate; see &lt;a href="http://blog.stephencleary.com/2009/05/error-handling.html"&gt;error handling&lt;/a&gt; for details. Once the connection completes, the client socket is a connected socket.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;(repeat) Read and Write&lt;/b&gt;. Asynchronous sockets normally have an active read at all times, and write as necessary; synchronous sockets must choose whether to read or write based on the application protocol. See &lt;a href="http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html"&gt;Using Socket as a Connected Socket&lt;/a&gt; for details.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Close&lt;/b&gt;. Closing the socket releases the OS resources. By default, this will perform a graceful disconnect from the server in the background.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
 
&lt;p&gt;There are a couple of common variations for the above theme:
&lt;ol&gt;
&lt;li&gt;A client application may wish to know when the disconnect from the server has completed. One reason for this is to prevent a graceful disconnect from getting promoted to an abortive disconnect, which can happen if the client exits shortly after closing its socket. In this case, the client may Disconnect the socket before Closing it, and delay exiting the process until the Disconnect has completed.&lt;/li&gt;
&lt;li&gt;A client application may wish to specify the network used for communication. This is normally done for security reasons, but there are other valid reasons to specify a network as well. If a client application wishes to control the network used for the connection, it may Bind before it Connects. In this case, usually only the IP address is specified in the Bind, allowing the OS to choose the port (the port number is set to 0, meaning "any available port"). Bind is normally a server socket operation and is covered in detail in &lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html"&gt;Using Socket as a Server (Listening) Socket&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3085961155936792245/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3085961155936792245'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3085961155936792245'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html' title='Using Socket as a Client Socket'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-957682665472959550</id><published>2009-05-18T23:34:00.002-04:00</published><updated>2013-05-17T10:04:07.569-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='WiX'/><title type='text'>WiX Version Lying, Take Two</title><content type='html'>&lt;p&gt;In &lt;a href="http://blog.stephencleary.com/2009/05/dealing-with-wix-data-files.html"&gt;an earlier post&lt;/a&gt;, I described how a friend of mine solved an installer update problem by &lt;i&gt;version lying&lt;/i&gt; about a data file. Just yesterday they ran into a similar but more sinister problem.&lt;/p&gt;

&lt;h4&gt;The Problem, In a Nutshell&lt;/h4&gt;

&lt;p&gt;One of their libraries depended on an ocx control. This was added as a COM reference to the library. They built and distributed the first version of this software, being sure to include the "COM Interop" DLL that is automatically created by the compiler. They followed the Windows Installer component guidelines and made the interop dll and the dependent library separate components. It worked; no problems.&lt;/p&gt;

&lt;p&gt;As part of a company initiative to sign their distributed code, they strong-named their library for the next release. Since strong-named assemblies may only load other strong-named assemblies, the compiler automatically strong-named its COM interop DLL on the next build.&lt;/p&gt;

&lt;p&gt;The problem: The new (signed) COM interop DLL had the same version as the old (unsigned) COM interop DLL. The company realized while testing their release that if they upgraded a previous installation instead of performing a clean install, then their library would fail to load.&lt;/p&gt;

&lt;p&gt;Of course, this is because during upgrades, Windows Installer will examine the file version, see that there are no differences, and skip installing that file. It ignores the last-modified time. The end result is that after an upgrade, the newer (signed) library was trying to load the new (signed) COM interop DLL, but only the old (unsigned) COM interop DLL was present.&lt;/p&gt;

&lt;h4&gt;Attempted Solutions&lt;/h4&gt;

&lt;p&gt;&lt;b&gt;Set File.DefaultVersion&lt;/b&gt;. This is the old "version lying" trick, which worked before. However, WiX will always ignore File.DefaultVersion as long as the file actually has version information (and in this case it does; the compiler always adds version information to the COM interop DLL). WiX can be instructed to ignore &lt;i&gt;all&lt;/i&gt; file version information, but this would require major (and ugly) changes to the installer files - essentially, they would have to do version lying on every single file in the msi. They decided this was not an acceptable option.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Mess with COMReference&lt;/b&gt;. The (poorly-documented) COMReference element in the MSBuild file does have VersionMajor and VersionMinor child elements, which do control the version of the COM interop DLL. Unfortunately, they also control the version of the COM/ActiveX object that is loaded. If they are set to anything other than the correct COM object version, the build fails; so, they cannot be used to set the COM interop DLL version.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Write an installer transform&lt;/b&gt;. Windows Installer does support the notion of "installer transforms", which are databases of changes to the installer database. An installer transform could do the version lying. That way, MSBuild would create the COM interop DLL, WiX would place it into the installer database along with its version information, and then the installer transform would overwrite the version information in the database. This is the cleanest solution, but ended up getting rejected due to lack of experience with installer transforms.&lt;/p&gt;

&lt;h4&gt;The Accepted Solution&lt;/h4&gt;

&lt;p&gt;A few days ago, I posted &lt;a href="http://blog.stephencleary.com/2009/05/on-lighter-note-interesting-message-in.html"&gt;an interesting message I found in a Windows executable&lt;/a&gt; while testing out a Win32 resource manager. I talked my friend into letting me have a crack at their problem.&lt;/p&gt;

&lt;p&gt;With a few modifications of this very, very pre-release code, I created a small console program that could change the version number of a PE/PE+ file ("PE/PE+" means EXEs, DLLs, OCXs, etc., either x86/AnyCPU or x64). They included it into their build process, and it worked quite nicely.&lt;/p&gt;

&lt;blockquote&gt;Note: what they ended up doing is unconventional and not recommended, but it is a useful workaround for WiX upgrade scenarios. They do plan to change this in a future version of the installer.&lt;/blockquote&gt;

&lt;p&gt;The reason this works is because Windows Installer will only consider the version information on disk (for the original file) and in the installer database (for the updated file). In contrast, the .NET loader will verify the strong name signature against the .NET assembly version (AssemblyVersionAttribute) and ignores the file version (AssemblyFileVersionAttribute).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/957682665472959550/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/wix-version-lying-take-two.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/957682665472959550'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/957682665472959550'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/wix-version-lying-take-two.html' title='WiX Version Lying, Take Two'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-378609399110664345</id><published>2009-05-18T22:44:00.008-04:00</published><updated>2009-05-19T08:51:17.539-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Lighter Notes'/><title type='text'>On a Lighter Note: Internet Explorer / MSDN Forums Error Message</title><content type='html'>&lt;img style="float:right; margin:0 0 10px 10px;width: 171px; height: 159px;" src="http://1.bp.blogspot.com/_lkN-6AUYgOI/ShIdRtyaOlI/AAAAAAAABYU/UMp59g90mdg/s320/IE+Error+2009-05-02+while+on+MSDN+Forums+page.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5337360698573470290" /&gt;

&lt;p&gt;The other day (on May 2nd, to be exact), I was using Internet Explorer (version 8, no less) to answer some questions on the MSDN forums site. Suddenly, I was confronted with this "error non-message".&lt;/p&gt;

&lt;p&gt;Generally speaking, this site works very well... as long as you've got a high-speed Internet connection that never gets interrupted. However, if you're trying to do a download in the background on a wireless connection to a shared Internet connection that is the slowest of the "high-speeds", then the MSDN forums pages begin to show their quirks.&lt;/p&gt;

&lt;p&gt;I find error messages - especially bad ones - to be interesting. I especially like the warning icon; it just brings real meaning to this screenshot. :)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/378609399110664345/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/on-lighter-note-internet-explorer-msdn.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/378609399110664345'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/378609399110664345'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/on-lighter-note-internet-explorer-msdn.html' title='On a Lighter Note: Internet Explorer / MSDN Forums Error Message'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/_lkN-6AUYgOI/ShIdRtyaOlI/AAAAAAAABYU/UMp59g90mdg/s72-c/IE+Error+2009-05-02+while+on+MSDN+Forums+page.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1121980433504965171</id><published>2009-05-18T22:34:00.002-04:00</published><updated>2013-05-17T22:03:38.240-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><title type='text'>Sample Code: Getting the Local IP Addresses</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The sample code below enumerates all the adapters on a machine, and then enumerates all IPv4 addresses for each adapter. This is necessary because &lt;a href="http://blog.stephencleary.com/2009/05/getting-local-ip-address.html"&gt;a computer may have multiple IP addresses&lt;/a&gt;.&lt;/p&gt;
 
&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// This utility function displays all the IP (v4, not v6) addresses of the local computer.&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; DisplayIPAddresses()
{
    StringBuilder sb = &lt;span class="keyword"&gt;new&lt;/span&gt; StringBuilder();
  
    &lt;span class="comment"&gt;// Get a list of all network interfaces (usually one per network card, dialup, and VPN connection)&lt;/span&gt;
    NetworkInterface[] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
  
    &lt;span class="keyword"&gt;foreach&lt;/span&gt; (NetworkInterface network &lt;span class="keyword"&gt;in&lt;/span&gt; networkInterfaces)
    {
        &lt;span class="comment"&gt;// Read the IP configuration for each network&lt;/span&gt;
        IPInterfaceProperties properties = network.GetIPProperties();
  
        &lt;span class="comment"&gt;// Each network interface may have multiple IP addresses&lt;/span&gt;
        &lt;span class="keyword"&gt;foreach&lt;/span&gt; (IPAddressInformation address &lt;span class="keyword"&gt;in&lt;/span&gt; properties.UnicastAddresses)
        {
            &lt;span class="comment"&gt;// We&amp;#39;re only interested in IPv4 addresses for now&lt;/span&gt;
            &lt;span class="keyword"&gt;if&lt;/span&gt; (address.Address.AddressFamily != AddressFamily.InterNetwork)
                &lt;span class="keyword"&gt;continue&lt;/span&gt;;
  
            &lt;span class="comment"&gt;// Ignore loopback addresses (e.g., 127.0.0.1)&lt;/span&gt;
            &lt;span class="keyword"&gt;if&lt;/span&gt; (IPAddress.IsLoopback(address.Address))
                &lt;span class="keyword"&gt;continue&lt;/span&gt;;
  
            sb.AppendLine(address.Address.ToString() + &lt;span class="string"&gt;&amp;quot; (&amp;quot;&lt;/span&gt; + network.Name + &lt;span class="string"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;);
        }
    }
  
    MessageBox.Show(sb.ToString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1121980433504965171/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/getting-local-ip-addresses.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1121980433504965171'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1121980433504965171'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/getting-local-ip-addresses.html' title='Sample Code: Getting the Local IP Addresses'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6170211319745648639</id><published>2009-05-18T22:28:00.004-04:00</published><updated>2013-05-17T10:02:56.772-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Getting the Local IP Address</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;One common FAQ is how to get the local IP address of the computer. In fact, the very question is wrong: a computer may easily have multiple IP addresses. In fact, a computer may have multiple network adapters, each of which has multiple addresses. A single network card may have multiple IP addresses as long as they are on separate logical networks; this is called "multihoning" and is sometimes done for security reasons. Of course, a computer may have multiple network cards as well, especially when one considers virtual networks.&lt;/p&gt;
 
&lt;blockquote&gt;True (but boring) story: my laptop (on which I am writing this) currently has seven network "adapters": one physical, one wireless, one dialup, two VPN, and two for virtual machine networks. This is not including the Teredo virtual adapter, and others may also install the loopback adapter, which is commonly seen on testing machines.&lt;/blockquote&gt;
 
&lt;p&gt;The moral of this (short) FAQ entry? Never, ever assume that a computer only has one IP address. A lot of sample code for retrieving the local IP address does make this faulty assumption. However, the code &lt;a href="http://blog.stephencleary.com/2009/05/getting-local-ip-addresses.html"&gt;here&lt;/a&gt; displays a &lt;i&gt;list&lt;/i&gt; of IP addresses.&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6170211319745648639/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/getting-local-ip-address.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6170211319745648639'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6170211319745648639'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/getting-local-ip-address.html' title='Getting the Local IP Address'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4147510652282317650</id><published>2009-05-16T22:31:00.003-04:00</published><updated>2009-05-16T22:41:50.661-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Lighter Notes'/><title type='text'>On a Lighter Note: Interesting Message in AutoChk</title><content type='html'>&lt;p&gt;A lot of my recent blog entries for the last couple weeks have been almost articles, and I'm a bit tired. Writing is hard work!&lt;/p&gt;

&lt;p&gt;So, this blog post is a bit in a "lighter" vein, just a little curiosity I found mucking about.&lt;/p&gt;

&lt;p&gt;I'm doing some testing on a Win32 resource manager written purely in managed code. One of the tests is to load various resources from operating system files, and make sure everything looks "right". (Don't get me started on how undocumented some of this stuff is...)&lt;/p&gt;

&lt;p&gt;Anyway, an unexpected message was found in Vista x64's "autochk.exe" (that thing that runs at bootup if your hard drive needs repairing). It's in the MessageTable resource, with message ID 0x427:&lt;/p&gt;

&lt;blockquote&gt;This never gets printed.&lt;/blockquote&gt;

&lt;p&gt;How interesting.&lt;/p&gt;

&lt;p&gt;Future interesting blog posts will doubtless follow.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4147510652282317650/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/on-lighter-note-interesting-message-in.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4147510652282317650'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4147510652282317650'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/on-lighter-note-interesting-message-in.html' title='On a Lighter Note: Interesting Message in AutoChk'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731</id><published>2009-05-16T18:05:00.005-04:00</published><updated>2013-05-17T09:45:08.259-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Detection of Half-Open (Dropped) Connections</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There is a three-way handshake to open a TCP/IP connection, and a four-way handshake to close it. However, once the connection has been established, if neither side sends any data, then no packets are sent over the connection. TCP is an "idle" protocol, happy to assume that the connection is active until proven otherwise.&lt;/p&gt;
 
&lt;p&gt;TCP was designed this way for resiliency and efficiency. This design enables a graceful recovery from unplugged network cables and router crashes. e.g., a client may connect to a server, an intermediate router may be rebooted, and after the router comes back up, the original connection still exists (this is true unless data is sent across the connection while the router was down). This design is also efficient, since no "polling" packets are sent across the network just to check if the connection is still OK (reduces unnecessary network traffic).&lt;/p&gt;
 
&lt;p&gt;TCP does have acknowledgments for data, so when one side sends data to the other side, it will receive an acknowledgment if the connection is stil active (or an error if it is not). Thus, broken connections can be detected by sending out data. It is important to note that the act of &lt;i&gt;receiving&lt;/i&gt; data is completely passive in TCP; a socket that only reads cannot detect a dropped connection.&lt;/p&gt;
 
&lt;p&gt;This leads to a scenario known as a "half-open connection". At any given point in most protocols, one side is expected to send a message and the other side is expecting to receive it. Consider what happens if an intermediate router is suddenly rebooted at that point: the receiving side will continue waiting for the message to arrive; the sending side will send its data, and receive an error indicating the connection was lost. Since broken connections can only be detected by &lt;i&gt;sending&lt;/i&gt; data, the receiving side will wait forever. This scenario is called a "half-open connection" because one side realizes the connection was lost but the other side believes it is still active.&lt;/p&gt;
 
&lt;blockquote&gt;
Terminology alert: "half-open" is completely different than "half-closed". Half-closed connections are when one side performs a Shutdown operation on its socket, shutting down only the sending (outgoing) stream. See &lt;a href="http://blog.stephencleary.com/2009/05/socket-operations.html"&gt;Socket Operations&lt;/a&gt; for more details on the Shutdown operation.
&lt;/blockquote&gt;
 
&lt;h4&gt;Causes of Half-Open Connections&lt;/h4&gt;
 
&lt;p&gt;Half-open connections are in that annoying list of problems that one seldomly sees in a test environment but commonly happen in the real world. This is because if the socket is shut down with the normal four-way handshake (or even if it is abruptly closed), the half-open problem will not occur. Some of the common causes of a half-open connection are described below:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Process crash.&lt;/b&gt; If a process shuts down normally, it usually sends out a "FIN" packet, which informs the other side that the connection has been lost. However, if a process crashes or is terminated (e.g., from Task Manager), this is not guaranteed. It is possible that the OS will send out a "FIN" packet on behalf of a crashed process; however, this is up to the OS.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Computer crash.&lt;/b&gt; If the entire computer (including the OS) crashes or loses power, then there is certainly no notification to the other side that the connection has been lost.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Router crash/reboot.&lt;/b&gt; Any of the routers along the route from one side to the other may also crash or be rebooted; this causes a loss of connection if data is being sent at that time. If no data is being sent at that exact time, then the connection is not lost.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Network cable unplugged.&lt;/b&gt; Any network cables unplugged along the route from one side to the other will cause a loss of connection without any notification. This is similar to the router case; if there is no data being transferred, then the connection is not actually lost. However, computers usually will detect if their specific network cable is unplugged and may notify their local sockets that the network was lost (the remote side will not be notified).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Wireless devices (including laptops) moving out of range.&lt;/b&gt; A wireless device that moves out of its access point range will lose its connection. This is an often-overlooked but increasingly common situation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
 
&lt;p&gt;In all of the situations above, it is possible that one side may be aware of the loss of connection, while the other side is not.&lt;/p&gt;
 
&lt;h4&gt;Is Explicit Detection Necessary?&lt;/h4&gt;
 
&lt;p&gt;There are some situations in which detection is not necessary. A "poll" system (as opposed to a "subscription/event" system) already has a timer built in (the poll timer), and sends data across the connection regularly. So the polling side does not need to explicitly check for connection loss.&lt;/p&gt;
 
&lt;p&gt;The necessity of detection must be considered separately for each side of the communication. e.g., if the protocol is based on a polling scheme, then the side doing the polling does not need explicit keepalive handling, but the side responding to the polling likely does need explicit keepalive handling.&lt;/p&gt;
 
&lt;blockquote&gt;
&lt;p&gt;True Story: I once had to write software to control a serial device that operated through a "bridge" device that exposed the serial port over TCP/IP. The company that developed the bridge implemented a simple protocol: they listened for a single TCP/IP connection (from anywhere), and - once the connection was established - sent any data received from the TCP/IP connection to the serial port, and any data received from the serial port to the TCP/IP connection. Of course, they only allowed one TCP/IP connection (otherwise, there could be contention over the serial port), so other connections were refused as long as there was an established connection.&lt;/p&gt;
&lt;p&gt;The problem? No keepalives. If the bridge ever ended up in a half-open situation, it would &lt;i&gt;never recover&lt;/i&gt;; any connection requests would be rejected because the bridge would believe the original connection was still active. Usually, the bridge was deployed to a stationary device on a physical network; presumably, if the device ever stopped working, someone would walk over and perform a power cycle. However, we were deploying the bridge onto mobile devices on a wireless network, and it was normal for our devices to pass out of and back into access point coverage. Furthermore, this was part of an automated system, and people weren't near the devices to perform a power cycle. Of course, the bridge failed during our prototyping; when we brought the root cause to the other company's attention, they were unable to implement a keepalive (the embedded TCP/IP stack didn't support it), so they worked with us in developing a method of remotely resetting the bridge.&lt;/p&gt;
&lt;p&gt;It's important to note that we &lt;i&gt;did&lt;/i&gt; have keepalive testing on our side of the connection (via a timer), but this was insufficient. &lt;b&gt;It is necessary to have keepalive testing on both sides of the connection.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;This bridge was in full production, and had been for some time. The company that made this error was a billion-dollar global corporation centered around networking products. The company I worked for had four programmers at the time. This just goes to show that even the big guys can make mistakes.&lt;/p&gt;
&lt;/blockquote&gt;
 
&lt;h4&gt;Wrong Methods to Detect Dropped Connections&lt;/h4&gt;
 
&lt;p&gt;There are a couple of wrong methods to detect dropped connections. Beginning socket programmers often come up with these incorrect solutions to the half-open problem. They are listed here only for reference, along with a brief description of why they are wrong.
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;A Second socket connection.&lt;/b&gt; A new socket connection cannot determine the validity of an existing connection in all cases. In particular, if the remote side has crashed and rebooted, then a second connection attempt will succeed even though the original connection is in a half-open state.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Ping.&lt;/b&gt; Sending a ping (ICMP) to the remote side has the same problem: it may succeed even when the connection is unusable. Furthermore, ICMP traffic is often treated differently than TCP traffic by routers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
 
&lt;h4&gt;Correct Methods to Detect Dropped Connections&lt;/h4&gt;
 
&lt;p&gt;There are several correct solutions to the half-open problem. Each one has their pros and cons, depending on the problem domain. This list is in order from best solution to worst solution (IMO):
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Add a keepalive message to the &lt;a href="http://blog.stephencleary.com/2009/04/message-framing.html"&gt;application protocol framing&lt;/a&gt; (an empty message).&lt;/b&gt; Length-prefixed and delimited systems may send empty messages (e.g., a length prefix of "0 bytes" or a single "end delimiter").&lt;br/&gt;
&lt;i&gt;Advantages.&lt;/i&gt; The higher-level protocol (the actual messages) are not affected.&lt;br/&gt;
&lt;i&gt;Disadvantages.&lt;/i&gt; This requires a change to the software on both sides of the connection, so it may not be an option if the application protocol is already specified and immutable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Add a keepalive message to the actual application protocol (a "null" message).&lt;/b&gt; This adds a new message to the application protocol: a "null" message that should just be ignored.&lt;br/&gt;
&lt;i&gt;Advantages.&lt;/i&gt; This may be used if the application protocol uses a non-uniform message framing system. In this case, the first solution could not be used.&lt;br/&gt;
&lt;i&gt;Disadvantages.&lt;/i&gt; (Same as the first solution) This requires a change to the software on both sides of the connection, so it may not be an option if the application protocol is already specified and immutable.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Explicit timer assuming the worst.&lt;/b&gt; Have a timer and assume that the connection has been dropped when the timer expires (of course, the timer is reset each time data is transferred). This is the way HTTP servers work, if they support persistent connections.&lt;br/&gt;
&lt;i&gt;Advantages.&lt;/i&gt; Does not require changes to the application protocol; in situations where the code on the remote side cannot be changed, the first two solutions cannot be used. Furthermore, this solution causes less network traffic; it is the only solution that does not involve sending out keepalive (i.e., "are you still there?") packets.&lt;br/&gt;
&lt;i&gt;Disadvantages.&lt;/i&gt; Depending on the protocol, this may cause a high number of valid connections to be dropped.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Manipulate the TCP/IP keepalive packet settings.&lt;/b&gt; This is a highly controversial solution that has complex arguments for both pros and cons. It is discussed in depth in &lt;a href="http://blog.stephencleary.com/2009/05/tcpip-resources.html"&gt;Stevens' book&lt;/a&gt;, chapter 23. Essentially, this instructs the TCP/IP stack to send keepalive packets periodically on the application's behalf. There are two ways that this can be done:
&lt;ol&gt;
&lt;li&gt;Set SocketOptionName.KeepAlive. The MSDN documentation isn't clear that this uses a 2-hour timeout, which is too long for most applications. This can be changed (system-wide) through a registry key, but changing this system-wide (i.e., for all other applications) is greatly frowned upon. This is the old-fashioned way to enable keepalive packets.&lt;/li&gt;
&lt;li&gt;Set per-connection keepalives. Keepalive parameters can be set per-connection only on Windows 2000 and newer, not the old 9x line. This has to be done by issuing I/O control codes to the socket: pass &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.iocontrolcode.aspx"&gt;IOControlCode.KeepAliveValues&lt;/a&gt; along with a structure to &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.iocontrol.aspx"&gt;Socket.IOControl&lt;/a&gt;; the necessary structure is not covered by the .NET documentation but is described in the unmanaged documentation for &lt;a href="http://msdn.microsoft.com/en-us/library/ms741621.aspx"&gt;WSAIoctl (SIO_KEEPALIVE_VALS)&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;i&gt;Advantages.&lt;/i&gt; Once the code to set the keepalive parameters is working, there is nothing else that the application needs to change. The other solutions all have timer events that the application must respond to; this one is "set and forget".&lt;br/&gt;
&lt;i&gt;Disadvantages.&lt;/i&gt; RFC 1122, section 4.2.3.6 indicates that acknowledgements for TCP keepalives without data may not be transmitted reliably by routers; this may cause valid connections to be dropped. Furthermore, TCP/IP stacks are not required to support keepalives at all (and many embedded stacks do not), so this solution may not translate to other platforms.&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
 
&lt;p&gt;Each side of the application protocol may employ different keepalive solutions, and even different keepalive solutions at different states in the protocol. For example, the client side of a request/response style protocol may choose to send "null" requests when there is not a request pending, and switch to a timeout solution while waiting for a response.&lt;/p&gt;

&lt;p&gt;However, when designing a new protocol, it is best to employ one of the solutions consistently.&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/6580556256703872731/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html#comment-form' title='35 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' title='Detection of Half-Open (Dropped) Connections'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>35</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2755927640942482322</id><published>2009-05-14T06:53:00.004-04:00</published><updated>2013-05-17T09:55:00.018-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Error Handling</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Generally speaking, one should expect any socket operation to have a possibility of failure. Even the immediate operations (see &lt;a href="http://blog.stephencleary.com/2009/05/socket-operations.html"&gt;Socket Operations&lt;/a&gt;) may fail. A socket operation error is uniquely identified by its error code (MSDN: &lt;a href="http://msdn.microsoft.com/en-us/library/ms740668.aspx"&gt;Windows Sockets Error Codes&lt;/a&gt;).&lt;/p&gt;
 
&lt;p&gt;Some methods (such as &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.endreceive.aspx"&gt;Socket.EndReceive&lt;/a&gt;) have overloads that will return the error code one of two ways. A &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socketerror.aspx"&gt;SocketError&lt;/a&gt; enumeration &lt;b&gt;out&lt;/b&gt; parameter may be specified for these methods, which receives the error from the operation, if any. The methods without SocketError &lt;b&gt;out&lt;/b&gt; parameters will raise a &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socketexception.aspx"&gt;SocketException&lt;/a&gt; with its &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socketexception.errorcode.aspx"&gt;ErrorCode&lt;/a&gt; set to the SocketError value. The SocketError overloads were added purely for performance reasons, and are not necessary for the vast majority of socket applications.&lt;/p&gt;
 
&lt;h4&gt;Response to Errors&lt;/h4&gt;
 
&lt;p&gt;A connected socket should be immediately closed when any Read, Write, or Disconnect operation error is detected. Socket errors usually indicate a problem with the underlying connection (or possibly the network itself), and the socket should be considered unstable and be closed.&lt;/p&gt;
 
&lt;p&gt;Closing a socket almost never raises an exception. Only the "fatal" exceptions (OutOfMemory, StackOverflow, ThreadAbort, and possibly others in future CLR versions) can ever be raised from Socket.Close. This makes it safe to call without requiring a try/catchall.&lt;/p&gt;
 
&lt;p&gt;Bind and Connect failures are not uncommon. Depending on the application, one may either inform the user and exit, or retry at a later time (see below).&lt;/p&gt;
 
&lt;p&gt;Listen or Shutdown failures are extremely rare but still possible. These failures may indicate a shortage of OS resources. For the Listen operation, consider notifying the user and then exiting; alternatively, close the listening socket and retry at a later time (see below). For the Shutdown operation, close the socket.&lt;/p&gt;
 
&lt;p&gt;Accept operations may also fail (though this may be surprising to some). In this case, the server should simply continue accepting new connections. This may be caused by a client socket program unexpectedly exiting.&lt;/p&gt;
 
&lt;h4&gt;Retry Timers&lt;/h4&gt;
 
&lt;p&gt;It is important not to retry socket operations immediately, since not all errors are the result of network communication. Even the Connect operation may fail immediately if the network cable is unplugged. Retrying socket operations immediately may result in high CPU usage or an exhaustion of OS socket resources.&lt;/p&gt;
 
&lt;p&gt;A long-running server (or client) program should have a built-in automatic "retry timer". When any error is detected, the socket should be closed and the retry timer should be started. When the retry timer goes off, then the operation may be attempted again. The timer does not have to be very long: usually 1 second will suffice.&lt;/p&gt;
 
&lt;p&gt;There are only a couple socket errors that may skip the retry timer and immediately retry: SocketError.TimedOut (WSAETIMEDOUT/10060) and SocketError.ConnectionRefused (WSAECONNREFUSED/10061). Both of these error codes indicate that an actual network timeout (WSAETIMEDOUT) or network round-trip (WSAECONNREFUSED) has taken place, so a futher "retry timeout" is unnecessary.&lt;/p&gt;
 
&lt;h4&gt;Common Errors and Their Causes&lt;/h4&gt;
 
&lt;p&gt;There are a lot of possible WinSock errors, but it's not clear from the MSDN documentation which errors are "normal". The most common errors and their most common causes are below.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SocketError.AddressNotAvailable / WSAEADDRNOTAVAIL / 10049&lt;/b&gt; - Indicates a bad or invalid address (e.g., "255.255.255.255").&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SocketErorr.TimedOut / WSAETIMEDOUT / 10060&lt;/b&gt; - This happens when trying to connect to a valid address that doesn't respond (e.g., a powered-off server or intermediate router). This may also be caused by a firewall on the remote side.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SocketError.ConnectionRefused / WSAECONNREFUSED / 10061&lt;/b&gt; - Indicates that the connection request got to a valid address that is powered on, but there is no program listening on that port. Usually, this is an indication that the server software is not running, though the computer is on. This may also be caused by a firewall, though most firewalls drop the packet (causing WSAETIMEDOUT) instead of actively refusing the connection (causing WSAECONNREFUSED).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SocketError.ConnectionReset / WSAECONNRESET / 10054&lt;/b&gt; - The remote side has abortively closed the connection. This is commonly caused by the remote process exiting or the remote computer being shut down. However, some software (especially server software) is written to abortively close connections as a normal practice, since this does reclaim server resources more quickly than a graceful close. Therefore, this is not necessarily indicative of an actual error condition; if the communication was complete (and the socket was about to be closed anyway), then this error should just be ignored.&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;SocketError.NoBufferSpaceAvailable / WSAENOBUFS / 10055&lt;/b&gt; - Technically this means that the OS has run out of buffer space for a socket. However, it's usually an indicator that the application is trying to use too many temporary ports. This may be caused by a retry rate that is too high (i.e., the retry timer timeout is too short).&lt;/p&gt;
 
&lt;p&gt;Other errors may be seen occasionally, especially when a network is in the process of coming online or going offline (e.g., the computer is in the process of connecting to a wireless network).&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2755927640942482322/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/error-handling.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2755927640942482322'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2755927640942482322'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/error-handling.html' title='Error Handling'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4130732657123596728</id><published>2009-05-12T16:31:00.003-04:00</published><updated>2009-05-12T16:49:19.227-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='WiX'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Dealing with WiX data files</title><content type='html'>&lt;p&gt;I am not an installer guru. The story below is how another company overcame one of their installer upgrade difficulties. The solution was found by their installer guru, a friend of mine.&lt;/p&gt;

&lt;p&gt;Splitting up an application into components is a pretty &lt;a href="http://msdn.microsoft.com/en-us/library/aa368269(VS.85).aspx"&gt;straightforward process&lt;/a&gt; - usually, resource files are thrown into a directory-wide component. Apparently, the ideal setup for ".config" files is to be in the same component as their .exe, with their CompanionFile set to the .exe, like this: &lt;a href="http://wix.mindcapers.com/wiki/Companion_File"&gt;http://wix.mindcapers.com/wiki/Companion_File&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's nice. Now, what to do if your previous installs didn't do this?&lt;/p&gt;

&lt;p&gt;Unfortunately, our situation was even worse. We had the .config file being installed as its own component, with a util:XmlFile modifying the file at the end of the install. This has the unfortunate side effect of the installer sometimes not wanting to update this file (since it's an XML file, it has no version information, and the modification date may be newer since it was modified at install time by the previous installer).&lt;/p&gt;

&lt;p&gt;(BTW, for other users of util:XmlFile, there is an attribute PreserveModifiedDate. If our previous installer had set this to "yes", then we wouldn't have had these problems. But it didn't, so the modified date is changed, and we ended up where we were today.)&lt;/p&gt;

&lt;p&gt;The solution we adopted is called "version lying". We added a DefaultVersion attribute to the File element to force the new installer to overwrite the old file. Of course, if the end user had changed the .config file after installing, then the new install would blow that away.&lt;/p&gt;

&lt;p&gt;WiX doesn't really like version lying a lot: it will give you a warning. However, it works. We are using an environment variable for the build version, and we just set DefaultVersion to "$(env.MY_BUILD_VERSION)". This way the fake version will stay in sync with the final build version.&lt;/p&gt;

&lt;p&gt;For our next major update, we're going to use PreserveModifiedDate and either not support automatic upgrades (forcing the user to uninstall the old version first) or upgrade to a different directory. We can then drop the version lying, and our installers will be kosher from then on.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4130732657123596728/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/dealing-with-wix-data-files.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4130732657123596728'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4130732657123596728'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/dealing-with-wix-data-files.html' title='Dealing with WiX data files'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2613307521684279226</id><published>2009-05-05T18:47:00.008-04:00</published><updated>2013-05-17T09:54:21.443-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Socket Operations</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There are a few logical operations that may be performed on a TCP/IP socket, regardless of whether the socket is synchronous or asynchronous. Each of the operations below is marked "immediate" (meaning it is completed immediately) or "delayed" (meaning it depends on the network for completion).&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Constructing&lt;/b&gt; (immediate) - TCP/IP sockets use the InterNetwork (for IPv4) or InterNetworkV6 (for IPv6) &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.addressfamily.aspx"&gt;AddressFamily&lt;/a&gt;, the Stream &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.sockettype.aspx"&gt;SocketType&lt;/a&gt;, and the Tcp &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.protocoltype.aspx"&gt;ProtocolType&lt;/a&gt;.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/2b86d684.aspx"&gt;Socket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Binding&lt;/b&gt; (immediate) - A socket may be locally bound. This is normally done only on the server (listening) socket, and is how a server chooses the port it listens on. See &lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html"&gt;Using Socket as a Server (Listening) Socket&lt;/a&gt; for details.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.bind.aspx"&gt;Bind&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Listening&lt;/b&gt; (immediate) - A bound socket notifies the OS that it is almost ready to receive connections by &lt;i&gt;listening&lt;/i&gt;. In spite of the term "listening", this operation only notifies the OS that the socket is &lt;i&gt;about&lt;/i&gt; to accept connections; it does not actually begin accepting connections, though the OS may accept a connection on behalf of the socket. See &lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html"&gt;Using Socket as a Server (Listening) Socket&lt;/a&gt; for details.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.listen.aspx"&gt;Listen&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Accepting&lt;/b&gt; (delayed) - A listening socket may accept an incoming connection. When an incoming connection is accepted, a new socket is created that is connected to the remote side; the listening socket continues listening. The new socket (which is connected) may be used for sending and receiving. See &lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html"&gt;Using Socket as a Server (Listening) Socket&lt;/a&gt; for details.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.accept.aspx"&gt;Accept&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.beginaccept.aspx"&gt;BeginAccept&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.endaccept.aspx"&gt;EndAccept&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.acceptasync.aspx"&gt;AcceptAsync&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Connecting&lt;/b&gt; (delayed) - A (client) socket may connect to a (server) socket. TCP has a three-way handshake to complete the connection, so this operation is not instantaneous. Once a socket is connected, it may be used for sending and receiving. See &lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html"&gt;Using Socket as a Client Socket&lt;/a&gt; for details.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.connect.aspx"&gt;Connect&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.beginconnect.aspx"&gt;BeginConnect&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.endconnect.aspx"&gt;EndConnect&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/bb538102.aspx"&gt;ConnectAsync&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Reading&lt;/b&gt; (delayed) - Connected sockets may perform a read operation. Reading takes incoming bytes from the stream and copies them into a buffer. A 0-byte read indicates a graceful closure from the remote side. See &lt;a href="http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html"&gt;Using Socket as a Connected Socket&lt;/a&gt; for details.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.receive.aspx"&gt;Receive&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.beginreceive.aspx"&gt;BeginReceive&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.endreceive.aspx"&gt;EndReceive&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.receiveasync.aspx"&gt;ReceiveAsync&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Writing&lt;/b&gt; (delayed) - Connected sockets may perform a write operation. Writing places bytes in the outgoing stream. A successful write may complete before the remote OS acknowledges that the bytes were received. See &lt;a href="http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html"&gt;Using Socket as a Connected Socket&lt;/a&gt; for details.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.send.aspx"&gt;Send&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.beginsend.aspx"&gt;BeginSend&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.endsend.aspx"&gt;EndSend&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.sendasync.aspx"&gt;SendAsync&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Disconnecting&lt;/b&gt; (delayed) - TCP/IP has a four-way handshake to terminate a connection gracefully: each side shuts down its own outgoing stream and receives an acknowledgment from the other side.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.disconnect.aspx"&gt;Disconnect&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.begindisconnect.aspx"&gt;BeginDisconnect&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.enddisconnect.aspx"&gt;EndDisconnect&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.disconnectasync.aspx"&gt;DisconnectAsync&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Shutting down&lt;/b&gt; (immediate) - Either the receiving stream or sending stream may be clamped shut. For receives, this is only a local operation; the other end of the connection is not notified. For sends, the outgoing stream is shut down (the same way Disconnect does it), and this is acknowledged by the other side; however, there is no notification of this operation completing.&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.shutdown.aspx"&gt;Shutdown&lt;/a&gt;&lt;/p&gt;
 
&lt;p&gt;&lt;b&gt;Closing&lt;/b&gt; (immediate or delayed) - The actual socket resources are reclaimed when the socket is disposed (or closed). Normally, this acts immediate but is actually delayed, performing a graceful disconnect in the background and then actually reclaiming the socket resources when the disconnect completes. Socket.LingerState may be set to change Close to be a synchronous disconnect (delayed, but always synchronous), or an immediate shutdown (always immediate).&lt;br/&gt;
MSDN links: &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.close.aspx"&gt;Close&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/library/system.net.sockets.socket.lingerstate.aspx"&gt;LingerState&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2613307521684279226/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/socket-operations.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2613307521684279226'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2613307521684279226'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/socket-operations.html' title='Socket Operations'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2837182939644513866</id><published>2009-05-04T21:28:00.005-04:00</published><updated>2013-05-17T09:53:20.324-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>TCP/IP Resources</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There are two books that any TCP/IP network programmer needs to have. Unfortunately, they were both written well before .NET, so they only deal with unmanaged code - specifically, the WinSock API. However, the .NET Socket class methods directly correspond to WinSock function calls, so knowledge can be gleaned from these books and directly applied to managed code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/0201633469?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0201633469"&gt;TCP/IP Illustrated, Volume 1 (The Protocols), by Stevens&lt;/a&gt;. Make a copy of pg 241 (the TCP State Transition Diagram), which is one of the most important pages ever printed. A good understanding of Chapter 18 is also important. Note that volume 1 is the only one most people need; volumes 2 and 3 delve into details about implementing TCP/IP stacks and specific (and rare) application protocols. However, volume 2 does have on the inside front cover a copy of the TCP State Transition Diagram updated with timeout events, which is nice to have.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/0735615799?ie=UTF8&amp;tag=stepheclearys-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0735615799"&gt;Network Programming for Microsoft Windows, by Jones and Ohlund&lt;/a&gt;. Chapter 5 has an excellent overview of the various I/O models available, which helps socket programmers understand how the BCL code is using asynchronous calls under the hood. This entire book should be read by TCP/IP programmers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that when reading the unmanaged socket documentation, there are some potentially confusing terms:&lt;ul&gt;
&lt;li&gt;The terms &lt;i&gt;blocking&lt;/i&gt; and &lt;i&gt;nonblocking&lt;/i&gt; do not mean the same as the terms &lt;i&gt;synchronous&lt;/i&gt; and &lt;i&gt;asynchronous&lt;/i&gt;. Nonblocking sockets were a special quasi-asynchronous socket mode that is maintained only for backwards compatibility. Most modern WinSock programs (including .NET programs) use blocking sockets.&lt;/li&gt;
&lt;li&gt;TCP is a byte stream, connection-oriented protocol. Ignore any remarks specifically for message-based or connectionless protocols; they do not apply to TCP sockets.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;There is a command-line utility that comes with Windows named &lt;i&gt;netstat&lt;/i&gt; which displays TCP/IP endpoints. Other useful tools from Microsoft (that are not built in to the OS) are &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb897437.aspx"&gt;TCPView&lt;/a&gt; (a GUI version of netstat), &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx"&gt;Process Explorer&lt;/a&gt; (which also displays TCP/IP endpoints for each process), and &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb896647.aspx"&gt;DbgView&lt;/a&gt; (which displays trace statements from the Debug and default TraceSource classes in realtime).&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2837182939644513866/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/05/tcpip-resources.html#comment-form' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2837182939644513866'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2837182939644513866'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/tcpip-resources.html' title='TCP/IP Resources'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737</id><published>2009-04-30T19:52:00.009-04:00</published><updated>2013-05-17T20:46:18.750-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><category scheme='http://www.blogger.com/atom/ns#' term='Sample code'/><title type='text'>Sample code: Length-prefix message framing for streams</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The necessity of message framing is discussed at &lt;a href="http://blog.stephencleary.com/2009/04/message-framing.html"&gt;http://blog.stephencleary.com/2009/04/message-framing.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The class below is a modified version of Nito.Async.Sockets.SocketPacketProtocol from the &lt;a href="http://www.codeplex.com/NitoAsync"&gt;Nito.Async&lt;/a&gt; library. The main difference is that the Nito.Async.Sockets.SocketPacketProtocol class communicates directly with the asynchronous Nito socket classes, allowing a more efficient implementation. The PacketProtocol class below is slightly less efficient, but can be used with any socket classes, including synchronous sockets or even non-socket streams such as files.&lt;/p&gt;

&lt;p&gt;Note that PacketProtocol is not threadsafe, so the instance members of this class must be synchronized when necessary.&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;&lt;span class="comment"&gt;// Original source: http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// Maintains the necessary buffers for applying a length-prefix message framing protocol over a stream.&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;Create one instance of this class for each incoming stream, and assign a handler to &amp;lt;see cref=&amp;quot;MessageArrived&amp;quot;/&amp;gt;. As bytes arrive at the stream, pass them to &amp;lt;see cref=&amp;quot;DataReceived&amp;quot;/&amp;gt;, which will invoke &amp;lt;see cref=&amp;quot;MessageArrived&amp;quot;/&amp;gt; as necessary.&amp;lt;/para&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;If &amp;lt;see cref=&amp;quot;DataReceived&amp;quot;/&amp;gt; raises &amp;lt;see cref=&amp;quot;System.Net.ProtocolViolationException&amp;quot;/&amp;gt;, then the stream data should be considered invalid. After that point, no methods should be called on that &amp;lt;see cref=&amp;quot;PacketProtocol&amp;quot;/&amp;gt; instance.&amp;lt;/para&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;This class uses a 4-byte signed integer length prefix, which allows for message sizes up to 2 GB. Keepalive messages are supported as messages with a length prefix of 0 and no message data.&amp;lt;/para&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;This is EXAMPLE CODE! It is not particularly efficient; in particular, if this class is rewritten so that a particular interface is used (e.g., Socket&amp;#39;s IAsyncResult methods), some buffer copies become unnecessary and may be removed.&amp;lt;/para&amp;gt;&lt;/span&gt;
&lt;span class="comment"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;class&lt;/span&gt; PacketProtocol
{
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Wraps a message. The wrapped message is ready to send to a stream.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;Generates a length prefix for the message and returns the combined length prefix and message.&amp;lt;/para&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;message&amp;quot;&amp;gt;The message to send.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[] WrapMessage(&lt;span class="keyword"&gt;byte&lt;/span&gt;[] message)
    {
        &lt;span class="comment"&gt;// Get the length prefix for the message&lt;/span&gt;
        &lt;span class="keyword"&gt;byte&lt;/span&gt;[] lengthPrefix = BitConverter.GetBytes(message.Length);
  
        &lt;span class="comment"&gt;// Concatenate the length prefix and the message&lt;/span&gt;
        &lt;span class="keyword"&gt;byte&lt;/span&gt;[] ret = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[lengthPrefix.Length + message.Length];
        lengthPrefix.CopyTo(ret, 0);
        message.CopyTo(ret, lengthPrefix.Length);
  
        &lt;span class="keyword"&gt;return&lt;/span&gt; ret;
    }
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Wraps a keepalive (0-length) message. The wrapped message is ready to send to a stream.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;static&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[] WrapKeepaliveMessage()
    {
        &lt;span class="keyword"&gt;return&lt;/span&gt; BitConverter.GetBytes((&lt;span class="keyword"&gt;int&lt;/span&gt;)0);
    }
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Initializes a new &amp;lt;see cref=&amp;quot;PacketProtocol&amp;quot;/&amp;gt;, limiting message sizes to the given maximum size.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;maxMessageSize&amp;quot;&amp;gt;The maximum message size supported by this protocol. This may be less than or equal to zero to indicate no maximum message size.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; PacketProtocol(&lt;span class="keyword"&gt;int&lt;/span&gt; maxMessageSize)
    {
        &lt;span class="comment"&gt;// We allocate the buffer for receiving message lengths immediately&lt;/span&gt;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.lengthBuffer = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[&lt;span class="keyword"&gt;sizeof&lt;/span&gt;(&lt;span class="keyword"&gt;int&lt;/span&gt;)];
        &lt;span class="keyword"&gt;this&lt;/span&gt;.maxMessageSize = maxMessageSize;
    }
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// The buffer for the length prefix; this is always 4 bytes long.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[] lengthBuffer;
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// The buffer for the data; this is null if we are receiving the length prefix buffer.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[] dataBuffer;
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// The number of bytes already read into the buffer (the length buffer if &amp;lt;see cref=&amp;quot;dataBuffer&amp;quot;/&amp;gt; is null, otherwise the data buffer).&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; bytesReceived;
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// The maximum size of messages allowed.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt; maxMessageSize;
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Indicates the completion of a message read from the stream.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;This may be called with an empty message, indicating that the other end had sent a keepalive message. This will never be called with a null message.&amp;lt;/para&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;This event is invoked from within a call to &amp;lt;see cref=&amp;quot;DataReceived&amp;quot;/&amp;gt;. Handlers for this event should not call &amp;lt;see cref=&amp;quot;DataReceived&amp;quot;/&amp;gt;.&amp;lt;/para&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; Action&amp;lt;&lt;span class="keyword"&gt;byte&lt;/span&gt;[]&amp;gt; MessageArrived { &lt;span class="keyword"&gt;get&lt;/span&gt;; &lt;span class="keyword"&gt;set&lt;/span&gt;; }
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Notifies the &amp;lt;see cref=&amp;quot;PacketProtocol&amp;quot;/&amp;gt; instance that incoming data has been received from the stream. This method will invoke &amp;lt;see cref=&amp;quot;MessageArrived&amp;quot;/&amp;gt; as necessary.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;remarks&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;This method may invoke &amp;lt;see cref=&amp;quot;MessageArrived&amp;quot;/&amp;gt; zero or more times.&amp;lt;/para&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;para&amp;gt;Zero-length receives are ignored. Many streams use a 0-length read to indicate the end of a stream, but &amp;lt;see cref=&amp;quot;PacketProtocol&amp;quot;/&amp;gt; takes no action in this case.&amp;lt;/para&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/remarks&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;data&amp;quot;&amp;gt;The data received from the stream. Cannot be null.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;exception cref=&amp;quot;System.Net.ProtocolViolationException&amp;quot;&amp;gt;If the data received is not a properly-formed message.&amp;lt;/exception&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; DataReceived(&lt;span class="keyword"&gt;byte&lt;/span&gt;[] data)
    {
        &lt;span class="comment"&gt;// Process the incoming data in chunks, as the ReadCompleted requests it&lt;/span&gt;
  
        &lt;span class="comment"&gt;// Logically, we are satisfying read requests with the received data, instead of processing the&lt;/span&gt;
        &lt;span class="comment"&gt;//  incoming buffer looking for messages.&lt;/span&gt;
  
        &lt;span class="keyword"&gt;int&lt;/span&gt; i = 0;
        &lt;span class="keyword"&gt;while&lt;/span&gt; (i != data.Length)
        {
            &lt;span class="comment"&gt;// Determine how many bytes we want to transfer to the buffer and transfer them&lt;/span&gt;
            &lt;span class="keyword"&gt;int&lt;/span&gt; bytesAvailable = data.Length - i;
            &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer != &lt;span class="keyword"&gt;null&lt;/span&gt;)
            {
                &lt;span class="comment"&gt;// We&amp;#39;re reading into the data buffer&lt;/span&gt;
                &lt;span class="keyword"&gt;int&lt;/span&gt; bytesRequested = &lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer.Length - &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived;
  
                &lt;span class="comment"&gt;// Copy the incoming bytes into the buffer&lt;/span&gt;
                &lt;span class="keyword"&gt;int&lt;/span&gt; bytesTransferred = Math.Min(bytesRequested, bytesAvailable);
                Array.Copy(data, i, &lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer, &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived, bytesTransferred);
                i += bytesTransferred;
  
                &lt;span class="comment"&gt;// Notify &amp;quot;read completion&amp;quot;&lt;/span&gt;
                &lt;span class="keyword"&gt;this&lt;/span&gt;.ReadCompleted(bytesTransferred);
            }
            &lt;span class="keyword"&gt;else&lt;/span&gt;
            {
                &lt;span class="comment"&gt;// We&amp;#39;re reading into the length prefix buffer&lt;/span&gt;
                &lt;span class="keyword"&gt;int&lt;/span&gt; bytesRequested = &lt;span class="keyword"&gt;this&lt;/span&gt;.lengthBuffer.Length - &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived;
  
                &lt;span class="comment"&gt;// Copy the incoming bytes into the buffer&lt;/span&gt;
                &lt;span class="keyword"&gt;int&lt;/span&gt; bytesTransferred = Math.Min(bytesRequested, bytesAvailable);
                Array.Copy(data, i, &lt;span class="keyword"&gt;this&lt;/span&gt;.lengthBuffer, &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived, bytesTransferred);
                i += bytesTransferred;
  
                &lt;span class="comment"&gt;// Notify &amp;quot;read completion&amp;quot;&lt;/span&gt;
                &lt;span class="keyword"&gt;this&lt;/span&gt;.ReadCompleted(bytesTransferred);
            }
        }
    }
  
    &lt;span class="comment"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// Called when a read completes. Parses the received data and calls &amp;lt;see cref=&amp;quot;MessageArrived&amp;quot;/&amp;gt; if necessary.&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;param name=&amp;quot;count&amp;quot;&amp;gt;The number of bytes read.&amp;lt;/param&amp;gt;&lt;/span&gt;
    &lt;span class="comment"&gt;/// &amp;lt;exception cref=&amp;quot;System.Net.ProtocolViolationException&amp;quot;&amp;gt;If the data received is not a properly-formed message.&amp;lt;/exception&amp;gt;&lt;/span&gt;
    &lt;span class="keyword"&gt;private&lt;/span&gt; &lt;span class="keyword"&gt;void&lt;/span&gt; ReadCompleted(&lt;span class="keyword"&gt;int&lt;/span&gt; count)
    {
        &lt;span class="comment"&gt;// Get the number of bytes read into the buffer&lt;/span&gt;
        &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived += count;
  
        &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer == &lt;span class="keyword"&gt;null&lt;/span&gt;)
        {
            &lt;span class="comment"&gt;// We&amp;#39;re currently receiving the length buffer&lt;/span&gt;
  
            &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived != &lt;span class="keyword"&gt;sizeof&lt;/span&gt;(&lt;span class="keyword"&gt;int&lt;/span&gt;))
            {
                &lt;span class="comment"&gt;// We haven&amp;#39;t gotten all the length buffer yet: just wait for more data to arrive&lt;/span&gt;
            }
            &lt;span class="keyword"&gt;else&lt;/span&gt;
            {
                &lt;span class="comment"&gt;// We&amp;#39;ve gotten the length buffer&lt;/span&gt;
                &lt;span class="keyword"&gt;int&lt;/span&gt; length = BitConverter.ToInt32(&lt;span class="keyword"&gt;this&lt;/span&gt;.lengthBuffer, 0);
  
                &lt;span class="comment"&gt;// Sanity check for length &amp;lt; 0&lt;/span&gt;
                &lt;span class="keyword"&gt;if&lt;/span&gt; (length &amp;lt; 0)
                    &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; System.Net.ProtocolViolationException(&lt;span class="string"&gt;&amp;quot;Message length is less than zero&amp;quot;&lt;/span&gt;);
  
                &lt;span class="comment"&gt;// Another sanity check is needed here for very large packets, to prevent denial-of-service attacks&lt;/span&gt;
                &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.maxMessageSize &amp;gt; 0 &amp;amp;&amp;amp; length &amp;gt; &lt;span class="keyword"&gt;this&lt;/span&gt;.maxMessageSize)
                    &lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; System.Net.ProtocolViolationException(&lt;span class="string"&gt;&amp;quot;Message length &amp;quot;&lt;/span&gt; + length.ToString(System.Globalization.CultureInfo.InvariantCulture) + &lt;span class="string"&gt;&amp;quot; is larger than maximum message size &amp;quot;&lt;/span&gt; + &lt;span class="keyword"&gt;this&lt;/span&gt;.maxMessageSize.ToString(System.Globalization.CultureInfo.InvariantCulture));
  
                &lt;span class="comment"&gt;// Zero-length packets are allowed as keepalives&lt;/span&gt;
                &lt;span class="keyword"&gt;if&lt;/span&gt; (length == 0)
                {
                    &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived = 0;
                    &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.MessageArrived != &lt;span class="keyword"&gt;null&lt;/span&gt;)
                        &lt;span class="keyword"&gt;this&lt;/span&gt;.MessageArrived(&lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[0]);
                }
                &lt;span class="keyword"&gt;else&lt;/span&gt;
                {
                    &lt;span class="comment"&gt;// Create the data buffer and start reading into it&lt;/span&gt;
                    &lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="keyword"&gt;byte&lt;/span&gt;[length];
                    &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived = 0;
                }
            }
        }
        &lt;span class="keyword"&gt;else&lt;/span&gt;
        {
            &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived != &lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer.Length)
            {
                &lt;span class="comment"&gt;// We haven&amp;#39;t gotten all the data buffer yet: just wait for more data to arrive&lt;/span&gt;
            }
            &lt;span class="keyword"&gt;else&lt;/span&gt;
            {
                &lt;span class="comment"&gt;// We&amp;#39;ve gotten an entire packet&lt;/span&gt;
                &lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="keyword"&gt;this&lt;/span&gt;.MessageArrived != &lt;span class="keyword"&gt;null&lt;/span&gt;)
                    &lt;span class="keyword"&gt;this&lt;/span&gt;.MessageArrived(&lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer);
  
                &lt;span class="comment"&gt;// Start reading the length buffer again&lt;/span&gt;
                &lt;span class="keyword"&gt;this&lt;/span&gt;.dataBuffer = &lt;span class="keyword"&gt;null&lt;/span&gt;;
                &lt;span class="keyword"&gt;this&lt;/span&gt;.bytesReceived = 0;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7422738283602854737/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html#comment-form' title='16 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' title='Sample code: Length-prefix message framing for streams'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>16</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119</id><published>2009-04-30T19:49:00.004-04:00</published><updated>2013-05-17T09:17:17.991-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>Message Framing</title><content type='html'>&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;

&lt;h4&gt;The Problem&lt;/h4&gt;

&lt;p&gt;One of the most common beginner mistakes for people designing protocols for TCP/IP is that they assume that message boundaries are preserved. For example, they assume a single "Send" will result in a single "Receive".&lt;/p&gt;

&lt;p&gt;Some TCP/IP documentation is partially to blame. Many people read about how TCP/IP preserves packets - splitting them up when necessary and re-ordering and re-assembling them on the receiving side. This is perfectly true; however, a single "Send" does &lt;i&gt;not&lt;/i&gt; send a single &lt;i&gt;packet&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Local machine (loopback) testing confirms this misunderstanding, because usually when client and server are on the same machine they communicate quickly enough that single "sends" do in fact correspond to  single "receives". Unfortunately, this is only a coincidence.&lt;/p&gt;

&lt;p&gt;This problem usually manifests itself when attempting to deploy a solution to the Internet (increasing latency between client and server) or when trying to send larger amounts of data (requiring fragmentation). Unfortunately, at this point, the project is usually in its final stages, and sometimes the application protocol has even been published!&lt;/p&gt;

&lt;blockquote&gt;
True story: I once worked for a company that developed custom client/server software. The original communications code had made this common mistake. However, they were all on dedicated networks with high-end hardware, so the underlying problem only happened very rarely. When it did, the operators would just chalk it up to "that buggy Windows OS" or "another network glitch" and reboot. One of my tasks at this company was to change the communication to include a lot more information; of course, this caused the problem to manifest regularly, and the entire application protocol had to be changed to fix it. The truly amazing thing is that this software had been used in countless 24x7 automation systems for 20 years; it was fundamentally broken and no one noticed.
&lt;/blockquote&gt;

&lt;h4&gt;The Solution, Part 1 - Understanding&lt;/h4&gt;

&lt;p&gt;First, one must understand the abstraction of TCP/IP. From the application's perspective, TCP operates on &lt;i&gt;streams&lt;/i&gt; of data, &lt;i&gt;never packets&lt;/i&gt;. Repeat this mantra three times: "TCP does not operate on &lt;i&gt;packets&lt;/i&gt; of data. TCP operates on &lt;i&gt;streams&lt;/i&gt; of data."&lt;/p&gt;

&lt;p&gt;There is no way to send a packet of data over TCP; that function call does not exist. Rather, there are two streams in a TCP connection: an incoming stream and an outgoing stream. One may read from the incoming stream by calling a "receive" method, and one may write to the outgoing stream by calling a "send" method. If one side calls "send" to send 5 bytes, and then calls "send" to send 5 more bytes, then there are 10 bytes that are placed in the outgoing stream. The receiving side may decide to read them one at a time from its receiving stream if it so wishes (calling "receive" 10 times), or it may wait for all 10 bytes to arrive and then read them all at once with a single call to "receive".&lt;/p&gt;

&lt;p&gt;Sending data to the TCP stream is rather easy; all one has to do is call "send", and the appropriate bytes are queued to the outgoing stream. Receiving data from the TCP stream is a bit more tricky, because the "receive N bytes" operation will wait until &lt;i&gt;at least&lt;/i&gt; one byte and &lt;i&gt;at most&lt;/i&gt; N bytes arrive on the incoming stream before it returns. Note that the "receive N bytes" operation will complete even if it doesn't read all N bytes, giving the application a chance to act on partial data while the rest of the data bytes are in transit. In the real world, very few programs can process partial receives; almost all programs need a buffer to store partial receives until they have enough data to do meaningful work.&lt;/p&gt;

&lt;p&gt;To repeat: TCP operates on streams, not on packets. However, most application protocols are based on the idea of "messages"; for example, a client may send a "Lookup X" message to the server, and the server will respond with an "X Data" or "X Not Found" message. Since TCP operates on streams, one must design a "message framing" protocol that will wrap the messages sent back and forth.&lt;/p&gt;

&lt;h4&gt;The Solution, Part 2 - Design&lt;/h4&gt;

&lt;p&gt;There are two approaches commonly used for message framing: length prefixing and delimiters.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Length prefixing&lt;/b&gt; prepends each message with the length of that message. The format (and length) of the length prefix must be explicitly stated; "4-byte signed little-endian" (i.e., "int" in C#) is a common choice. To send a message, the sending side first converts the message to a byte array and then sends the length of the byte array followed by the byte array itself.&lt;/p&gt;

&lt;p&gt;Receiving a length-prefixed message is harder, because of the possibility of partial receives. First, one must read the length of the message into a buffer until the buffer is full (e.g., if using "4-byte signed little-endian", this buffer is 4 bytes). Then one allocates a second buffer and reads the data into that buffer. When the second buffer is full, then a single message has arrived, and one goes back to reading the length of the next message.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Delimiters&lt;/b&gt; are more complex to get right. When sending, any delimiter characters in the data must be replaced, usually with an escaping function. The receiving code cannot predict the incoming message size, so it must append all received data onto the end of a receiving buffer, growing the buffer as necessary. When a delimiter is found, the receiving side can apply an unescaping function to the receiving buffer to get the message. If the messages will never contain delimiters, then one may skip the escaping/unescaping functions.&lt;/p&gt;

&lt;h4&gt;A Brief Security Note&lt;/h4&gt;

&lt;p&gt;Whether using length-prefixing or delimiters, one must include code to prevent denial of service attacks. Length-prefixed readers can be given a huge message size; delimiting readers can be given a huge amount of data without delimiters. Either of these may result in an OutOfMemoryException, so one must include a maximum message size "sanity check" in the socket reading code.&lt;/p&gt;

&lt;h4&gt;The Solution, Part 3 - Code&lt;/h4&gt;

&lt;p&gt;A code sample for using length-prefixing is in its own blog post at &lt;a href="http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html"&gt;http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another decent code example of length prefixing is on &lt;a href="http://blogs.msdn.com/joncole/archive/2006/04/25/simple-message-framing-sample-for-tcp-socket-part-2-asynchronous.aspx"&gt;Jon Cole's blog&lt;/a&gt;, although he assumes all the messages are just ASCII strings.&lt;/p&gt;

&lt;p&gt;Yet another example of length prefixing is in the &lt;a href="http://www.codeplex.com/NitoAsync"&gt;Nito.Async&lt;/a&gt; library: the Nito.Async.Sockets.SocketPacketProtocol class can be used to send or receive length-prefixed binary messages. It is written to use the Nito.Async socket classes, but the same code concepts translate well to the .NET Socket class.&lt;/p&gt;

&lt;p&gt;(This post is part of the &lt;a href="http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html"&gt;TCP/IP .NET Sockets FAQ&lt;/a&gt;)&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/3743268255103099119/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html#comment-form' title='25 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html' title='Message Framing'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>25</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700</id><published>2009-04-30T19:40:00.020-04:00</published><updated>2014-05-16T16:52:24.379-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='TCP/IP sockets'/><title type='text'>TCP/IP .NET Sockets FAQ</title><content type='html'>&lt;p&gt;This is an attempt to address some TCP/IP frequently asked questions and present best practices. While the &lt;a href="http://tangentsoft.net/wskfaq/"&gt;WinSock Programmer's FAQ&lt;/a&gt; will remain the ultimate FAQ for native code, there is a growing need for a simplified version that addresses the managed interface to TCP/IP sockets.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Section 1 - Application Protocol Design&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/04/message-framing.html"&gt;1.1 - Message framing&lt;/a&gt;, also known as:&lt;br/&gt;
&amp;#160; "One side sent X bytes, but the other side only got Y bytes."&lt;br/&gt;
&amp;#160; "One side sent several packets, but the other side only got one packet, which was all the sent packets appended together."&lt;br/&gt;
&amp;#160; "I need the function that will send exactly one packet of data."&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html"&gt;1.2 - Detection of half-open (dropped) connections&lt;/a&gt;, also known as:&lt;br/&gt;
&amp;#160; "My socket doesn't detect a lost connection; it just sits there forever waiting for more data to arrive."&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/06/application-protocol-specifications.html"&gt;1.3 - Application Protocol Specifications&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/07/xml-over-tcpip.html"&gt;1.4 - XML over TCP/IP&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Section 2 - Socket Class&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/socket-operations.html"&gt;2.1 - Socket operations&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/error-handling.html"&gt;2.2 - Error handling&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html"&gt;2.3 - Using Socket as a client socket&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html"&gt;2.4 - Using Socket as a server (listening) socket&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html"&gt;2.5 - Using Socket as a connected socket&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Section 3 - Miscellaneous&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/tcpip-resources.html"&gt;3.1 - Resources&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/getting-local-ip-address.html"&gt;3.2 - Getting the local IP address&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Section C - Code&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html"&gt;C.1 - Length-prefix message framing for streams&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.stephencleary.com/2009/05/getting-local-ip-addresses.html"&gt;C.2 - Getting the local IP addresses&lt;/a&gt;
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4787791528826332700/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html#comment-form' title='9 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' title='TCP/IP .NET Sockets FAQ'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>9</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2514779491335645988</id><published>2009-04-24T23:59:00.008-04:00</published><updated>2009-06-20T11:40:08.398-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='callbacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.Async'/><title type='text'>Asynchronous Callback Contexts</title><content type='html'>&lt;p&gt;One major - and often overlooked - issue when designing asynchronous components is the difficulty of cancellation, particularly during object disposal.&lt;/p&gt;

&lt;h4&gt;The Problem&lt;/h4&gt;

&lt;p&gt;End-users do not expect components to raise events after they have been disposed. It is natural to assume that after an object has been disposed of, it will not raise an event some time in the future. Likewise, if the component has repeating events and supports cancellation, it is reasonable to assume that the events will stop firing after the component has been "cancelled". However, implementing this expected behavior takes some forethought.&lt;/p&gt;

&lt;p&gt;When asynchronous components raise events, these events are generally either queued to an "originating" thread or queued to be executed by the ThreadPool. Usually, it is a simple matter to cancel an upcoming event as long as it is not yet queued; the trick comes in how to handle cancelled events that have already been queued.&lt;/p&gt;

&lt;h4&gt;The Solution&lt;/h4&gt;

&lt;p&gt;The answer is to define some sort of "context". When the component queues an event, it copies the current value of the context, and when the event is actually processed, it first checks its value of the context against the component's current context value. If they match, then the event knows it is safe to continue; if they don't match, then the event knows it has been cancelled. The component then just changes its context value whenever it is cancelled or disposed.&lt;/p&gt;

&lt;p&gt;The .NET framework provides an excellent choice for contexts: object. Objects are compared using fast reference equality and they are fast to allocate and deallocate. A component includes an object reference as its context, and allocates a new one when it is cancelled or disposed. Earlier versions of Nito.Async asynchronous components used exactly this method.&lt;/p&gt;

&lt;h4&gt;Callback Contexts in the Real World&lt;/h4&gt;

&lt;p&gt;Fire up Reflector and take a look at System.Timers.Timer in System.dll (2.0.0.0). It has a private field of type object named "cookie". When the timer is enabled, it allocates a new object, saves it into "cookie", and passes it as the state object to the underlying System.Threading.Timer callback. The underlying timer callback (in MyTimerCallback) compares the state object to the current value of cookie, and doesn't proceed with the event if they don't match.&lt;/p&gt;

&lt;p&gt;System.Timers.Timer does not change "cookie" when it is disposed because the underlying System.Threading.Timer will not invoke its TimerCallback after it has been disposed. At first glance this appears correct, but this is actually a race condition bug because there is a possibility of System.Timers.Timer.Elapsed being invoked while another thread is executing System.Timers.Timer.Close. If SynchronizingObject is non-null, MyTimerCallback may queue the callback to the thread executing Dispose, resulting in a situation where an event (Elapsed) is fired after the object has been disposed.&lt;/p&gt;

&lt;h4&gt;Reusable CallbackContext Type&lt;/h4&gt;

&lt;p&gt;One of the new classes in version 1.2 of the &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito Async&lt;/a&gt; library is a reusable CallbackContext type. This class encapsulates all the semantics necessary, and introduces a few new terms:
&lt;ul&gt;
&lt;li&gt;A delegate may be &lt;i&gt;bound&lt;/i&gt; to a CallbackContext. Binding a delegate results in a new delegate (the &lt;i&gt;bound delegate&lt;/i&gt;) - which wraps the original delegate.&lt;/li&gt;
&lt;li&gt;Every bound delegate is either &lt;i&gt;valid&lt;/i&gt; or &lt;i&gt;invalid&lt;/i&gt;. When a valid delegate executes, it will execute its wrapped delegate; when an invalid delegate executes, it will do nothing.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;Delegates are bound to the CallbackContext by calling CallbackContext.Bind; delegates are valid when they are bound. A CallbackContext will invalidate all of its bound delegates when CallbackContext.Reset is called.&lt;/p&gt;

&lt;p&gt;To use CallbackContext from an asynchronous component, bind each delegate that needs to check the context. Then call CallbackContext.Reset when the operation is cancelled. CallbackContext also derives from IDisposable and implements Dispose (as a synonym for Reset) to remind users to call CallbackContext.Dispose when the asynchronous component is disposed.&lt;/p&gt;

&lt;p&gt;The only other note regarding CallbackContext is that the delegates should be synchronized (using SynchronizingObject or SynchronizationContext) before the bound delegate is invoked. We are considering adding overloads to CallbackContext to allow for synchronization and binding in a single step, ensuring the correct order; if they are added, they will be included in &lt;a href="http://nitoasync.codeplex.com/"&gt;Nito.Async&lt;/a&gt; version 1.3.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2514779491335645988/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/04/asynchronous-callback-contexts.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2514779491335645988'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2514779491335645988'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/asynchronous-callback-contexts.html' title='Asynchronous Callback Contexts'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4978924647491299228</id><published>2009-01-24T08:55:00.002-05:00</published><updated>2009-06-19T22:41:38.404-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Threading'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><category scheme='http://www.blogger.com/atom/ns#' term='Nito.Async'/><title type='text'>Announcing the release of Nito.Async</title><content type='html'>&lt;p&gt;
Nito Programs has released its first significant library as open-source:&lt;br/&gt;
  &lt;a href="http://www.codeplex.com/NitoAsync"&gt;http://www.codeplex.com/NitoAsync&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
This library makes it easier to develop framework-agnostic components that use the &lt;a href="http://msdn.microsoft.com/en-us/library/wewwczdw.aspx"&gt;event-based asynchronous pattern&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
What exactly this means - and why you might care - will be expounded on in the next few blog posts.
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4978924647491299228/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2009/01/announcing-release-of-nitoasync.html#comment-form' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4978924647491299228'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4978924647491299228'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/01/announcing-release-of-nitoasync.html' title='Announcing the release of Nito.Async'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2169153464577720326</id><published>2008-09-21T16:54:00.002-04:00</published><updated>2008-09-21T16:57:14.747-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>IDisposable article published</title><content type='html'>&lt;p&gt;Today I published my first article on CodeProject: &lt;a href="http://www.codeproject.com/KB/dotnet/IDisposable.aspx"&gt;IDisposable: What Your Mother Never Told You About Resource Deallocation&lt;/a&gt;. It's a description of the problems with IDisposable and introduces the Disposable Design Principle as a better alternative to Microsoft's recommended IDisposable code pattern.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2169153464577720326/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2008/09/idisposable-article-published.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2169153464577720326'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2169153464577720326'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/09/idisposable-article-published.html' title='IDisposable article published'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4579191360578225618</id><published>2008-09-16T21:45:00.003-04:00</published><updated>2009-05-14T06:57:47.229-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='OpenSSL'/><title type='text'>OpenSSL 0.9.8i Binaries</title><content type='html'>&lt;p&gt;We built the OpenSSL binaries for Windows, and made them publicly available at &lt;a href="http://sourceforge.net/project/showfiles.php?group_id=26202&amp;package_id=291670"&gt;http://sourceforge.net/project/showfiles.php?group_id=26202&amp;package_id=291670&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that there are a few differences for our version, compared to other binary packages:&lt;ul&gt;
&lt;li&gt;All patent-encumbered algorithms have been removed (e.g., IDEA, RC5, etc.).&lt;/li&gt;
&lt;li&gt;No static libraries are built; these are all DLLs.&lt;/li&gt;
&lt;li&gt;Include directories and HTML documentation are packaged as well, but no import libraries.&lt;/li&gt;
&lt;li&gt;No executables are included (e.g., openssl.exe).&lt;/li&gt;
&lt;li&gt;The x86 DLL does not have any dependency on the Microsoft Visual C++ Runtime Redistributables.&lt;/li&gt;
&lt;li&gt;An x64 (AMD64) version of the DLLs are also included, though they do depend on the Microsoft Visual C++ Runtime Redistributables.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/4579191360578225618/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2008/09/openssl-098i-binaries.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4579191360578225618'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/4579191360578225618'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/09/openssl-098i-binaries.html' title='OpenSSL 0.9.8i Binaries'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5679647286259626650</id><published>2008-07-24T10:30:00.002-04:00</published><updated>2009-07-21T11:01:20.367-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='P/Invoke'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Interop documentation pointers</title><content type='html'>&lt;p&gt;To become really proficient at good interop code, one must master a range of skills. The MSDN documentation is rather spread out regarding this, so here's an attempt to bring it together, as a "C++ .NET interop quick reference":
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/fzhhdwae.aspx"&gt;Development Tools and Languages :: Visual Studio :: .NET Framework Programming in Visual Studio :: .NET Framework Advanced Development :: Interoperability :: Interoperating with Unmanaged Code :: Interop Marshaling :: Marshaling Data with Platform Invoke&lt;/a&gt; - Gives a good overview of how to marshal the actual data to and from unmanaged code. Particularly useful when dealing with arrays and strings.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/s1kw2y09.aspx"&gt;Development Tools and Languages :: Visual Studio :: Visual C++ :: .NET Programming Guide :: Interoperability with Other .NET Languages&lt;/a&gt; - Details how to get C#-like behavior in C++.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/xey702bw.aspx"&gt;Development Tools and Languages :: Visual Studio :: Visual C++ :: Reference :: C/C++ Languages :: C++ Language Reference :: Language Features for Targeting the CLR&lt;/a&gt; - Reference information for cli::pin_ptr, cli::array, managed enums, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.marshal.aspx"&gt;.NET Development :: .NET Framework SDK :: .NET Framework :: .NET Framework Class Library :: System.Runtime.InteropServices Namespace :: Marshal Class&lt;/a&gt; - A BCL type that defines some very useful functions such as PtrToString* and StringTo*.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/5679647286259626650/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2008/07/interop-documentation-pointers.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5679647286259626650'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/5679647286259626650'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/interop-documentation-pointers.html' title='Interop documentation pointers'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9090864491995683835</id><published>2008-07-11T14:10:00.001-04:00</published><updated>2008-07-11T14:13:24.737-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Device drivers'/><title type='text'>Software-only device drivers: What's in a name?</title><content type='html'>&lt;p&gt;There's currently no consensus on the terminology used to refer to device drivers that do not have hardware. These types of drivers are quite useful in many scenarios:
&lt;ul&gt;
&lt;li&gt;Virtual CD-ROM drives can mount a CD image from your hard drive and pretend it was put in a CD-ROM drive&lt;/li&gt;
&lt;li&gt;Virtual network cards are used by somme VPN products like OpenVPN (as well as virtual machine systems like VMWare Workstation) to enable special netowrk communications (e.g., over a VPN or to a virtual machine).&lt;/li&gt;
&lt;li&gt;Virtual keyboards and mice are often used by gamepad systems&lt;/li&gt;
&lt;li&gt;Virtual serial ports are used for testing or running serial programs on laptops&lt;/li&gt;
&lt;li&gt;Virtual hard drives can be used as encrypted volumes&lt;/li&gt;
&lt;li&gt;Other virtual devices are often developed by companies for testing purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;The examples above are all drivers for virtual hardware. There is another class of drivers without hardware: monitor drivers, which attach to drivers for real (or virtual) hardware and observe (and/or change) the data going in and out of that driver. This is how programs like FileSpy and Process Monitor work. Finally, some drivers simply do not have anything to do with any hardware at all, real or virtual.&lt;/p&gt;

&lt;p&gt;There have been a few different names tossed around to describe these drivers without hardware:
&lt;ul&gt;
&lt;li&gt;"Virtual device drivers" - unfortunately, this has another meaning in the Windows world. Virtual device drivers (VxD's) were used in the 9x systems to help DOS programs run by sharing hardware - a virtual device was presented to each DOS program, which believed it had full access to the deivce, and the VxD would take care of managing the sharing of the device. Driver developers generall agree that the straightforward "virtual device driver" should not be used for drivers without hardware because of the possibility of this confusion.&lt;/li&gt;
&lt;li&gt;"Software device drivers" - this term could refer to any device driver, because they are all software. The term "software device driver" is in fact regularly used in this fashion, especially by those who work more with hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;This leaves us with the unambiguous but rather unweildly terms "device driver without hardware", "hardwareless device driver", or "software-only device driver". Of these, the term "software-only device driver" seems to be getting some gradual &lt;a href="http://www.google.com/search?q=%22software-only%22+device+driver"&gt;acceptance&lt;/a&gt; by the driver-writing community.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/9090864491995683835/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2008/07/software-only-device-drivers-whats-in.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9090864491995683835'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/9090864491995683835'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/software-only-device-drivers-whats-in.html' title='Software-only device drivers: What&apos;s in a name?'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242</id><published>2008-07-08T21:55:00.010-04:00</published><updated>2014-05-16T16:54:57.679-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Device drivers'/><title type='text'>Soyo widescreen monitor inf available</title><content type='html'>&lt;p&gt;This isn't exactly a programming-related post, but I had a problem that kept bugging me, so I finally decided to sit down and fix it today. I ended up writing a monitor .inf file for the Soyo Topaz 24"; this .inf file fixes two common problems:&lt;ol&gt;&lt;li&gt;Users cannot select the native 1920x1200 resolution&lt;/li&gt;
&lt;li&gt;Games fail with a "Signal out of range" error&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;Like many other people, I got in on the nice OfficeMax Black Friday sale about a year ago, scooping up (among other things) a &lt;a href="http://www.soyo.com/product/LCD_Monitors/9/TOPAZ_S_-_24%26quot%3B_Wide_TFT_LCD_Monitor/408"&gt;Soyo Topaz S 24" widescreen monitor&lt;/a&gt;... nice.&lt;/p&gt;

&lt;p&gt;However, like many other people, I had problems with Windows recognizing the natural display resolution of 1920x1200. It turns out that this monitor does not correctly report its supported resolutions; furthermore, Soyo's tech support leaves quite a bit to be desired - they have yet to admit that there is a problem.&lt;/p&gt;

&lt;p&gt;A lot of folks simply returned their monitors, but I went the route of a few others, disabling Windows' restrictions on resolutions. One obvious problem with this approach is that if you select a wrong resolution you can actually damage the hardware (at least, I know this used to be true, and the warning is still in the Windows dialog box). You just have to be careful not to select resolutions or refresh rates your monitor doesn't support.&lt;/p&gt;

&lt;p&gt;I was happily using my monitor in this fashion until today, when I tried to install a DirectX game. Like many other games, it automatically attempted to raise the refresh rate - not realizing that the monitor is an LCD and not CRT. This resulted in the infamous "Signal out of range" monitor message. In fact, no matter what I tried, this would happen, because even restricting to the monitor's supported resolutions did not restrict the frame rate (bad, Soyo, bad!)&lt;/p&gt;

&lt;p&gt;So, I decided to whip out the Soyo manual and make a custom monitor .inf file for my Soyo monitor... since they weren't going to do it. It took a bit more tinkering and time than I expected, but at the end of the day I was the proud owner of a monitor .inf file for the Soyo Topaz DYLM24D6.&lt;/p&gt;

&lt;p&gt;I decided to release this little utility for free &lt;a href="https://sourceforge.net/project/showfiles.php?group_id=213700&amp;amp;package_id=283420"&gt;on SourceForge&lt;/a&gt;. This should work for every commonly-used Windows system (2000, XP, 2003, Vista, 2008 / x86, x64, IA-64), although I've only thoroughly tested it on Vista x64.&lt;/p&gt;

&lt;p&gt;To install it, just right-click on the "Generic Non-PnP Monitor" in the Device Manager, update the drivers, and select the inf file.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp2.blogger.com/_okGvmvsjwYM/SHQicxd50DI/AAAAAAAAABU/PHge5tAtyPA/s1600-h/Step+1.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp2.blogger.com/_okGvmvsjwYM/SHQicxd50DI/AAAAAAAAABU/PHge5tAtyPA/s200/Step+1.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220835745739690034" /&gt;Right-click the "Generic Non-PnP Monitor" and select "Update Driver Software..."&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp2.blogger.com/_okGvmvsjwYM/SHQic9qN-gI/AAAAAAAAABc/6kfVa72CCXg/s1600-h/Step+2.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp2.blogger.com/_okGvmvsjwYM/SHQic9qN-gI/AAAAAAAAABc/6kfVa72CCXg/s200/Step+2.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220835749012568578" /&gt;Choose "Browse my computer for driver software"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp2.blogger.com/_okGvmvsjwYM/SHQidEpQMRI/AAAAAAAAABk/CIbLGQ4Nc28/s1600-h/Step+3.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp2.blogger.com/_okGvmvsjwYM/SHQidEpQMRI/AAAAAAAAABk/CIbLGQ4Nc28/s200/Step+3.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220835750887567634" /&gt;Choose "Let me pick from a list of device drivers on my computer"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp3.blogger.com/_okGvmvsjwYM/SHQidU2AlSI/AAAAAAAAABs/A_gGHH5RB2c/s1600-h/Step+4.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp3.blogger.com/_okGvmvsjwYM/SHQidU2AlSI/AAAAAAAAABs/A_gGHH5RB2c/s200/Step+4.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220835755236037922" /&gt;Click "Have Disk..."&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp1.blogger.com/_okGvmvsjwYM/SHQidpHdT7I/AAAAAAAAAB0/eNvSjcFCqbQ/s1600-h/Step+5.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp1.blogger.com/_okGvmvsjwYM/SHQidpHdT7I/AAAAAAAAAB0/eNvSjcFCqbQ/s200/Step+5.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220835760677932978" /&gt;Click "Browse..."&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp1.blogger.com/_okGvmvsjwYM/SHQiwiZRveI/AAAAAAAAAB8/oEg0DmAw5RY/s1600-h/Step+6.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp1.blogger.com/_okGvmvsjwYM/SHQiwiZRveI/AAAAAAAAAB8/oEg0DmAw5RY/s200/Step+6.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220836085291138530" /&gt;Select the Soyo.inf that was downloaded from SourceForge.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp0.blogger.com/_okGvmvsjwYM/SHQiw9rr6iI/AAAAAAAAACE/H_GtfN0Gd1Q/s1600-h/Step+7.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp0.blogger.com/_okGvmvsjwYM/SHQiw9rr6iI/AAAAAAAAACE/H_GtfN0Gd1Q/s200/Step+7.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220836092616108578" /&gt;Click "Next"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bp1.blogger.com/_okGvmvsjwYM/SHQiw5Gw1RI/AAAAAAAAACM/WqZ_YujVS5E/s1600-h/Step+8.png"&gt;&lt;img style="cursor:pointer; cursor:hand;" src="http://bp1.blogger.com/_okGvmvsjwYM/SHQiw5Gw1RI/AAAAAAAAACM/WqZ_YujVS5E/s200/Step+8.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5220836091387499794" /&gt;Confirm security question&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;Enjoy!&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/7360117115326108242/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html#comment-form' title='16 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' title='Soyo widescreen monitor inf available'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://bp2.blogger.com/_okGvmvsjwYM/SHQicxd50DI/AAAAAAAAABU/PHge5tAtyPA/s72-c/Step+1.png' height='72' width='72'/><thr:total>16</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2625502254167586547</id><published>2008-07-03T16:07:00.006-04:00</published><updated>2008-07-08T23:05:32.832-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Device drivers'/><title type='text'>Free IOCTL Decoder</title><content type='html'>&lt;p&gt;Unexpected IOCTL codes are something that every first-time driver writer must become accustomed to. Sometimes it can be difficult to find out the meaning of a particular IOCTL, since the driver sees it as just a number but the documentation requires a symbolic name and the header files use macros to define it. Often searching for just the number turns up no results, even on the WWW.&lt;/p&gt;

&lt;p&gt;Because of this common problem, we at Nito Programs have developed a small command-line utility to help decode IOCTLs. Unlike other IOCTL decoders, this utility does not just break down the number into fields; it actually contains a database of known IOCTLs defined by Microsoft. Since this utility has this information available, it supports searching by symbolic name as well as numerical value. Of course, if the IOCTL is not in the database, then the utility will break it down into fields just like other IOCTL decoders.&lt;/p&gt;

&lt;p&gt;Our IOCTL decoder also supports regular expression string matching, symbolic device name matching (useful for listing all IOCTLs for a particular device), and fuzzy matching (for those few IOCTLs that are defined with the wrong method/access type).&lt;/p&gt;

&lt;p&gt;We have decided to release this useful utility for free to the driver development community. It can be downloaded from 
&lt;a href="http://sourceforge.net/project/showfiles.php?group_id=213700&amp;amp;package_id=279739"&gt;SourceForge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you find it useful!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/2625502254167586547/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2008/07/free-ioctl-decoder.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2625502254167586547'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/2625502254167586547'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/free-ioctl-decoder.html' title='Free IOCTL Decoder'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1673816247823100812</id><published>2008-06-20T22:11:00.008-04:00</published><updated>2010-06-01T10:55:39.698-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='.NET'/><title type='text'>Dynamically loading 32-bit or 64-bit code from a platform-agnostic executable</title><content type='html'>&lt;p&gt;Have you ever had a BadImageFormatException? It can happen if your platform-agnostic .NET code attempts to load your old x86 dll on a new x64 machine...&lt;/p&gt;

&lt;p&gt;Most Microsoft native code dlls support x86, x64, and IA64 architectures. We have an interop dll for one of these (using managed C++'s IJW) that was recently updated to support x64 and IA64 as well as x86.&lt;/p&gt;

&lt;p&gt;The main executable for this project is C#, platform-agnostic, and we wanted to keep it that way. Normally, the installer would just install the exe and then choose one of the interop dll's to install, based on the architecture. However, we had to create a demo system that could be run without installing - so, the question became: how does one detect the platform at runtime and bind to the appropriate dll?&lt;/p&gt;

&lt;p&gt;Well, after spending a lot of time researching ways it wouldn't work (&amp;lt;probing&amp;gt;, GetSystemInfo, AppendPrivatePath), and rejecting setting up a second AppDomain (too much pain and overhead for one simple problem), we finally hit upon a ridiculously simple solution: handle the assembly's ModuleResolve event.&lt;/p&gt;

&lt;p&gt;IntPtr.Size gives you a hint on how to proceed, and from there, ModuleResolveEventHandler just needs a bit of try...except to distinguish x64 from IA64. You just have to be careful to handle re-entry situations (in case the dll really &lt;em&gt;is&lt;/em&gt; missing).&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.stephencleary.com/feeds/1673816247823100812/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://blog.stephencleary.com/2008/06/interop-on-64-bit-platforms.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1673816247823100812'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/posts/default/1673816247823100812'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/06/interop-on-64-bit-platforms.html' title='Dynamically loading 32-bit or 64-bit code from a platform-agnostic executable'/><author><name>Stephen Cleary, Nito Programs</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3363878292857010672</id><published>2009-06-13T12:31:55.875-04:00</published><updated>2009-06-13T12:31:55.875-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for useful information! Was looking for ...</title><content type='html'>Thank you for useful information! Was looking for a guide on optimal timeouts for a long time.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2755927640942482322/comments/default/3363878292857010672'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2755927640942482322/comments/default/3363878292857010672'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/error-handling.html?showComment=1244910715875#c3363878292857010672' title=''/><author><name>Autostorage</name><uri>http://www.blogger.com/profile/17409399800113624605</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_RQrboYs0M1w/SV4tHtn-hMI/AAAAAAAAAC4/qpI5dEVOArk/S220/123.png'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/error-handling.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2755927640942482322' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2755927640942482322' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-263697304'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, June 13, 2009 at 12:31:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1020053176616611082</id><published>2009-06-14T07:36:26.007-04:00</published><updated>2009-06-14T07:36:26.007-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>THANKS STEPHEN!!!!

I installed Windows 7 yesterda...</title><content type='html'>THANKS STEPHEN!!!!&lt;br /&gt;&lt;br /&gt;I installed Windows 7 yesterday and every thing was great (ie i was able to use the Soyo Topaz S @ 1900x1200)..... then all of a sudden the monotir revert back to 1024x768 and I couldn&amp;#39;t  increase it.  The fricking soyo web has been down for days,  but your monitor driver saved the day&lt;br /&gt;&lt;br /&gt;Thanks!!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1020053176616611082'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1020053176616611082'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1244979386007#c1020053176616611082' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-966877274'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, June 14, 2009 at 7:36:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6929104892611720829</id><published>2009-06-25T11:00:36.249-04:00</published><updated>2009-06-25T11:00:36.249-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi

What about UDP? Does it use streams like TCP? ...</title><content type='html'>Hi&lt;br /&gt;&lt;br /&gt;What about UDP? Does it use streams like TCP? Do you have any articles or links about it?&lt;br /&gt;&lt;br /&gt;Thank you</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/6929104892611720829'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/6929104892611720829'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1245942036249#c6929104892611720829' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1671825170'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, June 25, 2009 at 11:00:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8169415167415679731</id><published>2009-06-25T13:40:44.020-04:00</published><updated>2009-06-25T13:40:44.020-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>UDP does not use streams; it uses packets, so mess...</title><content type='html'>UDP does not use streams; it uses packets, so message framing is not always necessary. With UDP, however, you have to deal with issues such as unreliable delivery, re-ordering, and hard (possibly changing) maximum packet sizes.&lt;br /&gt;&lt;br /&gt;I don&amp;#39;t have any articles on UDP, and I don&amp;#39;t really plan on writing any. TCP is low-level enough to be confusing to many programmers.&lt;br /&gt;&lt;br /&gt;The books referenced in my post on TCP/IP resources (http://nitoprograms.blogspot.com/2009/05/tcpip-resources.html) do have UDP information.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/8169415167415679731'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/8169415167415679731'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1245951644020#c8169415167415679731' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, June 25, 2009 at 1:40:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-689290844058811750</id><published>2009-07-03T23:36:47.647-04:00</published><updated>2009-07-03T23:36:47.647-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>First of all a big thanks to Stephen.

I don&amp;#39;t...</title><content type='html'>First of all a big thanks to Stephen.&lt;br /&gt;&lt;br /&gt;I don&amp;#39;t seem to be able to make Windows 7 recognize native resolution of the SOYO monitor. &lt;br /&gt;&lt;br /&gt;However in Vista the INF works perfectly, although Vista used to be able to recognize this monitors native resolution during/after install that changed after I re-installed a fresh copy.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/689290844058811750'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/689290844058811750'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1246678607647#c689290844058811750' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-824316217'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 3, 2009 at 11:36:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-900450910702965020</id><published>2009-07-12T10:46:32.436-04:00</published><updated>2009-07-12T10:46:32.436-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Dear Friend,
I don&amp;#39;t know this is correct plac...</title><content type='html'>Dear Friend,&lt;br /&gt;I don&amp;#39;t know this is correct place to put this message, anyhow, I&amp;#39;m just writing, if you are think is it&amp;#39;s wrong please ignore.You are articles are nice and excellent concept. I would like to invite to newly launched .NET Programming website the codegain.com on 1st of this June 2009. Currently CodeGain has more than 450 articles within the a month under the followings categories C#, VB.NET,ASP.NET,WPF,WCF,WFF,LINQ,SilverLight, AJAX, JQuery, JavaScript, Sql Servers , Oracle and more. To more list of categories visit the http://www.codegain.com. I have seen you are writing greatest article to web portal, I’m kindly asking you publish your article in codegain.com also and support to grow the CodeGain share this with your friends also. I am expecting good response from you. You can contact me using info@codegain.com.&lt;br /&gt;&lt;br /&gt;Thank you&lt;br /&gt;RRaveen&lt;br /&gt;codegain.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1386133579838467798/comments/default/900450910702965020'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1386133579838467798/comments/default/900450910702965020'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/msbuild-real-world-recursive.html?showComment=1247409992436#c900450910702965020' title=''/><author><name>RRave</name><uri>http://www.blogger.com/profile/02162942492813501463</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='29' src='http://4.bp.blogspot.com/_XXhoLiK87qs/SeoObND7qDI/AAAAAAAAADo/ROkVa_JFjkY/S220/profile.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/msbuild-real-world-recursive.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1386133579838467798' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1386133579838467798' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1254665389'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, July 12, 2009 at 10:46:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-538709154309800045</id><published>2009-07-24T10:28:32.410-04:00</published><updated>2009-07-24T10:28:32.410-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Helps. Thank you.</title><content type='html'>Helps. Thank you.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/538709154309800045'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/538709154309800045'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1248445712410#c538709154309800045' title=''/><author><name>emrahustun</name><uri>http://www.blogger.com/profile/16123435078330948562</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-238949043'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 24, 2009 at 10:28:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8268275856640798353</id><published>2009-08-02T02:48:43.708-04:00</published><updated>2009-08-02T02:48:43.708-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Interesting, do you guys take care to release even...</title><content type='html'>Interesting, do you guys take care to release event handlers if the Child property is swapped out with another FakeVM?&lt;br /&gt;&lt;br /&gt;Josh (http://www.thejoyofcode.com/)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/91778858040501906/comments/default/8268275856640798353'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/91778858040501906/comments/default/8268275856640798353'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/this-post-illustrates-one-of-several.html?showComment=1249195723708#c8268275856640798353' title=''/><author><name>Josh</name><uri>http://www.thejoyofcode.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/this-post-illustrates-one-of-several.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-91778858040501906' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/91778858040501906' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1695311845'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, August 2, 2009 at 2:48:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5970847523606523357</id><published>2009-08-02T10:26:32.372-04:00</published><updated>2009-08-02T10:26:32.372-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes. We also use (abuse?) IDisposable for unsubscr...</title><content type='html'>Yes. We also use (abuse?) IDisposable for unsubscribing to everything at the end of life (this was a more controversial decision).&lt;br /&gt;&lt;br /&gt;Internally, the Path is split by the member access operator and a SimplePropertyPath.SubscriptionStep is built for each member access (so &amp;quot;a.b.c&amp;quot; has three subscription steps). The (private) SimplePropertyPath.Dismantle method will unsubscribe all subscription steps from a certain index forward, and SimplePropertyPath.Construct will re-evaluate and subscribe each subscription step from a certain index forward.&lt;br /&gt;&lt;br /&gt;The source is available for download, though the first official release is still several weeks away. SimplePropertyPath is one of the more mature classes, and could be considered in a RC stage.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/91778858040501906/comments/default/5970847523606523357'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/91778858040501906/comments/default/5970847523606523357'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/this-post-illustrates-one-of-several.html?showComment=1249223192372#c5970847523606523357' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/this-post-illustrates-one-of-several.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-91778858040501906' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/91778858040501906' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, August 2, 2009 at 10:26:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7461273916050571903</id><published>2009-08-05T05:38:26.417-04:00</published><updated>2009-08-05T05:38:26.417-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Why on Windows 2008 (r2) on reading packet without...</title><content type='html'>Why on Windows 2008 (r2) on reading packet without valid structure (lenght prefix + data) system don&amp;#39;t throw Out Of Memory exception and system will hangs? Is a way to avid this?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2755927640942482322/comments/default/7461273916050571903'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2755927640942482322/comments/default/7461273916050571903'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/error-handling.html?showComment=1249465106417#c7461273916050571903' title=''/><author><name>flatplanet</name><uri>http://x-world.pl</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/error-handling.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2755927640942482322' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2755927640942482322' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1599906496'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, August 5, 2009 at 5:38:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5291390440437469492</id><published>2009-08-05T08:35:16.328-04:00</published><updated>2009-08-05T08:35:16.328-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@flatplanet: It &amp;quot;hangs&amp;quot; because it is wa...</title><content type='html'>@flatplanet: It &amp;quot;hangs&amp;quot; because it is waiting for the rest of the data to arrive.&lt;br /&gt;&lt;br /&gt;You could add a timer, so that the entire message would have to arrive within a certain time after the length prefix arrives. The length prefix example code has a maximum message size, but no timer.&lt;br /&gt;&lt;br /&gt;Of course, the best way to avoid it is to fix the other side so that it sends valid data. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2755927640942482322/comments/default/5291390440437469492'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2755927640942482322/comments/default/5291390440437469492'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/error-handling.html?showComment=1249475716328#c5291390440437469492' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/error-handling.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2755927640942482322' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2755927640942482322' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, August 5, 2009 at 8:35:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6859186507337446134</id><published>2009-08-06T20:36:12.974-04:00</published><updated>2009-08-06T20:36:12.974-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen 
I found your library on the Codeplex, ...</title><content type='html'>Hi Stephen &lt;br /&gt;I found your library on the Codeplex, stress tested it with over 30 clients and one server, and is working like a charm. Grate work, thanks.&lt;br /&gt;In teh doc, it says, that various methods can not be initiated from a free-threading model. Does this mean that the library can not be used in a background thread or windows service?&lt;br /&gt;Most of my applications does not have a UI, so I am going to use the library in .NET DLLs, would this be ok. Any help is appriciated. Thanks again.&lt;br /&gt;&lt;br /&gt;Regards&lt;br /&gt;Sam</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4978924647491299228/comments/default/6859186507337446134'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4978924647491299228/comments/default/6859186507337446134'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/01/announcing-release-of-nitoasync.html?showComment=1249605372974#c6859186507337446134' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/01/announcing-release-of-nitoasync.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4978924647491299228' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4978924647491299228' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1180975022'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 6, 2009 at 8:36:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9006623880654839549</id><published>2009-08-07T08:52:20.787-04:00</published><updated>2009-08-07T08:52:20.787-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello, Sam -

The socket classes in the Nito.Async...</title><content type='html'>Hello, Sam -&lt;br /&gt;&lt;br /&gt;The socket classes in the Nito.Async library use the Event-Based Asynchronous Pattern. Part of this pattern is synchronizing the event callbacks with the originating thread. The problem with &amp;quot;threads without a synchronization context&amp;quot; is that they don&amp;#39;t have a way to synchronize event callbacks.&lt;br /&gt;&lt;br /&gt;If you wish to use the Nito socket classes (or any other EBAP-based class) from a child thread, windows service, or console application, then you&amp;#39;ll need to provide your own synchronization context for that thread. Nito.Async does provide a class that helps with this: ActionDispatcher. I know there isn&amp;#39;t example code (this will be addressed in the next release), but hopefully the docs will get you started.&lt;br /&gt;&lt;br /&gt;The idea is that a child thread will call ActionDispatcher.Run to enter a message loop; the thread has a synchronization context as long as it is executing Run(). Other threads (or that same thread) may call ActionDispatcher.QueueAction to queue up work for that thread (i.e., a &amp;quot;ConnectToServer&amp;quot; delegate). Any EBAP components used by that thread&amp;#39;s queued actions will use its sync context, so all their events end up getting queued in the same way. When it is time for the thread to exit, some thread calls ActionDispatcher.QueueExit, which causes Run to return.&lt;br /&gt;&lt;br /&gt;Note: ActionDispatcher should not be used by ThreadPool threads.&lt;br /&gt;&lt;br /&gt;Hope this is enough to get you started; if you have any questions, feel free to post to the CodePlex discussions or here.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4978924647491299228/comments/default/9006623880654839549'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4978924647491299228/comments/default/9006623880654839549'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/01/announcing-release-of-nitoasync.html?showComment=1249649540787#c9006623880654839549' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/01/announcing-release-of-nitoasync.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4978924647491299228' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4978924647491299228' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, August 7, 2009 at 8:52:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1520765037547893092</id><published>2009-09-02T22:56:27.365-04:00</published><updated>2009-09-02T22:56:27.365-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>thank you thank you thank you....it was an easy in...</title><content type='html'>thank you thank you thank you....it was an easy install...works great !!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1520765037547893092'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1520765037547893092'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1251946587365#c1520765037547893092' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-668773377'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, September 2, 2009 at 10:56:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4794878210902482158</id><published>2009-09-05T13:17:56.028-04:00</published><updated>2009-09-05T13:17:56.028-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;gt; Currently, we have Enumerable (pull) and
&amp;gt;...</title><content type='html'>&amp;gt; Currently, we have Enumerable (pull) and&lt;br /&gt;&amp;gt; Observable (push) models, but there are no &lt;br /&gt;&amp;gt; easy translators between the two (these &lt;br /&gt;&amp;gt; &amp;quot;translators&amp;quot; require dedicated threads).&lt;br /&gt;&lt;br /&gt;Actually, Rx does support (several) conversions in both directions. As you mention they introduce and remove concurrency.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/4794878210902482158'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/4794878210902482158'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html?showComment=1252171076028#c4794878210902482158' title=''/><author><name>HeadInTheBox</name><uri>http://channel9.msdn.com/shows/Going+Deep/Expert-to-Expert-Brian-Beckman-and-Erik-Meijer-Inside-the-NET-Reactive-Framework-Rx/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3902565242415050614' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3902565242415050614' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-522241667'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, September 5, 2009 at 1:17:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4687337774347709504</id><published>2009-09-08T05:06:33.017-04:00</published><updated>2009-09-08T05:06:33.017-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Correct; the actual Rx framework does have these c...</title><content type='html'>Correct; the actual Rx framework does have these conversions. However, according to another Channel9 video I saw, they won&amp;#39;t be included in the BCL. Last I heard is that they will be offered on CodePlex after the 4.0 release.&lt;br /&gt;&lt;br /&gt;I&amp;#39;d love to see this change, and have these conversions in the 4.0 release.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/4687337774347709504'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/4687337774347709504'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html?showComment=1252400793017#c4687337774347709504' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3902565242415050614' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3902565242415050614' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, September 8, 2009 at 5:06:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3929138352078725017</id><published>2009-09-27T04:07:28.219-04:00</published><updated>2009-09-27T04:07:28.219-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Congrats! (-:</title><content type='html'>Congrats! (-:</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3115449230557179038/comments/default/3929138352078725017'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3115449230557179038/comments/default/3929138352078725017'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/mcpd-achieved.html?showComment=1254038848219#c3929138352078725017' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/09/mcpd-achieved.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3115449230557179038' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3115449230557179038' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-414871012'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, September 27, 2009 at 4:07:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8108126825387790839</id><published>2009-10-26T22:11:53.584-04:00</published><updated>2009-10-26T22:11:53.584-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Your pseudocode (and Erik Meijer&amp;#39;s) has

var d...</title><content type='html'>Your pseudocode (and Erik Meijer&amp;#39;s) has&lt;br /&gt;&lt;br /&gt;var d = new Action&amp;lt;T&amp;gt;(h.Yield);&lt;br /&gt;&lt;br /&gt;I think this was meant to be h.OnUpdate (there is no Yield method in IObserver&amp;lt;T&amp;gt;)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/8108126825387790839'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/8108126825387790839'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html?showComment=1256609513584#c8108126825387790839' title=''/><author><name>Corey Kosak</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3902565242415050614' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3902565242415050614' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-639430772'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 26, 2009 at 10:11:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4063570799726831940</id><published>2009-10-27T08:48:29.138-04:00</published><updated>2009-10-27T08:48:29.138-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes; I mostly just posted the code from his slides...</title><content type='html'>Yes; I mostly just posted the code from his slides that he skipped through on his talk (but I did add my own comments to the drag/drop example to make it clearer).&lt;br /&gt;&lt;br /&gt;I believe it should actually be h.OnNext. The names of the IObservable/IObserver members have changed a number of times. The current revision is documented with the .NET 4 Beta 2 release here: http://msdn.microsoft.com/en-us/library/dd992814(VS.100).aspx - though it may change again. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/4063570799726831940'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3902565242415050614/comments/default/4063570799726831940'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html?showComment=1256647709138#c4063570799726831940' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/09/notes-from-rx-talk.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3902565242415050614' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3902565242415050614' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 27, 2009 at 8:48:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5357154383054544658</id><published>2009-10-30T11:27:16.923-04:00</published><updated>2009-10-30T11:27:16.923-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello!
I see new Nito new version and I have quest...</title><content type='html'>Hello!&lt;br /&gt;I see new Nito new version and I have question about it: Someone use Nito client  in the Silverlight application to connect to Nito server?&lt;br /&gt;&lt;br /&gt;Best Regards&lt;br /&gt;Krzysiek</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6581531877972738424/comments/default/5357154383054544658'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6581531877972738424/comments/default/5357154383054544658'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/nitoasync-14-released.html?showComment=1256916436923#c5357154383054544658' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/09/nitoasync-14-released.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6581531877972738424' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6581531877972738424' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1204676430'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 30, 2009 at 11:27:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9221170059961714667</id><published>2009-11-04T08:12:31.251-05:00</published><updated>2009-11-04T08:12:31.251-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;ll address this question on the Nito.Async D...</title><content type='html'>I&amp;#39;ll address this question on the Nito.Async Discussions: http://nitoasync.codeplex.com/Thread/View.aspx?ThreadId=74031</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6581531877972738424/comments/default/9221170059961714667'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6581531877972738424/comments/default/9221170059961714667'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/09/nitoasync-14-released.html?showComment=1257340351251#c9221170059961714667' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/09/nitoasync-14-released.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6581531877972738424' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6581531877972738424' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 4, 2009 at 8:12:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7969941402661390643</id><published>2009-11-05T14:05:01.336-05:00</published><updated>2009-11-05T14:05:01.336-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>oh man, I got so excited when I found this post, I...</title><content type='html'>oh man, I got so excited when I found this post, I have been using windows 7, with the 24&amp;quot; soyo &amp;quot;pearl&amp;quot; monitor, everything has been fine for weeks and then I turned the computer on the other day and the resolution would not be recognized... max 1024X768, or 1600x1200 with the vga cable. I can&amp;#39;t for the life of me figure it out. Sadly this custom driver did not work for me, sucks, I was so optimistic.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/7969941402661390643'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/7969941402661390643'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1257447901336#c7969941402661390643' title=''/><author><name>AaronTaylorHarvey.com</name><uri>http://www.blogger.com/profile/10607228220672822396</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='31' height='32' src='http://4.bp.blogspot.com/_tgpEfw-fBwY/SSD2BTtUpdI/AAAAAAAABgE/o-Y8SYofr2k/S220/ambassador+harvey+small.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-531318018'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 5, 2009 at 2:05:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1614209625880017284</id><published>2009-11-29T16:26:19.059-05:00</published><updated>2009-11-29T16:26:19.059-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>yeah, it doesnt work for me either. i can find no ...</title><content type='html'>yeah, it doesnt work for me either. i can find no solution :[</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1614209625880017284'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1614209625880017284'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1259529979059#c1614209625880017284' title=''/><author><name>bradsh</name><uri>http://www.blogger.com/profile/09318358869756682205</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1880451189'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 29, 2009 at 4:26:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8651139343846324106</id><published>2009-12-03T16:35:33.819-05:00</published><updated>2009-12-03T16:35:33.819-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hey Stephen,

Do you welcome questions about this?...</title><content type='html'>Hey Stephen,&lt;br /&gt;&lt;br /&gt;Do you welcome questions about this?  Threading has honestly never been my strong suit, and I&amp;#39;d love understand better some of the reasons why certain things should or should not be used.&lt;br /&gt;&lt;br /&gt;Thanks for sharing this!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3523765442219888209/comments/default/8651139343846324106'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3523765442219888209/comments/default/8651139343846324106'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/12/slides-from-nmnug-available.html?showComment=1259876133819#c8651139343846324106' title=''/><author><name>Robert Hencke</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/12/slides-from-nmnug-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3523765442219888209' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3523765442219888209' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1893621274'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, December 3, 2009 at 4:35:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-460878661376310370</id><published>2009-12-04T08:49:07.403-05:00</published><updated>2009-12-04T08:49:07.403-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes.

The best way to ask threading questions is o...</title><content type='html'>Yes.&lt;br /&gt;&lt;br /&gt;The best way to ask threading questions is on an MSDN forum. This gives you the chance to get responses from other threading experts, and also provides answers to other learners.&lt;br /&gt;&lt;br /&gt;If you want me to take a look at a particular question, go ahead and post it to an MSDN forum and then send me an email pointing me to it. (My email is in the upper right of my blog). Normally I monitor the forums, but the last month or so has been crazy. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3523765442219888209/comments/default/460878661376310370'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3523765442219888209/comments/default/460878661376310370'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/12/slides-from-nmnug-available.html?showComment=1259934547403#c460878661376310370' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/12/slides-from-nmnug-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3523765442219888209' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3523765442219888209' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, December 4, 2009 at 8:49:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2646569564117526374</id><published>2009-12-23T19:34:14.704-05:00</published><updated>2009-12-23T19:34:14.704-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>still not working for me, i have the 24&amp;quot; topa...</title><content type='html'>still not working for me, i have the 24&amp;quot; topaz s on win 7. I followed all the steps, should I disable the &amp;quot;generic non pnp&amp;quot;?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/2646569564117526374'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/2646569564117526374'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1261614854704#c2646569564117526374' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-980449864'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, December 23, 2009 at 7:34:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8497595046685248698</id><published>2009-12-28T08:25:20.017-05:00</published><updated>2009-12-28T08:25:20.017-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Not working for me either.

I&amp;#39;m using the 24&amp;q...</title><content type='html'>Not working for me either.&lt;br /&gt;&lt;br /&gt;I&amp;#39;m using the 24&amp;quot; Topaz S and windows XP.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/8497595046685248698'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/8497595046685248698'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1262006720017#c8497595046685248698' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1807201742'/><gd:extendedProperty name='blogger.displayTime' value='Monday, December 28, 2009 at 8:25:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3479487892250628952</id><published>2009-12-28T15:34:23.193-05:00</published><updated>2009-12-28T15:34:23.193-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks! I was about to dig into the source code my...</title><content type='html'>Thanks! I was about to dig into the source code myself to figure this out since the documentation is so bad.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/3479487892250628952'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/3479487892250628952'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html?showComment=1262032463193#c3479487892250628952' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-893607831'/><gd:extendedProperty name='blogger.displayTime' value='Monday, December 28, 2009 at 3:34:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6389614583245767523</id><published>2009-12-30T03:04:38.198-05:00</published><updated>2009-12-30T03:04:38.198-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>An excellent information. Thanks a lot, I was just...</title><content type='html'>An excellent information. Thanks a lot, I was just going to implement the solution 3 without knowing if this was a good solution.&lt;br /&gt;&lt;br /&gt;Thanks again,</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6389614583245767523'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6389614583245767523'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1262160278198#c6389614583245767523' title=''/><author><name>Ignacio</name><uri>http://patronesvbnet.blogspot.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1352201497'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, December 30, 2009 at 3:04:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-601739865975690330</id><published>2009-12-30T03:11:37.960-05:00</published><updated>2009-12-30T03:11:37.960-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Again, an excellent article. I will repeat 5 times...</title><content type='html'>Again, an excellent article. I will repeat 5 times more the mantra. Thanks a lot.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/601739865975690330'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/601739865975690330'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1262160697960#c601739865975690330' title=''/><author><name>Ignacio</name><uri>http://patronesvbnet.blogspot.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1352201497'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, December 30, 2009 at 3:11:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6233791770475565413</id><published>2010-01-04T03:21:59.877-05:00</published><updated>2010-01-04T03:21:59.877-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I must say this is the best and most organized res...</title><content type='html'>I must say this is the best and most organized resource regarding TCP/IP sockets. I wish you had it published in book.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/6233791770475565413'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/6233791770475565413'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1262593319877#c6233791770475565413' title=''/><author><name>Ali</name><uri>http://www.blogger.com/profile/13277015394096768085</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2062102251'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 4, 2010 at 3:21:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4379890896265344403</id><published>2010-01-04T04:08:00.698-05:00</published><updated>2010-01-04T04:08:00.698-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Is it worth to someone that only codes in the .Net...</title><content type='html'>Is it worth to someone that only codes in the .Net environment or the problems discussed at the book are already solved by this environment?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/4379890896265344403'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/4379890896265344403'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html?showComment=1262596080698#c4379890896265344403' title=''/><author><name>Ignacio Soler</name><uri>http://patronesvbnet.blogspot.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8219041667609113888' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8219041667609113888' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1352201497'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 4, 2010 at 4:08:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7811397986219661358</id><published>2010-01-04T11:43:27.559-05:00</published><updated>2010-01-04T11:43:27.559-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>When i use the following code in .NET 1.1 in get t...</title><content type='html'>When i use the following code in .NET 1.1 in get the following error &amp;quot;A socket operation was attempted to an unreachable host&amp;quot; below is the code...&lt;br /&gt;&lt;br /&gt;main_sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);&lt;br /&gt;main_ipEndPoint = new IPEndPoint(Dns.GetHostByName(server).AddressList[0], this.port);&lt;br /&gt;&lt;br /&gt;main_sock.Connect(main_ipEndPoint);&lt;br /&gt;&lt;br /&gt;Can u please help me in this regard.&lt;br /&gt;&lt;br /&gt;Thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/7811397986219661358'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/7811397986219661358'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html?showComment=1262623407559#c7811397986219661358' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7634204289692406306' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1310963311'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 4, 2010 at 11:43:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4407467956821998483</id><published>2010-01-04T13:46:46.856-05:00</published><updated>2010-01-04T13:46:46.856-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous:

http://nitoprograms.blogspot.com/2009...</title><content type='html'>@Anonymous:&lt;br /&gt;&lt;br /&gt;http://nitoprograms.blogspot.com/2009/05/getting-local-ip-address.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/4407467956821998483'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/4407467956821998483'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html?showComment=1262630806856#c4407467956821998483' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7634204289692406306' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 4, 2010 at 1:46:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5670232873551201267</id><published>2010-01-04T13:47:59.985-05:00</published><updated>2010-01-04T13:47:59.985-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No; .NET and C# only solve a small number of commo...</title><content type='html'>No; .NET and C# only solve a small number of common programming problems. This book is a great benefit to any .NET programmer.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/5670232873551201267'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/5670232873551201267'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html?showComment=1262630879985#c5670232873551201267' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8219041667609113888' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8219041667609113888' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 4, 2010 at 1:47:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-379559256464958919</id><published>2010-01-16T22:16:23.054-05:00</published><updated>2010-01-16T22:16:23.054-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Well, after much playing around with the .inf and ...</title><content type='html'>Well, after much playing around with the .inf and the nvidia display manager, this did work for Windows 7</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/379559256464958919'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/379559256464958919'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1263698183054#c379559256464958919' title=''/><author><name>ort11</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-395317382'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, January 16, 2010 at 10:16:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6741603422014001863</id><published>2010-02-11T14:00:36.383-05:00</published><updated>2010-02-11T14:00:36.383-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Well... I found your blog today and i think you ar...</title><content type='html'>Well... I found your blog today and i think you are FANTASTIC!!!!! &lt;br /&gt;You inspire me and keeps me on the right track. &lt;br /&gt;Keep up with the good work!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4111774602817740749/comments/default/6741603422014001863'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4111774602817740749/comments/default/6741603422014001863'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/super-agile-or-cowboy-coding.html?showComment=1265914836383#c6741603422014001863' title=''/><author><name>Jeremi</name><uri>http://www.blogger.com/profile/06245036848722612548</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><gd:extendedProperty name='blogger.itemClass' value='pid-1600034627'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 11, 2010 at 2:00:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4594754048735204546</id><published>2010-02-17T04:53:57.595-05:00</published><updated>2010-02-17T04:53:57.595-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

I read all the posts about IDisposabl...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;I read all the posts about IDisposable, finding them really interesting.&lt;br /&gt;&lt;br /&gt;I implemented several times the &amp;quot;old pattern&amp;quot; finding it crappy and rarely safe as expected.&lt;br /&gt;&lt;br /&gt;I still have some doubt, that you may help to clarify. &lt;br /&gt;&lt;br /&gt;a) First rule,nullify objects (neither managed nor unmanaged resource): In Java this may help GC, Is it completely irrelevant in .Net? Have you some link /docs to suggest?&lt;br /&gt;&lt;br /&gt;b) Second rule: IMHO the most important uncovered aspect is about &amp;quot;ObjectDisposedException&amp;quot;. ODE check is tedious and error prone even if the managed resource is correctly wrapped, (you may need to handle ODE at higher level) multithreaded  programming may become a nightmare. &lt;br /&gt;&lt;br /&gt;c)  Third rule: same problems about ODE, plus even if I like the separation between wrapper and close wrapper ODE may becomes more complicated.      &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Finally few word about the concept of &amp;quot;Managed Resource&amp;quot; and IDisposable.&lt;br /&gt;&lt;br /&gt;In my opinion the concept of managed resource is a bit vague, and is more related to the intention of the programmer. IDisposable for example is widely used in RX framework to encapsulate a subscription (see IObserver/IObservable in 4.0) , it may be used to elegantly pool objects, and i found other interesting application of this interface and specific behavior in .Net (aka &amp;quot;using&amp;quot;).&lt;br /&gt;&lt;br /&gt;I appreciate your opinion, or better you may think to a new post about argument.&lt;br /&gt;&lt;br /&gt;Fedespagno</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4984290264686516328/comments/default/4594754048735204546'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4984290264686516328/comments/default/4594754048735204546'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/how-to-implement-idisposable-and.html?showComment=1266400437595#c4594754048735204546' title=''/><author><name>FedeSpagno</name><uri>http://www.blogger.com/profile/11861523383583180770</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='27' height='32' src='http://2.bp.blogspot.com/_05snbwpNDnQ/SmIyYERtQtI/AAAAAAAAAEw/6w6RyA5B01A/S220/public+picture.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/02/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4984290264686516328' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4984290264686516328' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1827373124'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, February 17, 2010 at 4:53:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3559907212771955289</id><published>2010-02-17T09:52:11.347-05:00</published><updated>2010-02-17T09:52:11.347-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for your comments.

a) I&amp;#39;ll answer this...</title><content type='html'>Thanks for your comments.&lt;br /&gt;&lt;br /&gt;a) I&amp;#39;ll answer this in an upcoming blog post.&lt;br /&gt;b-c) Yes, I don&amp;#39;t bother to implement ODE, instead opting for &amp;quot;undefined behavior&amp;quot;. The full rationale behind this is in my &lt;a href="http://www.codeproject.com/KB/dotnet/idisposable.aspx" rel="nofollow"&gt;IDisposable CodeProject article&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Regarding &amp;quot;managed resources&amp;quot;, I consider any IDisposable class to be a managed resource. This includes &amp;quot;resources&amp;quot; such as observer subscriptions or borrowing from a pool. If the resource is considered important enough to warrant implementing IDisposable, then it should be disposed when no longer needed.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4984290264686516328/comments/default/3559907212771955289'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4984290264686516328/comments/default/3559907212771955289'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/how-to-implement-idisposable-and.html?showComment=1266418331347#c3559907212771955289' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/02/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4984290264686516328' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4984290264686516328' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, February 17, 2010 at 9:52:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6829111096529744885</id><published>2010-02-22T04:45:08.403-05:00</published><updated>2010-02-22T04:45:08.403-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I wouldn&amp;#39;t use values of another class instanc...</title><content type='html'>I wouldn&amp;#39;t use values of another class instance in a finalizer (HandleHolder) but directly make HandleHolder Diposable and add a finalizer to it.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8509063995624958145/comments/default/6829111096529744885'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8509063995624958145/comments/default/6829111096529744885'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html?showComment=1266831908403#c6829111096529744885' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8509063995624958145' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8509063995624958145' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-54987069'/><gd:extendedProperty name='blogger.displayTime' value='Monday, February 22, 2010 at 4:45:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1434914657208321465</id><published>2010-02-22T08:51:03.790-05:00</published><updated>2010-02-22T08:51:03.790-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The intent of the &amp;quot;HandleHolder&amp;quot; example...</title><content type='html'>The intent of the &amp;quot;HandleHolder&amp;quot; example is to show a very unusual situation; it is not recommended example code.&lt;br /&gt;&lt;br /&gt;Usually, a &amp;quot;HandleHolder&amp;quot;-style situation will have two separate variables holding the actual handle, and in that case GC.KeepAlive would be required unless GC.SuppressFinalize is called.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8509063995624958145/comments/default/1434914657208321465'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8509063995624958145/comments/default/1434914657208321465'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html?showComment=1266846663790#c1434914657208321465' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/q-if-dispose-calls-suppressfinalize-is.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8509063995624958145' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8509063995624958145' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, February 22, 2010 at 8:51:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8788925854259982778</id><published>2010-02-25T10:49:28.787-05:00</published><updated>2010-02-25T10:49:28.787-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excellent article...you should back up your assert...</title><content type='html'>Excellent article...you should back up your assertion from the same conclusion stated by the MSDN docs: &lt;a href="http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx" rel="nofollow"&gt;Implementing a Dispose Method&lt;/a&gt;.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/8788925854259982778'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/8788925854259982778'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1267112968787#c8788925854259982778' title=''/><author><name>William Wegerson</name><uri>http://www.omegacoder.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1389469009'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 25, 2010 at 10:49:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2845919751228264858</id><published>2010-03-01T11:27:31.920-05:00</published><updated>2010-03-01T11:27:31.920-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Oh...I would add one other rule:

Implement IDispo...</title><content type='html'>Oh...I would add one other rule:&lt;br /&gt;&lt;br /&gt;Implement IDisposable if you have (managed) events which need to be unsubscribed too. Otherwise the managed object will become pinned in memory due to the subscribed event(s).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2845919751228264858'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2845919751228264858'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1267460851920#c2845919751228264858' title=''/><author><name>William Wegerson</name><uri>http://www.omegacoder.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1389469009'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 1, 2010 at 11:27:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6073877149677338278</id><published>2010-03-02T11:03:45.827-05:00</published><updated>2010-03-02T11:03:45.827-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There isn&amp;#39;t a clear consensus at this point re...</title><content type='html'>There isn&amp;#39;t a clear consensus at this point regarding event subscriptions. There are three different approaches that I&amp;#39;ve seen:&lt;br /&gt;1) The class providing the event treats its event subscriptions as managed resources, unsubscribing all of its subscribers when it is disposed. [This is William&amp;#39;s recommendation above].&lt;br /&gt;2) The class receiving the event treats its event subscriptions as managed resources, unsubscribing from its providers when it is disposed. This pattern is commonly found in MVVM projects, and is a little trickier to implement.&lt;br /&gt;3) The event subscription itself is considered a managed resource, initially owned by whatever component created the event subscription. This more closely follows the pattern used by the Rx framework.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/6073877149677338278'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/6073877149677338278'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1267545825827#c6073877149677338278' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 2, 2010 at 11:03:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4715105462994624253</id><published>2010-03-02T16:54:00.796-05:00</published><updated>2010-03-02T16:54:00.796-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I am surprised that you say you are highly skeptic...</title><content type='html'>I am surprised that you say you are highly skeptical about almost everything and yet make a special exception for anything grounded in the Bible. I am particularly surprised because you are clearly a very intelligent person, and yet single out a specific book like that, and blindly trust everything in it...&lt;br /&gt;&lt;br /&gt;Try looking at what the Bible says and evaluating it with the same clarity of mind as you evaluate programming issues (IDisposable for example).&lt;br /&gt;&lt;br /&gt;&amp;quot;When you buy a male Hebrew slave, he shall serve for six years, but in the seventh he shall go out a free person, without debt.&amp;quot; - this is grounded in the Bible (Exodus 21:2). Hope you are at least a little skeptical about this.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/4715105462994624253'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/4715105462994624253'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html?showComment=1267566840796#c4715105462994624253' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8219041667609113888' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8219041667609113888' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2127637731'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 2, 2010 at 4:54:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5437280347799640255</id><published>2010-03-03T06:54:37.625-05:00</published><updated>2010-03-03T06:54:37.625-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>God has proven Himself true over and over again fo...</title><content type='html'>God has proven Himself true over and over again for a couple of decades in my life. Still, there is no way to absolutely prove the entire Bible (if there were, then Christianity - a faith-based system - would cease to exist).&lt;br /&gt;&lt;br /&gt;At times, I have doubted the Bible. However, I have always found the Bible to be true, if understood in context.&lt;br /&gt;&lt;br /&gt;For example, the Bible does not condone slavery, but does have instructions for how to live in a society where slavery is accepted. In the particular passage you quoted, the instructions are not even dealing with &amp;quot;slavery&amp;quot; as we think of it today; the system was more what we would call &amp;quot;indentured servitude&amp;quot; (the person in question has sold himself into temporary service to pay off a debt).&lt;br /&gt;&lt;br /&gt;True slavery in the Bible is only found when one nation conquors another and takes slaves (usually from the youth). Even then, it was common practice to practically adopt such slaves, even to the point of making them heirs! Very different than the mental image of &amp;quot;slavery&amp;quot; that exists in modern Western culture.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/5437280347799640255'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8219041667609113888/comments/default/5437280347799640255'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html?showComment=1267617277625#c5437280347799640255' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/01/best-computer-programming-book-ever.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8219041667609113888' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8219041667609113888' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 3, 2010 at 6:54:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-777437659055941166</id><published>2010-03-04T07:44:08.756-05:00</published><updated>2010-03-04T07:44:08.756-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>just want to say that you helped me alot! thanks m...</title><content type='html'>just want to say that you helped me alot! thanks mate</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/777437659055941166'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/777437659055941166'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1267706648756#c777437659055941166' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-771598950'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 4, 2010 at 7:44:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8997752248343418984</id><published>2010-03-04T15:40:32.921-05:00</published><updated>2010-03-04T15:40:32.921-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yup, setting null all over the place is a bad patt...</title><content type='html'>Yup, setting null all over the place is a bad pattern to get into.  If when one sets a variable to null trying to aid the GC, I can&amp;#39;t remember whether the JIT thus then *extends* the &amp;#39;rooted&amp;#39; block up to there, thus actually making things much worse.  Or does the JIT recognises it being a special case of setting null and ignores it.  Hmm.  Anyway, just don&amp;#39;t null blindly.&lt;br /&gt;&lt;br /&gt;The only case I&amp;#39;ve ever had to set a local to null is within a while loop on a thread:&lt;br /&gt;&lt;br /&gt;void _Runner(object state)&lt;br /&gt;{&lt;br /&gt;  while(true) {&lt;br /&gt;     Command cmd = GetNextFromQueue();&lt;br /&gt;     ...action it...&lt;br /&gt;     // Must null &amp;#39;cmd&amp;#39; here otherwise it stays &lt;br /&gt;     // alive, which has a reference to our parent, &lt;br /&gt;     // and (if when forget to Dispose it) it stays &lt;br /&gt;     // alive, and so its finalizer is never called&lt;br /&gt;     // which means we stay alive, keeping the &amp;#39;cmd&amp;#39;&lt;br /&gt;     // alive, which means...&lt;br /&gt;     cmd = null;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Well it was something like that anyway...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6780912148651514364/comments/default/8997752248343418984'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6780912148651514364/comments/default/8997752248343418984'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/q-should-i-set-variables-to-null-to.html?showComment=1267735232921#c8997752248343418984' title=''/><author><name>alanjmcf</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/02/q-should-i-set-variables-to-null-to.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6780912148651514364' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6780912148651514364' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1936201579'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 4, 2010 at 3:40:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6554085058876007885</id><published>2010-03-25T18:49:58.115-04:00</published><updated>2010-03-25T18:49:58.115-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What about classes that inherit from an abstract c...</title><content type='html'>What about classes that inherit from an abstract class that has managed resources, and the the inheritor also has managed resources?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/6554085058876007885'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/6554085058876007885'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1269557398115#c6554085058876007885' title=''/><author><name>Jasonium</name><uri>http://www.blogger.com/profile/13789588800496107873</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-525913949'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 25, 2010 at 6:49:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2136388076967628028</id><published>2010-03-26T03:34:38.441-04:00</published><updated>2010-03-26T03:34:38.441-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would then implement Dispose as virtual, and cal...</title><content type='html'>I would then implement Dispose as virtual, and call base.Dispose from the derived class&amp;#39; Dispose override.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/2136388076967628028'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/2136388076967628028'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1269588878441#c2136388076967628028' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 26, 2010 at 3:34:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6389764302330649725</id><published>2010-03-30T06:42:36.218-04:00</published><updated>2010-03-30T06:42:36.218-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What if in your example the list holds thousands o...</title><content type='html'>What if in your example the list holds thousands of custom types. Say ErrorList class goes out of scope. But because GC may not start reclaiming memory, there are chances of memory leak. &lt;br /&gt;How to handle such scenario? &lt;br /&gt;Can we not write dispose to clear the list when ErrorList scope is over.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/6389764302330649725'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/6389764302330649725'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1269945756218#c6389764302330649725' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1820503601'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 30, 2010 at 6:42:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4352492158253072018</id><published>2010-03-30T10:40:10.541-04:00</published><updated>2010-03-30T10:40:10.541-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous: as long as the custom types are not di...</title><content type='html'>@Anonymous: as long as the custom types are not disposable, then there is no benefit to implementing IDisposable and clearing the list in Dispose.&lt;br /&gt;&lt;br /&gt;There is no chance of a memory leak; the garbage collector will work just fine.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/4352492158253072018'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/4352492158253072018'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1269960010541#c4352492158253072018' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 30, 2010 at 10:40:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5210669942632357269</id><published>2010-03-30T13:26:54.263-04:00</published><updated>2010-03-30T13:26:54.263-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is really helpful. One question I have is thi...</title><content type='html'>This is really helpful. One question I have is this. Suppose, Action == Add, NewItems.Count &amp;gt; 1, and NewStartingIndex != -1. In this, case, am I to assume the change was equivalent to the following insert sequence:&lt;br /&gt;&lt;br /&gt;int i = NewStartingIndex;&lt;br /&gt;foreach (object x in NewItems)&lt;br /&gt;{&lt;br /&gt;  collection.Insert(i++, x);&lt;br /&gt;}</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/5210669942632357269'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/5210669942632357269'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html?showComment=1269970014263#c5210669942632357269' title=''/><author><name>Adam Cataldo</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-858556827'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 30, 2010 at 1:26:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-59497801098858060</id><published>2010-03-30T16:03:27.148-04:00</published><updated>2010-03-30T16:03:27.148-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Adam: Yes, I believe that would be correct.</title><content type='html'>@Adam: Yes, I believe that would be correct.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/59497801098858060'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/59497801098858060'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html?showComment=1269979407148#c59497801098858060' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 30, 2010 at 4:03:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-586432574063218620</id><published>2010-04-07T15:00:53.636-04:00</published><updated>2010-04-07T15:00:53.636-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I believe this behavior is intentional, but I have...</title><content type='html'>I believe this behavior is intentional, but I have no way of knowing if I am right or not. :)&lt;br /&gt;&lt;br /&gt;In the non-generic IList, you used to have two properties for read-onlyness - IsReadOnly and IsFixedSize.&lt;br /&gt;&lt;br /&gt;IList.IsFixedSize returns true if&lt;br /&gt;* number of elements could not be changed&lt;br /&gt;&lt;br /&gt;IList.IsReadOnly returns true if&lt;br /&gt;* number of elements could not be changed&lt;br /&gt;AND&lt;br /&gt;* individual elements could not be changed&lt;br /&gt;&lt;br /&gt;With the generic collections, IsFixedSize was removed, and IsReadOnly was moved to ICollection&amp;lt;T&amp;gt;.&lt;br /&gt;&lt;br /&gt;The new IsReadOnly seems to have the following semantics:&lt;br /&gt;&lt;br /&gt;ICollection&amp;lt;T&amp;gt;.IsReadOnly returns true if&lt;br /&gt;* number of elements could not be changed&lt;br /&gt;OR&lt;br /&gt;* individual elements could not be changed&lt;br /&gt;&lt;br /&gt;This is my best understanding, but I reserve the right to be wrong... :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4743989992218015725/comments/default/586432574063218620'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4743989992218015725/comments/default/586432574063218620'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html?showComment=1270666853636#c586432574063218620' title=''/><author><name>Robert Hencke</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4743989992218015725' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4743989992218015725' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1167357961'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 7, 2010 at 3:00:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3389929624167355067</id><published>2010-04-07T16:16:59.276-04:00</published><updated>2010-04-07T16:16:59.276-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I agree with your interpretation; I did cover this...</title><content type='html'>I agree with your interpretation; I did cover this in more detail here:&lt;br /&gt;  &lt;a href="http://nitoprograms.blogspot.com/2009/11/icollection-isreadonly-and-arrays.html" rel="nofollow"&gt;http://nitoprograms.blogspot.com/2009/11/icollection-isreadonly-and-arrays.html&lt;/a&gt;&lt;br /&gt;which I meant to link to in this blog post (and forgot)...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4743989992218015725/comments/default/3389929624167355067'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4743989992218015725/comments/default/3389929624167355067'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html?showComment=1270671419276#c3389929624167355067' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4743989992218015725' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4743989992218015725' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 7, 2010 at 4:16:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6521892810525587855</id><published>2010-04-07T17:39:59.706-04:00</published><updated>2010-04-07T17:39:59.706-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Ah, d&amp;#39;oh... I missed that post!</title><content type='html'>Ah, d&amp;#39;oh... I missed that post!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4743989992218015725/comments/default/6521892810525587855'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4743989992218015725/comments/default/6521892810525587855'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html?showComment=1270676399706#c6521892810525587855' title=''/><author><name>Robert Hencke</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/04/sharp-corners-ilist-isreadonly.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4743989992218015725' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4743989992218015725' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1167357961'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 7, 2010 at 5:39:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2581601300772709020</id><published>2010-05-04T12:01:18.675-04:00</published><updated>2010-05-04T12:01:18.675-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Some of the most solid advice I&amp;#39;ve ever seen o...</title><content type='html'>Some of the most solid advice I&amp;#39;ve ever seen on IDisposable. I wish all the other bloggers stopped advertising the &amp;quot;official&amp;quot; pattern so much. It&amp;#39;s overly complicated to cater for use cases that are a bad idea in the first place.&lt;br /&gt;&lt;br /&gt;Thanks for your insightful observations and the best article on the topic ever - http://www.codeproject.com/KB/dotnet/idisposable.aspx :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/2581601300772709020'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/2581601300772709020'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html?showComment=1272988878675#c2581601300772709020' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-153949736974106067' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-594003280'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 4, 2010 at 12:01:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8724836181094855836</id><published>2010-05-21T01:05:38.555-04:00</published><updated>2010-05-21T01:05:38.555-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great writeups.</title><content type='html'>Great writeups.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/8724836181094855836'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/8724836181094855836'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1274418338555#c8724836181094855836' title=''/><author><name>REing</name><uri>http://www.blogger.com/profile/05933750119090584081</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2019384518'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 21, 2010 at 1:05:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3271274337975394186</id><published>2010-05-26T00:53:09.905-04:00</published><updated>2010-05-26T00:53:09.905-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks Stephen!...I am doing a pretty messy c++ dl...</title><content type='html'>Thanks Stephen!...I am doing a pretty messy c++ dll to C# project and your solution to this very specific issue was exactly what I needed.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1098449644560179392/comments/default/3271274337975394186'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1098449644560179392/comments/default/3271274337975394186'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html?showComment=1274849589905#c3271274337975394186' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1098449644560179392' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1098449644560179392' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1060323781'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 26, 2010 at 12:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2336891181095604351</id><published>2010-05-26T10:21:14.311-04:00</published><updated>2010-05-26T10:21:14.311-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What if the managed resource instance somehow got ...</title><content type='html'>What if the managed resource instance somehow got to be null? In your final example if namedMutex == null then you get an exception inside your Dispose.&lt;br /&gt;That should not happen and you should be sure to set up an instance in the constructor, but I can see some day someone screws up and you got a nasty bug in your Dispose.&lt;br /&gt;&lt;br /&gt;Could be that I miss something. Please correct me.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/2336891181095604351'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/2336891181095604351'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1274883674311#c2336891181095604351' title=''/><author><name>Rodi</name><uri>http://www.rodi.nu</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-60713939'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 26, 2010 at 10:21:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3901197086392781939</id><published>2010-05-26T12:41:48.693-04:00</published><updated>2010-05-26T12:41:48.693-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Rodi: The design here is that SingleApplicationIn...</title><content type='html'>@Rodi: The design here is that SingleApplicationInstance owns the Mutex resource. Since it owns that resource, it is responsible for freeing it.&lt;br /&gt;&lt;br /&gt;For this reason, the Dispose method does not have a bug. It is possible that someone may introduce a bug during refactoring, but the Dispose method as it stands does not have a bug.&lt;br /&gt;&lt;br /&gt;In particular, I would say it&amp;#39;s wrong to have Dispose check namedMutex for null. This implies that the design is that SingleApplicationInstance may or may not own a Mutex resource.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/3901197086392781939'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/3901197086392781939'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1274892108693#c3901197086392781939' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 26, 2010 at 12:41:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3589480514076843853</id><published>2010-05-27T04:38:05.382-04:00</published><updated>2010-05-27T04:38:05.382-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Stephen: Thanks for answering. I guess it is main...</title><content type='html'>@Stephen: Thanks for answering. I guess it is mainly a design thing. It&amp;#39;s not related just to the Dispose method. If you need to test for null in the Dispose you should have to test for null in every method where you&amp;#39;ll be using the instance. It should indeed just be so that it will always be instanced and your unit tests should be able to pick it up if some other developer screws up and deletes the reference or disposes it too early.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/3589480514076843853'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/3589480514076843853'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1274949485382#c3589480514076843853' title=''/><author><name>Rodi</name><uri>http://www.rodi.nu</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-17645061'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, May 27, 2010 at 4:38:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1631418986534242725</id><published>2010-06-05T20:50:48.360-04:00</published><updated>2010-06-05T20:50:48.360-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This post clarifies many misconception !</title><content type='html'>This post clarifies many misconception !</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/1631418986534242725'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/1631418986534242725'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1275785448360#c1631418986534242725' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2001021297'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, June 5, 2010 at 8:50:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4446258782133860843</id><published>2010-06-16T01:53:44.552-04:00</published><updated>2010-06-16T01:53:44.552-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Unfortunately, this inf does not include the raw E...</title><content type='html'>Unfortunately, this inf does not include the raw EDID binary data, which I need to resolve my resolution problem.  Even after installing this, powerstrip indicates no EDID EEPROM is present.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/4446258782133860843'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/4446258782133860843'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1276667624552#c4446258782133860843' title=''/><author><name>Andreas Serna</name><uri>http://www.blogger.com/profile/05820364780541059215</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1501043684'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, June 16, 2010 at 1:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7210460482293552709</id><published>2010-06-25T07:06:04.517-04:00</published><updated>2010-06-25T07:06:04.517-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Awesome post!!  I am new to TPL and was having an ...</title><content type='html'>Awesome post!!  I am new to TPL and was having an issue grasping how to update the progress using a task from anther class.  This helped out immensely!  Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/7210460482293552709'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/7210460482293552709'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1277463964517#c7210460482293552709' title=''/><author><name>Xtr33me</name><uri>http://www.blogger.com/profile/13785835528564711354</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-964092013'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 25, 2010 at 7:06:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5891872159949881123</id><published>2010-06-29T18:28:40.995-04:00</published><updated>2010-06-29T18:28:40.995-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks!  This is just what I needed!</title><content type='html'>Thanks!  This is just what I needed!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/5891872159949881123'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/5891872159949881123'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1277850520995#c5891872159949881123' title=''/><author><name>Mike</name><uri>http://www.blogger.com/profile/00500049622184892199</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1073891475'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, June 29, 2010 at 6:28:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6719890604224693676</id><published>2010-06-30T05:42:04.591-04:00</published><updated>2010-06-30T05:42:04.591-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>thanks</title><content type='html'>thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6719890604224693676'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6719890604224693676'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1277890924591#c6719890604224693676' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1049081100'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, June 30, 2010 at 5:42:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7285670897383340407</id><published>2010-07-07T05:57:01.473-04:00</published><updated>2010-07-07T05:57:01.473-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>why don&amp;#39;t rumble to Mircosoft that they are wr...</title><content type='html'>why don&amp;#39;t rumble to Mircosoft that they are wrong in thier Dispose pattern? :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/7285670897383340407'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/7285670897383340407'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html?showComment=1278496621473#c7285670897383340407' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-153949736974106067' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1701486605'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, July 7, 2010 at 5:57:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6036845806029596036</id><published>2010-07-09T05:08:57.851-04:00</published><updated>2010-07-09T05:08:57.851-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There are several things that I can´t understand. ...</title><content type='html'>There are several things that I can´t understand. &lt;br /&gt;&lt;br /&gt;I&amp;#39;m able to &amp;quot;read&amp;quot; the associations via EF Designer import from database... All the relations appears right configured, and with the &amp;quot;Add foreign key properties&amp;quot; checked. So I think that I misundestand something in this article.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/6036845806029596036'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/6036845806029596036'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1278666537851#c6036845806029596036' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1294373427'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 9, 2010 at 5:08:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8904207695199978912</id><published>2010-07-09T09:14:41.938-04:00</published><updated>2010-07-09T09:14:41.938-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous: Since I wrote this blog post, I have h...</title><content type='html'>@Anonymous: Since I wrote this blog post, I have heard other people state that their foreign keys were imported correctly as well. It did not work for me, but the db I have to work with is not well designed at all (e.g., most foreign &amp;quot;keys&amp;quot; are nullable text columns). I&amp;#39;ll update the blog post.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/8904207695199978912'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/8904207695199978912'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1278681281938#c8904207695199978912' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 9, 2010 at 9:14:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8655787645955527970</id><published>2010-07-18T07:11:57.921-04:00</published><updated>2010-07-18T07:11:57.921-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What version of ReSharper are you using?</title><content type='html'>What version of ReSharper are you using?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5673643113578179348/comments/default/8655787645955527970'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5673643113578179348/comments/default/8655787645955527970'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html?showComment=1279451517921#c8655787645955527970' title=''/><author><name>Ilya Ryzhenkov</name><uri>http://www.blogger.com/profile/14966746474791511643</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='24' height='32' src='http://cs27.vkontakte.ru/u1595091/a_41d8e17.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5673643113578179348' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5673643113578179348' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1819106990'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, July 18, 2010 at 7:11:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2834693686080260007</id><published>2010-07-19T08:44:32.141-04:00</published><updated>2010-07-19T08:44:32.141-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The screenshot is from 5.0.1659.36 (2010-04-13); I...</title><content type='html'>The screenshot is from 5.0.1659.36 (2010-04-13); I upgraded this morning to 5.1.1727.12 (2010-07-07) and it does the same thing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5673643113578179348/comments/default/2834693686080260007'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5673643113578179348/comments/default/2834693686080260007'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html?showComment=1279543472141#c2834693686080260007' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5673643113578179348' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5673643113578179348' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, July 19, 2010 at 8:44:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-877513693192590891</id><published>2010-07-19T08:46:25.675-04:00</published><updated>2010-07-19T08:46:25.675-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Followup: the trigger is the &amp;quot;similar express...</title><content type='html'>Followup: the trigger is the &amp;quot;similar expressions comparison&amp;quot; rule.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5673643113578179348/comments/default/877513693192590891'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5673643113578179348/comments/default/877513693192590891'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html?showComment=1279543585675#c877513693192590891' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/07/resharper-and-obscure-cts-corner-case.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5673643113578179348' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5673643113578179348' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, July 19, 2010 at 8:46:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-586682506546191988</id><published>2010-08-01T01:37:43.848-04:00</published><updated>2010-08-01T01:37:43.848-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;ll comment on the code as I go through it:
T...</title><content type='html'>I&amp;#39;ll comment on the code as I go through it:&lt;br /&gt;The following piece:&lt;br /&gt;-----------------------------&lt;br /&gt;.Do(_ =&amp;gt;&lt;br /&gt;  {&lt;br /&gt;    // Update UI each time we get a new search request.&lt;br /&gt;    this.listViewResults.Items.Clear();&lt;br /&gt;    this.labelStatus.Text = &amp;quot;Searching...&amp;quot;;&lt;br /&gt;  });&lt;br /&gt;---------------------&lt;br /&gt;Has a drawback: This piece of code will run for each subscription. In your case you subscribe once, but it&amp;#39;s a bad habit.&lt;br /&gt;You should either change it to a subscription, or use Publish() and .Connect() to capture the side-effects only once.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3433175182146450155/comments/default/586682506546191988'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3433175182146450155/comments/default/586682506546191988'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/07/asynchronous-contexts-in-rx.html?showComment=1280641063848#c586682506546191988' title=''/><author><name>Omer Mor</name><uri>http://www.blogger.com/profile/05524751715995551821</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/07/asynchronous-contexts-in-rx.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3433175182146450155' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3433175182146450155' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-90127191'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, August 1, 2010 at 1:37:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5856280494452289993</id><published>2010-08-05T09:41:31.532-04:00</published><updated>2010-08-05T09:41:31.532-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>....instead of implementing IDisposable interface ...</title><content type='html'>....instead of implementing IDisposable interface if we write a public method like&lt;br /&gt;&lt;br /&gt; public void ReleaseResource()     &lt;br /&gt;{         namedMutex.Close();     &lt;br /&gt;} &lt;br /&gt;&lt;br /&gt;will result be same???</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5856280494452289993'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5856280494452289993'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1281015691532#c5856280494452289993' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-701272695'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 5, 2010 at 9:41:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7472014807092837604</id><published>2010-08-05T11:21:12.994-04:00</published><updated>2010-08-05T11:21:12.994-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous: not really. The advantage of using IDi...</title><content type='html'>@Anonymous: not really. The advantage of using IDispose is that it has special language support (clients can use the &amp;quot;using&amp;quot; keyword instead of try/finally with a null check).&lt;br /&gt;&lt;br /&gt;IDisposable is the standard way that every other .NET programmer will expect you to release resources.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/7472014807092837604'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/7472014807092837604'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1281021672994#c7472014807092837604' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 5, 2010 at 11:21:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9172734922038772077</id><published>2010-08-08T10:24:13.492-04:00</published><updated>2010-08-08T10:24:13.492-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You can see a pile of SQLite related videos at &lt;a ...</title><content type='html'>You can see a pile of SQLite related videos at &lt;a href="http://www.youtube.com/user/Jaynonymous1" rel="nofollow"&gt; YouTube &lt;/a&gt; which show how to use and program against SQLite.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/9172734922038772077'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/9172734922038772077'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1281277453492#c9172734922038772077' title=''/><author><name>Jay Godse</name><uri>http://www.blogger.com/profile/03791278729450406908</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-972370052'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, August 8, 2010 at 10:24:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8412858464197934650</id><published>2010-08-13T11:49:59.798-04:00</published><updated>2010-08-13T11:49:59.798-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous:

As far as I can tell, you&amp;#39;re not ...</title><content type='html'>@Anonymous:&lt;br /&gt;&lt;br /&gt;As far as I can tell, you&amp;#39;re not using the PacketProtocol class defined in this blog post, so I&amp;#39;m not sure why you&amp;#39;re posting here.&lt;br /&gt;&lt;br /&gt;A better place to ask for review would be the NCL forum:&lt;br /&gt;  http://social.msdn.microsoft.com/Forums/en-US/ncl/threads&lt;br /&gt;&lt;br /&gt;which I see you have already done:&lt;br /&gt;  http://social.msdn.microsoft.com/Forums/en-US/ncl/thread/3d6681f5-7164-48d7-b703-e63ece938be0</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8412858464197934650'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8412858464197934650'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1281714599798#c8412858464197934650' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, August 13, 2010 at 11:49:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3214202974992686239</id><published>2010-08-17T01:43:59.517-04:00</published><updated>2010-08-17T01:43:59.517-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great summary. However I wish you&amp;#39;d add Rx to ...</title><content type='html'>Great summary. However I wish you&amp;#39;d add Rx to the mix. It is great for async programming. It has a scheduler abstraction (with many implementations) that is great for medium-level async stuff, and the observable-observer-linq story for higher-level abstraction.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/3214202974992686239'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/3214202974992686239'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html?showComment=1282023839517#c3214202974992686239' title=''/><author><name>Omer Mor</name><uri>http://www.blogger.com/profile/05524751715995551821</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4049595480173960287' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4049595480173960287' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-90127191'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, August 17, 2010 at 1:43:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5316427744259242346</id><published>2010-08-20T07:58:18.596-04:00</published><updated>2010-08-20T07:58:18.596-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Omer: I agree that Rx does have some async progra...</title><content type='html'>@Omer: I agree that Rx does have some async programming support. It&amp;#39;s really designed for reactive programming, though, while this post is specifically about operations run in the background.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/5316427744259242346'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/5316427744259242346'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html?showComment=1282305498596#c5316427744259242346' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4049595480173960287' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4049595480173960287' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, August 20, 2010 at 7:58:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5335593384473829569</id><published>2010-08-26T02:07:53.030-04:00</published><updated>2010-08-26T02:07:53.030-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks! This save my day :)</title><content type='html'>Thanks! This save my day :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5335593384473829569'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5335593384473829569'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1282802873030#c5335593384473829569' title=''/><author><name>Tan</name><uri>http://www.blogger.com/profile/07037516251244384753</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1092284937'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 26, 2010 at 2:07:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3370339388542429616</id><published>2010-09-16T11:20:33.092-04:00</published><updated>2010-09-16T11:20:33.092-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Good to know.
One note: It&amp;#39;s better to use %Pr...</title><content type='html'>Good to know.&lt;br /&gt;One note: It&amp;#39;s better to use %ProgramFiles% instead of &amp;quot;C:\Program Files&amp;quot; which is machine specific.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/3370339388542429616'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/3370339388542429616'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html?showComment=1284650433092#c3370339388542429616' title=''/><author><name>Omer Mor</name><uri>http://www.blogger.com/profile/05524751715995551821</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5062015318328406015' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-90127191'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, September 16, 2010 at 11:20:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5997988529660053194</id><published>2010-09-16T11:38:51.008-04:00</published><updated>2010-09-16T11:38:51.008-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Omer: Good catch. I&amp;#39;ve updated the post. :)</title><content type='html'>@Omer: Good catch. I&amp;#39;ve updated the post. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/5997988529660053194'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/5997988529660053194'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html?showComment=1284651531008#c5997988529660053194' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5062015318328406015' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, September 16, 2010 at 11:38:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-558922898987700221</id><published>2010-09-18T02:10:39.683-04:00</published><updated>2010-10-12T10:34:36.860-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I hope this help others.

With powerstrip and the ...</title><content type='html'>I hope this help others.&lt;br /&gt;&lt;br /&gt;With powerstrip and the following inf with EDID, I was able to use the 1920x1200 res.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;; INF file generated by Monitor Asset Manager, 2010/9/17&lt;br /&gt;; Copyright (c) EnTech Taiwan, 1995-2010.&lt;br /&gt;; Internet: http://www.entechtaiwan.com&lt;br /&gt;&lt;br /&gt;[Version]&lt;br /&gt;Signature=&amp;quot;$WINDOWS NT$&amp;quot;&lt;br /&gt;Class=Monitor&lt;br /&gt;ClassGUID={4d36e96e-e325-11ce-bfc1-08002be10318}&lt;br /&gt;Provider=%MFG%&lt;br /&gt;DriverVer=2010/9/17, 1.0.0.0&lt;br /&gt;;CatalogFile=YourSignedCatalogFile.cat&lt;br /&gt;&lt;br /&gt;[DestinationDirs]&lt;br /&gt;DefaultDestDir=23&lt;br /&gt;&lt;br /&gt;[SourceDisksNames]&lt;br /&gt;1=%DISC%&lt;br /&gt;&lt;br /&gt;[SourceDisksFiles]&lt;br /&gt;;YourColorProfileFile.icm&lt;br /&gt;&lt;br /&gt;[Manufacturer]&lt;br /&gt;%VENDOR%=EDID_OVERRIDE,NTx86,NTamd64&lt;br /&gt;&lt;br /&gt;[EDID_OVERRIDE.NTx86]&lt;br /&gt;%PRODUCTID%=OVERRIDDEN-EDID.Install, MONITOR\XXX0000&lt;br /&gt;&lt;br /&gt;[EDID_OVERRIDE.NTamd64]&lt;br /&gt;%PRODUCTID%=OVERRIDDEN-EDID.Install.NTamd64, MONITOR\XXX0000&lt;br /&gt;&lt;br /&gt;[OVERRIDDEN-EDID.Install.NTx86]&lt;br /&gt;DelReg=DEL_CURRENT_REG&lt;br /&gt;AddReg=OVERRIDDEN-EDID.AddReg, MODE1, DPMS&lt;br /&gt;CopyFiles=OVERRIDDEN-EDID.CopyFiles&lt;br /&gt;&lt;br /&gt;[OVERRIDDEN-EDID.Install.NTamd64]&lt;br /&gt;DelReg=DEL_CURRENT_REG&lt;br /&gt;AddReg=OVERRIDDEN-EDID.AddReg, MODE1, DPMS&lt;br /&gt;CopyFiles=OVERRIDDEN-EDID.CopyFiles&lt;br /&gt;&lt;br /&gt;[OVERRIDDEN-EDID.Install.NTx86.HW]&lt;br /&gt;AddReg=OVERRIDDEN-EDID_AddReg&lt;br /&gt;&lt;br /&gt;[OVERRIDDEN-EDID.Install.NTamd64.HW]&lt;br /&gt;AddReg=OVERRIDDEN-EDID_AddReg&lt;br /&gt;&lt;br /&gt;[OVERRIDDEN-EDID_AddReg]&lt;br /&gt;;Base EDID&lt;br /&gt;HKR,EDID_OVERRIDE,&amp;quot;0&amp;quot;,0x01,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x63,0x18,0x00,0x00,0x3A,0x1C,0x00,0x00,0x2A,0x11,0x01,0x03,0x80,0x34,0x21,0x78,0xEA,0x5A,0xD5,0xA7,0x56,0x4B,0x9B,0x24,0x13,0x50,0x54,0xA3,0x08,0x00,0x71,0x40,0x81,0x80,0xA9,0xC0,0x01,0x01,0xA9,0x40,0xB3,0x00,0x95,0x00,0x81,0x00,0x28,0x3C,0x80,0xA0,0x70,0xB0,0x23,0x40,0x30,0x20,0x36,0x00,0x07,0x44,0x21,0x00,0x00,0x1C,0x00,0x00,0x00,0xFF,0x00,0x55,0x37,0x34,0x31,0x31,0x44,0x38,0x36,0x30,0x31,0x37,0x35,0x30,0x00,0x00,0x00,0xFD,0x00,0x38,0x47,0x1E,0x53,0x11,0x00,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0xFC,0x00,0x4D,0x32,0x34,0x45,0x49,0x34,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x70&lt;br /&gt;&lt;br /&gt;[DEL_CURRENT_REG]&lt;br /&gt;HKR,MODES&lt;br /&gt;HKR,EDID_OVERRIDE&lt;br /&gt;HKR,,MaxResolution&lt;br /&gt;HKR,,DPMS&lt;br /&gt;HKR,,ICMProfile&lt;br /&gt;&lt;br /&gt;[DPMS]&lt;br /&gt;HKR,,DPMS,,1&lt;br /&gt;&lt;br /&gt;[MODE1]&lt;br /&gt;HKR,,MaxResolution,,&amp;quot;1920,1200&amp;quot;&lt;br /&gt;&lt;br /&gt;[OVERRIDDEN-EDID.AddReg]&lt;br /&gt;HKR,&amp;quot;MODES\1920,1200&amp;quot;,Mode1,,&amp;quot;30.0-83.0,56.0-71.0,+,+&amp;quot;&lt;br /&gt;&lt;br /&gt;[OVERRIDDEN-EDID.CopyFiles]&lt;br /&gt;;YourColorProfileFile.icm&lt;br /&gt;&lt;br /&gt;[Strings]&lt;br /&gt;MFG=&amp;quot;EnTech Taiwan&amp;quot;&lt;br /&gt;DISC=&amp;quot;Monitor EDID Override Installation Disk&amp;quot;&lt;br /&gt;PRODUCTID=&amp;quot;XXX M24EI4 (EDID Override)&amp;quot;&lt;br /&gt;VENDOR=&amp;quot;XXX&amp;quot;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/558922898987700221'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/558922898987700221'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1284790239683#c558922898987700221' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-651515266'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, September 18, 2010 at 2:10:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4090737275587819073</id><published>2010-10-12T19:20:39.073-04:00</published><updated>2010-10-12T19:20:39.073-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for posting this, very clear and helpful!</title><content type='html'>Thanks for posting this, very clear and helpful!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/4090737275587819073'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/4090737275587819073'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1286925639073#c4090737275587819073' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-642539366'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 12, 2010 at 7:20:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5585733673807347533</id><published>2010-10-25T15:59:36.966-04:00</published><updated>2010-10-25T15:59:36.966-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you thank you thank you!!!</title><content type='html'>Thank you thank you thank you!!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/5585733673807347533'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/5585733673807347533'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1288036776966#c5585733673807347533' title=''/><author><name>Anna</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1779064234'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 25, 2010 at 3:59:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2638735713972823250</id><published>2010-10-27T12:31:52.778-04:00</published><updated>2010-10-27T12:31:52.778-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>안녕하세요? 
Thanks for this information. especially &amp;q...</title><content type='html'>안녕하세요? &lt;br /&gt;Thanks for this information. especially &amp;quot;Reading Zero Bytes&amp;quot; was of great help to me.&lt;br /&gt;If you can read Korean, I could be able to write many thanks.&lt;br /&gt;Have a nice day.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/2638735713972823250'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/2638735713972823250'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html?showComment=1288197112778#c2638735713972823250' title=''/><author><name>Kata Pro</name><uri>http://manofpro.tistory.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7634204289692406306' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1923993736'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 27, 2010 at 12:31:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3948919128582070405</id><published>2010-10-27T17:24:13.415-04:00</published><updated>2010-10-27T17:24:13.415-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great Presentation Saturday!  Very informative.

A...</title><content type='html'>Great Presentation Saturday!  Very informative.&lt;br /&gt;&lt;br /&gt;About a week ago, a customer of mine directed me to your site to reference your post on &amp;quot;Detection of Half-Open (Dropped) Connections&amp;quot; as we were defining our interface protocol.  I paid attention to the content but not the author (sorry).  I was shocked when I realized that material I was just referencing for a real world project was being presented to me in person.  &amp;quot;Pleasantly&amp;quot; shocked :)&lt;br /&gt;&lt;br /&gt;Thanks again.&lt;br /&gt;&lt;br /&gt;Ron</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6381791882752106986/comments/default/3948919128582070405'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6381791882752106986/comments/default/3948919128582070405'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/10/grand-rapids-day-of-dotnet-slides.html?showComment=1288214653415#c3948919128582070405' title=''/><author><name>Ron Slocum</name><uri>http://www.blogger.com/profile/16189973148164602056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='30' height='32' src='http://2.bp.blogspot.com/_tZCSHU5ECS8/SoMTbVp_TYI/AAAAAAAAABI/KIW7iMLaXOw/S220/Ron%2520Slocum_JPG.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/10/grand-rapids-day-of-dotnet-slides.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6381791882752106986' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6381791882752106986' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1180655269'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 27, 2010 at 5:24:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2190222648348006688</id><published>2010-11-04T19:21:50.740-04:00</published><updated>2010-11-04T19:21:50.740-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Soultear
@Anonymous 
 
Thanks, copied and pasted y...</title><content type='html'>Soultear&lt;br /&gt;@Anonymous &lt;br /&gt; &lt;br /&gt;Thanks, copied and pasted your Powerstrip driver to notepad and saved as an .INF&lt;br /&gt;&lt;br /&gt;Copied to a floppy and installed and works great with Windows 7 64bit. Now I can play my games at any rez intead of the 1600x1200.&lt;br /&gt;&lt;br /&gt;Nito&amp;#39;s driver works withXP and Vista but yours Anonymous is the best for windows 7. At least it has a EDID. SWEEEEEET!!!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/2190222648348006688'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/2190222648348006688'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1288912910740#c2190222648348006688' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1684513573'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 4, 2010 at 7:21:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5819987860395549968</id><published>2010-11-10T11:19:00.715-05:00</published><updated>2010-11-10T11:19:00.715-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excellent post.  Can you throw up a VB version? I&amp;...</title><content type='html'>Excellent post.  Can you throw up a VB version? I&amp;#39;ve tried running the code through the online converters and the functions with generics won&amp;#39;t convert/compile.  Thanks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/5819987860395549968'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/5819987860395549968'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1289405940715#c5819987860395549968' title=''/><author><name>Peter</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-689193672'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 10, 2010 at 11:19:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2243539020041621362</id><published>2010-11-16T17:32:13.569-05:00</published><updated>2010-11-16T17:32:13.569-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You have covered the topic well, congratulations.</title><content type='html'>You have covered the topic well, congratulations.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/2243539020041621362'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/2243539020041621362'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html?showComment=1289946733569#c2243539020041621362' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7634204289692406306' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-384884811'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 16, 2010 at 5:32:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4628438421797404739</id><published>2010-11-18T11:27:32.584-05:00</published><updated>2010-11-18T11:27:32.584-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello Peter -

I haven&amp;#39;t written in VB since.....</title><content type='html'>Hello Peter -&lt;br /&gt;&lt;br /&gt;I haven&amp;#39;t written in VB since... &amp;#39;96. :)  I&amp;#39;m sure that there are converters available that can understand generics.&lt;br /&gt;&lt;br /&gt;I tried this one, and the results look OK to me:&lt;br /&gt;  http://www.developerfusion.com/tools/convert/csharp-to-vb/</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/4628438421797404739'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/4628438421797404739'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1290097652584#c4628438421797404739' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 18, 2010 at 11:27:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6322891616526024228</id><published>2010-11-20T00:54:31.367-05:00</published><updated>2010-11-20T00:54:31.367-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>For x64 systems that would be %ProgramFiles(x86)% ...</title><content type='html'>For x64 systems that would be %ProgramFiles(x86)% instead of %ProgramFiles%</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/6322891616526024228'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/6322891616526024228'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html?showComment=1290232471367#c6322891616526024228' title=''/><author><name>Damian</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5062015318328406015' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1761286835'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, November 20, 2010 at 12:54:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5069654977543777038</id><published>2010-11-21T13:23:33.893-05:00</published><updated>2010-11-21T13:23:33.893-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Congrats man!</title><content type='html'>Congrats man!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8473037033089307722/comments/default/5069654977543777038'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8473037033089307722/comments/default/5069654977543777038'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/11/its-girl.html?showComment=1290363813893#c5069654977543777038' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/11/its-girl.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8473037033089307722' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8473037033089307722' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1869631268'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 21, 2010 at 1:23:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2877708366807453057</id><published>2010-11-26T14:37:50.677-05:00</published><updated>2010-11-26T14:37:50.677-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks!</title><content type='html'>Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1098449644560179392/comments/default/2877708366807453057'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1098449644560179392/comments/default/2877708366807453057'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html?showComment=1290800270677#c2877708366807453057' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1098449644560179392' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1098449644560179392' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-652913875'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 26, 2010 at 2:37:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-263566043521683361</id><published>2010-11-29T00:23:22.660-05:00</published><updated>2010-11-29T00:23:22.660-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>it is nice explanation 
i have one quietions that ...</title><content type='html'>it is nice explanation &lt;br /&gt;i have one quietions that what would happen if one to one connection is stablished and an other client try to connect?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/263566043521683361'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/263566043521683361'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1291008202660#c263566043521683361' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1721270802'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 29, 2010 at 12:23:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3795740945902763382</id><published>2010-11-29T09:49:27.141-05:00</published><updated>2010-11-29T09:49:27.141-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous:

Once the connection is established (i...</title><content type='html'>@Anonymous:&lt;br /&gt;&lt;br /&gt;Once the connection is established (i.e., the Accept operation completes), the server socket normally begins another Accept operation immediately to allow other clients to connect.&lt;br /&gt;&lt;br /&gt;If a client attempts to connect in the time after the first Accept completes and before the second Accept starts, then it is placed into the &amp;quot;backlog&amp;quot; queue. As soon as the second Accept starts, it will complete because there&amp;#39;s already a connection in the backlog queue.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3795740945902763382'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3795740945902763382'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1291042167141#c3795740945902763382' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 29, 2010 at 9:49:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4628017628307922335</id><published>2010-12-21T11:09:49.601-05:00</published><updated>2010-12-21T11:09:49.601-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I just found your blog from a link you provided on...</title><content type='html'>I just found your blog from a link you provided on a different website. Just wanted to say it&amp;#39;s nice to see an active, sane, and very well written blog on application development. I&amp;#39;m definitely going to keep checking in on this one!&lt;br /&gt;&lt;br /&gt;Congrats on the new one as well!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8473037033089307722/comments/default/4628017628307922335'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8473037033089307722/comments/default/4628017628307922335'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/11/its-girl.html?showComment=1292947789601#c4628017628307922335' title=''/><author><name>me</name><uri>http://www.blogger.com/profile/16952134521870846629</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='27' height='32' src='http://2.bp.blogspot.com/_O_AnVowqIZw/TE-QCM1kbDI/AAAAAAAAANY/5Ri0poiX5cg/S220/peace_out_fella.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/11/its-girl.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8473037033089307722' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8473037033089307722' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1080043975'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, December 21, 2010 at 11:09:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6361102942713956854</id><published>2010-12-29T03:22:14.367-05:00</published><updated>2010-12-29T03:22:14.367-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks, this helped me out too!</title><content type='html'>Thanks, this helped me out too!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6361102942713956854'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6361102942713956854'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1293610934367#c6361102942713956854' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1469515240'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, December 29, 2010 at 3:22:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3385763041313608424</id><published>2011-01-01T13:01:05.468-05:00</published><updated>2011-01-01T13:01:05.468-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;Reading XML from a socket without message fr...</title><content type='html'>&amp;quot;Reading XML from a socket without message framing is extremely difficult (the message must be considered complete when the root node is closed).&amp;quot;&lt;br /&gt;&lt;br /&gt;Why should this be _extremely_ difficult?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/3385763041313608424'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/3385763041313608424'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1293904865468#c3385763041313608424' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1726414731'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, January 1, 2011 at 1:01:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-495845524758743624</id><published>2011-01-01T13:07:42.885-05:00</published><updated>2011-01-01T13:07:42.885-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Ok if you allow CDATA which could potentially cont...</title><content type='html'>Ok if you allow CDATA which could potentially contain the closing root node it gets difficult.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/495845524758743624'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/495845524758743624'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1293905262885#c495845524758743624' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1726414731'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, January 1, 2011 at 1:07:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-689086075773246599</id><published>2011-01-02T23:11:16.043-05:00</published><updated>2011-01-02T23:11:16.043-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous: I should say - reading *arbitrary* XML...</title><content type='html'>@Anonymous: I should say - reading *arbitrary* XML from a socket ... is extremely difficult. This is because simple substring matching is insufficient. Consider not only CDATA, but also comments and child nodes with the same name.&lt;br /&gt;&lt;br /&gt;You actually have to end up writing a partial XML parser, which is made more complex by having to accept partial input (i.e., a SAX-style parser rather than a DOM-style parser). It&amp;#39;s a lot easier to just wrap it with message framing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/689086075773246599'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/689086075773246599'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1294027876043#c689086075773246599' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, January 2, 2011 at 11:11:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4791839274825184043</id><published>2011-01-20T09:01:25.346-05:00</published><updated>2011-01-20T09:01:25.346-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen, this is some very helpful documentation y...</title><content type='html'>Stephen, this is some very helpful documentation you have put together hear. Thanks very much for your efforts!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/4791839274825184043'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/4791839274825184043'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1295532085346#c4791839274825184043' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-562372499'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, January 20, 2011 at 9:01:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8427349537439654540</id><published>2011-01-26T06:18:16.829-05:00</published><updated>2011-01-26T06:18:16.829-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What an excellent post, I was also going to implem...</title><content type='html'>What an excellent post, I was also going to implement solution 3, but wanted to do a little extra research first.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8427349537439654540'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8427349537439654540'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1296040696829#c8427349537439654540' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-155063640'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, January 26, 2011 at 6:18:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5259425480971834052</id><published>2011-01-28T11:09:54.601-05:00</published><updated>2011-01-28T11:09:54.601-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;For x64 systems that would be %ProgramFiles(...</title><content type='html'>&amp;quot;For x64 systems that would be %ProgramFiles(x86)% instead of %ProgramFiles% &amp;quot;&lt;br /&gt;&lt;br /&gt;No, it is relative path</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/5259425480971834052'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/5259425480971834052'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html?showComment=1296230994601#c5259425480971834052' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5062015318328406015' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2043935672'/><gd:extendedProperty name='blogger.displayTime' value='Friday, January 28, 2011 at 11:09:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1853544327583571552</id><published>2011-01-28T15:59:01.026-05:00</published><updated>2011-01-28T15:59:01.026-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen,

Thanks for a really great article.  I am...</title><content type='html'>Stephen,&lt;br /&gt;&lt;br /&gt;Thanks for a really great article.  I am struggling with one of the concepts and while I am likely to use your ProgressReporter class, I want to grok it.&lt;br /&gt;Feel free to respond to my question on StackOverflow if you are inclined and have the time.&lt;br /&gt;&lt;br /&gt;Thanks again for the article.  Very well written.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/1853544327583571552'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/1853544327583571552'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1296248341026#c1853544327583571552' title=''/><author><name>Kevin</name><uri>http://kevinleebuchan.pip.verisignlabs.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1500188393'/><gd:extendedProperty name='blogger.displayTime' value='Friday, January 28, 2011 at 3:59:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7373113978740792380</id><published>2011-02-02T11:38:57.261-05:00</published><updated>2011-02-02T11:38:57.261-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you so much. You just helped me realize why ...</title><content type='html'>Thank you so much. You just helped me realize why my connections were unstable. Excellent post.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7373113978740792380'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7373113978740792380'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1296664737261#c7373113978740792380' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-220683530'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, February 2, 2011 at 11:38:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-743893339031069469</id><published>2011-02-03T21:04:57.340-05:00</published><updated>2011-02-03T21:04:57.340-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Good article. As you point out, if you dig deep en...</title><content type='html'>Good article. As you point out, if you dig deep enough there is almost always a SynchronizationContext interface someplace in each of the myriad of multithreading abstractions that .NET seems to be accumulating. Right now, it seems that hooking the SC is really one of the best ways for interoperating between them if you&amp;#39;re concerned about thread affinity.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4929220989284630144/comments/default/743893339031069469'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4929220989284630144/comments/default/743893339031069469'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/msdn-article-on-synchronizationcontext.html?showComment=1296785097340#c743893339031069469' title=''/><author><name>Thad</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/02/msdn-article-on-synchronizationcontext.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4929220989284630144' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4929220989284630144' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-675782403'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 3, 2011 at 9:04:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1159500888611895446</id><published>2011-02-12T00:40:31.668-05:00</published><updated>2011-02-12T00:40:31.668-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I rebooted my Windows 7 computer and the monitor w...</title><content type='html'>I rebooted my Windows 7 computer and the monitor went to 1600x1200 instead of 1920x1200. The device manager showed the monitor as Generic Non-PNP. &lt;br /&gt;&lt;br /&gt;I tried the two inf solutions above, but neither seemed to work quite right. What did work was actually a bit easier...&lt;br /&gt;&lt;br /&gt;1. Turn off computer and monitor.&lt;br /&gt;2. UNPLUG monitor. Count to 10. Plug back in.&lt;br /&gt;3. Turn everything back on.&lt;br /&gt;4. The monitor now shows up in Device Manager as Generic PNP Monitor and I can set the proper resolution.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1159500888611895446'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/1159500888611895446'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1297489231668#c1159500888611895446' title=''/><author><name>drewkeller</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-370182067'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 12, 2011 at 12:40:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4639717592409447603</id><published>2011-02-15T04:39:19.574-05:00</published><updated>2011-02-15T04:39:19.574-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hey Stephen,
Just wanted to say really awesome art...</title><content type='html'>Hey Stephen,&lt;br /&gt;Just wanted to say really awesome article, was struggling with using tasks with the progress bar all day yesterday and your article really helped&lt;br /&gt;&lt;br /&gt;just wanted to say thanks :-D</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/4639717592409447603'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/4639717592409447603'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1297762759574#c4639717592409447603' title=''/><author><name>manatherin</name><uri>http://manatherin.myopenid.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-699384277'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, February 15, 2011 at 4:39:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2701864969112906383</id><published>2011-02-21T10:16:02.632-05:00</published><updated>2011-02-21T10:16:02.632-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, excellent article, but I have one question.
I ...</title><content type='html'>Hi, excellent article, but I have one question.&lt;br /&gt;I see, this is all on one form. I have situation, where winforms gui I have in other asssembly and I want to update progress bar using a delegate/event. So I added&lt;br /&gt;public delegate void NotifyAboutIterationEnd(int iteration);&lt;br /&gt;public event NotifyAboutIterationEnd Notify;&lt;br /&gt;and in the presenter &lt;br /&gt;algorithm.Notify +=new NotifyAboutIterationEnd( UpdateProgressBar);&lt;br /&gt;Unfortunatelly this doesn&amp;#39;t work and I an&amp;#39;t debug why.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/2701864969112906383'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/2701864969112906383'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1298301362632#c2701864969112906383' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-601529734'/><gd:extendedProperty name='blogger.displayTime' value='Monday, February 21, 2011 at 10:16:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1808177115673894157</id><published>2011-02-23T09:36:41.600-05:00</published><updated>2011-02-23T09:36:41.600-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi,
Thanks for great post. But there is one not go...</title><content type='html'>Hi,&lt;br /&gt;Thanks for great post. But there is one not good feature. For example, I use four cascades of four tasks. There are not flags for correct parallel work from second cascade of tasks. Calculations are in continue mode but not in parallel kind. It seems that system is busy after first four tasks.&lt;br /&gt;ContinueWith gives only flag from main task. But ContinueWith and ReportProgress is separate tasks (internally). There is not way to dispose it...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/1808177115673894157'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/1808177115673894157'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1298471801600#c1808177115673894157' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1243914783'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, February 23, 2011 at 9:36:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5521519767095840074</id><published>2011-03-02T07:31:49.468-05:00</published><updated>2011-03-02T07:31:49.468-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Do you have any thoughts on whether it would be ok...</title><content type='html'>Do you have any thoughts on whether it would be ok/recommended to wrap the Dispose code in try-catch:&lt;br /&gt;&lt;br /&gt;public void Dispose() {&lt;br /&gt;  try {&lt;br /&gt;    managedResource.Dispose();&lt;br /&gt;  }&lt;br /&gt;  catch { }&lt;br /&gt;}</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/5521519767095840074'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/5521519767095840074'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html?showComment=1299069109468#c5521519767095840074' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-153949736974106067' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1357685131'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 2, 2011 at 7:31:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3608477663385170864</id><published>2011-03-15T05:52:00.558-04:00</published><updated>2011-03-15T05:52:00.558-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nice post.
But I find it a bit odd that the Progre...</title><content type='html'>Nice post.&lt;br /&gt;But I find it a bit odd that the ProgressReporter handles what a task should continue with after it&amp;#39;s done (RegisterContinuation). This is a mix of responsibilies and does not fit the class name.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/3608477663385170864'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/3608477663385170864'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1300182720558#c3608477663385170864' title=''/><author><name>Paw Baltzerse</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-746576006'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 15, 2011 at 5:52:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4772081159421178094</id><published>2011-03-24T09:58:22.193-04:00</published><updated>2011-03-24T09:58:22.193-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you,
it is great and very helpful solution.</title><content type='html'>Thank you,&lt;br /&gt;it is great and very helpful solution.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2698972288584901372/comments/default/4772081159421178094'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2698972288584901372/comments/default/4772081159421178094'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/cross-browser-silverlight.html?showComment=1300975102193#c4772081159421178094' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/02/cross-browser-silverlight.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2698972288584901372' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2698972288584901372' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-269334406'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 24, 2011 at 9:58:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6798130437611873584</id><published>2011-04-02T21:00:01.142-04:00</published><updated>2011-04-02T21:00:01.142-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>lets starting to learn new things.. very good!!</title><content type='html'>lets starting to learn new things.. very good!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2800726489901840407/comments/default/6798130437611873584'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2800726489901840407/comments/default/6798130437611873584'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/03/io-limitation-in-windows.html?showComment=1301792401142#c6798130437611873584' title=''/><author><name>easy recipes</name><uri>http://www.blogger.com/profile/01956667628847916461</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/03/io-limitation-in-windows.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2800726489901840407' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2800726489901840407' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-565622297'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 2, 2011 at 9:00:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9207729292258750745</id><published>2011-04-04T04:24:49.004-04:00</published><updated>2011-04-04T04:24:49.004-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

I am using Code Contracts for my proj...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;I am using Code Contracts for my projects as well. One thing that I cannot get to work is the static checking when referencing the assembly (which has ccs defined) instead of referencing the project (which has ccs defined).&lt;br /&gt;&lt;br /&gt;Referencing the project in Visual Studio only works for me (because I have the source code), but not everyone who might only get the assembly.&lt;br /&gt;&lt;br /&gt;The runtime checking works fine in both scenarios, but the static checking does not pick up the ccs. Have you had that issue?&lt;br /&gt;&lt;br /&gt;Lars</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1768327649962323794/comments/default/9207729292258750745'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1768327649962323794/comments/default/9207729292258750745'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/01/simple-and-easy-code-contracts.html?showComment=1301905489004#c9207729292258750745' title=''/><author><name>Lars</name><uri>http://www.blogger.com/profile/08306102615208289852</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/01/simple-and-easy-code-contracts.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1768327649962323794' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1768327649962323794' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-457735884'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 4, 2011 at 4:24:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5932441033182552810</id><published>2011-04-06T02:53:04.637-04:00</published><updated>2011-04-06T02:53:04.637-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>hi,
The application would bring up a Windows Error...</title><content type='html'>hi,&lt;br /&gt;The application would bring up a Windows Error Reporting dialog.thanks for sharing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/251804278062023453/comments/default/5932441033182552810'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/251804278062023453/comments/default/5932441033182552810'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/transactionscope-has-default-timeout.html?showComment=1302072784637#c5932441033182552810' title=''/><author><name>Jack Stone</name><uri>http://www.electroniccigaretteweb.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/transactionscope-has-default-timeout.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-251804278062023453' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/251804278062023453' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-836688195'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 6, 2011 at 2:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7883655722806407527</id><published>2011-04-07T18:43:16.204-04:00</published><updated>2011-04-07T18:43:16.204-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What exactly is the benefit of not coding a test t...</title><content type='html'>What exactly is the benefit of not coding a test to see if mutex is null? You speak of whether the object owns or maybe-owns the mutex as to whether that is the test for good code. I call BS on that and charge you with misdirecting a lot of inexperienced programmers. The fact is that the 1xCPU cycle it typically takes to execute a BranchNonZero (BNE) instruction which your IF statement represents means NOTHING in the course of your applications execution, but it does mean that the developer understand the following:&lt;br /&gt;1. Software Processes are complex&lt;br /&gt;2. Software is maintained by groups of people&lt;br /&gt;3. Software is maintained over time&lt;br /&gt;4. It is more important to be explicit about your intent than it is to have the next developer divine your intent by thinking that your coding values are somehow universal&lt;br /&gt;&lt;br /&gt;When I read your code I see risky vanity. When I see code with the IF statement I see code written to be bullet proof, designed to live long in a complex environment and owned by a team not an individual.&lt;br /&gt;&lt;br /&gt;And dont come and tell me that that contributes to bloat either. You will lose the balance of any respect I have.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/7883655722806407527'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/7883655722806407527'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1302216196204#c7883655722806407527' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1976849318'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 7, 2011 at 6:43:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4340230160447319033</id><published>2011-04-08T10:24:34.264-04:00</published><updated>2011-04-08T10:24:34.264-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous:

I don&amp;#39;t include the &amp;quot;if&amp;quot...</title><content type='html'>@Anonymous:&lt;br /&gt;&lt;br /&gt;I don&amp;#39;t include the &amp;quot;if&amp;quot; check precisely because the Dispose method should only dispose resources the object owns.&lt;br /&gt;&lt;br /&gt;If an object is refactored so that it no longer owns a resource, then Dispose needs to be refactored too (this would be true even if you had an if check).&lt;br /&gt;&lt;br /&gt;(BTW, I did not say to use an &amp;quot;if&amp;quot; statement if the object maybe-owns its resource. I never encourage &amp;quot;if&amp;quot; statements in Dispose; an object either owns a resource or it does not. It may share an owned resource by owning a reference-counted Disposable, but this is rarely needed).&lt;br /&gt;&lt;br /&gt;On the other hand, *not* calling Dispose when you *should* can cause some very difficult-to-find bugs. Many classes *require* Dispose to be called, no &amp;quot;if&amp;#39;s&amp;quot; about it (pardon the pun!).&lt;br /&gt;&lt;br /&gt;So I claim the &amp;quot;if&amp;quot; check makes the code *less* robust in the face of complex software processes and team maintenance over time.&lt;br /&gt;&lt;br /&gt;What the benefits are of having an &amp;quot;if&amp;quot; check?&lt;br /&gt;1. It does not help when refactoring. Changing resource ownership requires changes to Dispose regardless of whether there&amp;#39;s an &amp;quot;if&amp;quot; check.&lt;br /&gt;2. It does not help with robustness. If it actually avoids a null dereference, then you&amp;#39;ve only introduced a much harder-to-find error by skipping the owned resource&amp;#39;s Dispose. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;On the other hand, I think *not* having an &amp;quot;if&amp;quot; check more clearly communicates the designed intent of the code. That is the reason for my recommendation (not for performance or avoiding code bloat ;).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;That said, you are free to take my advice and toss it in the trash. I am, after all, just a random blogger. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4340230160447319033'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4340230160447319033'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1302272674264#c4340230160447319033' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 8, 2011 at 10:24:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7366530965893028109</id><published>2011-04-09T11:18:03.775-04:00</published><updated>2011-04-09T11:18:03.775-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Umm.. WindowStationHandle does not own the handle ...</title><content type='html'>Umm.. WindowStationHandle does not own the handle but does close it by calling NativeMethods.CloseWindowStation. This goes against the recommendation in the 2nd rule. The member this.Handle is just a reference to the handle.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/7366530965893028109'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/7366530965893028109'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html?showComment=1302362283775#c7366530965893028109' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-431595782877712191' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/431595782877712191' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1097341948'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 9, 2011 at 11:18:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5627260461798069536</id><published>2011-04-09T17:58:06.705-04:00</published><updated>2011-04-09T17:58:06.705-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m not sure what you mean.

WindowStationHand...</title><content type='html'>I&amp;#39;m not sure what you mean.&lt;br /&gt;&lt;br /&gt;WindowStationHandle does own the unmanaged handle resource. The Handle member (normally provided by the SafeHandle base class) is the handle itself, not &amp;quot;a reference to the handle.&amp;quot;&lt;br /&gt;&lt;br /&gt;When I wrap unmanaged resources, I usually have a lower-level wrapper such as WindowStationHandle which owns the unmanaged handle; and a higher-level wrapper (which I would call WindowStation in this example), which owns the managed WindowStationHandle.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/5627260461798069536'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/5627260461798069536'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html?showComment=1302386286705#c5627260461798069536' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-431595782877712191' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/431595782877712191' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 9, 2011 at 5:58:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-273403518222391109</id><published>2011-04-14T09:42:01.844-04:00</published><updated>2011-04-14T09:42:01.844-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would have loved to look at the document, but th...</title><content type='html'>I would have loved to look at the document, but the URL is not working for me. Could you fix that somehow? Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8252102378518876128/comments/default/273403518222391109'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8252102378518876128/comments/default/273403518222391109'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/exception-types.html?showComment=1302788521844#c273403518222391109' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/02/exception-types.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8252102378518876128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8252102378518876128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-810526173'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 14, 2011 at 9:42:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8451843583199058466</id><published>2011-04-14T11:31:43.263-04:00</published><updated>2011-04-14T11:31:43.263-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous:

The document is hosted on Windows Liv...</title><content type='html'>@Anonymous:&lt;br /&gt;&lt;br /&gt;The document is hosted on Windows Live, and I&amp;#39;ve seen it come and go several times myself. I&amp;#39;ll copy it to another host when I get the chance.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8252102378518876128/comments/default/8451843583199058466'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8252102378518876128/comments/default/8451843583199058466'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/exception-types.html?showComment=1302795103263#c8451843583199058466' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/02/exception-types.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8252102378518876128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8252102378518876128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 14, 2011 at 11:31:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7628549727411776233</id><published>2011-04-22T05:35:03.662-04:00</published><updated>2011-04-22T05:35:03.662-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Im not sure if you still check this, but i&amp;#39;ve ...</title><content type='html'>Im not sure if you still check this, but i&amp;#39;ve tried to use this class as-is, and i find that it only works on the first message. Any subsiquent messages return an empty string.&lt;br /&gt;&lt;br /&gt;Do you have any examples of how to use this class, perhaps im missing something, cheers</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/7628549727411776233'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/7628549727411776233'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1303464903662#c7628549727411776233' title=''/><author><name>Wannabeuk</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2113662980'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 22, 2011 at 5:35:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5458736704881234409</id><published>2011-04-24T18:10:01.713-04:00</published><updated>2011-04-24T18:10:01.713-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Wannabeuk:

I just tried it, and it worked fine. ...</title><content type='html'>@Wannabeuk:&lt;br /&gt;&lt;br /&gt;I just tried it, and it worked fine. Here&amp;#39;s my test code:&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;public void TestMethod1()&lt;br /&gt;{&lt;br /&gt;    int messages = 0;&lt;br /&gt;    var packetizer = new PacketProtocol(2000);&lt;br /&gt;    packetizer.MessageArrived += _ =&amp;gt; ++messages;&lt;br /&gt;    packetizer.DataReceived(&lt;br /&gt;        PacketProtocol.WrapMessage(new byte[3]).Concat(&lt;br /&gt;            PacketProtocol.WrapMessage(new byte[4])).ToArray());&lt;br /&gt;    Assert.AreEqual(2, messages);&lt;br /&gt;}</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/5458736704881234409'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/5458736704881234409'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1303683001713#c5458736704881234409' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, April 24, 2011 at 6:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1294105043139416705</id><published>2011-04-24T18:20:10.679-04:00</published><updated>2011-04-24T18:20:10.679-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Here&amp;#39;s an additional test, including checking ...</title><content type='html'>Here&amp;#39;s an additional test, including checking the messages passed:&lt;br /&gt;&lt;br /&gt;[TestMethod]&lt;br /&gt;public void TestMethod1()&lt;br /&gt;{&lt;br /&gt;    int numMessages = 0;&lt;br /&gt;    var messages = new string[2];&lt;br /&gt;    var packetizer = new PacketProtocol(2000);&lt;br /&gt;    packetizer.MessageArrived += message =&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        messages[numMessages] = Encoding.UTF8.GetString(message);&lt;br /&gt;        ++numMessages;&lt;br /&gt;    };&lt;br /&gt;    packetizer.DataReceived(&lt;br /&gt;        PacketProtocol.WrapMessage(Encoding.UTF8.GetBytes(&amp;quot;Hello&amp;quot;)).Concat(&lt;br /&gt;            PacketProtocol.WrapMessage(Encoding.UTF8.GetBytes(&amp;quot;World&amp;quot;))).ToArray());&lt;br /&gt;    Assert.AreEqual(2, numMessages);&lt;br /&gt;    Assert.AreEqual(&amp;quot;Hello&amp;quot;, messages[0]);&lt;br /&gt;    Assert.AreEqual(&amp;quot;World&amp;quot;, messages[1]);&lt;br /&gt;}</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/1294105043139416705'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/1294105043139416705'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1303683610679#c1294105043139416705' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, April 24, 2011 at 6:20:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4686521989283705627</id><published>2011-04-24T18:27:37.498-04:00</published><updated>2011-04-24T18:27:37.498-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Lars:

Sorry for the delayed reply!

I&amp;#39;ve tri...</title><content type='html'>@Lars:&lt;br /&gt;&lt;br /&gt;Sorry for the delayed reply!&lt;br /&gt;&lt;br /&gt;I&amp;#39;ve tried the static checking against a runtime assembly (no project), and it works as I expect as long as that assembly has a CC assembly built as well (under Contracts\MyLibrary.Contracts.dll, if memory serves correctly).&lt;br /&gt;&lt;br /&gt;If you&amp;#39;re having a specific problem with CC, a good source for answers is the MS forum for CC. The MS CC team members are very active and respond quickly to bug and feature requests.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1768327649962323794/comments/default/4686521989283705627'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1768327649962323794/comments/default/4686521989283705627'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/01/simple-and-easy-code-contracts.html?showComment=1303684057498#c4686521989283705627' title=''/><author><name>Stephen Cleary, Nito Programs</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/01/simple-and-easy-code-contracts.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1768327649962323794' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1768327649962323794' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, April 24, 2011 at 6:27:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7189064187708251632</id><published>2011-05-06T04:45:45.140-04:00</published><updated>2011-05-06T04:45:45.140-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great overview - thanks, for this! Would you consi...</title><content type='html'>Great overview - thanks, for this! Would you consider updating to include the Async CTP ?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/7189064187708251632'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/7189064187708251632'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html?showComment=1304671545140#c7189064187708251632' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4049595480173960287' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4049595480173960287' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-130913769'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 6, 2011 at 4:45:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8003192978796567726</id><published>2011-05-24T17:57:42.465-04:00</published><updated>2011-05-24T17:57:42.465-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The document has been moved to a more reliable hos...</title><content type='html'>The document has been moved to a more reliable host.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8252102378518876128/comments/default/8003192978796567726'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8252102378518876128/comments/default/8003192978796567726'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/02/exception-types.html?showComment=1306274262465#c8003192978796567726' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/02/exception-types.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8252102378518876128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8252102378518876128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 24, 2011 at 5:57:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1833452909990482975</id><published>2011-05-31T06:49:44.028-04:00</published><updated>2011-05-31T06:49:44.028-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for this. I was already doing this in my co...</title><content type='html'>Thanks for this. I was already doing this in my code, but you have given me a clearer understanding of what im doing!&lt;br /&gt;&lt;br /&gt;Much easier to design/visualise now</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/1833452909990482975'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/1833452909990482975'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1306838984028#c1833452909990482975' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-956832895'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 31, 2011 at 6:49:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3509141624450105169</id><published>2011-06-03T18:34:16.649-04:00</published><updated>2011-06-03T18:34:16.649-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;Send&amp;quot; is not always a simple operation ...</title><content type='html'>&amp;quot;Send&amp;quot; is not always a simple operation either.  There&amp;#39;s a reason why it returns the amount of data sent -- its quite possible for the send to fragment as well (if the hardware buffer gets full, for example), necessitating a retry on the sending side (and you have to be careful to start the retry at the appropriate point in the outgoing data array).  Send is only slightly simpler than receive (no need to worry about allocating/growing the buffer or dealing with situations where you read more than needed and have to hold on to the excess for the next read call).&lt;br /&gt;&lt;br /&gt;And on another note, length specifiers are usually pretty redundant for anything other than string and array lengths (and even then, string lengths are only really needed in binary streams.. text streams typically just run a newline-delimited protocol).  Its much simpler to just specify in the protocol documentation that an integer in a particular part of the data stream is 4 bytes, signed, little endian then the implementers can handle it however they need and the protocol itself is significantly simplified (not to mention reducing the number of bytes needing to travel the tubes).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/3509141624450105169'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/3509141624450105169'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1307140456649#c3509141624450105169' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-947068165'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 3, 2011 at 6:34:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1493602954554722124</id><published>2011-06-03T20:41:54.199-04:00</published><updated>2011-06-03T20:41:54.199-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>i have to add.... AMEN, congratulations nice job m...</title><content type='html'>i have to add.... AMEN, congratulations nice job man</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/1493602954554722124'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/1493602954554722124'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1307148114199#c1493602954554722124' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-108275889'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 3, 2011 at 8:41:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3712501987993094435</id><published>2011-06-11T11:39:07.775-04:00</published><updated>2011-06-11T11:39:07.775-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m not sure it is a good idea to handle trans...</title><content type='html'>I&amp;#39;m not sure it is a good idea to handle transactions by yourself because you will be out of sync regarding the ObjetContext cache.&lt;br /&gt;make a saveChanges(), then rollback, then what ? Entities are still in the ObjectContext even they no longer exist in the db.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/3712501987993094435'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/3712501987993094435'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1307806747775#c3712501987993094435' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-920867421'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, June 11, 2011 at 11:39:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7824203280909812024</id><published>2011-06-19T15:34:43.906-04:00</published><updated>2011-06-19T15:34:43.906-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Fantastic article, really appreciate your work her...</title><content type='html'>Fantastic article, really appreciate your work here. It&amp;#39;s just a shame I&amp;#39;ve already encountered most of the pitfalls.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/7824203280909812024'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/7824203280909812024'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1308512083906#c7824203280909812024' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1080689450'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, June 19, 2011 at 3:34:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5669253986724970967</id><published>2011-06-25T11:09:43.240-04:00</published><updated>2011-06-25T11:09:43.240-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks Stephen, you have saved me a lot of pain al...</title><content type='html'>Thanks Stephen, you have saved me a lot of pain already.  &lt;br /&gt;&lt;br /&gt;I&amp;#39;ve found Entity Framework 4 will pick up on Foreign Keys defined in databases created using SQLiteMaestro.&lt;br /&gt;&lt;br /&gt;Not sure but Core Data appears to have its own legacy FK mechanism which doesn&amp;#39;t blend with EF.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/5669253986724970967'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/5669253986724970967'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1309014583240#c5669253986724970967' title=''/><author><name>RobCroll</name><uri>http://www.codeproject.com/Members/Robert-Croll</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1589079433'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, June 25, 2011 at 11:09:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2317939288549583709</id><published>2011-06-28T12:27:09.614-04:00</published><updated>2011-06-28T12:27:09.614-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You could also pass the uiTaskScheduler to the tas...</title><content type='html'>You could also pass the uiTaskScheduler to the task and report progress by starting a task on the uiTaskScheduler, along these lines:&lt;br /&gt;&lt;br /&gt;  TaskScheduler uiTaskScheduler = TaskScheduler.FromCurrentSynchronizationContext();&lt;br /&gt;  System.Threading.Tasks.Task.Factory&lt;br /&gt;    .StartNew(() =&amp;gt; TheTask(uiTaskScheduler))&lt;br /&gt;    .ContinueWith(...);&lt;br /&gt;&lt;br /&gt;  private void TheTask(TaskScheduler uiTaskScheduler)&lt;br /&gt;  {&lt;br /&gt;    ...&lt;br /&gt;    // Report status&lt;br /&gt;    if (uiTaskScheduler != null)&lt;br /&gt;        System.Threading.Tasks.Task.Factory.StartNew(() =&amp;gt; ReportProgress(pct), null, CancellationToken.None, TaskCreationOptions.None, uiTaskScheduler);                &lt;br /&gt;    ...&lt;br /&gt;  }</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/2317939288549583709'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/2317939288549583709'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1309278429614#c2317939288549583709' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1314942236'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, June 28, 2011 at 12:27:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5204940024041129788</id><published>2011-07-15T09:53:21.009-04:00</published><updated>2011-07-15T09:53:21.009-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You saved my day. Million thanks</title><content type='html'>You saved my day. Million thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/5204940024041129788'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/5204940024041129788'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html?showComment=1310738001009#c5204940024041129788' title=''/><author><name>Nimesh</name><uri>http://www.blogger.com/profile/04280217767561987512</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_5ENBd0PXqkI/S1S52W_RtiI/AAAAAAAABtI/3slXDtg1Vg4/S220/Nimesh+Passport+Photos.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5062015318328406015' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-525644204'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 15, 2011 at 9:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8074602915545393603</id><published>2011-07-15T10:16:37.501-04:00</published><updated>2011-07-15T10:16:37.501-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Super thanks!</title><content type='html'>Super thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8074602915545393603'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8074602915545393603'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1310739397501#c8074602915545393603' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1368670726'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 15, 2011 at 10:16:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1586849083919302654</id><published>2011-07-15T14:18:18.539-04:00</published><updated>2011-07-15T14:18:18.539-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I could not find the FindInList task even after se...</title><content type='html'>I could not find the FindInList task even after searching the MSBUILD extension pack versions 3.5 and 4.0.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8348903232134988171/comments/default/1586849083919302654'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8348903232134988171/comments/default/1586849083919302654'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-filtering-itemgroup-based-on.html?showComment=1310753898539#c1586849083919302654' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/msbuild-filtering-itemgroup-based-on.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8348903232134988171' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8348903232134988171' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-381019117'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 15, 2011 at 2:18:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2596425847028696193</id><published>2011-07-16T14:59:41.516-04:00</published><updated>2011-07-16T14:59:41.516-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>FindInList is included in MSBuild itself:

http://...</title><content type='html'>FindInList is included in MSBuild itself:&lt;br /&gt;&lt;br /&gt;http://msdn.microsoft.com/en-us/library/bb763047.aspx</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8348903232134988171/comments/default/2596425847028696193'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8348903232134988171/comments/default/2596425847028696193'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-filtering-itemgroup-based-on.html?showComment=1310842781516#c2596425847028696193' title=''/><author><name>Stephen Cleary</name><uri>http://www.nitoprograms.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/msbuild-filtering-itemgroup-based-on.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8348903232134988171' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8348903232134988171' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1153338851'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, July 16, 2011 at 2:59:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5768499057422580546</id><published>2011-07-18T10:46:25.280-04:00</published><updated>2011-07-18T10:46:25.280-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Can you explain how the yield command is used to p...</title><content type='html'>Can you explain how the yield command is used to perform asynchronous tasks?  See the last part of this guy&amp;#39;s presentation for more info:&lt;br /&gt;&lt;br /&gt;http://channel9.msdn.com/Events/MIX/MIX10/EX15</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/5768499057422580546'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4049595480173960287/comments/default/5768499057422580546'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html?showComment=1311000385280#c5768499057422580546' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/08/various-implementations-of-asynchronous.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4049595480173960287' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4049595480173960287' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-632864363'/><gd:extendedProperty name='blogger.displayTime' value='Monday, July 18, 2011 at 10:46:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7806954655678103489</id><published>2011-08-02T09:55:34.973-04:00</published><updated>2011-08-02T09:55:34.973-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Brilliant article.</title><content type='html'>Brilliant article.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7806954655678103489'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7806954655678103489'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1312293334973#c7806954655678103489' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-190458713'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, August 2, 2011 at 9:55:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7027009341101647348</id><published>2011-08-08T02:01:15.688-04:00</published><updated>2011-08-08T02:01:15.688-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you would like to know how to implement 4.2 see...</title><content type='html'>If you would like to know how to implement 4.2 see the solution at the following link: http://stackoverflow.com/questions/1993635/c-alternative-to-networkstream-read-that-indicates-remote-host-has-closed-the-c</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7027009341101647348'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7027009341101647348'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1312783275688#c7027009341101647348' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-296554974'/><gd:extendedProperty name='blogger.displayTime' value='Monday, August 8, 2011 at 2:01:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7770770300820063957</id><published>2011-09-05T08:50:27.259-04:00</published><updated>2011-09-05T08:50:27.259-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You didn&amp;#39;t mention resiliance as a solution. D...</title><content type='html'>You didn&amp;#39;t mention resiliance as a solution. Designing your serializer (or XML reader and so forth) so that bytes are &amp;#39;pushed&amp;#39; into it, instead of it reading them means you don&amp;#39;t need to care about framing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7770770300820063957'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7770770300820063957'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1315227027259#c7770770300820063957' title=''/><author><name>jonathan</name><uri>http://id.dickinsons.co.za/jonathan</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1055972417'/><gd:extendedProperty name='blogger.displayTime' value='Monday, September 5, 2011 at 8:50:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3242121952158270626</id><published>2011-09-17T00:05:21.578-04:00</published><updated>2011-09-17T00:05:21.578-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I actually remember him saying the other way, that...</title><content type='html'>I actually remember him saying the other way, that Rx allowed you to do _more_ but that async is easier for the &amp;quot;background processing&amp;quot; scenario you mention.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/3242121952158270626'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/3242121952158270626'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/rx-and-async.html?showComment=1316232321578#c3242121952158270626' title=''/><author><name>Karg</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/09/rx-and-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5502317969145444650' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5502317969145444650' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-580281789'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, September 17, 2011 at 12:05:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6607649674422266561</id><published>2011-09-19T10:19:43.711-04:00</published><updated>2011-09-19T10:19:43.711-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yeah, he didn&amp;#39;t say anything that async can do...</title><content type='html'>Yeah, he didn&amp;#39;t say anything that async can do more, for me it sounded like he actually said that RX might find its way to the standart .Net framework. Everyone is using it internally and I think both async and rx would work nicely together.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/6607649674422266561'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/6607649674422266561'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/rx-and-async.html?showComment=1316441983711#c6607649674422266561' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/09/rx-and-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5502317969145444650' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5502317969145444650' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1382115335'/><gd:extendedProperty name='blogger.displayTime' value='Monday, September 19, 2011 at 10:19:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5303635786927521076</id><published>2011-09-19T13:02:11.837-04:00</published><updated>2011-09-19T13:02:11.837-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the clarification! I only heard the las...</title><content type='html'>Thanks for the clarification! I only heard the last part of Anders live, so I totally missed this conversation.&lt;br /&gt;&lt;br /&gt;I think it would be a great idea to include Rx in the .NET framework.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/5303635786927521076'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/5303635786927521076'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/rx-and-async.html?showComment=1316451731837#c5303635786927521076' title=''/><author><name>Stephen Cleary</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/09/rx-and-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5502317969145444650' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5502317969145444650' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-721978694'/><gd:extendedProperty name='blogger.displayTime' value='Monday, September 19, 2011 at 1:02:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3725117708131955251</id><published>2011-09-19T14:03:37.716-04:00</published><updated>2011-09-19T14:03:37.716-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>nice post. 100% agree</title><content type='html'>nice post. 100% agree</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/3725117708131955251'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/3725117708131955251'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/rx-and-async.html?showComment=1316455417716#c3725117708131955251' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/09/rx-and-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5502317969145444650' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5502317969145444650' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-501878269'/><gd:extendedProperty name='blogger.displayTime' value='Monday, September 19, 2011 at 2:03:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1237221215061434079</id><published>2011-09-20T08:16:17.913-04:00</published><updated>2011-09-20T08:16:17.913-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>catch { } is called &amp;quot;swallowing exceptions&amp;qu...</title><content type='html'>catch { } is called &amp;quot;swallowing exceptions&amp;quot;.  It is almost always, by the definition of exceptions, the wrong thing to do.  If you catch an exception, it should be handled.  The only case where it shouldn&amp;#39;t is a case where exceptions can be thrown for things that aren&amp;#39;t actually broken.  (Thread.Sleep, for example, can throw a ThreadInterruptedException if someone calls thatThread.Interrupt().  But nothing&amp;#39;s actually &amp;quot;wrong&amp;quot;.)  However, cases like that are not that common, and they&amp;#39;re usually already handled by the code that needs to handle them.  All you&amp;#39;re really doing by swallowing exceptions is sweeping errors under the rug and making them that much harder to diagnose and fix.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/1237221215061434079'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/1237221215061434079'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html?showComment=1316520977913#c1237221215061434079' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-153949736974106067' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-877507388'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, September 20, 2011 at 8:16:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8113274420243188587</id><published>2011-09-21T11:07:57.430-04:00</published><updated>2011-09-21T11:07:57.430-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The Akamai link to the interview are still up (at ...</title><content type='html'>The Akamai link to the interview are still up (at least at the time of this comment) http://smooth.akamai.istreamplanet.com/msft/build3/default.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/8113274420243188587'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5502317969145444650/comments/default/8113274420243188587'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/rx-and-async.html?showComment=1316617677430#c8113274420243188587' title=''/><author><name>Stuart Leitch</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/09/rx-and-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5502317969145444650' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5502317969145444650' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1782605215'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, September 21, 2011 at 11:07:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4273692288076243929</id><published>2011-10-11T01:26:44.491-04:00</published><updated>2011-10-11T01:26:44.491-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Drewkeller, 

Great, easy fix. Worked for me. Lost...</title><content type='html'>Drewkeller, &lt;br /&gt;&lt;br /&gt;Great, easy fix. Worked for me. Lost the 1920x1200 mode after after a graphics driver crash and couldnt get it back.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/4273692288076243929'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/4273692288076243929'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1318310804491#c4273692288076243929' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1330152022'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 11, 2011 at 1:26:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4184139643847378492</id><published>2011-10-17T00:41:41.209-04:00</published><updated>2011-10-17T00:41:41.209-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What if it&amp;#39;s a COM object with a .close method...</title><content type='html'>What if it&amp;#39;s a COM object with a .close method - replace CloseHandle with a simple com_object.close and then Marshal.ReleaseComObject(com_object)?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/4184139643847378492'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/4184139643847378492'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html?showComment=1318826501209#c4184139643847378492' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-153949736974106067' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-132305371'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 17, 2011 at 12:41:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4609534197586871818</id><published>2011-10-17T14:50:25.551-04:00</published><updated>2011-10-17T14:50:25.551-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>So as I understand it, the class never sets namedM...</title><content type='html'>So as I understand it, the class never sets namedMutex to null, nor does it allow anything external to set it to null.  Therefor, it knows never to check for null.  You are doing away with unnecesary flags and checks.  That does, however, delay GC until the instance of the class itself is set to null, no?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4609534197586871818'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4609534197586871818'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1318877425551#c4609534197586871818' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-132305371'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 17, 2011 at 2:50:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5184562303247642878</id><published>2011-10-17T16:00:03.112-04:00</published><updated>2011-10-27T09:35:45.256-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Not in the common use case. Normally, when Dispose...</title><content type='html'>Not in the common use case. Normally, when Dispose is called, the object is about to become eligible for GC. In this case, the object (and its namedMutex) are both eligible for GC by the time Dispose returns.&lt;br /&gt;&lt;br /&gt;You may be interested in this blog post I did a while back: http://nitoprograms.blogspot.com/2010/02/q-should-i-set-variables-to-null-to.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5184562303247642878'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5184562303247642878'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1318881603112#c5184562303247642878' title=''/><author><name>Stephen Cleary</name><uri>http://nitoprograms.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-721978694'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 17, 2011 at 4:00:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3646539995883478087</id><published>2011-10-17T16:30:19.949-04:00</published><updated>2011-10-17T16:30:19.949-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I have very little COM interop experience, but I b...</title><content type='html'>I have very little COM interop experience, but I believe this is correct:&lt;br /&gt;&lt;br /&gt;A &amp;quot;Close&amp;quot; method on a COM object is an actual method, not a generic resource cleanup method (i.e., it actually performs an action; one that you don&amp;#39;t necessarily want done in every use case). ReleaseComObject can be called from Dispose if your COM object is owned by that object.&lt;br /&gt;&lt;br /&gt;COM objects are considered managed resources (since the GC will deref them eventually).&lt;br /&gt;&lt;br /&gt;I&amp;#39;m basing my assumptions on CBrumme&amp;#39;s blog post, which may help you in your design: http://blogs.msdn.com/b/cbrumme/archive/2003/04/16/51355.aspx</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/3646539995883478087'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/153949736974106067/comments/default/3646539995883478087'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html?showComment=1318883419949#c3646539995883478087' title=''/><author><name>Stephen Cleary</name><uri>http://nitoprograms.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-153949736974106067' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/153949736974106067' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-721978694'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 17, 2011 at 4:30:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8149150763573084246</id><published>2011-10-26T08:57:00.118-04:00</published><updated>2011-10-26T08:57:00.118-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Your documentation is very helpful. Thank you.</title><content type='html'>Your documentation is very helpful. Thank you.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/8149150763573084246'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/8149150763573084246'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html?showComment=1319633820118#c8149150763573084246' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7634204289692406306' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1139286027'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 26, 2011 at 8:57:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7876901873451206790</id><published>2011-11-03T20:07:19.761-04:00</published><updated>2011-11-03T20:07:19.761-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Another thumbs up...
I had got about 90% of the wa...</title><content type='html'>Another thumbs up...&lt;br /&gt;I had got about 90% of the way there and this article made the remaining 10% considerably less painful than I had feared.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/7876901873451206790'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/7876901873451206790'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1320365239761#c7876901873451206790' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1811863568'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 3, 2011 at 8:07:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4235389594795169183</id><published>2011-11-13T10:48:26.982-05:00</published><updated>2011-11-13T10:48:26.982-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>i am a noob my friend i am doing whiteboard i want...</title><content type='html'>i am a noob my friend i am doing whiteboard i want to pass the object over network help me</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/4235389594795169183'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/4235389594795169183'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1321199306982#c4235389594795169183' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1308282537'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 13, 2011 at 10:48:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5078841971682958838</id><published>2011-11-19T12:18:24.082-05:00</published><updated>2011-11-19T12:18:24.082-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>thanks mate! you&amp;#39;ve been saved my life! but i ...</title><content type='html'>thanks mate! you&amp;#39;ve been saved my life! but i think that Reflector should improve this &amp;quot;bug&amp;quot;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5078841971682958838'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5078841971682958838'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1321723104082#c5078841971682958838' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225652005'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, November 19, 2011 at 12:18:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7511728737805880607</id><published>2011-11-21T17:01:14.255-05:00</published><updated>2011-11-21T17:01:14.255-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>My solution is to ask receiving host to send back ...</title><content type='html'>My solution is to ask receiving host to send back an integer number to confirm the message has been received. Therefore on the server side:&lt;br /&gt;for (i=0; i&amp;lt;npass; i++){&lt;br /&gt;nbytes=send(fd, buf, size_buf, 0);&lt;br /&gt;..check nbytes here. nbytes=size_buf&lt;br /&gt;nbytes=recv(fd, &amp;amp;idone, 4, 0);&lt;br /&gt;..check nbytes. nbytes should be equal to 4 &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;on the client size:&lt;br /&gt;&lt;br /&gt; for (i=0; i&amp;lt;npass; i++){&lt;br /&gt;nbytes=recv(fd, buf, size_buf, 0);&lt;br /&gt;..check nbytes here. nbytes=size_buf&lt;br /&gt;nbytes=send(fd, &amp;amp;idone, 4, 0);&lt;br /&gt;..check nbytes. nbytes should be equal to 4 &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Juefu</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7511728737805880607'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7511728737805880607'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1321912874255#c7511728737805880607' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1036895126'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 21, 2011 at 5:01:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1324379193793923539</id><published>2011-11-21T20:10:46.385-05:00</published><updated>2011-11-21T20:10:46.385-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@jonathan: Resiliance only works if you have a con...</title><content type='html'>@jonathan: Resiliance only works if you have a concept of a natural &amp;quot;end&amp;quot; (so it works fine for XML but you have to design it into other forms of serialization). I have found that code for this approach is usually more complex than basic framing. Not every platform has SAX-style XML parsers available.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/1324379193793923539'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/1324379193793923539'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1321924246385#c1324379193793923539' title=''/><author><name>Stephen Cleary</name><uri>http://nitoprograms.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-251642731'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 21, 2011 at 8:10:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5896481458261117440</id><published>2011-11-21T20:15:10.516-05:00</published><updated>2011-11-21T20:15:10.516-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Juefu: that is not a solution to the message fram...</title><content type='html'>@Juefu: that is not a solution to the message framing problem. e.g., it is possible for &amp;quot;nbytes&amp;quot; to not be 4 where you expect it to be 4.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/5896481458261117440'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/5896481458261117440'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1321924510516#c5896481458261117440' title=''/><author><name>Stephen Cleary</name><uri>http://nitoprograms.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-251642731'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 21, 2011 at 8:15:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7900846779542523145</id><published>2011-11-21T21:21:00.387-05:00</published><updated>2011-11-21T21:21:00.387-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen,

You are right. Based on my tests. The ba...</title><content type='html'>Stephen,&lt;br /&gt;&lt;br /&gt;You are right. Based on my tests. The back-and-forth communication between server and client does help to stabilize the data transfer (&amp;#39;stablize&amp;#39; means that no data is lost during socket streaming). But if the data size for each send/receive call should be small, for example 1024 bytes. If each time I wanted to transfer 6000 bytes, I got errors. Not sure about the best solution for this problem. &lt;br /&gt;&lt;br /&gt;I wrote a class to perform data exchange between server and client. My method is similar to the prefix method since each time I send a short message about the information about a big array that I will send to the client. Then in the class I compute the number of passes I need to call &amp;#39;send&amp;#39;, etc.&lt;br /&gt;&lt;br /&gt; So far I am satisfied with the performance. Does any one want to test my class? I can share it by putting it on my Google documents.&lt;br /&gt;&lt;br /&gt;Juefu</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7900846779542523145'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7900846779542523145'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1321928460387#c7900846779542523145' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-354195628'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 21, 2011 at 9:21:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2278997307406767852</id><published>2011-11-22T09:51:10.739-05:00</published><updated>2011-11-22T09:51:10.739-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Juefu: Data is not lost in TCP/IP transfers; it j...</title><content type='html'>@Juefu: Data is not lost in TCP/IP transfers; it just gets transferred in a stream rather than messages. One solution for this problem is message framing, which is what my blog post is about.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2278997307406767852'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2278997307406767852'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1321973470739#c2278997307406767852' title=''/><author><name>Stephen Cleary</name><uri>http://nitoprograms.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1406092824'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 22, 2011 at 9:51:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2077377926895281219</id><published>2011-11-22T11:09:34.309-05:00</published><updated>2012-08-06T15:21:28.655-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen,

Thanks for the clarification. Network pr...</title><content type='html'>Stephen,&lt;br /&gt;&lt;br /&gt;Thanks for the clarification. Network programming is totally new to me. I think that we are talking about different problems. It seems that the purpose of message framing is trying to break between messages so that the receiver can extract useful information from received stream. Is that right? In contrast, my problem is how to avoid data loss in TCP/IP transfer. My tests showed that the function &amp;#39;send&amp;#39; couldn&amp;#39;t send a big chunk of data a time. I had to split it into pieces and made many send calls. In addition, there should be some blocking mechanism to make sure each call is completed without errors before  the next call of send. My trick was to ask the receiver to send back a confirmation, which seemed to work for me. But now I am concerned since it is not quaranteed to be right as you suggested.&lt;br /&gt;&lt;br /&gt;I was trying to develop a class for my parallel computing applications, which actually needs message framing. Typically in my application, the server (parent) reads data from disk and sends data and instructions to clients (children), and then collect results from children. I don&amp;#39;t want to use MPI since it is not robust in handling individual host failure. Do you have any suggestions for this  kind of problems? By the way, I working on Linux system. Are you working on Windows? Thank you for your help. &lt;br /&gt;&lt;br /&gt;Juefu</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2077377926895281219'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2077377926895281219'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1321978174309#c2077377926895281219' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1036895126'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 22, 2011 at 11:09:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5875373786279835877</id><published>2011-12-27T07:05:22.948-05:00</published><updated>2011-12-27T07:05:22.948-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi All, 

I&amp;#39;m not a dot net programmer, but ne...</title><content type='html'>Hi All, &lt;br /&gt;&lt;br /&gt;I&amp;#39;m not a dot net programmer, but need to have solution of notifying dropped connections for java and c#. What I found on internet is that with sending urgent data (as a separate stream) on existing connection, I&amp;#39;m able to notice if connection is still alive before sending response back (http://en.wikipedia.org/wiki/Transmission_Control_Protocol#Out_of_band_data). That is very good solution and I already implemented it under java (sendUrgentData), but so far I was unable to find such solution for C#. Can you try to solve this issue under C# using hidden data (out_of_band_data)? Is there methods (or approaches) for sending hidden data under C#?&lt;br /&gt;&lt;br /&gt;Thank you for your responses on this matter. I hope I helped you to find good solution for checking out terminated connections.&lt;br /&gt;&lt;br /&gt;BR&lt;br /&gt;pecko</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5875373786279835877'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5875373786279835877'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1324987522948#c5875373786279835877' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-340245365'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, December 27, 2011 at 7:05:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9064420297515344345</id><published>2012-01-10T21:53:15.182-05:00</published><updated>2012-01-10T21:53:15.182-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>nice post. Thanks!</title><content type='html'>nice post. Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/9064420297515344345'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/9064420297515344345'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1326250395182#c9064420297515344345' title=''/><author><name>JeeShen Lee</name><uri>http://www.blogger.com/profile/08040994135883927383</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://3.bp.blogspot.com/-Vnj95LArEVo/TpUUZojN-GI/AAAAAAAACqE/Qbi6687rxkM/s220/Jeeshenlee_Thumbnail.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1367578132'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, January 10, 2012 at 9:53:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7801861105568979095</id><published>2012-01-16T15:26:54.164-05:00</published><updated>2012-01-16T15:26:54.164-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@pecko: OOB data can be sent by passing Socket.Out...</title><content type='html'>@pecko: OOB data can be sent by passing Socket.OutOfBand to one of the Send methods.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7801861105568979095'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7801861105568979095'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1326745614164#c7801861105568979095' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 16, 2012 at 3:26:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3278603004924853908</id><published>2012-01-18T23:53:54.664-05:00</published><updated>2012-01-18T23:53:54.664-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>came across your blog tonight looking at async &amp;am...</title><content type='html'>came across your blog tonight looking at async &amp;amp; parallel programming info.&lt;br /&gt;&lt;br /&gt;Very sorry to hear about your son&amp;#39;s illness.  See this post is a month and half old now.   Prayers are with you in your son&amp;#39;s well being and your family.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3092811678661560282/comments/default/3278603004924853908'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3092811678661560282/comments/default/3278603004924853908'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/12/out-for-bit.html?showComment=1326948834664#c3278603004924853908' title=''/><author><name>Dan Moyer</name><uri>http://danlmoyer.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/12/out-for-bit.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3092811678661560282' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3092811678661560282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-776043837'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, January 18, 2012 at 11:53:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6179705106167658589</id><published>2012-02-08T11:54:02.198-05:00</published><updated>2012-02-08T11:54:02.198-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is significantly more work and more complex t...</title><content type='html'>This is significantly more work and more complex than just using the BackgroundWorker class. The nice thing about the backgroundWorker class is it encapsulated all of the heavy lifting underneath the hood. This technique really forces you to know the mechanics of how each class functions and the proper way to wire them up together.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/6179705106167658589'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/6179705106167658589'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1328720042198#c6179705106167658589' title=''/><author><name>Will</name><uri>http://www.nowhere.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-518573267'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, February 8, 2012 at 11:54:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9164996707467545915</id><published>2012-02-08T14:07:41.069-05:00</published><updated>2012-02-08T14:07:41.069-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Will,

I&amp;#39;m working on an update to this post t...</title><content type='html'>Will,&lt;br /&gt;&lt;br /&gt;I&amp;#39;m working on an update to this post that shows off the way async Tasks report progress. It uses a similar technique to ProgressReporter, but is built-in to the Async CTP (and Visual Studio vNext), so it will end up being even easier to use than BackgroundWorker.&lt;br /&gt;&lt;br /&gt;Also, it will nest naturally, which is BGW&amp;#39;s biggest weakness.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/9164996707467545915'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6505292072998100961/comments/default/9164996707467545915'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html?showComment=1328728061069#c9164996707467545915' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/reporting-progress-from-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6505292072998100961' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6505292072998100961' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, February 8, 2012 at 2:07:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4718293014514705915</id><published>2012-02-17T10:31:54.310-05:00</published><updated>2012-02-17T10:31:54.310-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m really enjoying Nito.KitchenSink.OptionPar...</title><content type='html'>I&amp;#39;m really enjoying Nito.KitchenSink.OptionParsing :D&lt;br /&gt;&lt;br /&gt;Have you thought about adding an argument count and/or automatic help documentation?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3253379317202462495/comments/default/4718293014514705915'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3253379317202462495/comments/default/4718293014514705915'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/10/option-parsing-case-sensitivity.html?showComment=1329492714310#c4718293014514705915' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/10/option-parsing-case-sensitivity.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3253379317202462495' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3253379317202462495' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2016079976'/><gd:extendedProperty name='blogger.displayTime' value='Friday, February 17, 2012 at 10:31:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2097912211619196444</id><published>2012-02-17T15:50:59.502-05:00</published><updated>2012-02-17T15:50:59.502-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m glad you&amp;#39;re enjoying it! I think it&amp;#3...</title><content type='html'>I&amp;#39;m glad you&amp;#39;re enjoying it! I think it&amp;#39;s fun myself, but most people think command line parsing is just plain tedious. :)&lt;br /&gt;&lt;br /&gt;I&amp;#39;m not sure what you&amp;#39;re asking for regarding the argument count - could you clarify?&lt;br /&gt;&lt;br /&gt;I did consider automatic help documentation, but I&amp;#39;ve decided not to implement it. There are several different styles, it would be fairly complex to do, and there&amp;#39;s not much benefit.&lt;br /&gt;&lt;br /&gt;However, the error handling was carefully designed to distinguish usage errors from any other kinds, and I made an attempt to provide user-friendly usage error messages. I do recommend putting you Usage method into your options class, so there&amp;#39;s less of a chance of it getting &amp;quot;stale&amp;quot;:&lt;br /&gt;&lt;br /&gt;http://nitoprograms.blogspot.com/2011/06/option-parsing-error-handling.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3253379317202462495/comments/default/2097912211619196444'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3253379317202462495/comments/default/2097912211619196444'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/10/option-parsing-case-sensitivity.html?showComment=1329511859502#c2097912211619196444' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/10/option-parsing-case-sensitivity.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3253379317202462495' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3253379317202462495' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, February 17, 2012 at 3:50:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-796413636890999420</id><published>2012-02-25T18:25:44.029-05:00</published><updated>2012-02-25T18:25:44.029-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>VERY GOOD ! THANKS !
hdolder
[www.hdolder.com/CutB...</title><content type='html'>VERY GOOD ! THANKS !&lt;br /&gt;hdolder&lt;br /&gt;[www.hdolder.com/CutBSK6fN.htm]</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/796413636890999420'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/796413636890999420'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1330212344029#c796413636890999420' title=''/><author><name>H. Dolder</name><uri>http://www.hdolder.com/CutBSK6fN.htm</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1737774094'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 25, 2012 at 6:25:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3080993429982169713</id><published>2012-03-01T23:52:04.139-05:00</published><updated>2012-03-01T23:52:04.139-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello,

I&amp;#39;ve been able to program using socket...</title><content type='html'>Hello,&lt;br /&gt;&lt;br /&gt;I&amp;#39;ve been able to program using sockets for a long time but I have never completely understood them. This really demystified everything I had questions about (such as the backlog on a socket&amp;#39;s listening function). I&amp;#39;m very excited for my current project as I feel I&amp;#39;ll be able to make it better just by reading what you&amp;#39;ve wrote.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/3080993429982169713'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/3080993429982169713'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1330663924139#c3080993429982169713' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-163668265'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 1, 2012 at 11:52:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2733631850963516171</id><published>2012-03-08T04:24:51.934-05:00</published><updated>2012-03-08T04:24:51.934-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>So can I ask what&amp;#39;s involved in implementing s...</title><content type='html'>So can I ask what&amp;#39;s involved in implementing solution number 1?&lt;br /&gt;&lt;br /&gt;Does the sender just send out a 0 length keepalive message if say, no data has been sent for 45s.  And then the reader knows that if it hasn&amp;#39;t received any data for, say 60s then the link must be dead and it should close it?&lt;br /&gt;&lt;br /&gt;Or am I off the mark.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2733631850963516171'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2733631850963516171'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1331198691934#c2733631850963516171' title=''/><author><name>Oilspill</name><uri>http://www.blogger.com/profile/14885213291367686293</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1224949899'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 8, 2012 at 4:24:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8011283830880828169</id><published>2012-03-08T08:57:22.355-05:00</published><updated>2012-03-08T08:57:22.355-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Oilspill: I usually have *both* sides send a 0-le...</title><content type='html'>@Oilspill: I usually have *both* sides send a 0-length keepalive message if no other data has been sent for a given period of time (or if you want it simpler, just always send out a 0-length keepalive message periodically).&lt;br /&gt;&lt;br /&gt;There&amp;#39;s no need for a timeout to detect the lost connection; if the connection has been lost, then the keepalive message will fail (because it was never ACKed), and the socket will go into an error state.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8011283830880828169'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8011283830880828169'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1331215042355#c8011283830880828169' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 8, 2012 at 8:57:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7779859050771995199</id><published>2012-03-12T11:48:41.971-04:00</published><updated>2012-03-12T11:48:41.971-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Silliest list of &amp;quot;great programmer requiremen...</title><content type='html'>Silliest list of &amp;quot;great programmer requirements&amp;quot; that I have read yet.&lt;br /&gt;I am guessing it is just a form of self flattery and attributes that you posses.&lt;br /&gt; &lt;br /&gt;What about &amp;quot;wanting to learn&amp;quot;. I currently work with a lot of bioinformaticians - some can program well, and know when to use the correct tools. Then there are many others who know just enough about programming to create a one off script.Many of the second group seem to have no interest in how to use a database, learn object oriented programming or many thing actually. Crap programmers in my book.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4111774602817740749/comments/default/7779859050771995199'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4111774602817740749/comments/default/7779859050771995199'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/super-agile-or-cowboy-coding.html?showComment=1331567321971#c7779859050771995199' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><gd:extendedProperty name='blogger.itemClass' value='pid-893478774'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 12, 2012 at 11:48:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6879095996745994211</id><published>2012-03-12T15:45:38.186-04:00</published><updated>2012-03-12T15:45:38.186-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous: I didn&amp;#39;t write the &amp;quot;Hacker HO...</title><content type='html'>@Anonymous: I didn&amp;#39;t write the &amp;quot;Hacker HOWTO&amp;quot;. Perhaps you should take up your issues with the authors.&lt;br /&gt;&lt;br /&gt;I think that your &amp;quot;wanting to learn&amp;quot; attribute would fall under the &amp;quot;always learning&amp;quot; point in my post.&lt;br /&gt;&lt;br /&gt;Also, I am discussing professional programmers - more specifically, professional programmers working in environments where it&amp;#39;s simply not possible to be average. There are many professions where programming is a useful skill but not the central object. For people in those professions, I don&amp;#39;t think they *have* to be &amp;quot;great programmers.&amp;quot;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4111774602817740749/comments/default/6879095996745994211'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4111774602817740749/comments/default/6879095996745994211'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/01/super-agile-or-cowboy-coding.html?showComment=1331581538186#c6879095996745994211' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 12, 2012 at 3:45:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2243969295541671461</id><published>2012-03-13T06:09:49.201-04:00</published><updated>2012-03-13T06:09:49.201-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello,
I have an issue with my client(multiple cli...</title><content type='html'>Hello,&lt;br /&gt;I have an issue with my client(multiple clients)-server SMS application. Initially all clients connected properly...But after some times some clients raises as Socket exception and loses connection, if such exception occurs I restart the client it shows me connected when client sends any frame client doesn&amp;#39;t get any ack from server, I thing this as Half open connection issue.But I am unable to find any solution. Any help will be appropriated.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2243969295541671461'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2243969295541671461'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1331633389201#c2243969295541671461' title=''/><author><name>Sam</name><uri>http://www.blogger.com/profile/11457234052102618582</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1174309091'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 13, 2012 at 6:09:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8060526278369530313</id><published>2012-03-13T06:12:32.280-04:00</published><updated>2012-03-13T06:12:32.280-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Let me know if any one want more details or code.</title><content type='html'>Let me know if any one want more details or code.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8060526278369530313'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8060526278369530313'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1331633552280#c8060526278369530313' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2243969295541671461'/><author><name>Sam</name><uri>http://www.blogger.com/profile/11457234052102618582</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1174309091'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 13, 2012 at 6:12:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5076980610165300097</id><published>2012-03-13T09:39:53.927-04:00</published><updated>2012-03-13T09:39:53.927-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It sounds like the clients are detecting it but th...</title><content type='html'>It sounds like the clients are detecting it but the server is not. Both sides need to detect the half-open situation. Is the server periodically sending keepalives or data to all clients?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5076980610165300097'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5076980610165300097'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1331645993927#c5076980610165300097' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2243969295541671461'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 13, 2012 at 9:39:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6729171740557685986</id><published>2012-03-14T03:36:46.149-04:00</published><updated>2012-03-14T03:36:46.149-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No server is not sending any data to clients, but ...</title><content type='html'>No server is not sending any data to clients, but yes keep alive property is set(We are using C#.Net TCP/IP Lib) and I think this property does the work to check client is alive or not.&lt;br /&gt;After more debugging I found that there is issue in thread(Communicator,Transmitor, Receiver) synchronization I have resolve this its working and now testing it.&lt;br /&gt;If this not work then I think Server needs to send empty frames periodically &amp;amp; check clients are running or not.&lt;br /&gt;Please make me right if I wrong.&lt;br /&gt;Thanks for the your response. I will let you know about the result.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6729171740557685986'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6729171740557685986'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1331710606149#c6729171740557685986' title=''/><author><name>Sam</name><uri>http://www.blogger.com/profile/11457234052102618582</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1174309091'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 14, 2012 at 3:36:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2780106336008235516</id><published>2012-03-18T17:12:59.777-04:00</published><updated>2012-03-18T17:12:59.777-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The keepalive property will check the connection p...</title><content type='html'>The keepalive property will check the connection periodically. Unfortunately, it only checks every 2 hours, as mentioned in my blog post above.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2780106336008235516'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2780106336008235516'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1332105179777#c2780106336008235516' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6729171740557685986'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 18, 2012 at 5:12:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7899672871424469325</id><published>2012-03-18T19:54:03.846-04:00</published><updated>2012-03-18T19:54:03.846-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great code!
Just one question:
If a client writes ...</title><content type='html'>Great code!&lt;br /&gt;Just one question:&lt;br /&gt;If a client writes for example 200 bytes of data to the stream, and then stops, and this code reads that data (which is one length buffer + data), won&amp;#39;t the code just continue to loop through the rest of the readbuffer (which for example is 4096 bytes) until it finds some length data?&lt;br /&gt;&lt;br /&gt;What I mean is that it will loop through useless data, when there are maybe some new data that has been written after the readBuffer was filled?&lt;br /&gt;&lt;br /&gt;So instead of accepting zero length packets, shouldn&amp;#39;t the code be notified and then just throw away the rest of the readBuffer? Or am I totally wrong now?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/7899672871424469325'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/7899672871424469325'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1332114843846#c7899672871424469325' title=''/><author><name>Fredrik Blomqvist</name><uri>http://www.blogger.com/profile/02690296548623493995</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-851799011'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 18, 2012 at 7:54:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8212894658078246399</id><published>2012-03-19T09:19:58.674-04:00</published><updated>2012-03-19T09:19:58.674-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The code in this blog post assumes that DataReceiv...</title><content type='html'>The code in this blog post assumes that DataReceived will be passed the bytes read from the stream, not a partially-filled read buffer. It accepts zero-length packets to allow the other side to detect half-open connections (http://nitoprograms.blogspot.com/2009/05/detection-of-half-open-dropped.html).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8212894658078246399'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8212894658078246399'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1332163198674#c8212894658078246399' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/7899672871424469325'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 19, 2012 at 9:19:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4266572115310726374</id><published>2012-03-22T18:34:32.470-04:00</published><updated>2012-03-22T18:34:32.470-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;ve read a lot about the dispose pattern and ...</title><content type='html'>I&amp;#39;ve read a lot about the dispose pattern and these rules.  It all makes good sense and it does make my job easier, but only if I am perfect enough to always call Dispose in my disposable classes.  I find, however, that I want to add a finalizer and GC.SuppressFinalize in Dispose anyway because I can put logging into the finalizer to detect when I fail to properly call dispose.  Is there a simpler, more elegant way to detect failure to dispose for an application in the field?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1332455672470#c4266572115310726374' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-85983792'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 22, 2012 at 6:34:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3191176455615136028</id><published>2012-03-22T21:16:46.416-04:00</published><updated>2012-03-22T21:16:46.416-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There is no easier method that I&amp;#39;m aware of.

...</title><content type='html'>There is no easier method that I&amp;#39;m aware of.&lt;br /&gt;&lt;br /&gt;Most logging methods may fail from within a finalizer, especially during process exit. Console.WriteLine is guaranteed to succeed, but pretty much anything else may fail.&lt;br /&gt;&lt;br /&gt;I have (in the distant past) thrown an exception in this situation, crashing the process intentionally. However, all of my more recent code just ignores this situation. AFAIK, there just isn&amp;#39;t a good way to detect it other than in a finalizer, and your code is so restricted in a finalizer that there isn&amp;#39;t much you can do even when you do detect it...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/3191176455615136028'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/3191176455615136028'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1332465406416#c3191176455615136028' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 22, 2012 at 9:16:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5648771119844392296</id><published>2012-03-22T22:37:28.604-04:00</published><updated>2012-03-22T22:37:28.604-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks.  I don&amp;#39;t really care what happens duri...</title><content type='html'>Thanks.  I don&amp;#39;t really care what happens during exit.  I can&amp;#39;t crash in a kiosk sort of situation.  So it&amp;#39;s what might otherwise leak in a long-running app for lack of Dispose calls that I try to catch from looking at plain text logs written within the Finalize.  One logging call is all the extra work I do in a Finalize.  I have found a few missing Disposes this way.  My intention is to eventually remove the finalizers and conform to the rules you lay out, but for now the finalizers are a handy tool for debugging unattended systems.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5648771119844392296'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5648771119844392296'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1332470248604#c5648771119844392296' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-85983792'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 22, 2012 at 10:37:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4988890398554995359</id><published>2012-03-22T23:07:44.122-04:00</published><updated>2012-03-22T23:07:44.122-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Most discussions like yours of rule one mention da...</title><content type='html'>Most discussions like yours of rule one mention database access as an unmanaged or external (to the CLR) resource.  But the MySQL .NET connector has a Dispose method which, according to the rules, makes it a managed wrapper.  In fact, the MySQL .NET connector is listed on the MySQL site as fully managed.  This makes all my database work fall under the simpler rule two.&lt;br /&gt;&lt;br /&gt;What I&amp;#39;m really saying here is that the statement in your decision matrix that a managed resource is &amp;quot;an instance of any class implementing IDisposable&amp;quot; is much more valuable to understanding managed versus unmanaged than indiscriminately saying that a database connection is an example of an unmanaged resource.  This was only made clear to me when I searched and found your decision matrix, which you intentionally split into a separate post.  I really think you should throw in a link to that article in every &amp;quot;Three simple rules&amp;quot; page.  I don&amp;#39;t see it otherwise.  Very valuable.&lt;br /&gt;&lt;br /&gt;I&amp;#39;ve read a lot of very long, technical articles about the disposal pattern, most of which I didn&amp;#39;t understand because they all seem to be written for someone who works in the MS OS development group or work through the API exclusively.  That includes your own &amp;quot;What Your Mother Never Told You...&amp;quot; article.  LOL.  I work almost exclusively at the managed level, and it took me a while to really understand that.  Your articles here have taken all the low-level obscurity and made it accessible and concise for application programmers like me.  Thanks for the great work.  It&amp;#39;s really appreciated.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/4988890398554995359'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/4988890398554995359'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html?showComment=1332472064122#c4988890398554995359' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-431595782877712191' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/431595782877712191' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-85983792'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 22, 2012 at 11:07:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4898866506094690948</id><published>2012-03-30T18:10:10.253-04:00</published><updated>2012-03-30T18:10:10.253-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Many thanks for this excellent blog!
I&amp;#39;m only ...</title><content type='html'>Many thanks for this excellent blog!&lt;br /&gt;I&amp;#39;m only questioning your statement [Most of the time, you don&amp;#39;t need to sync back to the &amp;quot;main&amp;quot; context]. Don&amp;#39;t you think most programmers will forget about locks needed when accessing shared data from several threads? This is especially dangerous, when programming asynchronous operations in a &amp;#39;synchronous style&amp;#39;.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4898866506094690948'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4898866506094690948'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1333145410253#c4898866506094690948' title=''/><author><name>Stefan Forster</name><uri>http://sourceforge.net/projects/asyncwcflib</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-380871009'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 30, 2012 at 6:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8324169928092273264</id><published>2012-04-10T12:53:08.091-04:00</published><updated>2012-04-10T12:53:08.091-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>My class owns a managed resource (an API connectio...</title><content type='html'>My class owns a managed resource (an API connection to an external system), therefore I am implementing IDisposable.  Due to slow performance when making the connection, the connection is made once in the constructor and I expose a Disconnect() method that delegates to the api.Disconnect() method.&lt;br /&gt;&lt;br /&gt;However, I cannot be certain that users of my class will always call my Disconnect() method, and I want to make absolutely sure that the connection is closed when my object is disposed/finalized.  Even though I do not have unmanaged resources, is this a case where a finalizer (and the full Dispose pattern) is needed?  Otherwise how can I ensure the connection is closed and I do not have a leak?&lt;br /&gt;&lt;br /&gt;Many thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/8324169928092273264'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/8324169928092273264'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1334076788091#c8324169928092273264' title=''/><author><name>JCDrumKing</name><uri>http://www.blogger.com/profile/17980783173531248886</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2104014699'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 10, 2012 at 12:53:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6789375672906864436</id><published>2012-04-12T13:27:51.270-04:00</published><updated>2012-04-12T13:27:51.270-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Absolutely Amazingly described!!! I read so many p...</title><content type='html'>Absolutely Amazingly described!!! I read so many places but this is the best.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6789375672906864436'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6789375672906864436'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1334251671270#c6789375672906864436' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1212704412'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 12, 2012 at 1:27:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8305787085479388993</id><published>2012-04-13T18:12:19.077-04:00</published><updated>2012-04-13T18:12:19.077-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would say it depends on whether there is an actu...</title><content type='html'>I would say it depends on whether there is an actual &amp;quot;leak&amp;quot; or not. What happens if Disconnect is never called? If the system as a whole recovers from that situation (e.g., the external system will eventually detect the connection is no longer there or just times it out, and if the external system allows other connections from the same source) then it can be treated as a &amp;quot;managed&amp;quot; resource - it&amp;#39;s inefficient but there&amp;#39;s no leak.&lt;br /&gt;&lt;br /&gt;That&amp;#39;s probably the best way to go, because the system as a whole must be able to recover from connection problems. The only other situation I can think of is if the (client-side) API layer itself has some restriction, like only allowing one connection per process. In that case, I would lean towards putting in a finalizer which actually (intentionally) crashes.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/8305787085479388993'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/8305787085479388993'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1334355139077#c8305787085479388993' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/8324169928092273264'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 13, 2012 at 6:12:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4904749112843025736</id><published>2012-04-13T18:19:55.987-04:00</published><updated>2012-04-13T18:19:55.987-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Each async method is processed serially. This is t...</title><content type='html'>Each async method is processed serially. This is true even if ConfigureAwait(false) is used; the async method will continue on a thread pool thread, but each part of the async method is still dependent on the previous part of the async method.&lt;br /&gt;&lt;br /&gt;The only case where locks would be needed is when you actually have multiple threads running at the same time (e.g., starting several Task.Run tasks and then awaiting Task.WhenAll). In that case, Stephen Toub has done some very interesting work with await-friendly synchronization primitives (on the MSDN parallel team blog).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4904749112843025736'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4904749112843025736'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1334355595987#c4904749112843025736' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4898866506094690948'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 13, 2012 at 6:19:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3039420058612541954</id><published>2012-04-13T18:28:23.945-04:00</published><updated>2012-04-13T18:28:23.945-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the kind words.

The Official Authorize...</title><content type='html'>Thanks for the kind words.&lt;br /&gt;&lt;br /&gt;The Official Authorized Recommended IDisposable Pattern was designed to handle every possible situation - including base classes with a mix of unmanaged and managed resources being extended by a derived class with a mix of unmanaged and managed resources. This dates back to .NET 1.0.&lt;br /&gt;&lt;br /&gt;With .NET 2.0, Microsoft went through and changed all that. They still implement the IDisposable pattern just in case anyone was depending on it, but internally they split everything into &amp;quot;unmanaged resource owners&amp;quot; and &amp;quot;managed resource owners&amp;quot;.&lt;br /&gt;&lt;br /&gt;When I started writing about IDisposable, I was actually just documenting what Microsoft&amp;#39;s actual practice was rather than their official recommendation (except for unsealed disposables).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/3039420058612541954'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/3039420058612541954'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html?showComment=1334356103945#c3039420058612541954' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/4988890398554995359'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-431595782877712191' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/431595782877712191' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 13, 2012 at 6:28:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6613739016319530653</id><published>2012-04-18T09:35:19.889-04:00</published><updated>2012-04-18T09:35:19.889-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks man...</title><content type='html'>Thanks man...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/6613739016319530653'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/6613739016319530653'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1334756119889#c6613739016319530653' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-429505262'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 18, 2012 at 9:35:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2879444098610837604</id><published>2012-04-19T08:24:03.116-04:00</published><updated>2012-04-19T08:24:22.146-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1282213798185076226/comments/default/2879444098610837604'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1282213798185076226/comments/default/2879444098610837604'/><author><name>Kailash Paliwal</name><uri>http://www.blogger.com/profile/00473758122100791082</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='24' src='http://2.bp.blogspot.com/_daIaqTK5IB8/SfKsMp8jTMI/AAAAAAAAAEM/OmBJY5D1a4k/S220/Kailash+Paliwal.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/11/few-words-on-guids.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1282213798185076226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1282213798185076226' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-124736727'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 19, 2012 at 8:24:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2639918553961248039</id><published>2012-04-23T15:29:36.929-04:00</published><updated>2012-04-23T15:29:36.929-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Do you have an example of implementing TCP KeepAli...</title><content type='html'>Do you have an example of implementing TCP KeepAlive on a TCP Client?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/2639918553961248039'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/2639918553961248039'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/tcpip-resources.html?showComment=1335209376929#c2639918553961248039' title=''/><author><name>brutus</name><uri>http://www.b.ro</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/tcpip-resources.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2837182939644513866' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2837182939644513866' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1478417671'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 23, 2012 at 3:29:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3099722045099021047</id><published>2012-04-23T15:41:33.071-04:00</published><updated>2012-04-23T15:41:33.071-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,
I want to implement the TCP KeepAlive ...</title><content type='html'>Hi Stephen,&lt;br /&gt;I want to implement the TCP KeepAlive property to my TCP Client.&lt;br /&gt;I have this in the Load_form ( i am using a windows form) &lt;br /&gt; tcpSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, 1)&lt;br /&gt;Should i need anything else?&lt;br /&gt;Can you give me a code snipped by implementing the TCP KeepAlive(C# or Vb.net)?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3099722045099021047'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3099722045099021047'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1335210093071#c3099722045099021047' title=''/><author><name>BrutusBlog</name><uri>http://www.blogger.com/profile/18427429339546750153</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-75415299'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 23, 2012 at 3:41:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6221802993976867624</id><published>2012-04-24T20:40:04.178-04:00</published><updated>2012-04-24T20:40:04.178-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>As I pointed out in my blog, the SocketOptionName....</title><content type='html'>As I pointed out in my blog, the SocketOptionName.KeepAlive sets a 2-hour timeout on the socket. If that&amp;#39;s acceptable for your app, then that&amp;#39;s all you need.&lt;br /&gt;&lt;br /&gt;Most apps prefer to detect dropped connections sooner than 2 hours. In that case, you need to pass  IOControlCode.KeepAliveValues to Socket.IOControl with an unmanaged SIO_KEEPALIVE_VALS structure.&lt;br /&gt;&lt;br /&gt;I do not have a code sample, sorry!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6221802993976867624'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6221802993976867624'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1335314404178#c6221802993976867624' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3099722045099021047'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 24, 2012 at 8:40:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5897216177084469702</id><published>2012-04-24T20:41:18.646-04:00</published><updated>2012-04-24T20:41:18.646-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I do not have a code example at this time, sorry!</title><content type='html'>I do not have a code example at this time, sorry!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/5897216177084469702'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/5897216177084469702'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/tcpip-resources.html?showComment=1335314478646#c5897216177084469702' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/2639918553961248039'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/tcpip-resources.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2837182939644513866' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2837182939644513866' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 24, 2012 at 8:41:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6937781500539460389</id><published>2012-04-25T08:03:31.989-04:00</published><updated>2012-04-25T08:03:31.989-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello,
Can you give me sample example for &amp;#39;how...</title><content type='html'>Hello,&lt;br /&gt;Can you give me sample example for &amp;#39;how to close client socket properly?&lt;br /&gt;In my application when client exit(here I closed reader,writer and close socket) and when client start again client able to connect (BeginConnect() succeeds) but unable to send data to server(In such case I have to restart my server application to make it running).I guess client socket not closing properly.Please provide me solution.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/6937781500539460389'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/6937781500539460389'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/socket-operations.html?showComment=1335355411989#c6937781500539460389' title=''/><author><name>Sam</name><uri>http://www.blogger.com/profile/11457234052102618582</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/socket-operations.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2613307521684279226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2613307521684279226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1174309091'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 25, 2012 at 8:03:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8693736079105058838</id><published>2012-04-25T08:41:37.353-04:00</published><updated>2012-04-25T08:41:37.353-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks Stephen,
I have found on the internet a pro...</title><content type='html'>Thanks Stephen,&lt;br /&gt;I have found on the internet a procedure for setting KeepAlive values but i am wondering how to use it. My application  is a TCP Client that connects to a server and receives messages...from time to time I want to know if the server is still alive. For the moment i have implement in the MainForm_Load sub (VB.NET):&lt;br /&gt;&lt;br /&gt;tcpSocket = New Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)&lt;br /&gt;            tcpSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, True)&lt;br /&gt;            SetKeepAlive(tcpSocket, keepalivetime, keepaliveinterval)&lt;br /&gt;&lt;br /&gt;Also I am wondering how my loop that reads data is announced that the server is OFF, by TCP KeepAlive signal?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8693736079105058838'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8693736079105058838'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1335357697353#c8693736079105058838' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3099722045099021047'/><author><name>BrutusBlog</name><uri>http://www.blogger.com/profile/18427429339546750153</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-75415299'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 25, 2012 at 8:41:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8195267082107254185</id><published>2012-04-25T08:45:45.615-04:00</published><updated>2012-04-25T08:45:45.615-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The problem is with your server. If you close the ...</title><content type='html'>The problem is with your server. If you close the client socket, then that&amp;#39;s all you have to do.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/8195267082107254185'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/8195267082107254185'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/socket-operations.html?showComment=1335357945615#c8195267082107254185' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/6937781500539460389'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/socket-operations.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2613307521684279226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2613307521684279226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 25, 2012 at 8:45:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7850638553752932539</id><published>2012-04-26T01:51:20.855-04:00</published><updated>2012-04-26T01:51:20.855-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the reply.
But how to handle such scena...</title><content type='html'>Thanks for the reply.&lt;br /&gt;But how to handle such scenario, so that client will connect properly and data  will transfer properly.&lt;br /&gt;I have implemented Keep alive.&lt;br /&gt;Please provide some basic steps to achieve this.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/7850638553752932539'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/7850638553752932539'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/socket-operations.html?showComment=1335419480855#c7850638553752932539' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/6937781500539460389'/><author><name>Sam</name><uri>http://www.blogger.com/profile/11457234052102618582</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/socket-operations.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2613307521684279226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2613307521684279226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1174309091'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 26, 2012 at 1:51:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2408281624644296456</id><published>2012-04-26T17:40:01.448-04:00</published><updated>2012-04-26T17:40:01.448-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,
Thanks for your answer!
To stress my p...</title><content type='html'>Hi Stephen,&lt;br /&gt;Thanks for your answer!&lt;br /&gt;To stress my point I made a small console application.&lt;br /&gt;One run generates about 5-15 race conditions on my laptop.&lt;br /&gt;My recommendation is to always use a SychronizationContext unless you really have to optimize the performance.&lt;br /&gt;/ Stefan.&lt;br /&gt;&lt;br /&gt;        static void Main( string [] args ){&lt;br /&gt;            for( int i=0; i &amp;lt; 100000; i++ ){&lt;br /&gt;                TestThreadSafety();&lt;br /&gt;            }&lt;br /&gt;            Console.WriteLine( &amp;quot;done.&amp;quot; );&lt;br /&gt;            Console.Read();&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        static int m_counter;&lt;br /&gt;&lt;br /&gt;        static async void TestThreadSafety(){&lt;br /&gt;            await Task.Delay( 10 );&lt;br /&gt;&lt;br /&gt;            int n = m_counter + 1;&lt;br /&gt;            m_counter++;&lt;br /&gt;            if( n != m_counter ){&lt;br /&gt;                Console.WriteLine( &amp;quot;Error: counter=&amp;quot; + m_counter + &amp;quot;, n=&amp;quot; + n );&lt;br /&gt;            }&lt;br /&gt;        }</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/2408281624644296456'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/2408281624644296456'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1335476401448#c2408281624644296456' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4898866506094690948'/><author><name>Stefan Forster</name><uri>http://sourceforge.net/projects/asyncwcflib/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-251491954'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 26, 2012 at 5:40:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7188441445709501635</id><published>2012-04-26T18:23:15.499-04:00</published><updated>2012-04-26T18:23:15.499-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m sorry, Sam, but there are no basic steps.
...</title><content type='html'>I&amp;#39;m sorry, Sam, but there are no basic steps.&lt;br /&gt;&lt;br /&gt;I recommend reading my TCP/IP blog posts, and then reading the items listed in the Resources blog post: http://nitoprograms.blogspot.com/2009/05/tcpip-resources.html&lt;br /&gt;&lt;br /&gt;Then you&amp;#39;ll have enough information to design a custom TCP/IP protocol.&lt;br /&gt;&lt;br /&gt;If you want a simpler solution, you could use Web API, WCF, or .NET remoting.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/7188441445709501635'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/7188441445709501635'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/socket-operations.html?showComment=1335478995499#c7188441445709501635' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/6937781500539460389'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/socket-operations.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2613307521684279226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2613307521684279226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 26, 2012 at 6:23:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8950844578015311312</id><published>2012-04-26T18:32:16.876-04:00</published><updated>2012-04-26T18:32:16.876-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>When keep-alives detect a dropped connection, any ...</title><content type='html'>When keep-alives detect a dropped connection, any current read or write will finish with an exception. Also, the socket will be placed into an error state, so any future reads or writes will also throw exceptions.&lt;br /&gt;&lt;br /&gt;I think. :)  I&amp;#39;ve never actually used keep-alives.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8950844578015311312'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8950844578015311312'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1335479536876#c8950844578015311312' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3099722045099021047'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 26, 2012 at 6:32:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3137804788365591416</id><published>2012-04-26T19:28:33.783-04:00</published><updated>2012-04-26T19:28:33.783-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stefan: I&amp;#39;m not saying that async code doesn&amp;#...</title><content type='html'>Stefan: I&amp;#39;m not saying that async code doesn&amp;#39;t *ever* need locks.&lt;br /&gt;&lt;br /&gt;Rather, I&amp;#39;m saying that async code is naturally functional (side-effect free). Async code really doesn&amp;#39;t mix well with state at all (whether object state or global state, such as is in your example). Usually, the only shared variables will be local variables, which will not require locks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3137804788365591416'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3137804788365591416'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1335482913783#c3137804788365591416' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4898866506094690948'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 26, 2012 at 7:28:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2241650726937175922</id><published>2012-04-27T01:41:14.576-04:00</published><updated>2012-04-27T01:41:14.576-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks Stephen. I will read your TCP/IP blog posts...</title><content type='html'>Thanks Stephen. I will read your TCP/IP blog posts.&lt;br /&gt;And thanks for your suggestions I will also think on that.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/2241650726937175922'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/2241650726937175922'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/socket-operations.html?showComment=1335505274576#c2241650726937175922' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2613307521684279226/comments/default/6937781500539460389'/><author><name>Sam</name><uri>http://www.blogger.com/profile/11457234052102618582</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/socket-operations.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2613307521684279226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2613307521684279226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1174309091'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 27, 2012 at 1:41:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1142607750464260681</id><published>2012-04-27T05:22:47.704-04:00</published><updated>2012-04-27T05:22:47.704-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks Stephen,
I have also used a hearbeat functi...</title><content type='html'>Thanks Stephen,&lt;br /&gt;I have also used a hearbeat function (IsTcpConnected) for checking the connection state.&lt;br /&gt;If I use TCP KeepAlive, should I also use this function, or it&amp;#39;s better to be omitted?&lt;br /&gt;Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/1142607750464260681'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/1142607750464260681'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1335518567704#c1142607750464260681' title=''/><author><name>BrutusBlog</name><uri>http://www.blogger.com/profile/18427429339546750153</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-75415299'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 27, 2012 at 5:22:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5309660198345689681</id><published>2012-04-27T08:32:26.193-04:00</published><updated>2012-04-27T08:32:26.193-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You only *need* to check the connection using one ...</title><content type='html'>You only *need* to check the connection using one method. Although you *could* use both if you wanted to - it won&amp;#39;t mess anything up.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5309660198345689681'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5309660198345689681'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1335529946193#c5309660198345689681' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/1142607750464260681'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 27, 2012 at 8:32:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3350885716789255236</id><published>2012-04-28T17:10:24.072-04:00</published><updated>2012-04-28T17:10:24.072-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, its really about some higher level design tha...</title><content type='html'>Yes, its really about some higher level design that has to be defined before deciding such points. I have an actor based model in mind while your&amp;#39;s is a functional programming model. I will have a deeper look at functional programming. So far I have no clue on how to model the &amp;#39;reality&amp;#39; when I&amp;#39;m not allowed to change the models state. I actually could generate new versions of the model for every modification - but then I would have several threads working on different versions of the model - how this could work out is currently beyond my imagination...&lt;br /&gt;Thanks for the discussion.&lt;br /&gt;/Stefan</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3350885716789255236'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3350885716789255236'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1335647424072#c3350885716789255236' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4898866506094690948'/><author><name>Stefan Forster</name><uri>http://sourceforge.net/projects/asyncwcflib/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2138960833'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 28, 2012 at 5:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1253960902263586606</id><published>2012-05-11T09:47:08.563-04:00</published><updated>2012-05-11T09:47:08.563-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>TCP/IP Illustrated, Volume 1 (The Protocols), by S...</title><content type='html'>TCP/IP Illustrated, Volume 1 (The Protocols), by Stevens. and&lt;br /&gt;Network Programming for Microsoft Windows, by Jones and Ohlund. &lt;br /&gt;&lt;br /&gt;can i download the above mentioned books free in pdf form from internet?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/1253960902263586606'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/1253960902263586606'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/tcpip-resources.html?showComment=1336744028563#c1253960902263586606' title=''/><author><name>Mrusman</name><uri>http://www.blogger.com/profile/13587866915872326241</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/tcpip-resources.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2837182939644513866' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2837182939644513866' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1979162387'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 11, 2012 at 9:47:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2348526576761820497</id><published>2012-05-11T11:17:09.111-04:00</published><updated>2012-05-11T11:17:09.111-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I don&amp;#39;t know of any legal way to do that.</title><content type='html'>I don&amp;#39;t know of any legal way to do that.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/2348526576761820497'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/2348526576761820497'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/tcpip-resources.html?showComment=1336749429111#c2348526576761820497' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/1253960902263586606'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/tcpip-resources.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2837182939644513866' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2837182939644513866' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 11, 2012 at 11:17:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7946270338871564987</id><published>2012-05-22T01:16:12.895-04:00</published><updated>2012-05-22T01:16:12.895-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>amazing.. great !! easy to understand..!!</title><content type='html'>amazing.. great !! easy to understand..!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7946270338871564987'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7946270338871564987'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1337663772895#c7946270338871564987' title=''/><author><name>tiru</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1126496570'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 22, 2012 at 1:16:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5706910931988251325</id><published>2012-05-25T18:27:26.279-04:00</published><updated>2012-05-25T18:27:26.279-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You&amp;#39;re overlooking a possible scenario with yo...</title><content type='html'>You&amp;#39;re overlooking a possible scenario with your advice to avoid null checks in Dispose().&lt;br /&gt;&lt;br /&gt;Yes, *if* the IDisposable resource is created in the constructor of the class and is never released until the class is ready to be disposed, your approach is fine, because the IDisposable resource is guaranteed to exist when Dispose() is called.&lt;br /&gt;&lt;br /&gt;However, there are cases when that is *not* true, even though the class is still responsible for owning the resource.&lt;br /&gt;&lt;br /&gt;For example, if I have a class that can be configured to do something at regular intervals, it may create and own an IDisposable System.Threading.Timer.  However, if that functionality is not called into service, the Timer may never be created.  Or, maybe it was used at some point in the life of my class but turned off later.  In either case, the Timer object is not guaranteed to exist when Dispose() is called; therefore a null check is required in Dispose().&lt;br /&gt;&lt;br /&gt;Another scenario might be when an exception is thrown while attempting to instantiate an IDisposable resource.  The resource was not created successfully, so it will be null when Dispose() is called on the owning class.  There may be other IDisposable resources besides that one that need to be cleaned up, though.&lt;br /&gt;&lt;br /&gt;In short, it is possible (and in my experience, somewhat common) that even though a class may own an IDisposable resource if it exists, it is not guaranteed to exist when Dispose() is called.  Therefore, a null check is required in Dispose() to avoid an exception in Dispose().</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5706910931988251325'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/5706910931988251325'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1337984846279#c5706910931988251325' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-967183573'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 25, 2012 at 6:27:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3701122483822822518</id><published>2012-06-12T10:28:52.440-04:00</published><updated>2012-06-12T10:28:52.440-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What was the solution to the &amp;quot;True Story&amp;quot...</title><content type='html'>What was the solution to the &amp;quot;True Story&amp;quot;? I think I have somone fighting the same or simular brain dead device as the &amp;quot;bridge&amp;quot; device you described.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3701122483822822518'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3701122483822822518'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1339511332440#c3701122483822822518' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2048655897'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, June 12, 2012 at 10:28:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-974046691570488015</id><published>2012-06-25T02:23:55.450-04:00</published><updated>2012-06-25T02:23:55.450-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen, 

thanks for you mantra, an important hel...</title><content type='html'>Stephen, &lt;br /&gt;&lt;br /&gt;thanks for you mantra, an important help.&lt;br /&gt;What experience do you have with transmission of data streams over unsecure connections, means e.g. a WLAN, where sometimes there is a connection loss and a reconnection of client and server is neccessary. Target is the same: Transfer messages over unsecure connection by handling a tcp stream with a small protocol (length coded or with delimiters). But now there is an additional level that client and server have to make decisions after which time they assume a connection loss and decide to make a reconnect. Did you manage problems like this ?&lt;br /&gt;Markus</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/974046691570488015'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/974046691570488015'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1340605435450#c974046691570488015' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-180284460'/><gd:extendedProperty name='blogger.displayTime' value='Monday, June 25, 2012 at 2:23:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5164466598663886935</id><published>2012-06-28T08:38:44.597-04:00</published><updated>2012-06-28T08:38:44.597-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the introduction!

Did your forget Conf...</title><content type='html'>Thanks for the introduction!&lt;br /&gt;&lt;br /&gt;Did your forget ConfigureAwait in the WinForms example code!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/5164466598663886935'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/5164466598663886935'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1340887124597#c5164466598663886935' title=''/><author><name>tarnschaf</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-844072128'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, June 28, 2012 at 8:38:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6833393946008459782</id><published>2012-06-29T14:51:19.136-04:00</published><updated>2012-06-29T14:51:19.136-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No, the DownloadFileButton_Click does not call Con...</title><content type='html'>No, the DownloadFileButton_Click does not call ConfigureAwait on purpose. It has to resume on the UI thread because it modifies a UI object after its await.&lt;br /&gt;&lt;br /&gt;This pattern is rather common: library async methods do use ConfigureAwait, and UI async methods do not use ConfigureAwait.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6833393946008459782'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6833393946008459782'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1340995879136#c6833393946008459782' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/5164466598663886935'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 29, 2012 at 2:51:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-220503370290932070</id><published>2012-06-29T15:32:53.168-04:00</published><updated>2012-06-29T15:32:53.168-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;ve developed some systems like this, where a...</title><content type='html'>I&amp;#39;ve developed some systems like this, where a command/response has to survive underlying connection loss and reconnection. Conceptually, it&amp;#39;s just an abstraction layer.&lt;br /&gt;&lt;br /&gt;The systems I did were quite complex due to timeouts and error recovery requirements. In modern-day code (particularly with async/await), I think this kind of system would be much simpler.&lt;br /&gt;&lt;br /&gt;Idempotent commands really help in situations like this.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/220503370290932070'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/220503370290932070'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1340998373168#c220503370290932070' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/974046691570488015'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 29, 2012 at 3:32:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-203559960074499165</id><published>2012-06-29T15:42:14.170-04:00</published><updated>2012-06-29T15:42:14.170-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The vendor&amp;#39;s firmware would only accept one co...</title><content type='html'>The vendor&amp;#39;s firmware would only accept one connection at a time. However, instead of accepting new connections and disposing of the existing connection, they just refused new connections. They did not want to change this behavior, and their embedded IP stack did not support keepalives (back then, most of them did not).&lt;br /&gt;&lt;br /&gt;At our insistence, the vendor implemented a second listener. So, when we detected a half-open situation (where we did not have a connection but the bridge refused new connections), we could connect to a second special port number. I don&amp;#39;t remember if we had to send a special message over that second connection or not. The vendor&amp;#39;s &amp;quot;special&amp;quot; server would then kill their regular server, and we could (after a short delay) connect to the bridge normally again.&lt;br /&gt;&lt;br /&gt;This was not the best solution (it&amp;#39;s still technically possible for a half-open situation to exist for *both* the bridge server and &amp;quot;special&amp;quot; server), and the workaround was annoying, but in testing it worked well enough to ship to the field.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/203559960074499165'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/203559960074499165'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1340998934170#c203559960074499165' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3701122483822822518'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 29, 2012 at 3:42:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4348019694979707003</id><published>2012-06-30T05:11:51.663-04:00</published><updated>2012-06-30T05:11:51.663-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very good work!</title><content type='html'>Very good work!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/4348019694979707003'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/4348019694979707003'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1341047511663#c4348019694979707003' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1216161884'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, June 30, 2012 at 5:11:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8608854351377495429</id><published>2012-07-12T09:51:59.789-04:00</published><updated>2012-07-12T09:51:59.789-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi guys,

I wanted to ask...this code,does it wrap...</title><content type='html'>Hi guys,&lt;br /&gt;&lt;br /&gt;I wanted to ask...this code,does it wrap any kind of messages to IP message?&lt;br /&gt;&lt;br /&gt;I needed to wrap Sampled Value messages based on IEC61850-9-2 to IP message, then to transmit to another PC, unwrap and read it?&lt;br /&gt;How could I do that?&lt;br /&gt;&lt;br /&gt;Thanks in advance!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8608854351377495429'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8608854351377495429'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1342101119789#c8608854351377495429' title=''/><author><name>dsdstnv</name><uri>http://www.blogger.com/profile/05782625689903846191</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1412353442'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, July 12, 2012 at 9:51:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5686615931238317643</id><published>2012-07-23T06:10:16.657-04:00</published><updated>2012-07-23T06:10:16.657-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>thanks. It works for me</title><content type='html'>thanks. It works for me</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5686615931238317643'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5686615931238317643'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1343038216657#c5686615931238317643' title=''/><author><name>Arif</name><uri>http://www.blogger.com/profile/07415253906262970390</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='24' height='32' src='http://2.bp.blogspot.com/_xV0LH_n7HIs/S686T2BNvkI/AAAAAAAAAAM/edCM1glr-3o/S220/DSC06293.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-29963177'/><gd:extendedProperty name='blogger.displayTime' value='Monday, July 23, 2012 at 6:10:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-206634912262278840</id><published>2012-07-26T12:44:14.754-04:00</published><updated>2012-07-26T12:44:14.754-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>For the EndDivide example, should the AggregateExc...</title><content type='html'>For the EndDivide example, should the AggregateException be Flattened and then the inner exception rethrown? As it is, the AggExc&amp;#39;s InnerException could be yet another AggExc.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2442373052621335562/comments/default/206634912262278840'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2442373052621335562/comments/default/206634912262278840'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/async-interop-with-iasyncresult.html?showComment=1343321054754#c206634912262278840' title=''/><author><name>Karg</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/async-interop-with-iasyncresult.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2442373052621335562' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2442373052621335562' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1534202974'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, July 26, 2012 at 12:44:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-881570584840737778</id><published>2012-07-26T14:38:17.854-04:00</published><updated>2012-07-26T14:38:17.854-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It&amp;#39;s not necessary if you&amp;#39;re dealing with ...</title><content type='html'>It&amp;#39;s not necessary if you&amp;#39;re dealing with TAP code. &amp;quot;await&amp;quot; performs the same transformation (throws the first InnerException of AggregateException without flattening).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2442373052621335562/comments/default/881570584840737778'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2442373052621335562/comments/default/881570584840737778'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/async-interop-with-iasyncresult.html?showComment=1343327897854#c881570584840737778' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2442373052621335562/comments/default/206634912262278840'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/async-interop-with-iasyncresult.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2442373052621335562' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2442373052621335562' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, July 26, 2012 at 2:38:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4831347069687695150</id><published>2012-07-29T21:59:13.688-04:00</published><updated>2012-07-29T21:59:13.688-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>For three solid days I&amp;#39;ve been puzzled by the ...</title><content type='html'>For three solid days I&amp;#39;ve been puzzled by the async/await pattern. Thanks in part to your blog, I had an epiphany tonight and I&amp;#39; &amp;quot;getting it&amp;quot;. Thanks so much for taking the time to make your thoughts public. I&amp;#39;ve read many of the writings from Eric L, et. al., but when they leave out the pieces about how &amp;quot;async&amp;quot; marked methods auto-magically create a Task for you (and why) the whole thing is very confusing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/389732469803365909/comments/default/4831347069687695150'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/389732469803365909/comments/default/4831347069687695150'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/09/async-ctp-why-do-keywords-work-that-way.html?showComment=1343613553688#c4831347069687695150' title=''/><author><name>michael lovett</name><uri>http://www.blogger.com/profile/08185431616303637136</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-3aAB6gLTl84/AAAAAAAAAAI/AAAAAAAAACI/CqKZXnezB1M/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/09/async-ctp-why-do-keywords-work-that-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-389732469803365909' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/389732469803365909' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1755163839'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, July 29, 2012 at 9:59:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4346982168454936898</id><published>2012-08-05T19:02:22.596-04:00</published><updated>2012-08-05T19:02:22.596-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Can you add a ChannelFactory based client tutorial...</title><content type='html'>Can you add a ChannelFactory based client tutorial, I&amp;#39;m having many issues as I don&amp;#39;t generate the proxy via Visual Studio 2012 RC</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/4346982168454936898'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/4346982168454936898'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1344207742596#c4346982168454936898' title=''/><author><name>Ahmed Ghoneim</name><uri>http://www.blogger.com/profile/04493732797018605088</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-DsZwaXF8-e0/AAAAAAAAAAI/AAAAAAAAADE/EnPFA8KN_QE/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-946004876'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, August 5, 2012 at 7:02:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6181691290114665052</id><published>2012-08-06T09:23:18.333-04:00</published><updated>2012-08-06T09:23:18.333-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Unfortunately, I&amp;#39;ve never used ChannelFactory....</title><content type='html'>Unfortunately, I&amp;#39;ve never used ChannelFactory. I would take a look at the code generated by VS2012, and also see if svcutil has some options that would work.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/6181691290114665052'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/6181691290114665052'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1344259398333#c6181691290114665052' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/4346982168454936898'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, August 6, 2012 at 9:23:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1774138378827480687</id><published>2012-08-06T09:56:15.189-04:00</published><updated>2012-08-06T09:56:15.189-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No. This code only does length prefixing. If you w...</title><content type='html'>No. This code only does length prefixing. If you want to wrap it into another kind of frame (like IP), you&amp;#39;d have to write that code yourself.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/1774138378827480687'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/1774138378827480687'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1344261375189#c1774138378827480687' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8608854351377495429'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, August 6, 2012 at 9:56:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3345629484018771886</id><published>2012-08-06T15:26:07.278-04:00</published><updated>2012-08-06T15:26:07.278-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sorry for replying so late - your message got caug...</title><content type='html'>Sorry for replying so late - your message got caught in Google&amp;#39;s spam filters...&lt;br /&gt;&lt;br /&gt;Message framing is used to break up the TCP/IP stream into messages. TCP/IP itself guarantees that no data will be &amp;quot;lost.&amp;quot; If you lose data, the connection is broken. This is true on all platforms (Windows/Linux/whatever). TCP/IP will split up the stream into packets on the wire and re-assemble them in the correct order automatically on the other side. There&amp;#39;s no length restriction on TCP/IP data. Perhaps you&amp;#39;re using UDP/IP?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/3345629484018771886'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/3345629484018771886'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1344281167278#c3345629484018771886' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2077377926895281219'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, August 6, 2012 at 3:26:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-243107228594571569</id><published>2012-08-15T17:12:37.971-04:00</published><updated>2012-08-15T17:12:37.971-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What do you mean by lock(this)? How do you not loc...</title><content type='html'>What do you mean by lock(this)? How do you not lock?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3454742513900174322/comments/default/243107228594571569'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3454742513900174322/comments/default/243107228594571569'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/thread-is-dead.html?showComment=1345065157971#c243107228594571569' title=''/><author><name>Unknown</name><uri>http://www.blogger.com/profile/07312482820383206150</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/thread-is-dead.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3454742513900174322' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3454742513900174322' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-882045658'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, August 15, 2012 at 5:12:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1657920912598320738</id><published>2012-08-15T18:34:10.280-04:00</published><updated>2012-08-15T18:34:10.280-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You always want to lock on a private field that th...</title><content type='html'>You always want to lock on a private field that the user never has access to. If you use lock(this), then you never know if someone else is locking on your instance, too.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3454742513900174322/comments/default/1657920912598320738'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3454742513900174322/comments/default/1657920912598320738'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/thread-is-dead.html?showComment=1345070050280#c1657920912598320738' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3454742513900174322/comments/default/243107228594571569'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/thread-is-dead.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3454742513900174322' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3454742513900174322' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, August 15, 2012 at 6:34:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4659675639352226779</id><published>2012-08-16T14:11:28.902-04:00</published><updated>2012-08-16T14:11:28.902-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What&amp;#39;s the assignment in the Start() method fo...</title><content type='html'>What&amp;#39;s the assignment in the Start() method for?&lt;br /&gt;(&amp;quot;var unused = instance.Value;&amp;quot;)&lt;br /&gt;&lt;br /&gt;Does calling instance.Value trigger the lazy initialization?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/4659675639352226779'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/4659675639352226779'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html?showComment=1345140688902#c4659675639352226779' title=''/><author><name>Jeff</name><uri>http://www.blogger.com/profile/11213112075138656823</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='24' src='http://4.bp.blogspot.com/_9qxiYkfjMgM/S8vxkx0rl_I/AAAAAAAAACs/tPJM7YjX8Rs/s1600-R/19035_558442031262_73106454_32551127_2438964_n.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5019631101409390674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5019631101409390674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1206588273'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 16, 2012 at 2:11:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7912552699743777223</id><published>2012-08-16T14:46:47.636-04:00</published><updated>2012-08-16T14:46:47.636-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes. There are some use cases where you want to st...</title><content type='html'>Yes. There are some use cases where you want to start the initialization but won&amp;#39;t actually need the result until later.&lt;br /&gt;&lt;br /&gt;Of course, you can just do &amp;quot;var unused = myResource.Value;&amp;quot; yourself, but I think calling a method is cleaner.&lt;br /&gt;&lt;br /&gt;When you read &amp;quot;Value&amp;quot;, you get back a Task which represents the factory delegate running on a thread pool thread. Accessing the &amp;quot;Value&amp;quot; property kicks off the factory delegate (if it&amp;#39;s not already running).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/7912552699743777223'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/7912552699743777223'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html?showComment=1345142807636#c7912552699743777223' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/4659675639352226779'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5019631101409390674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5019631101409390674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 16, 2012 at 2:46:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6052784051638544130</id><published>2012-08-16T16:37:45.572-04:00</published><updated>2012-08-16T16:37:45.572-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Oh that&amp;#39;s what you meant :-D I thought you mea...</title><content type='html'>Oh that&amp;#39;s what you meant :-D I thought you meant lock() as a function was obsolete...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3454742513900174322/comments/default/6052784051638544130'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3454742513900174322/comments/default/6052784051638544130'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/thread-is-dead.html?showComment=1345149465572#c6052784051638544130' title=''/><author><name>Unknown</name><uri>http://www.blogger.com/profile/07312482820383206150</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/thread-is-dead.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3454742513900174322' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3454742513900174322' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-882045658'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 16, 2012 at 4:37:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6387491180236197047</id><published>2012-08-22T07:02:18.202-04:00</published><updated>2012-08-22T07:02:18.202-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Only works for .NET 4.5, neither .NET 4.0 ?? thx</title><content type='html'>Only works for .NET 4.5, neither .NET 4.0 ?? thx</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6387491180236197047'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6387491180236197047'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1345633338202#c6387491180236197047' title=''/><author><name>Kiquenet</name><uri>http://www.blogger.com/profile/10446364197640116526</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='23' height='32' src='http://2.bp.blogspot.com/_vhnBV71Ui6A/TJZynQHoZ5I/AAAAAAAAB2o/3hfEvyzV8Cw/S220/idolos.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-798171135'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, August 22, 2012 at 7:02:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3020623001388728370</id><published>2012-08-22T07:49:38.714-04:00</published><updated>2012-08-22T07:49:38.714-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You can get the Async Targeting Pack for .NET 4.0,...</title><content type='html'>You can get the Async Targeting Pack for .NET 4.0, which includes most of the async functionality.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/3020623001388728370'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/3020623001388728370'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1345636178714#c3020623001388728370' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6387491180236197047'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, August 22, 2012 at 7:49:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7286137117319625291</id><published>2012-08-25T19:54:34.937-04:00</published><updated>2012-08-25T19:54:34.937-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I think it&amp;#39;s important to understand one cruci...</title><content type='html'>I think it&amp;#39;s important to understand one crucial difference between the async synchronization primitives and CESP: When you await inside CESP, you implicitly release the lock, but if you use one of the async primitives, you still have the lock.&lt;br /&gt;&lt;br /&gt;This means CESP is not suitable in some cases (but that&amp;#39;s why there are other choices).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7788616446212117634/comments/default/7286137117319625291'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7788616446212117634/comments/default/7286137117319625291'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html?showComment=1345938874937#c7286137117319625291' title=''/><author><name>Svick</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7788616446212117634' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7788616446212117634' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1689232592'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, August 25, 2012 at 7:54:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4837633822853238032</id><published>2012-08-29T15:29:46.735-04:00</published><updated>2012-08-29T15:29:46.735-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>An excellent point, Svick! I&amp;#39;ll update the art...</title><content type='html'>An excellent point, Svick! I&amp;#39;ll update the article to make this more clear.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7788616446212117634/comments/default/4837633822853238032'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7788616446212117634/comments/default/4837633822853238032'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html?showComment=1346268586735#c4837633822853238032' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7788616446212117634/comments/default/7286137117319625291'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-and-scheduled-concurrency.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7788616446212117634' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7788616446212117634' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, August 29, 2012 at 3:29:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7448464491424205107</id><published>2012-09-11T15:17:59.782-04:00</published><updated>2012-09-11T15:17:59.782-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It should be noted that the newest version of Syst...</title><content type='html'>It should be noted that the newest version of System.Data.SQLite is now at http://system.data.sqlite.org/</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/7448464491424205107'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/7448464491424205107'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1347391079782#c7448464491424205107' title=''/><author><name>Jonathon Reinhart</name><uri>http://www.blogger.com/profile/04790032076191957141</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-5GkFd07w344/AAAAAAAAAAI/AAAAAAAAAOY/A__OTehrwKE/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1342557181'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, September 11, 2012 at 3:17:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5597631331173245982</id><published>2012-09-13T17:23:00.825-04:00</published><updated>2012-09-13T17:23:00.825-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Actually, I think the time of monsters is just com...</title><content type='html'>Actually, I think the time of monsters is just coming. In WinRT, &lt;i&gt;everything&lt;/i&gt; is asynchronous, and people are encouraged to use it from C++ or JavaScript (which don&amp;#39;t have async/await).&lt;br /&gt;&lt;br /&gt;And there&amp;#39;s also &lt;a href="http://dev.hasenj.org/post/31042963934/nodejs-hate" rel="nofollow"&gt;NodeJS&lt;/a&gt;.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/5597631331173245982'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/5597631331173245982'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html?showComment=1347571380825#c5597631331173245982' title=''/><author><name>svick</name><uri>http://www.blogger.com/profile/17579249405158039163</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5002474674580089954' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5002474674580089954' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-830071467'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, September 13, 2012 at 5:23:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7275117671033125717</id><published>2012-09-13T20:02:09.778-04:00</published><updated>2012-09-13T20:02:09.778-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That&amp;#39;s a good point. C++ and JS have to use co...</title><content type='html'>That&amp;#39;s a good point. C++ and JS have to use continuation passing style (at best), which is better than what I used for the project in this article (C++ with bare callbacks), but it&amp;#39;s not nearly as good as async/await.&lt;br /&gt;&lt;br /&gt;Actually, I expect other languages to follow suit with similar systems (probably just dropping the context capturing and resuming). Python is almost already there with its Twisted library. I hope that a decade from now, every language will have some form of async/await.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/7275117671033125717'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/7275117671033125717'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html?showComment=1347580929778#c7275117671033125717' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/5597631331173245982'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5002474674580089954' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5002474674580089954' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, September 13, 2012 at 8:02:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-156909131633117929</id><published>2012-09-18T03:59:30.900-04:00</published><updated>2012-09-18T03:59:30.900-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great story. Very inspiring!</title><content type='html'>Great story. Very inspiring!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/156909131633117929'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/156909131633117929'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html?showComment=1347955170900#c156909131633117929' title=''/><author><name>Jorge R. G.</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5002474674580089954' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5002474674580089954' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-925327570'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, September 18, 2012 at 3:59:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3639685583414463602</id><published>2012-09-28T12:00:50.502-04:00</published><updated>2012-09-28T12:00:50.502-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Best article I found net. Really thanks. I can buy...</title><content type='html'>Best article I found net. Really thanks. I can buy your book if u write</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3639685583414463602'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3639685583414463602'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1348848050502#c3639685583414463602' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-137069390'/><gd:extendedProperty name='blogger.displayTime' value='Friday, September 28, 2012 at 12:00:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4700478690520649208</id><published>2012-10-03T07:47:05.953-04:00</published><updated>2012-10-03T07:47:05.953-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Lovely Post thanks for sharing the awesome Story.....</title><content type='html'>Lovely Post thanks for sharing the awesome Story..</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/4700478690520649208'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5002474674580089954/comments/default/4700478690520649208'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html?showComment=1349264825953#c4700478690520649208' title=''/><author><name>Asynchronous Programming</name><uri>http://www.refactorthis.net/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/09/an-async-horror-story.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5002474674580089954' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5002474674580089954' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-712743432'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 3, 2012 at 7:47:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3028368874145852138</id><published>2012-10-06T13:02:54.082-04:00</published><updated>2012-10-06T13:02:54.082-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;gt; Cancellation has different semantics than fau...</title><content type='html'>&amp;gt; Cancellation has different semantics than faulting: when you cancel a block, it will drop all of its currently-buffered items&lt;br /&gt;&lt;br /&gt;But faulting also drops all the items in the output queue. At least my test shows that faulting behaves the same as cancellation in this regard.&lt;br /&gt;&lt;br /&gt;Or did I misunderstand what you are saying?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9137239316956902527/comments/default/3028368874145852138'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9137239316956902527/comments/default/3028368874145852138'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/10/introduction-to-dataflow-part-3.html?showComment=1349542974082#c3028368874145852138' title=''/><author><name>svick</name><uri>http://www.blogger.com/profile/17579249405158039163</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/10/introduction-to-dataflow-part-3.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9137239316956902527' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9137239316956902527' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-830071467'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, October 6, 2012 at 1:02:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6852719410629598300</id><published>2012-10-08T11:46:22.104-04:00</published><updated>2012-10-08T11:46:22.104-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks, this helped me a lot.</title><content type='html'>Thanks, this helped me a lot.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6852719410629598300'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6852719410629598300'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1349711182104#c6852719410629598300' title=''/><author><name>Angel Blandon</name><uri>http://www.blogger.com/profile/11046881968710974388</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-763257952'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 8, 2012 at 11:46:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3236000568011137043</id><published>2012-10-09T08:02:51.318-04:00</published><updated>2012-10-09T08:02:51.318-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the gr8 article. I got stuck at this st...</title><content type='html'>Thanks for the gr8 article. I got stuck at this statement, &lt;br /&gt;&amp;quot;By using parallel composition (Task.WhenAll or Task.WhenAny), you can perform simple parallel operations. However, this is not a substitute for the Task Parallel Library - any advanced CPU-intensive parallel operations should probably be done with the TPL.&amp;quot; By using Tasks we are already using TPL, so how it is different if we use -  await Task.WhenAll(tasks). Please elaborate. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3236000568011137043'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3236000568011137043'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1349784171318#c3236000568011137043' title=''/><author><name>Bhavik Barot</name><uri>http://www.blogger.com/profile/14025767250306196409</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-98801664'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 9, 2012 at 8:02:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3220395271514028502</id><published>2012-10-09T23:50:27.486-04:00</published><updated>2012-10-09T23:50:27.486-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Awesome work buddy. Now if only someone would writ...</title><content type='html'>Awesome work buddy. Now if only someone would write a script to automate this... *giant hint* heh heh....</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/3220395271514028502'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/3220395271514028502'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1349841027486#c3220395271514028502' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-142111329'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 9, 2012 at 11:50:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2314334127442642093</id><published>2012-10-10T12:25:23.028-04:00</published><updated>2012-10-10T12:25:23.028-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m not sure about this language that equates ...</title><content type='html'>I&amp;#39;m not sure about this language that equates an IDisposable with &amp;quot;managed&amp;quot;. You came to the conclusion that the class had no managed and no unmanaged resources... what does it have then? I know MSDN refers to IDisposable members as &amp;quot;managed&amp;quot; resources in covering the Dispose(bool disposing) pattern, but this is inaccurate. IDisposable members MAY live in managed memory but all we know about them is they have further *unmanaged* resources so they need Dispose() themselves.&lt;br /&gt;&lt;br /&gt;A string and a List are managed resources, they live in managed memory and are collected by GC.  </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2314334127442642093'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2314334127442642093'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1349886323028#c2314334127442642093' title=''/><author><name>Josh Sutterfield</name><uri>http://www.blogger.com/profile/11126806767512709424</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1392364825'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 10, 2012 at 12:25:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2536000745231386044</id><published>2012-10-10T16:18:34.104-04:00</published><updated>2012-10-10T16:18:34.104-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I agree that the language is not ideal, but one mu...</title><content type='html'>I agree that the language is not ideal, but one must make a distinction between IDisposables that have unmanaged resources and IDisposables that only have other IDisposables. What would you recommend?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2536000745231386044'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2536000745231386044'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1349900314104#c2536000745231386044' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2314334127442642093'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 10, 2012 at 4:18:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3736473002000875197</id><published>2012-10-12T07:05:07.552-04:00</published><updated>2012-10-12T07:05:07.552-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Well done Stephen,

These series of articles have ...</title><content type='html'>Well done Stephen,&lt;br /&gt;&lt;br /&gt;These series of articles have been very helpful. &lt;br /&gt;&lt;br /&gt;I am working on a middle-ware application that receives messages from multiple applications as xml or fixed-length strings, sends them over TCP/IP socket to a back-end system, gets responses and passes back to the respective application. &lt;br /&gt;How do I ensure this middle-ware application is able to cope with the many requests it will have to handle? </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/3736473002000875197'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/3736473002000875197'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1350039907552#c3736473002000875197' title=''/><author><name>Musterion</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-208542473'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 12, 2012 at 7:05:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5565048784349222600</id><published>2012-10-18T16:31:04.428-04:00</published><updated>2012-10-18T16:31:04.428-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Technically, the Task type is a part of the Task P...</title><content type='html'>Technically, the Task type is a part of the Task Parallel Library. When the async team needed a &amp;quot;future&amp;quot; object, they chose to (re)use Task rather than create one themselves.&lt;br /&gt;&lt;br /&gt;So, when I&amp;#39;m talking about using TPL for CPU-intensive parallel operations, I mean the Parallel class, AsParallel, and other TPL constructs that are not normally used in async code.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/5565048784349222600'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/5565048784349222600'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1350592264428#c5565048784349222600' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3236000568011137043'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 18, 2012 at 4:31:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2992980233479637049</id><published>2012-10-18T16:33:39.873-04:00</published><updated>2012-10-18T16:33:39.873-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You should be using asynchronous I/O for all your ...</title><content type='html'>You should be using asynchronous I/O for all your network communications. This is good advice in general, but especially if you have scaling concerns.&lt;br /&gt;&lt;br /&gt;If you have control over the protocol, then impose some kind of message framing on the xml messages. It&amp;#39;s possible to detect xml messages without explicit message framing, but it&amp;#39;s quite complicated (and inefficient).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2992980233479637049'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2992980233479637049'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1350592419873#c2992980233479637049' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/3736473002000875197'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 18, 2012 at 4:33:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5107694777215636723</id><published>2012-10-23T01:54:35.678-04:00</published><updated>2012-10-23T01:54:35.678-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for your article.. would you please share y...</title><content type='html'>Thanks for your article.. would you please share your full source? like previous article.. I am new in this area so I am not clearly understand this. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/5107694777215636723'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/5107694777215636723'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1350971675678#c5107694777215636723' title=''/><author><name>Ahsan</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1693940752'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 23, 2012 at 1:54:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1937104891337572517</id><published>2012-10-23T09:47:12.872-04:00</published><updated>2012-10-23T09:47:12.872-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I don&amp;#39;t have any more source than what is post...</title><content type='html'>I don&amp;#39;t have any more source than what is posted here. These are just examples of how you can do progress reporting.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/1937104891337572517'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/1937104891337572517'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1351000032872#c1937104891337572517' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/5107694777215636723'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 23, 2012 at 9:47:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6682344727478963266</id><published>2012-10-28T10:54:54.210-04:00</published><updated>2012-10-28T10:54:54.210-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the tutorial. But I couldn&amp;#39;t locate...</title><content type='html'>Thanks for the tutorial. But I couldn&amp;#39;t locate resgen for VS 2012? </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6682344727478963266'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6682344727478963266'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1351436094210#c6682344727478963266' title=''/><author><name>Kayhan</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1061443984'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, October 28, 2012 at 10:54:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5045912376424254331</id><published>2012-10-28T11:14:44.604-04:00</published><updated>2012-10-28T11:14:44.604-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>did locate. Thank you. </title><content type='html'>did locate. Thank you. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5045912376424254331'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5045912376424254331'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1351437284604#c5045912376424254331' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6682344727478963266'/><author><name>Kayhan</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1061443984'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, October 28, 2012 at 11:14:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6089327435368546072</id><published>2012-11-07T11:25:51.146-05:00</published><updated>2012-11-07T11:25:51.146-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You are awesome! thank you very much, this will sa...</title><content type='html'>You are awesome! thank you very much, this will save me quite a lot of headaches.&lt;br /&gt;&lt;br /&gt;EK</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8258839092889204805/comments/default/6089327435368546072'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8258839092889204805/comments/default/6089327435368546072'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/05/getting-objectcontext-from-entityobject.html?showComment=1352305551146#c6089327435368546072' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/05/getting-objectcontext-from-entityobject.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8258839092889204805' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8258839092889204805' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-386594556'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 7, 2012 at 11:25:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5878198654803244990</id><published>2012-11-08T10:36:20.553-05:00</published><updated>2012-11-08T10:36:20.553-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you so much, svick! My post was incorrect - ...</title><content type='html'>Thank you so much, svick! My post was incorrect - fixed now.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9137239316956902527/comments/default/5878198654803244990'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9137239316956902527/comments/default/5878198654803244990'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/10/introduction-to-dataflow-part-3.html?showComment=1352388980553#c5878198654803244990' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9137239316956902527/comments/default/3028368874145852138'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/10/introduction-to-dataflow-part-3.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9137239316956902527' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9137239316956902527' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 8, 2012 at 10:36:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4578444996580514204</id><published>2012-11-09T18:38:01.124-05:00</published><updated>2012-11-09T18:38:01.124-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Being posted on my birthday this feels like a pers...</title><content type='html'>Being posted on my birthday this feels like a personal gift.) Thank you for a very helpful post!)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/4578444996580514204'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/4578444996580514204'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1352504281124#c4578444996580514204' title=''/><author><name>Alexander Turok</name><uri>http://www.blogger.com/profile/13902719420774359982</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1956852451'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 9, 2012 at 6:38:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1947901619532060595</id><published>2012-11-15T13:20:49.163-05:00</published><updated>2012-11-15T13:20:49.163-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Just a note that the PCL contrib project is doing ...</title><content type='html'>Just a note that the PCL contrib project is doing a similar thing -- not sure if they were before or after Rx.&lt;br /&gt;&lt;br /&gt;http://pclcontrib.codeplex.com/&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8683353737054453315/comments/default/1947901619532060595'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8683353737054453315/comments/default/1947901619532060595'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html?showComment=1353003649163#c1947901619532060595' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/portable-class-library-enlightenment.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8683353737054453315' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8683353737054453315' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-556295383'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 15, 2012 at 1:20:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4421094804867787142</id><published>2012-11-17T10:14:20.092-05:00</published><updated>2012-11-17T10:14:20.092-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, 

On behalf of a real-lief application I desig...</title><content type='html'>Hi, &lt;br /&gt;&lt;br /&gt;On behalf of a real-lief application I designed an XML-based application protocol that describes both the requests that are sent by the client to the server and the response messages that are sent back to the client in response by the server. In addition, some request types result in that notification messages are sent from server to client. These notifications occur at inpredictable times. Is it possible that a notification message interferes with a request message if they are sent at exactly the same timestamp (using the same socket)? Could this be the reason that I sometimes observe that mutilated messages are received by the client? </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/4421094804867787142'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/4421094804867787142'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1353165260092#c4421094804867787142' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-94586339'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, November 17, 2012 at 10:14:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5456095357152244544</id><published>2012-11-17T11:59:00.024-05:00</published><updated>2012-11-17T11:59:00.024-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>One socket will only send one group of bytes at a ...</title><content type='html'>One socket will only send one group of bytes at a time; there is no way they can &amp;quot;interfere&amp;quot;. &amp;quot;Mutilated&amp;quot; messages are usually the result of assuming a single Send can be received by a single Receive.&lt;br /&gt;&lt;br /&gt;You are probably missing message framing. In theory, you *could* build your own XML parser and use XML as your message framing, but that&amp;#39;s *extremely* complex. I prefer length-prefix message framing: http://nitoprograms.blogspot.com/2009/04/message-framing.html.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/5456095357152244544'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/5456095357152244544'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1353171540024#c5456095357152244544' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/4421094804867787142'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, November 17, 2012 at 11:59:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7781305890095087703</id><published>2012-11-17T16:36:18.609-05:00</published><updated>2012-11-17T16:36:18.609-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I use the nito async socket library, so the length...</title><content type='html'>I use the nito async socket library, so the length-prefix message framing is in place....</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/7781305890095087703'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/7781305890095087703'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1353188178609#c7781305890095087703' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-94586339'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, November 17, 2012 at 4:36:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1447246070417016346</id><published>2012-11-17T19:11:40.887-05:00</published><updated>2012-11-17T19:11:40.887-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There are two parts of the nito socket library: Si...</title><content type='html'>There are two parts of the nito socket library: SimpleSocket and friends do have length-prefixing, but TcpSocket and friends do not; you have to add it yourself if you&amp;#39;re using TcpSocket.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/1447246070417016346'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/1447246070417016346'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1353197500887#c1447246070417016346' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/7781305890095087703'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, November 17, 2012 at 7:11:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-976104555492625424</id><published>2012-11-22T04:09:57.897-05:00</published><updated>2012-11-22T04:09:57.897-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Still problem is not over; again a mutilated messa...</title><content type='html'>Still problem is not over; again a mutilated message was encountered.&lt;br /&gt;The message was sent from server to client. The payload xml message contains exactly 431 characters. The received payload is exactly 4 characters too short. &lt;br /&gt;The received message is: &amp;quot;AC01 0000 partialpayload&amp;quot;.&lt;br /&gt;The prefix &amp;quot;AC01&amp;quot; means 428, it is not 431, and the difference between 431 and 428 is 3 not four (which was expected because we tend to interpret the &amp;quot;0000&amp;quot; as a keepalive message.&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/976104555492625424'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/976104555492625424'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1353575397897#c976104555492625424' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/7781305890095087703'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1466084930'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 22, 2012 at 4:09:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6054312529488632487</id><published>2012-11-22T09:22:54.096-05:00</published><updated>2012-11-22T09:22:54.096-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>TCP guarantees correct, in-order delivery. So if &amp;...</title><content type='html'>TCP guarantees correct, in-order delivery. So if &amp;quot;AC01&amp;quot; was received, then &amp;quot;AC01&amp;quot; was sent; there is no other possibility.&lt;br /&gt;&lt;br /&gt;I suggest you take a look at your sending code.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/6054312529488632487'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/6054312529488632487'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1353594174096#c6054312529488632487' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/7781305890095087703'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 22, 2012 at 9:22:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5858924601844512421</id><published>2012-11-22T09:49:50.755-05:00</published><updated>2012-11-22T09:49:50.755-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You might be right, that my sending code is wrong....</title><content type='html'>You might be right, that my sending code is wrong. Maybe you can point me to what I do wrong, or what do not understand. I will send you (because your e-mail address is on this page) the code of the class FormServerMain.cs from Nito.Async.1.4/Source/Examples/Sockets/Simple/Server, and my code which is just a variation on on that class.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/5858924601844512421'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/5858924601844512421'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html?showComment=1353595790755#c5858924601844512421' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7858157923334325167/comments/default/7781305890095087703'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/xml-over-tcpip.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7858157923334325167' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7858157923334325167' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1466084930'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 22, 2012 at 9:49:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4095445210833733738</id><published>2012-11-28T13:05:46.844-05:00</published><updated>2012-11-28T13:05:46.844-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>How is this better than a simple

return MainAsync...</title><content type='html'>How is this better than a simple&lt;br /&gt;&lt;br /&gt;return MainAsync(args).Result;&lt;br /&gt;&lt;br /&gt;? This would mean the ThreadPool would be used for running continuations, but I don&amp;#39;t see any problems with that. Is the AsyncContext there really just to save one thread?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/4095445210833733738'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/4095445210833733738'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1354125946844#c4095445210833733738' title=''/><author><name>svick</name><uri>http://www.blogger.com/profile/17579249405158039163</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-830071467'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 28, 2012 at 1:05:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6432220080907929630</id><published>2012-11-28T14:08:02.824-05:00</published><updated>2012-11-28T14:08:02.824-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>AsyncContext.Run also unwraps exceptions, similar ...</title><content type='html'>AsyncContext.Run also unwraps exceptions, similar to await. In my Console apps, I do use this to distinguish usage exceptions (command line parsing errors) from runtime exceptions.&lt;br /&gt;&lt;br /&gt;I think of it as a SynchronizationContext implementation for asynchronous Console apps (and a handful of other situations). Simple apps like demos or tests don&amp;#39;t need it, but I find it useful for my &amp;quot;serious&amp;quot; Console apps.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/6432220080907929630'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/6432220080907929630'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1354129682824#c6432220080907929630' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/4095445210833733738'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 28, 2012 at 2:08:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2393672124078580427</id><published>2012-12-01T11:21:48.427-05:00</published><updated>2012-12-01T11:21:48.427-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Having multiple consumers in your “non-dataflowish...</title><content type='html'>Having multiple consumers in your “non-dataflowish” way would still be quite simple. You don&amp;#39;t need TryReceiveAsync(), TryReceive() is enough, because it does not block.&lt;br /&gt;&lt;br /&gt;And I think your example with multiple consumers is not very realistic. If you want to have parallel consumer, you would use one block with MaxDegreeOfParallelism instead. (Unless each of the consumers represented some external resource. Which is an idea I&amp;#39;d like to explore more some day: using TDF for managing computations distributed over several computers, though I&amp;#39;m not sure how well would that work.)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/2393672124078580427'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/2393672124078580427'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html?showComment=1354378908427#c2393672124078580427' title=''/><author><name>svick</name><uri>http://www.blogger.com/profile/17579249405158039163</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-830071467'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, December 1, 2012 at 11:21:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7934705650933849954</id><published>2012-12-02T14:09:05.730-05:00</published><updated>2012-12-02T14:09:05.730-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>In my examples, I was using consumers that wait to...</title><content type='html'>In my examples, I was using consumers that wait to receive. Synchronous consumers can of course use Receive, but asynchronous consumers can&amp;#39;t use TryReceive because it doesn&amp;#39;t asynchronously wait. That said, asynchronous consumers are probably a rarity.&lt;br /&gt;&lt;br /&gt;And I agree that the multiple consumers example is not realistic; in most situations with multiple consumers, they would all be doing the same thing so you could just parallelize them as you suggested.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/7934705650933849954'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/7934705650933849954'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html?showComment=1354475345730#c7934705650933849954' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/2393672124078580427'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, December 2, 2012 at 2:09:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1773609042594499954</id><published>2012-12-11T04:45:49.643-05:00</published><updated>2012-12-11T04:45:49.643-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;It does not run this method on a thread pool...</title><content type='html'>&amp;quot;It does not run this method on a thread pool thread&amp;quot; .. ah thanks, people should say this more often. I had associated tasks with multithreading too much...which was very confusing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1773609042594499954'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1773609042594499954'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1355219149643#c1773609042594499954' title=''/><author><name>Elliot</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1641283913'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, December 11, 2012 at 4:45:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7690377176826158325</id><published>2012-12-13T20:37:00.803-05:00</published><updated>2012-12-13T20:37:00.803-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m a little confused though, if a method retu...</title><content type='html'>I&amp;#39;m a little confused though, if a method returns a task but the methods definition is on the UI thread and its execution does not run in a new thread then how can that returned task be awaited on without blocking the UI thread?&lt;br /&gt;&lt;br /&gt;Don&amp;#39;t all async defined methods run from a new thread in the pool?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7690377176826158325'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7690377176826158325'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1355449020803#c7690377176826158325' title=''/><author><name>Nate</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1344043486'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, December 13, 2012 at 8:37:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8915748675442425242</id><published>2012-12-13T20:56:39.701-05:00</published><updated>2012-12-13T20:56:39.701-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No, async methods do not run from a new thread in ...</title><content type='html'>No, async methods do not run from a new thread in the pool.&lt;br /&gt;&lt;br /&gt;When you await an incomplete task, you are suspending the current method. After the task completes, the method resumes execution.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/8915748675442425242'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/8915748675442425242'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1355450199701#c8915748675442425242' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7690377176826158325'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, December 13, 2012 at 8:56:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1546797846040502534</id><published>2012-12-13T21:17:22.865-05:00</published><updated>2012-12-13T21:17:22.865-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>So if you await a task returned by a method that h...</title><content type='html'>So if you await a task returned by a method that has no async implementations defined within it, the task being awaited on will lock up the thread it was returned from e.g UI thread?&lt;br /&gt;&lt;br /&gt;Cheers.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1546797846040502534'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1546797846040502534'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1355451442865#c1546797846040502534' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7690377176826158325'/><author><name>Nate</name><uri>http://www.blogger.com/profile/12041379981386387382</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-665957475'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, December 13, 2012 at 9:17:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7384918076644744262</id><published>2012-12-13T23:00:33.378-05:00</published><updated>2012-12-13T23:00:33.378-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you await an incomplete task, then the current ...</title><content type='html'>If you await an incomplete task, then the current method is suspended.&lt;br /&gt;&lt;br /&gt;If you call a method that does not await, then that method runs synchronously. This is true regardless of the return type of the method or whether or not it is marked &amp;quot;async&amp;quot;.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7384918076644744262'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7384918076644744262'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1355457633378#c7384918076644744262' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7690377176826158325'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, December 13, 2012 at 11:00:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2857896645211532041</id><published>2012-12-22T19:57:24.031-05:00</published><updated>2012-12-22T19:57:24.031-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Not working
Windows 7 home premium
Neither this or...</title><content type='html'>Not working&lt;br /&gt;Windows 7 home premium&lt;br /&gt;Neither this or Anonymous&amp;#39;s inf will work</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/2857896645211532041'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/2857896645211532041'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1356224244031#c2857896645211532041' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1983727571'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, December 22, 2012 at 7:57:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5713109165251818768</id><published>2013-01-07T10:25:56.297-05:00</published><updated>2013-01-07T10:25:56.297-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Async (IOCP) is in Windows since NT 3.5 and in the...</title><content type='html'>Async (IOCP) is in Windows since NT 3.5 and in the .NET Framework broadly since version 1.1, so that probably no longer qualifies as new :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4674692382839314080/comments/default/5713109165251818768'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4674692382839314080/comments/default/5713109165251818768'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-doesnt-change-http-protocol.html?showComment=1357572356297#c5713109165251818768' title=''/><author><name>Clemens Vasters</name><uri>http://vasters.com/clemensv</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-doesnt-change-http-protocol.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4674692382839314080' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4674692382839314080' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1245489841'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 7, 2013 at 10:25:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9177108189444655879</id><published>2013-01-07T12:39:28.584-05:00</published><updated>2013-01-07T12:39:28.584-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>In the context of this blog post, &amp;quot;async&amp;quot...</title><content type='html'>In the context of this blog post, &amp;quot;async&amp;quot; meant the language changes in C# and VB to easily support asynchronous operations.&lt;br /&gt;&lt;br /&gt;This &amp;quot;async&amp;quot; was released on August 15th, 2012, six days *after* this blog post. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4674692382839314080/comments/default/9177108189444655879'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4674692382839314080/comments/default/9177108189444655879'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-doesnt-change-http-protocol.html?showComment=1357580368584#c9177108189444655879' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4674692382839314080/comments/default/5713109165251818768'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-doesnt-change-http-protocol.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4674692382839314080' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4674692382839314080' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 7, 2013 at 12:39:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3949728543717061425</id><published>2013-01-12T03:53:19.322-05:00</published><updated>2013-01-12T03:53:19.322-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks! I was wondering why my &amp;quot;failing&amp;quot;...</title><content type='html'>Thanks! I was wondering why my &amp;quot;failing&amp;quot; tests weren&amp;#39;t actually failing.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/3949728543717061425'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/3949728543717061425'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html?showComment=1357980799322#c3949728543717061425' title=''/><author><name>Jonathan Allen</name><uri>http://infoq.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7640802004847274195' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7640802004847274195' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-883478828'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, January 12, 2013 at 3:53:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6274509350277127301</id><published>2013-01-13T17:48:59.462-05:00</published><updated>2013-01-13T17:48:59.462-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Not sure what all the fuss about GUIDs colliding i...</title><content type='html'>Not sure what all the fuss about GUIDs colliding is about. Fully random GUIDs without structure do not *ever* collide with anything, be it conforming or not. I think the MAC and time tricks are just stupid (except if used to ensure sequential values).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1282213798185076226/comments/default/6274509350277127301'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1282213798185076226/comments/default/6274509350277127301'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/11/few-words-on-guids.html?showComment=1358117339462#c6274509350277127301' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/11/few-words-on-guids.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1282213798185076226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1282213798185076226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-928034386'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, January 13, 2013 at 5:48:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1245508960311388420</id><published>2013-01-13T17:56:52.652-05:00</published><updated>2013-01-13T17:56:52.652-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It is unbelievable that some &amp;quot;engineers&amp;quot;...</title><content type='html'>It is unbelievable that some &amp;quot;engineers&amp;quot; care just about shutting up the compiler. How careless. A total no-hire.&lt;br /&gt;&lt;br /&gt;This of course assuming that he really was just trying to silence the error.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5762880735949654448/comments/default/1245508960311388420'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5762880735949654448/comments/default/1245508960311388420'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/03/border-case-of-abs.html?showComment=1358117812652#c1245508960311388420' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/03/border-case-of-abs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5762880735949654448' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5762880735949654448' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-928034386'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, January 13, 2013 at 5:56:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7941818369272439348</id><published>2013-01-13T18:00:49.478-05:00</published><updated>2013-01-13T18:00:49.478-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I like to think of compiler errors and warnings as...</title><content type='html'>I like to think of compiler errors and warnings as a built-in set of unit tests. If you ignore a compiler warning, it&amp;#39;s like ignoring a failing unit test - there are certain very specific scenarios where you can temporarily ignore a particular one (after fully understanding the reason), but in general you ignore them at your own peril.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5762880735949654448/comments/default/7941818369272439348'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5762880735949654448/comments/default/7941818369272439348'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2011/03/border-case-of-abs.html?showComment=1358118049478#c7941818369272439348' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5762880735949654448/comments/default/1245508960311388420'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/03/border-case-of-abs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5762880735949654448' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5762880735949654448' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, January 13, 2013 at 6:00:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6516156754449181730</id><published>2013-01-13T21:42:32.922-05:00</published><updated>2013-01-13T21:42:32.922-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Errr: It seems like there are two problems here, *...</title><content type='html'>Errr: It seems like there are two problems here, *none* of which are related to async.&lt;br /&gt;&lt;br /&gt;1. Using &amp;#39;async void&amp;#39; is just plain wrong here.&lt;br /&gt;Refer: http://msdn.microsoft.com/en-us/library/vstudio/hh156513.aspx&lt;br /&gt; - &amp;quot;The caller of a void-returning async method can&amp;#39;t await it and can&amp;#39;t catch exceptions that the method throws.&amp;quot;&lt;br /&gt;&lt;br /&gt;2. ExpectedExceptionAttribute isn&amp;#39;t a good solution here, or anywhere.&lt;br /&gt;The issue with unwrapping the AggregateException again isn&amp;#39;t anything to do with async, it&amp;#39;s just that ExpectedException doesn&amp;#39;t allow you to verify the InnerException. Just write a helper function to catch the exception for you, and then verify it properly using normal asserts!.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/6516156754449181730'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/6516156754449181730'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html?showComment=1358131352922#c6516156754449181730' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7640802004847274195' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7640802004847274195' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1789757483'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, January 13, 2013 at 9:42:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7950259498482472052</id><published>2013-01-13T21:46:17.495-05:00</published><updated>2013-01-13T21:46:17.495-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>As per my comment on your previous blog, Microsoft...</title><content type='html'>As per my comment on your previous blog, Microsoft does ship built-in async unit test support in visual studio 2012... The fact that you aren&amp;#39;t using it properly (don&amp;#39;t use async void, ExpectedException sucks) isn&amp;#39;t related :-)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/7950259498482472052'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/7950259498482472052'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1358131577495#c7950259498482472052' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1789757483'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, January 13, 2013 at 9:46:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3457608181629896533</id><published>2013-01-14T07:48:48.474-05:00</published><updated>2013-01-14T07:48:48.474-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This blog post was written in February of 2012. Mi...</title><content type='html'>This blog post was written in February of 2012. Microsoft had not released VS2012 at that time, and there&amp;#39;s an update at the top of this post pointing out that this information only applies to VS2010. VS2012 did not support async unit tests until their RTW.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/3457608181629896533'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/3457608181629896533'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1358167728474#c3457608181629896533' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/7950259498482472052'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 14, 2013 at 7:48:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1686361715925305953</id><published>2013-01-14T07:55:25.753-05:00</published><updated>2013-01-14T07:55:25.753-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>At the time this blog post was written (when only ...</title><content type='html'>At the time this blog post was written (when only VS2010 had been released), &amp;quot;async Task&amp;quot; was not an option for unit tests. BTW, it is possible to provide a context for async void methods and both wait for them and retrieve their exceptions; this is how nUnit supports async void unit tests.&lt;br /&gt;&lt;br /&gt;I agree with your comment re ExpectedExceptionAttribute. I use and recommend a ThrowsAsync method for checking exceptions on async methods. I used ExpectedExceptionAttribute examples in this blog post because that&amp;#39;s Microsoft&amp;#39;s recommendation and the approach most MSTest users are familiar with.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/1686361715925305953'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/1686361715925305953'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html?showComment=1358168125753#c1686361715925305953' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/6516156754449181730'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7640802004847274195' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7640802004847274195' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 14, 2013 at 7:55:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6118352932921928299</id><published>2013-01-16T10:39:21.224-05:00</published><updated>2013-01-16T10:39:21.224-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very helpful, thanks!!!</title><content type='html'>Very helpful, thanks!!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/6118352932921928299'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/6118352932921928299'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html?showComment=1358350761224#c6118352932921928299' title=''/><author><name>Friedrich</name><uri>http://www.blogger.com/profile/15520800752177131855</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-793123027'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, January 16, 2013 at 10:39:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5469505438178189846</id><published>2013-01-17T16:40:00.517-05:00</published><updated>2013-01-17T16:40:00.517-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Good post.

I&amp;#39;m not a big fan of constructors ...</title><content type='html'>Good post.&lt;br /&gt;&lt;br /&gt;I&amp;#39;m not a big fan of constructors doing much work in the first place, be it sync or async.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/5469505438178189846'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/5469505438178189846'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html?showComment=1358458800517#c5469505438178189846' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8380075727181515053' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8380075727181515053' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2130669237'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, January 17, 2013 at 4:40:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5488507299032313395</id><published>2013-01-18T05:19:04.876-05:00</published><updated>2013-01-18T05:19:04.876-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>How would it look if you spun up an IObserver wher...</title><content type='html'>How would it look if you spun up an IObserver where T is the async resource to be initialized which already have the onnext, completed, onerror interface rdy to go.&lt;br /&gt; </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/5488507299032313395'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/5488507299032313395'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html?showComment=1358504344876#c5488507299032313395' title=''/><author><name>oskark</name><uri>http://www.blogger.com/profile/04249663512046793009</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8380075727181515053' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8380075727181515053' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2143273081'/><gd:extendedProperty name='blogger.displayTime' value='Friday, January 18, 2013 at 5:19:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5076302481006239976</id><published>2013-01-18T07:31:04.574-05:00</published><updated>2013-01-18T07:31:04.574-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Small error in the first example: you should await...</title><content type='html'>Small error in the first example: you should await the InitializeAsync() call in the CreateAsync() method.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/5076302481006239976'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/5076302481006239976'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html?showComment=1358512264574#c5076302481006239976' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8380075727181515053' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8380075727181515053' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1362361216'/><gd:extendedProperty name='blogger.displayTime' value='Friday, January 18, 2013 at 7:31:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1289668765824302456</id><published>2013-01-18T09:51:32.811-05:00</published><updated>2013-01-18T09:51:32.811-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Actually, I&amp;#39;m using an optimization there. The...</title><content type='html'>Actually, I&amp;#39;m using an optimization there. The CreateAsync method is directly returning the Task returned by InitializeAsync.&lt;br /&gt;&lt;br /&gt;However, this optimization does assume that the constructor will not throw an exception. I&amp;#39;ll remove the optimization from the code in case others copy/paste it.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/1289668765824302456'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/1289668765824302456'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html?showComment=1358520692811#c1289668765824302456' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8380075727181515053/comments/default/5076302481006239976'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-2-constructors.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8380075727181515053' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8380075727181515053' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, January 18, 2013 at 9:51:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3552949407768281201</id><published>2013-01-26T06:30:28.355-05:00</published><updated>2013-01-26T06:30:28.355-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Tanks for great example!!!</title><content type='html'>Tanks for great example!!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1698488373399837718/comments/default/3552949407768281201'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1698488373399837718/comments/default/3552949407768281201'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/msbuild-factorial.html?showComment=1359199828355#c3552949407768281201' title=''/><author><name>Rasmus</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/msbuild-factorial.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1698488373399837718' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1698488373399837718' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-942183108'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, January 26, 2013 at 6:30:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4876002940328822588</id><published>2013-02-06T09:26:44.602-05:00</published><updated>2013-02-06T09:26:44.602-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>thank you very much, very helpful for me!</title><content type='html'>thank you very much, very helpful for me!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/4876002940328822588'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/4876002940328822588'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1360160804602#c4876002940328822588' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1659314649'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, February 6, 2013 at 9:26:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5319315881567829284</id><published>2013-02-07T17:39:46.315-05:00</published><updated>2013-02-07T17:39:46.315-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very intelligent post, I learnt a few things from ...</title><content type='html'>Very intelligent post, I learnt a few things from it. Also, I have nothing at all to add. That happens rarely ;-)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9201592541097135772/comments/default/5319315881567829284'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9201592541097135772/comments/default/5319315881567829284'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-4-state.html?showComment=1360276786315#c5319315881567829284' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-4-state.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9201592541097135772' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9201592541097135772' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2078047133'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 7, 2013 at 5:39:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3891244300010422664</id><published>2013-02-11T23:43:39.307-05:00</published><updated>2013-02-11T23:43:39.307-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nice post. Give a better understanding about Async...</title><content type='html'>Nice post. Give a better understanding about Asynchronous in C#. Thanks! :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/3891244300010422664'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/3891244300010422664'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1360644219307#c3891244300010422664' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-46348624'/><gd:extendedProperty name='blogger.displayTime' value='Monday, February 11, 2013 at 11:43:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7972800569677628574</id><published>2013-02-26T13:20:28.756-05:00</published><updated>2013-02-26T13:20:28.756-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That is very handy :) Thanks!</title><content type='html'>That is very handy :) Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6740069892417218537/comments/default/7972800569677628574'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6740069892417218537/comments/default/7972800569677628574'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/05/framework-profiles-in-net.html?showComment=1361902828756#c7972800569677628574' title=''/><author><name>Jedidja</name><uri>http://www.blogger.com/profile/02924699081609245787</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://2.bp.blogspot.com/_7d1H3pSFIWw/SgALRUtCjZI/AAAAAAAAAo0/pqWEtFozUL0/S220/stewie.png'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/05/framework-profiles-in-net.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6740069892417218537' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6740069892417218537' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-520609860'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, February 26, 2013 at 1:20:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2793167532102276817</id><published>2013-02-28T18:33:08.763-05:00</published><updated>2013-02-28T18:33:08.763-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen,
To your knowledge, is solution #4 (keepal...</title><content type='html'>Stephen,&lt;br /&gt;To your knowledge, is solution #4 (keepalive packets), supported in modern Linux systems?  I&amp;#39;m running on Linux kernel 3.1.10 and I&amp;#39;m trying to modify keepalive settings both through setsockopt() in C++ code and via the files in the /proc/sys/net/ipv4 directory, and none of it seems to be working.  I&amp;#39;m wondering if this is the case in which keepalive simply isn&amp;#39;t supported.  Thanks, Chance&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2793167532102276817'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2793167532102276817'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1362094388763#c2793167532102276817' title=''/><author><name>sadastronaut</name><uri>http://sadastronaut.wordpress.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-15668464'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 28, 2013 at 6:33:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6775472078717416774</id><published>2013-03-01T09:02:19.450-05:00</published><updated>2013-03-01T09:02:19.450-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I haven&amp;#39;t done Linux socket programming since ...</title><content type='html'>I haven&amp;#39;t done Linux socket programming since the late &amp;#39;90s, but it should certainly support keepalives.&lt;br /&gt;&lt;br /&gt;The default timeout is 2 hours, just like Windows. Windows permits per-connection overrides of this timeout (by sending a SIO_KEEPALIVE_VALS IOCTL). I believe the Linux equivalents are TCP_KEEPIDLE, TCP_KEEPCNT, and TCP_KEEPINTVL (sent as IPPROTO_TCP socket options).&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6775472078717416774'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6775472078717416774'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1362146539450#c6775472078717416774' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2793167532102276817'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 1, 2013 at 9:02:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3171682968402101200</id><published>2013-03-02T07:33:40.167-05:00</published><updated>2013-03-02T07:33:40.167-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is further evidence that async, as cool as it...</title><content type='html'>This is further evidence that async, as cool as it is, will never be on par with sync code when it comes to productivity.&lt;br /&gt;&lt;br /&gt;In scenarios like ASP.NET, when there are no long-running handlers in play, the only sane advice is to not use async if there is a choice.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/3171682968402101200'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/3171682968402101200'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html?showComment=1362227620167#c3171682968402101200' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8214861811488829137' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1265753732'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, March 2, 2013 at 7:33:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5611601366534419704</id><published>2013-03-02T16:46:23.442-05:00</published><updated>2013-03-02T16:46:23.442-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Synchronous code is the easiest to understand, but...</title><content type='html'>Synchronous code is the easiest to understand, but it&amp;#39;s easier to create *better* (responsive / scalable) programs with async than sync. Event handlers were designed from a sync perspective, and that&amp;#39;s why using them with async is awkward.&lt;br /&gt;&lt;br /&gt;More modern approaches like Rx really reveal the drawbacks of C# events. I think if events were added to C# now, they would look very, very different (and naturally work great with async).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/5611601366534419704'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/5611601366534419704'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html?showComment=1362260783442#c5611601366534419704' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/3171682968402101200'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8214861811488829137' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, March 2, 2013 at 4:46:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-380920357319203929</id><published>2013-03-02T17:16:39.161-05:00</published><updated>2013-03-02T17:16:39.161-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;d venture to say that almost any real ASP.NE...</title><content type='html'>I&amp;#39;d venture to say that almost any real ASP.NET application does not have the characteristics that make async necessary (and that cannot be fixed with increasing thread and connection limits to insane (but working) levels). The obvious exceptions are SignalR-style apps and apps with very-high-latency backend services which still support a lot of throughput. Very rare and in those cases I&amp;#39;d just use async for a small part of the code.&lt;br /&gt;&lt;br /&gt;Your comments regarding events and Rx are true. Still, async has fundamental debugging problems. For example the logical stack is not available and you can&amp;#39;t pause the debugger to see what all the (IO-based) tasks are doing. It is actually quite awful if you&amp;#39;re used to inspecting a running system.&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/380920357319203929'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/380920357319203929'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html?showComment=1362262599161#c380920357319203929' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/3171682968402101200'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8214861811488829137' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1265753732'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, March 2, 2013 at 5:16:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1761427222074939287</id><published>2013-03-03T22:22:20.059-05:00</published><updated>2013-03-03T22:22:20.059-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Well, it depends. :) I think asynchronous code is ...</title><content type='html'>Well, it depends. :) I think asynchronous code is beneficial (maybe not necessary, but beneficial) to most ASP.NET code because most ASP.NET apps are I/O-bound. Sure, someone can tweak the thread pool if they need to scale, but how many ASP.NET programmers know to do that? And even with tweaking, async code can scale an order of magnitude higher than threads.&lt;br /&gt;&lt;br /&gt;However, I definitely have to agree regarding debugging. FYI, there are ETW events that were added to track async/await. They&amp;#39;re not documented yet, but they&amp;#39;re in the runtime. I expect that we&amp;#39;ll see some better visualizations and debugging helpers in future updates that build on this.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/1761427222074939287'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/1761427222074939287'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html?showComment=1362367340059#c1761427222074939287' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/3171682968402101200'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8214861811488829137' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 3, 2013 at 10:22:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8194138815126967024</id><published>2013-03-03T23:01:30.257-05:00</published><updated>2013-03-03T23:01:30.257-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Being somebody who is currently trying to &amp;quot;fo...</title><content type='html'>Being somebody who is currently trying to &amp;quot;formally educate&amp;quot; himself on the subject, I feel that mentioning explicitly the synchronous blocking behavior of Task.Result property would have clarified a lot. I read most of the referred answered questions and most all of the people having the problem were expecting a magic to happen and return the result from the task - a magic similar to what async and await give us, hiding the complexities of CPS programming from us.&lt;br /&gt;&lt;br /&gt;Here&amp;#39;s what MSDN has to say about Task.Result property:&lt;br /&gt;(from here http://msdn.microsoft.com/en-us/library/dd321468.aspx)&lt;br /&gt;Remarks&lt;br /&gt;The get accessor for this property ensures that the asynchronous operation is complete before returning. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/8194138815126967024'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/8194138815126967024'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1362369690257#c8194138815126967024' title=''/><author><name>Joro S</name><uri>http://www.blogger.com/profile/09342130902585558504</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-ZK2XAftmsbs/AAAAAAAAAAI/AAAAAAAAACo/kj22YxXqeMg/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1330581761'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 3, 2013 at 11:01:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6058750205799223021</id><published>2013-03-06T00:14:00.321-05:00</published><updated>2013-03-06T00:14:00.321-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>How do you check if the UDP socket on other side h...</title><content type='html'>How do you check if the UDP socket on other side has shutdown/stop. Since, UDP is unreliable, it is difficult to know if UDP on other side has stopped working or has shut down</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/6058750205799223021'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/6058750205799223021'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1362546840321#c6058750205799223021' title=''/><author><name>Uday Gupta</name><uri>http://www.blogger.com/profile/16780765000928234784</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2046512909'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 6, 2013 at 12:14:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5510563506711488290</id><published>2013-03-06T00:20:18.982-05:00</published><updated>2013-03-06T00:20:18.982-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephan,

What is your take on UDP socket. Even...</title><content type='html'>Hi Stephan,&lt;br /&gt;&lt;br /&gt;What is your take on UDP socket. Even connected, UDP Sockets can be seems to be like half-open and half-closed sockets at both ends. &lt;br /&gt;&lt;br /&gt;So how do you get to know, if the other side is still alive and the connection is intact.&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5510563506711488290'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5510563506711488290'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1362547218982#c5510563506711488290' title=''/><author><name>Uday Gupta</name><uri>http://www.blogger.com/profile/16780765000928234784</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2046512909'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 6, 2013 at 12:20:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8569486906724243610</id><published>2013-03-06T10:52:36.960-05:00</published><updated>2013-03-06T10:52:36.960-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>UDP is at a much lower level than TCP. Technically...</title><content type='html'>UDP is at a much lower level than TCP. Technically, there is no actual &amp;quot;connection&amp;quot;; when the API docs talk about a &amp;quot;connection&amp;quot; all that really means is that you&amp;#39;re setting local default values for future operations.&lt;br /&gt;&lt;br /&gt;So it really doesn&amp;#39;t make sense to check for a &amp;quot;connection&amp;quot;. However, you can send a keepalive to the other side to see if it&amp;#39;s still there, just like TCP. But if the &amp;quot;keepalive&amp;quot; doesn&amp;#39;t make it, there is no built-in NAK or notification that it failed. And UDP has no built-in retries, so if a keepalive fails it doesn&amp;#39;t *necessarily* mean that the other side isn&amp;#39;t there.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8569486906724243610'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8569486906724243610'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1362585156960#c8569486906724243610' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5510563506711488290'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 6, 2013 at 10:52:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5818784716186213591</id><published>2013-03-06T10:54:08.813-05:00</published><updated>2013-03-06T10:54:08.813-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you need the concept of a &amp;quot;connection&amp;quot...</title><content type='html'>If you need the concept of a &amp;quot;connection&amp;quot; complete with detection of dropped connections, then use TCP. Otherwise, you&amp;#39;ll just end up re-inventing TCP over UDP, which can get really ugly.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/5818784716186213591'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/5818784716186213591'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1362585248813#c5818784716186213591' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/6058750205799223021'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 6, 2013 at 10:54:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6395127551489257858</id><published>2013-03-12T02:54:05.212-04:00</published><updated>2013-03-12T02:54:05.212-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very nice explanation and useful one. </title><content type='html'>Very nice explanation and useful one. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6395127551489257858'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/6395127551489257858'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1363071245212#c6395127551489257858' title=''/><author><name>raghavendra s</name><uri>http://www.blogger.com/profile/06709714698733219871</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-jT0yl8BrQw0/AAAAAAAAAAI/AAAAAAAAAek/6LaikTGdAOo/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-584505858'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 12, 2013 at 2:54:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6677481564805097473</id><published>2013-03-12T10:43:11.846-04:00</published><updated>2013-03-12T10:43:11.846-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It is crazy how that well that bible verse in the ...</title><content type='html'>It is crazy how that well that bible verse in the header (55:11) lines up with async/await.  I&amp;#39;m not religious at all, but that is pretty cool. I&amp;#39;ll be sure to say that to my code with the best booming voice I can come up with.  </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6677481564805097473'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6677481564805097473'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1363099391846#c6677481564805097473' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-783594672'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 12, 2013 at 10:43:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5436424612349297885</id><published>2013-03-12T12:13:34.964-04:00</published><updated>2013-03-12T12:13:34.964-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excellent work, thank you!</title><content type='html'>Excellent work, thank you!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/5436424612349297885'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/5436424612349297885'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1363104814964#c5436424612349297885' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-963931011'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 12, 2013 at 12:13:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7973007824415197086</id><published>2013-03-20T13:07:55.876-04:00</published><updated>2013-03-20T13:07:55.876-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very Helpful, Thanks!

The amount of undocumentati...</title><content type='html'>Very Helpful, Thanks!&lt;br /&gt;&lt;br /&gt;The amount of undocumentation in msdn these days is staggering.&lt;br /&gt;&lt;br /&gt;LOL - I have a text document with a boilerplate complaint that I paste into the &amp;#39;did you find this helpful&amp;#39; area at the bottom of the msdn doc page.  I have used it often (understatement)&lt;br /&gt;&lt;br /&gt;My complaint:&lt;br /&gt;&lt;br /&gt;MORE UNDOCUMENTATION.  When we come to this page, we are looking for information and examples not a restatement of the method name in sentence form.&lt;br /&gt;&lt;br /&gt;WILL SOMEONE PLEASE ADDRESS THIS PROBLEM.  A LARGE AMOUNT OF MSDN DOCUMENTATION IS JUST LIKE THIS..</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/7973007824415197086'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/7973007824415197086'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html?showComment=1363799275876#c7973007824415197086' title=''/><author><name>cjl</name><uri>http://www.blogger.com/profile/12318983123008415070</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225828965'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 20, 2013 at 1:07:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5279054476860013773</id><published>2013-03-20T13:15:51.755-04:00</published><updated>2013-03-20T13:15:51.755-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Adam Cataldo

You can also insert the new items i...</title><content type='html'>@Adam Cataldo&lt;br /&gt;&lt;br /&gt;You can also insert the new items in reverse order using the NewStartingIndex each time without changing the value of it</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/5279054476860013773'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/5279054476860013773'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html?showComment=1363799751755#c5279054476860013773' title=''/><author><name>cjl</name><uri>http://www.blogger.com/profile/12318983123008415070</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225828965'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 20, 2013 at 1:15:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4577376383649704621</id><published>2013-03-20T19:50:06.974-04:00</published><updated>2013-03-20T19:50:06.974-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You describe Post(item) as synchronously posting t...</title><content type='html'>You describe Post(item) as synchronously posting to the the target block. The &amp;quot;Introduction to TPL Dataflow&amp;quot; document by Stephen Toub describes Post(item) as asynchronously posting to the the target block.&lt;br /&gt;&lt;br /&gt;Could you discuss in what sense Post() is synchronous and in what sense it is asynchronous?&lt;br /&gt;&lt;br /&gt;Can Post() block?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/4577376383649704621'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/4577376383649704621'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html?showComment=1363823406974#c4577376383649704621' title=''/><author><name>Mark Zvilius</name><uri>http://www.blogger.com/profile/06499768056784882414</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-352413745607298877' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/352413745607298877' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-44923750'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 20, 2013 at 7:50:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6240946941206849359</id><published>2013-03-22T11:51:10.206-04:00</published><updated>2013-03-22T11:51:10.206-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It is probably an API design error to not make the...</title><content type='html'>It is probably an API design error to not make the ID an Int64.&lt;br /&gt;&lt;br /&gt;There was a similar problem with Environment.TickCount which wrapped ever 30 days or so. Flawed by design.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4788387714061041210/comments/default/6240946941206849359'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4788387714061041210/comments/default/6240946941206849359'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/a-few-words-on-taskid-and.html?showComment=1363967470206#c6240946941206849359' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/03/a-few-words-on-taskid-and.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4788387714061041210' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4788387714061041210' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1234253427'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 22, 2013 at 11:51:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3081356701135342245</id><published>2013-03-22T17:04:57.624-04:00</published><updated>2013-03-22T17:04:57.624-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No, Post will not block. If the block doesn&amp;#39;t ...</title><content type='html'>No, Post will not block. If the block doesn&amp;#39;t want the data right then, Post will (immediately) return false. So I consider it &amp;quot;synchronous&amp;quot; from the point of view of the caller. It&amp;#39;s &amp;quot;asynchronous&amp;quot; from the point of view of the mesh, because Post will just queue the item in the block&amp;#39;s input buffer if possible.&lt;br /&gt;&lt;br /&gt;SendAsync is asynchronous from both points of view: if necessary, it will (asynchronously) wait until the block is ready.&lt;br /&gt;&lt;br /&gt;In most situations, blocks don&amp;#39;t restrict their input, so there&amp;#39;s no difference between Post and SendAsync most of the time. A notable exception is when you set BoundedCapacity on the block options. A bounded block will attempt to postpone any incoming data if it&amp;#39;s already full; this is where Post and SendAsync differ (Post returns false; SendAsync asynchronously waits for the block to have space available).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/3081356701135342245'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/3081356701135342245'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html?showComment=1363986297624#c3081356701135342245' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/4577376383649704621'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-352413745607298877' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/352413745607298877' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 22, 2013 at 5:04:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5174356188951745134</id><published>2013-03-23T18:31:20.648-04:00</published><updated>2013-03-23T18:31:20.648-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks.</title><content type='html'>Thanks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/5174356188951745134'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/5174356188951745134'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html?showComment=1364077880648#c5174356188951745134' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/352413745607298877/comments/default/4577376383649704621'/><author><name>Mark Zvilius</name><uri>http://www.blogger.com/profile/06499768056784882414</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/09/introduction-to-dataflow-part-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-352413745607298877' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/352413745607298877' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-44923750'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, March 23, 2013 at 6:31:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1854668358257352963</id><published>2013-04-18T13:49:56.914-04:00</published><updated>2013-04-18T13:49:56.914-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great job at a very very easy to understand articl...</title><content type='html'>Great job at a very very easy to understand article! </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1854668358257352963'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1854668358257352963'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1366307396914#c1854668358257352963' title=''/><author><name>Chris Marisic</name><uri>http://www.blogger.com/profile/08904925342941324684</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-351346325'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 18, 2013 at 1:49:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7781027228739592166</id><published>2013-04-24T04:27:50.442-04:00</published><updated>2013-04-24T04:27:50.442-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If only I read this article a 2 years ago, would h...</title><content type='html'>If only I read this article a 2 years ago, would have saved me a lot of headaches. Great work!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/7781027228739592166'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/7781027228739592166'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1366792070442#c7781027228739592166' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-740792059'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 24, 2013 at 4:27:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2775532877102716655</id><published>2013-04-25T20:10:59.494-04:00</published><updated>2013-04-25T20:10:59.494-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&lt;i&gt;If someone is working on A, they have to be ver...</title><content type='html'>&lt;i&gt;If someone is working on A, they have to be very careful which invariants they violate while holding their lock, because B is depending on some subset of those invariants.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;But that&amp;#39;s not really about re-entrant locks, no? With your proposed refactoring into C_UnderLock(), the dependency is still there, the person who is working on A still has to know how that method behaves.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6311204348916241166/comments/default/2775532877102716655'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6311204348916241166/comments/default/2775532877102716655'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html?showComment=1366935059494#c2775532877102716655' title=''/><author><name>svick</name><uri>http://www.blogger.com/profile/17579249405158039163</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6311204348916241166' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6311204348916241166' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-830071467'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 25, 2013 at 8:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7932598603242256935</id><published>2013-04-26T15:25:15.020-04:00</published><updated>2013-04-26T15:25:15.020-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen -

I often enjoy your posts, thanks!

I...</title><content type='html'>Hi Stephen -&lt;br /&gt;&lt;br /&gt;I often enjoy your posts, thanks!&lt;br /&gt;&lt;br /&gt;I have a question related to this topic ... I know that in WPF 4.5 we can indirectly update the UI by making changes to data-bound objects, and even databound collections.&lt;br /&gt;&lt;br /&gt;I assume something at some point gets marshaled to the UI thread, and this may be different depending on if INotify[...] is used or a DependencyProperty?&lt;br /&gt;&lt;br /&gt;My real question this is: when configuring an await, if the remaining tasks are just changing databound objects ... should I prefer ConfigureAwait(false) or no?  Technically i don&amp;#39;t need to resume on the UI thread due to the feature just described, but maybe I&amp;#39;d rather if the databinding will eventually lead to a thread swap or something anyway?&lt;br /&gt;&lt;br /&gt;I may be wrong on a lot of my understanding, but thanks for any clarification here!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/7932598603242256935'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/7932598603242256935'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html?showComment=1367004315020#c7932598603242256935' title=''/><author><name>Travis</name><uri>http://www.blogger.com/profile/12471100110187013906</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1455694138350933293' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1455694138350933293' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-906610172'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 26, 2013 at 3:25:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-127300451722021590</id><published>2013-04-26T15:27:12.936-04:00</published><updated>2013-04-26T15:27:12.936-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I should have clarified ... the indirect updating ...</title><content type='html'>I should have clarified ... the indirect updating I mentioned was that you can update the UI from non-UI threads through databinding... in .NET 4.5 this is even possible for databound collections which I believe is new</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/127300451722021590'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/127300451722021590'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html?showComment=1367004432936#c127300451722021590' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/7932598603242256935'/><author><name>Travis</name><uri>http://www.blogger.com/profile/12471100110187013906</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1455694138350933293' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1455694138350933293' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-906610172'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 26, 2013 at 3:27:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5348009867745064219</id><published>2013-04-27T01:34:16.855-04:00</published><updated>2013-04-27T01:34:16.855-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you, you just made my day.
I am actually usi...</title><content type='html'>Thank you, you just made my day.&lt;br /&gt;I am actually using Teleriks Just Decompile, which created the .resx already. Some functions needed some care with other tools (IL Spy and ILDASM), but the main export was working, only thing as usual that would not work was the UI.&lt;br /&gt;Mate, I am so happy right now to finally see the interface in my VS.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5348009867745064219'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5348009867745064219'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1367040856855#c5348009867745064219' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-200551781'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 27, 2013 at 1:34:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-341888799400147188</id><published>2013-04-28T00:02:19.814-04:00</published><updated>2013-04-28T00:02:19.814-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Good questions, Travis. I don&amp;#39;t have all the a...</title><content type='html'>Good questions, Travis. I don&amp;#39;t have all the answers, but I&amp;#39;ll give you my opinion. :)&lt;br /&gt;&lt;br /&gt;First off, any kind of property or collection changed event does need to be raised on the UI thread, so you&amp;#39;ll need to marshal to that thread one way or another (either explicitly or implicitly).&lt;br /&gt;&lt;br /&gt;I don&amp;#39;t *think* dependency properties will marshal back to the UI thread automatically, and INotify* will only do so if you implement it as such. Some people do implement automatic marshaling to the UI thread. I have never done this; instead, I treat any data-bound properties as though they were a part of the UI (e.g., in async methods, I do *not* use ConfigureAwait(false) if I need to update a data-bound property).&lt;br /&gt;&lt;br /&gt;The new cross-thread collection synchronization in .NET 4.5 is not fully automatic; it&amp;#39;s more of a way to coordinate ObservableCollection (or other collection) updates between the UI thread and background thread(s). I have not used it yet, but I would consider it if performance analysis indicated it would help. This is assuming you actually need a background thread accessing it (e.g., Task.Run); if you just have async methods, you may as well just marshal back to the UI yourself and not mess with the cross-thread collection synchronization, IMO.&lt;br /&gt;&lt;br /&gt;There&amp;#39;s always been *some* support for cross-thread UI operations, but I just pretend they don&amp;#39;t exist. For one thing, I try to write portable code, and it&amp;#39;s always hard to keep straight which little features are on Windows Store vs. Windows Phone vs. Silverlight vs. WPF. Cross-thread UI operations are one more thing I don&amp;#39;t have to worry about if I don&amp;#39;t use them.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/341888799400147188'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/341888799400147188'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html?showComment=1367121739814#c341888799400147188' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/7932598603242256935'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1455694138350933293' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1455694138350933293' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, April 28, 2013 at 12:02:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1663878077591633633</id><published>2013-04-29T12:24:59.373-04:00</published><updated>2013-04-29T12:24:59.373-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sound advice, thanks! The async/await mindset is y...</title><content type='html'>Sound advice, thanks! The async/await mindset is yielding major improvements in code readability and performance for me, and I&amp;#39;m sure everyone else. It really feels like the &amp;quot;right way&amp;quot; to do asynchrony... especially since it separates the concepts of asynchrony and multi-threading. Some of the TPL code I was so proud of a few years ago feels like an embarrassment in my codebase now, hah... not all of it, TPL is great when used for what it was designed for.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/1663878077591633633'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1455694138350933293/comments/default/1663878077591633633'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html?showComment=1367252699373#c1663878077591633633' title=''/><author><name>Travis</name><uri>http://www.blogger.com/profile/12471100110187013906</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/ui-guidelines-for-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1455694138350933293' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1455694138350933293' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-906610172'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 29, 2013 at 12:24:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2353811607247844376</id><published>2013-04-29T16:29:01.603-04:00</published><updated>2013-04-29T16:29:01.603-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This code has made my day! I&amp;#39;ve been strugglin...</title><content type='html'>This code has made my day! I&amp;#39;ve been struggling to create a message framing interface (without knowing that was what it was called). I was trying to implement a message delimited solution with no luck. I stumbled across your description of message framing and subsequently this article. Fantastic! It worked perfectly as soon as I dropped it into my code and I instantly saw all of my communication errors go away. Thanks buddy!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2353811607247844376'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2353811607247844376'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1367267341603#c2353811607247844376' title=''/><author><name>Michael Mankus</name><uri>http://www.blogger.com/profile/00879337794584805047</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-jftyNqlIdX0/AAAAAAAAAAI/AAAAAAAAAD0/G-IchS0WlCo/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1637175909'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 29, 2013 at 4:29:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4008549712217491804</id><published>2013-04-30T08:04:54.810-04:00</published><updated>2013-04-30T08:04:54.810-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excuse me,
//I&amp;#39;ve read your post but I got a q...</title><content type='html'>Excuse me,&lt;br /&gt;//I&amp;#39;ve read your post but I got a question can you provide me a sample where I call different consumer in parallel?&lt;br /&gt;&lt;br /&gt;I&amp;#39;ve seen this&lt;br /&gt;&lt;br /&gt; var consumer1 = new ActionBlock(x =&amp;gt; results1.Add(x), consumerOptions);&lt;br /&gt;    var consumer2 = new ActionBlock(x =&amp;gt; results2.Add(x), consumerOptions);&lt;br /&gt;    var consumer3 = new ActionBlock(x =&amp;gt; results3.Add(x), consumerOptions);&lt;br /&gt;    var linkOptions = new DataflowLinkOptions { PropagateCompletion = true, };&lt;br /&gt;    queue.LinkTo(consumer1, linkOptions);&lt;br /&gt;    queue.LinkTo(consumer2, linkOptions);&lt;br /&gt;    queue.LinkTo(consumer3, linkOptions);&lt;br /&gt;&lt;br /&gt;but I prefer to call them with Task.Parallel so I can parametrize how many consumer to create...thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/4008549712217491804'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/4008549712217491804'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html?showComment=1367323494810#c4008549712217491804' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1255796423'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 30, 2013 at 8:04:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8122371612894487487</id><published>2013-04-30T08:44:12.373-04:00</published><updated>2013-04-30T08:44:12.373-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It sounds like you&amp;#39;d just want one consumer th...</title><content type='html'>It sounds like you&amp;#39;d just want one consumer that could process in parallel (my example is more about three separate consumers; they put the results in different places).&lt;br /&gt;&lt;br /&gt;In your case, you can set up a dataflow with just one consumer and specify the degree of parallelism in ExecutionDataflowBlockOptions.MaxDegreeOfParallelism (by default it is 1).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/8122371612894487487'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/8122371612894487487'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html?showComment=1367325852373#c8122371612894487487' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/4008549712217491804'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 30, 2013 at 8:44:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1816515464607456320</id><published>2013-05-03T15:22:55.449-04:00</published><updated>2013-05-03T15:22:55.449-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>first link is bad</title><content type='html'>first link is bad</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1123119858238306608/comments/default/1816515464607456320'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1123119858238306608/comments/default/1816515464607456320'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-intro.html?showComment=1367608975449#c1816515464607456320' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-intro.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1123119858238306608' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1123119858238306608' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1863265290'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 3, 2013 at 3:22:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7461486353152725035</id><published>2013-05-03T17:58:57.188-04:00</published><updated>2013-05-03T17:58:57.188-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks, fixed!</title><content type='html'>Thanks, fixed!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1123119858238306608/comments/default/7461486353152725035'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1123119858238306608/comments/default/7461486353152725035'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-intro.html?showComment=1367618337188#c7461486353152725035' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1123119858238306608/comments/default/1816515464607456320'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-intro.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1123119858238306608' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1123119858238306608' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 3, 2013 at 5:58:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6608179529061582958</id><published>2013-05-05T08:24:39.128-04:00</published><updated>2013-05-05T08:24:39.128-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for your well written explanation. But I am...</title><content type='html'>Thanks for your well written explanation. But I am curious whether a task can be awaited by two different tasks. In case of a program in which two tasks need to execute after a task T, can they both await T? How will T&amp;#39;s continuation will be set in such a case?&lt;br /&gt;Thanks in advance.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6608179529061582958'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6608179529061582958'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1367756679128#c6608179529061582958' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-64117802'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, May 5, 2013 at 8:24:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4460891610746194910</id><published>2013-05-06T17:31:34.941-04:00</published><updated>2013-05-06T17:31:34.941-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, a single task can be await&amp;#39;ed by any numb...</title><content type='html'>Yes, a single task can be await&amp;#39;ed by any number of async methods. &amp;quot;Await&amp;quot; will first check the task to see if it has completed; if it is already completed, then there is no continuation at all. If the task is not already completed, then it will *add* a continuation to the task. Each task can have any number of continuations.&lt;br /&gt;&lt;br /&gt;One common use case for this is (shared) resources that require asynchronous initialization. You can declare the resource as such:&lt;br /&gt;&lt;br /&gt;  class MyClass&lt;br /&gt;  {&lt;br /&gt;    private readonly Task resource;&lt;br /&gt;    public MyClass()&lt;br /&gt;    {&lt;br /&gt;      resource = LoadMyResourceAsync(); // Note: no &amp;quot;await&amp;quot;&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;and then multiple methods can await that resource:&lt;br /&gt;&lt;br /&gt;  public async Task MethodA()&lt;br /&gt;  {&lt;br /&gt;    var res = await resource;&lt;br /&gt;    ...&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public async Task MethodB()&lt;br /&gt;  {&lt;br /&gt;    var res = await resource;&lt;br /&gt;    ...&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;Keep in mind that when the resource is done loading, it will continue all async methods that have already await&amp;#39;ed it, and any new async methods that await it will continue running synchronously (since it is already loaded, there&amp;#39;s nothing to wait for).&lt;br /&gt;&lt;br /&gt;If you want to *lazy*-load an asynchronous resource (very similar to this but delaying the loading of the resource until it&amp;#39;s actually needed), I have another blog post for that: http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4460891610746194910'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4460891610746194910'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1367875894941#c4460891610746194910' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6608179529061582958'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 6, 2013 at 5:31:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4291148097227909142</id><published>2013-05-06T19:48:05.594-04:00</published><updated>2013-05-06T19:48:05.594-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excellent point. I&amp;#39;ll update the post.</title><content type='html'>Excellent point. I&amp;#39;ll update the post.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6311204348916241166/comments/default/4291148097227909142'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6311204348916241166/comments/default/4291148097227909142'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html?showComment=1367884085594#c4291148097227909142' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6311204348916241166/comments/default/2775532877102716655'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/recursive-re-entrant-locks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6311204348916241166' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6311204348916241166' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 6, 2013 at 7:48:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2934023988931778653</id><published>2013-05-07T11:35:09.571-04:00</published><updated>2013-05-07T11:35:09.571-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>if (0 == length &amp;amp;&amp;amp; 0 &amp;lt; Marshal.GetLastW...</title><content type='html'>if (0 == length &amp;amp;&amp;amp; 0 &amp;lt; Marshal.GetLastWin32Error()) Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2589159950475072525/comments/default/2934023988931778653'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2589159950475072525/comments/default/2934023988931778653'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/ini-file-reader-in-c.html?showComment=1367940909571#c2934023988931778653' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/ini-file-reader-in-c.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2589159950475072525' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2589159950475072525' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1459508896'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 7, 2013 at 11:35:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2704564200205070494</id><published>2013-05-11T17:05:14.491-04:00</published><updated>2013-05-11T17:05:14.491-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Long time fan of your blog, despite much of it bei...</title><content type='html'>Long time fan of your blog, despite much of it being over my technical level of understanding. Always makes me start digging to understand more about .NET and asynchronous programming. Keep it coming! Peter</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2704564200205070494'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2704564200205070494'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html?showComment=1368306314491#c2704564200205070494' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-957873067'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, May 11, 2013 at 5:05:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2036298870577932997</id><published>2013-05-11T18:49:29.063-04:00</published><updated>2013-05-11T18:49:50.318-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/2036298870577932997'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/2036298870577932997'/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/4095445210833733738'/><author><name>Mikey</name><uri>http://www.blogger.com/profile/01987096929709830570</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-1051270844'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, May 11, 2013 at 6:49:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-963040920656463994</id><published>2013-05-11T18:51:36.847-04:00</published><updated>2013-05-11T18:51:36.847-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sorry if this is a dirt stupid question, I&amp;#39;ve ...</title><content type='html'>Sorry if this is a dirt stupid question, I&amp;#39;ve been using .NET since 1.0, but I&amp;#39;m new to all this async stuff -- playing catch-up now and noticing that none of the examples seem to execute correctly in a console app (they work okay in WPF apps) -- I&amp;#39;m hoping your solution fixes this.&lt;br /&gt;&lt;br /&gt;My question is: Where does the &amp;quot;AsyncContext&amp;quot; object come from? I&amp;#39;ve been doing some searching and nobody seems to mention this part, also can&amp;#39;t find it on MSDN. It&amp;#39;s clearly more than just a using statement, as I have no &amp;quot;Resolve-&amp;gt;using ...&amp;quot; option. What reference do I need to include?&lt;br /&gt;&lt;br /&gt;Using .NET 4.5 if that helps (pretty sure this stuff didn&amp;#39;t exist in 4.0 -- so maybe it doesn&amp;#39;t help). ;-)&lt;br /&gt;&lt;br /&gt;(p.s. -- sorry about that deleted comment above -- it was this one, but it was in the wrong place -- as a reply to svick instead of as a stand-alone comment -- hopefully, this one goes in the right place.)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/963040920656463994'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/963040920656463994'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1368312696847#c963040920656463994' title=''/><author><name>Mikey</name><uri>http://www.blogger.com/profile/01987096929709830570</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1051270844'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, May 11, 2013 at 6:51:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1569037548570307312</id><published>2013-05-11T20:38:13.964-04:00</published><updated>2013-05-11T20:38:13.964-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Aha! It&amp;#39;s not built-in.  Also couldn&amp;#39;t fin...</title><content type='html'>Aha! It&amp;#39;s not built-in.  Also couldn&amp;#39;t find it when searching package manager, finally found the page for it though, guess it&amp;#39;s not listed because it&amp;#39;s a pre-release?  Anyway, after much link following I found the package page with the Powershell command and this did the trick:&lt;br /&gt;&lt;br /&gt;    PM&amp;gt; Install-Package Nito.AsyncEx -Pre &lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/1569037548570307312'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/1569037548570307312'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1368319093964#c1569037548570307312' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/963040920656463994'/><author><name>Mikey</name><uri>http://www.blogger.com/profile/01987096929709830570</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1051270844'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, May 11, 2013 at 8:38:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6478657529411719506</id><published>2013-05-12T03:41:03.755-04:00</published><updated>2013-05-12T03:41:03.755-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nice Article, Thank You Cleary.</title><content type='html'>Nice Article, Thank You Cleary.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6478657529411719506'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6478657529411719506'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1368344463755#c6478657529411719506' title=''/><author><name>Kiran Kilari</name><uri>http://www.blogger.com/profile/17924946581743598588</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-oTkQPZJzKWs/AAAAAAAAAAI/AAAAAAAAAAA/5-9qhNIaAXQ/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-916220418'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, May 12, 2013 at 3:41:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4544633561494492765</id><published>2013-05-12T07:53:03.398-04:00</published><updated>2013-05-12T07:53:03.398-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Mikey -

Sorry for the confusion! Yes, AsyncContex...</title><content type='html'>Mikey -&lt;br /&gt;&lt;br /&gt;Sorry for the confusion! Yes, AsyncContext is a class I wrote in the Nito.AsyncEx library. It came out of pre-release in a stable release late last night, so before then it was pretty hard to find!&lt;br /&gt;&lt;br /&gt;Regarding async in console applications, you may find my intro to async/await post helpful here: http://blog.stephencleary.com/2012/02/async-and-await.html&lt;br /&gt;&lt;br /&gt;Once you read that intro post, this post will (hopefully) make more sense.&lt;br /&gt;&lt;br /&gt;-Steve</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/4544633561494492765'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/4544633561494492765'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1368359583398#c4544633561494492765' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/963040920656463994'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, May 12, 2013 at 7:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7557877316097261489</id><published>2013-05-12T08:09:37.827-04:00</published><updated>2013-05-12T08:09:37.827-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you, Peter!

I do strongly encourage asynchr...</title><content type='html'>Thank you, Peter!&lt;br /&gt;&lt;br /&gt;I do strongly encourage asynchronous programming - I believe async/await will be essential knowledge in just a couple more years. By that I mean that it&amp;#39;ll just be *expected* that everyone knows how to use async/await.&lt;br /&gt;&lt;br /&gt;Regarding the technical level, I decided at the beginning that my blog would be on the &amp;quot;harder&amp;quot; end of things. There&amp;#39;s a lot of places out there that cover the simpler stuff, so I figured I&amp;#39;d try tackling the harder problems. Also, any time I found something that wasn&amp;#39;t sufficiently documented or just took me a long time to figure out, I&amp;#39;d write up a blog post. Some of my blog posts here represent 2-3 days of solid work, experimenting, digging with Reflector/JustDecompile, etc.&lt;br /&gt;&lt;br /&gt;Sometimes it&amp;#39;s difficult to explain the harder concepts, though. If I am ever unclear in what I&amp;#39;m saying, please do bring it up!&lt;br /&gt;&lt;br /&gt;Thanks,&lt;br /&gt;      -Steve</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/7557877316097261489'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/7557877316097261489'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html?showComment=1368360577827#c7557877316097261489' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2704564200205070494'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, May 12, 2013 at 8:09:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2778388118913938543</id><published>2013-05-12T08:12:35.933-04:00</published><updated>2013-05-12T08:12:35.933-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Is it guaranteed Task.Run will always wait to run ...</title><content type='html'>Is it guaranteed Task.Run will always wait to run succeeding code after it has completed? I had the impression it would not wait, since it does not return anything. And isn&amp;#39;t it Task.Run offloading work to the threadpool, hence it&amp;#39;s another thread that will sleep?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2778388118913938543'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2778388118913938543'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html?showComment=1368360755933#c2778388118913938543' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-246440195'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, May 12, 2013 at 8:12:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2553235699605832081</id><published>2013-05-12T08:15:15.698-04:00</published><updated>2013-05-12T08:15:15.698-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I do really appreciate your work Stephen. We share...</title><content type='html'>I do really appreciate your work Stephen. We share the same interest in digging deeper for better understanding.&lt;br /&gt;&lt;br /&gt;Since there are no active newsgroup for C# (AFAIK), where do you follow technical discussions or read about it?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2553235699605832081'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2553235699605832081'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html?showComment=1368360915698#c2553235699605832081' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-246440195'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, May 12, 2013 at 8:15:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8784348511319014378</id><published>2013-05-13T00:11:57.199-04:00</published><updated>2013-05-13T00:11:57.199-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Task.Run does return a Task, which represents the ...</title><content type='html'>Task.Run does return a Task, which represents the delegate you pass to it. So when we await the Task returned by Task.Run, we are (asynchronously) waiting for that delegate to run to completion. Any code after that await will run after the delegate has completed.&lt;br /&gt;&lt;br /&gt;Task.Run does put its delegate on the thread pool, so yes, in this example a thread pool thread will sleep. This is similar to (but not exactly like) the behavior of BackgroundWorker, which creates its own dedicated thread.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/8784348511319014378'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/8784348511319014378'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html?showComment=1368418317199#c8784348511319014378' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2778388118913938543'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 13, 2013 at 12:11:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4033591759687143103</id><published>2013-05-13T00:15:38.396-04:00</published><updated>2013-05-13T00:15:38.396-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That is a good question. I have often longed for a...</title><content type='html'>That is a good question. I have often longed for a good mailing list / newsgroup where C# experts could discuss things. I have not found one yet.&lt;br /&gt;&lt;br /&gt;So, I get most of my knowledge from following others&amp;#39; blogs. I have over 200 RSS feeds that I&amp;#39;m subscribed to.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/4033591759687143103'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/4033591759687143103'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html?showComment=1368418538396#c4033591759687143103' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2553235699605832081'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 13, 2013 at 12:15:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8929726697272303335</id><published>2013-05-13T04:28:33.374-04:00</published><updated>2013-05-13T04:28:33.374-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That made a lot of sense. Thank you! :)</title><content type='html'>That made a lot of sense. Thank you! :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/8929726697272303335'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/8929726697272303335'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html?showComment=1368433713374#c8929726697272303335' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1158385741537792764/comments/default/2778388118913938543'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/taskrun-vs-backgroundworker-round-1.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1158385741537792764' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1158385741537792764' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-246440195'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 13, 2013 at 4:28:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4371360655979019967</id><published>2013-05-13T09:03:51.438-04:00</published><updated>2013-05-13T09:03:51.438-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you, it is really helpful.</title><content type='html'>Thank you, it is really helpful.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4371360655979019967'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4371360655979019967'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1368450231438#c4371360655979019967' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6608179529061582958'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1940697226'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 13, 2013 at 9:03:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7241205348855362587</id><published>2013-05-13T11:07:47.710-04:00</published><updated>2013-05-13T11:07:47.710-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I am talking to a piece of test equipment which is...</title><content type='html'>I am talking to a piece of test equipment which is already using a message delimiter at the end of each message. So I can&amp;#39;t implement your message length solution (which I love and use often by the way).  Do you have an example of a message-delimiter solution?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7241205348855362587'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7241205348855362587'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1368457667710#c7241205348855362587' title=''/><author><name>Michael Mankus</name><uri>http://www.blogger.com/profile/00879337794584805047</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-jftyNqlIdX0/AAAAAAAAAAI/AAAAAAAAAD0/G-IchS0WlCo/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1637175909'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 13, 2013 at 11:07:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1281065501864441033</id><published>2013-05-13T14:12:30.149-04:00</published><updated>2013-05-13T14:12:30.149-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I do not have a message delimiter example.

I&amp;#39;...</title><content type='html'>I do not have a message delimiter example.&lt;br /&gt;&lt;br /&gt;I&amp;#39;d start off by partial-reading a large amount off the socket (the maximum message size, if there&amp;#39;s a maximum), splitting by the delimiter, and saving any leftovers for next time. If you don&amp;#39;t have a maximum message size, then you&amp;#39;ll also need to handle growing your buffer if necessary.&lt;br /&gt;&lt;br /&gt;In .NET, I find the string methods (Split, Substring) more useful than the binary methods (Array.Copy, etc), so if your protocol is something simple like ASCII (many delimiter-based protocols are), I&amp;#39;d start with a conversion to string and then do the message framing. But don&amp;#39;t do this if your protocol is any kind of Unicode (e.g., UTF-8 or UTF-16) or binary.&lt;br /&gt;&lt;br /&gt;If you do have tight timing constraints (e.g., you&amp;#39;re reading a continuous stream of messages), then you may find my ArraySegments library useful (it&amp;#39;s on NuGet). This makes it easier to minimize the amount of copying done (and memory garbage created).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/1281065501864441033'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/1281065501864441033'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1368468750149#c1281065501864441033' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/7241205348855362587'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 13, 2013 at 2:12:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4465139359987522534</id><published>2013-05-15T02:12:03.025-04:00</published><updated>2013-05-15T02:12:03.025-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Look forward to see (video)session!!!</title><content type='html'>Look forward to see (video)session!!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3190220040160900365/comments/default/4465139359987522534'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3190220040160900365/comments/default/4465139359987522534'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html?showComment=1368598323025#c4465139359987522534' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3190220040160900365' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3190220040160900365' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1935113219'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 15, 2013 at 2:12:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7341909332377678827</id><published>2013-05-15T09:30:30.988-04:00</published><updated>2013-05-15T09:30:30.988-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I don&amp;#39;t think ThatConference records their ses...</title><content type='html'>I don&amp;#39;t think ThatConference records their sessions; this is only their second year and they&amp;#39;re trying to keep conference costs down, so I doubt they&amp;#39;ll be recording.&lt;br /&gt;&lt;br /&gt;However, I will be bringing my cheap little camcorder with tripod and will try to record my talk at least. The quality will not be good, but at least it&amp;#39;s something...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3190220040160900365/comments/default/7341909332377678827'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3190220040160900365/comments/default/7341909332377678827'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html?showComment=1368624630988#c7341909332377678827' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3190220040160900365/comments/default/4465139359987522534'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3190220040160900365' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3190220040160900365' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 15, 2013 at 9:30:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-561899597194153283</id><published>2013-05-15T15:55:00.656-04:00</published><updated>2013-05-15T15:55:00.656-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Would be nice :-) Wish you all the best!!!

Thx in...</title><content type='html'>Would be nice :-) Wish you all the best!!!&lt;br /&gt;&lt;br /&gt;Thx in advance and greetings from Austria</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3190220040160900365/comments/default/561899597194153283'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3190220040160900365/comments/default/561899597194153283'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html?showComment=1368647700656#c561899597194153283' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/announcement-speaking-at-thatconference.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3190220040160900365' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3190220040160900365' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1319034568'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 15, 2013 at 3:55:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7771984062306304959</id><published>2013-05-17T13:32:49.961-04:00</published><updated>2013-05-17T13:32:49.961-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great job.

I hope one day you have time to create...</title><content type='html'>Great job.&lt;br /&gt;&lt;br /&gt;I hope one day you have time to create this addin, this would be very useful for many people.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/7771984062306304959'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/7771984062306304959'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1368811969961#c7771984062306304959' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1502559437'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 17, 2013 at 1:32:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6962952744991887509</id><published>2013-05-23T13:27:39.544-04:00</published><updated>2013-05-23T13:27:39.544-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks! It is very interesting topic. You wrote th...</title><content type='html'>Thanks! It is very interesting topic. You wrote that:&lt;br /&gt;&amp;quot;The simple way to do this is to just toss the work into Task.Run. Unfortunately, ASP.NET has no idea if you have queued work like this, and it will feel free to take down your AppDomain when it thinks it&amp;#39;s idle.&amp;quot;&lt;br /&gt;Beside power loss, hurricanes, etc - what other realistic reasons that AppDomain will be killed during the job?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6962952744991887509'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6962952744991887509'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1369330059544#c6962952744991887509' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1804814063'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, May 23, 2013 at 1:27:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-414562884873710030</id><published>2013-05-23T13:49:25.945-04:00</published><updated>2013-05-23T13:49:25.945-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Near the beginning of this post I have a link to T...</title><content type='html'>Near the beginning of this post I have a link to Tess&amp;#39; excellent blog where she describes a lot of the common causes. Also, by default ASP.NET will recycle every 29 hours for no reason at all.&lt;br /&gt;&lt;br /&gt;Note that these are all default behaviours. A lot of hosting providers will tighten up these a lot and even add other conditions (if your web site isn&amp;#39;t being hit for a day/hour/minute, then from their perspective they can save money and scale better by unloading your AppDomain).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/414562884873710030'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/414562884873710030'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1369331365945#c414562884873710030' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6962952744991887509'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, May 23, 2013 at 1:49:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3526657637681806573</id><published>2013-05-24T16:05:42.822-04:00</published><updated>2013-05-24T16:05:42.822-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This saved my day!! Thanks very much</title><content type='html'>This saved my day!! Thanks very much</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/3526657637681806573'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/3526657637681806573'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1369425942822#c3526657637681806573' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-818722333'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 24, 2013 at 4:05:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3279907274028825528</id><published>2013-06-06T05:57:40.668-04:00</published><updated>2013-06-06T05:57:40.668-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>When I read &amp;quot;PostSharp&amp;quot;, does that mean ...</title><content type='html'>When I read &amp;quot;PostSharp&amp;quot;, does that mean that you can&amp;#39;t use Edit &amp;amp; Continue anymore when debugging your assemblies?&lt;br /&gt;&lt;br /&gt;(I know that Edit &amp;amp; Continue is pretty much screwed in asynchonous calls anyway, but not all of our methods are async.)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6344569383679684686/comments/default/3279907274028825528'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6344569383679684686/comments/default/3279907274028825528'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-async-diagnostics.html?showComment=1370512660668#c3279907274028825528' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/announcement-async-diagnostics.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6344569383679684686' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6344569383679684686' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1250317806'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, June 6, 2013 at 5:57:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7671480604223809842</id><published>2013-06-06T14:06:20.526-04:00</published><updated>2013-06-06T14:06:20.526-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That&amp;#39;s correct. I never use Edit/Continue (I&amp;#...</title><content type='html'>That&amp;#39;s correct. I never use Edit/Continue (I&amp;#39;ve been using async on x64 for a long time now), so I didn&amp;#39;t even notice, but I did look it up and PostSharp is not compatible with Edit/Continue.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6344569383679684686/comments/default/7671480604223809842'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6344569383679684686/comments/default/7671480604223809842'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/05/announcement-async-diagnostics.html?showComment=1370541980526#c7671480604223809842' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6344569383679684686/comments/default/3279907274028825528'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/05/announcement-async-diagnostics.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6344569383679684686' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6344569383679684686' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, June 6, 2013 at 2:06:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2939554153501832696</id><published>2013-06-11T03:59:12.875-04:00</published><updated>2013-06-11T03:59:12.875-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>My thanks as well. This article and the example cl...</title><content type='html'>My thanks as well. This article and the example cleared my thoughts, and I believe I have finally grasped the issue.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2939554153501832696'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2939554153501832696'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1370937552875#c2939554153501832696' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-424547883'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, June 11, 2013 at 3:59:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2086179177994409875</id><published>2013-06-13T16:49:55.219-04:00</published><updated>2013-06-13T16:49:55.219-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is brilliant! Thank you so much!</title><content type='html'>This is brilliant! Thank you so much!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/2086179177994409875'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/2086179177994409875'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1371156595219#c2086179177994409875' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1066766431'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, June 13, 2013 at 4:49:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1165696960012862386</id><published>2013-06-19T14:43:03.732-04:00</published><updated>2013-06-19T14:43:03.732-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Could you post a 4.0 version of the code? The reas...</title><content type='html'>Could you post a 4.0 version of the code? The reason I am asking is because I am unable to reproduce a problematic behavior in 4.0. I have written a unit test, which creates multiple concurrent execution flows and all of them seem to propagate the call context correctly. My unit test can be found here - http://pastebin.com/tAgRfjrg&lt;br /&gt;I would like to know your opinion.&lt;br /&gt;Thank you.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/1165696960012862386'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/1165696960012862386'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1371667383732#c1165696960012862386' title=''/><author><name>markell</name><uri>http://www.blogger.com/profile/00249008025035595944</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1848170846'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, June 19, 2013 at 2:43:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3746275523980937034</id><published>2013-06-19T14:54:39.164-04:00</published><updated>2013-06-19T14:54:39.164-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There&amp;#39;s no such thing as a 4.0 version because...</title><content type='html'>There&amp;#39;s no such thing as a 4.0 version because LogicalCallContext doesn&amp;#39;t support async methods on that platform.&lt;br /&gt;&lt;br /&gt;The compiler will work just fine targeting .NET 4.0, and it will happen to work if you have .NET 4.5 installed, but it will behave differently (incorrectly) on machines with only .NET 4.0 and not .NET 4.5.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/3746275523980937034'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/3746275523980937034'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1371668079164#c3746275523980937034' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/1165696960012862386'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, June 19, 2013 at 2:54:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2955777428405613882</id><published>2013-06-20T18:46:30.518-04:00</published><updated>2013-06-20T18:46:30.518-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This was very helpful.  Every code example wrapped...</title><content type='html'>This was very helpful.  Every code example wrapped the HttpClient portion with Task.WhenAll or Task.Wait.  You explained the deadlock that I suspected.  Thank you.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/2955777428405613882'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/2955777428405613882'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1371768390518#c2955777428405613882' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1987287179'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, June 20, 2013 at 6:46:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8571844403018721687</id><published>2013-06-21T09:49:16.753-04:00</published><updated>2013-06-21T09:49:16.753-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m still unclear about how you know when you ...</title><content type='html'>I&amp;#39;m still unclear about how you know when you have unmanaged resources. If a class doesn&amp;#39;t implement IDisposable, you might need to implement IDisposable -- or you might have managed resources like String or List that don&amp;#39;t implement IDisposable but are managed nonetheless. So if you have one of these you&amp;#39;re not sure about, but which has no IDisposable implementation (like, say, Dictionary), how do you tell which situation applies and whether you need an IDisposable implementation (and/or a finalizer)?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/8571844403018721687'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/8571844403018721687'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371822556753#c8571844403018721687' title=''/><author><name>Unknown</name><uri>http://www.blogger.com/profile/15132731739795155482</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-933890722'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 9:49:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-596096906856837416</id><published>2013-06-21T09:53:32.687-04:00</published><updated>2013-06-21T09:53:32.687-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Also... if you want to do an RAII pattern like

  ...</title><content type='html'>Also... if you want to do an RAII pattern like&lt;br /&gt;&lt;br /&gt;    using(Foo foo = new Foo() {&lt;br /&gt;        [...]&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;VS2010&amp;#39;s compiler tells me your Foo class *must* be implicitly convertible to System.IDisposable and must therefore implement it, not so?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/596096906856837416'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/596096906856837416'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371822812687#c596096906856837416' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/8571844403018721687'/><author><name>Unknown</name><uri>http://www.blogger.com/profile/15132731739795155482</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-933890722'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 9:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4200658104680765338</id><published>2013-06-21T10:22:18.968-04:00</published><updated>2013-06-21T10:22:18.968-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>When I use the term &amp;quot;managed resources&amp;quot;,...</title><content type='html'>When I use the term &amp;quot;managed resources&amp;quot;, I mean &amp;quot;managed types that implement IDisposable&amp;quot;. So String/List/Dictionary are not managed resources. &amp;quot;Unmanaged resources&amp;quot; are types that represent resources outside of the .NET runtime; usually, this is just a single IntPtr, but it could be more complex (e.g., a pair of IntPtrs, or an IntPtr with an int).&lt;br /&gt;&lt;br /&gt;To support the literal meaning of &amp;quot;RAII&amp;quot; (resource acquisition is initialization), you just have to follow the IDisposable rules on this blog. If you want to use the RAII pattern to do something *else* (e.g., take some action during Dispose other than actually freeing resources), then you can use IDisposable. These blog posts only cover using IDisposable for resource disposal; you can use IDisposable for something else if you want, too.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/4200658104680765338'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/4200658104680765338'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371824538968#c4200658104680765338' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/8571844403018721687'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 10:22:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-652859972944997857</id><published>2013-06-21T12:38:13.473-04:00</published><updated>2013-06-21T12:38:52.762-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/652859972944997857'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/652859972944997857'/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/8571844403018721687'/><author><name>Unknown</name><uri>http://www.blogger.com/profile/15132731739795155482</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-933890722'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 12:38:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2217042623116153229</id><published>2013-06-21T12:39:42.299-04:00</published><updated>2013-06-21T12:39:42.299-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for clarifying. I still like to use &amp;quot;u...</title><content type='html'>Thanks for clarifying. I still like to use &amp;quot;using&amp;quot; wrappers as well wherever possible for objects that claim resources if I have any suspicion at all an uncaught exception might be thrown midway through or that the program might crash, since I can then be sure the resources will be released regardless. Are you saying that&amp;#39;s unnecessary as long as I follow these rules?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2217042623116153229'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2217042623116153229'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371832782299#c2217042623116153229' title=''/><author><name>Unknown</name><uri>http://www.blogger.com/profile/15132731739795155482</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-933890722'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 12:39:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7848509203188091676</id><published>2013-06-21T12:41:33.059-04:00</published><updated>2013-06-21T12:41:33.059-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Also... SqlConnection objects are managed and impl...</title><content type='html'>Also... SqlConnection objects are managed and implement IDisposable, but I can&amp;#39;t be sure the connections will close as part of the cleanup, if they happen to be left open when the program is aborted. What&amp;#39;s the best way to handle this scenario?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/7848509203188091676'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/7848509203188091676'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371832893059#c7848509203188091676' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2217042623116153229'/><author><name>Unknown</name><uri>http://www.blogger.com/profile/15132731739795155482</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-933890722'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 12:41:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7709768961893689702</id><published>2013-06-21T13:36:31.387-04:00</published><updated>2013-06-21T13:36:31.387-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If unmanaged resources are properly wrapped in a c...</title><content type='html'>If unmanaged resources are properly wrapped in a class with a finalizer (http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html), then all resources will be eventually released, even if you never use &amp;quot;using&amp;quot;. (However, I do recommend using &amp;quot;using&amp;quot; for every type that implements IDisposable, unless you know that it won&amp;#39;t have an effect).&lt;br /&gt;&lt;br /&gt;If you don&amp;#39;t have any resources (e.g., just String/List/Dictionary), then you don&amp;#39;t need to implement IDisposable at all. That&amp;#39;s the whole point of this blog post.&lt;br /&gt;&lt;br /&gt;Regarding DbConnection, it is true that this class (somewhat) violates the IDisposable contract. However, it shouldn&amp;#39;t affect you at all. So the best way to &amp;quot;handle&amp;quot; that scenario is to ignore it.&lt;br /&gt;&lt;br /&gt;Note that when a program crashes or is aborted, it does not need to do any cleanup at all. The OS will take care of that.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/7709768961893689702'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/7709768961893689702'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371836191387#c7709768961893689702' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2217042623116153229'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 1:36:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6000970602680504320</id><published>2013-06-21T14:55:24.898-04:00</published><updated>2013-06-21T14:55:24.898-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>How do you tell when resources are involved in the...</title><content type='html'>How do you tell when resources are involved in the class you&amp;#39;re working with?&lt;br /&gt;&lt;br /&gt;Is it fair to say they all involve access of a device of some kind (a network socket, file descriptor, ADO connection, etc.)? Or is there a more reliable guide rule?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/6000970602680504320'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/6000970602680504320'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371840924898#c6000970602680504320' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2217042623116153229'/><author><name>Unknown</name><uri>http://www.blogger.com/profile/15132731739795155482</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-933890722'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 2:55:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3716735989482500970</id><published>2013-06-21T15:50:43.333-04:00</published><updated>2013-06-21T15:50:43.333-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you own unmanaged resources, you&amp;#39;ll know it...</title><content type='html'>If you own unmanaged resources, you&amp;#39;ll know it because you&amp;#39;ll be doing P/Invoke to manipulate those resources.&lt;br /&gt;&lt;br /&gt;If you own managed resources, you&amp;#39;ll know it because the type will implement IDisposable.&lt;br /&gt;&lt;br /&gt;Perhaps you could read this again: http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html - every question you&amp;#39;ve asked (except SqlConnection) I&amp;#39;ve already answered in my posts. If you really want all the details you can also check out http://blog.stephencleary.com/search/label/IDisposable%2FFinalizers</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/3716735989482500970'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/3716735989482500970'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1371844243333#c3716735989482500970' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/2217042623116153229'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, June 21, 2013 at 3:50:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5369977801872617020</id><published>2013-06-23T23:11:40.403-04:00</published><updated>2013-06-23T23:11:40.403-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You are right!

I should have read this article es...</title><content type='html'>You are right!&lt;br /&gt;&lt;br /&gt;I should have read this article esp. &amp;quot;Reading Zero Bytes&amp;quot; part!! I took so much time to figure it out by myself.&lt;br /&gt; &lt;br /&gt;MSDN had no examples over zero bytes case, and i found out just take it as exception, infinity loop won&amp;#39;t be happened again :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/5369977801872617020'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7634204289692406306/comments/default/5369977801872617020'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html?showComment=1372043500403#c5369977801872617020' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/using-socket-as-connected-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7634204289692406306' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7634204289692406306' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-877031649'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, June 23, 2013 at 11:11:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1630548342509695185</id><published>2013-06-25T16:01:22.771-04:00</published><updated>2013-06-25T16:01:22.771-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for this review, it helped to clear out som...</title><content type='html'>Thanks for this review, it helped to clear out some confusions for me. That == vs GetHashCode() got me a bit confused when I was reading that book, since it contradicted what I knew from before and what seamed logical. Most of the times you don&amp;#39;t even define == when you override Equals and GetHashCode for a class, so the == requirement din&amp;#39;t make much sence. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5661428354819018336/comments/default/1630548342509695185'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5661428354819018336/comments/default/1630548342509695185'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/review-of-bill-wagners-effective-c-2nd.html?showComment=1372190482771#c1630548342509695185' title=''/><author><name>Anders G</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/review-of-bill-wagners-effective-c-2nd.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5661428354819018336' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5661428354819018336' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-462814473'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, June 25, 2013 at 4:01:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5977972083528552459</id><published>2013-07-02T18:56:38.243-04:00</published><updated>2013-07-02T18:56:38.243-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>why not just return Task.Factory.StartNew(() =&amp;gt;...</title><content type='html'>why not just return Task.Factory.StartNew(() =&amp;gt; numerator / denominator) instead of awaiting on the task. is that for materializing the exception and wrapping it as a fault exception?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/5977972083528552459'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/5977972083528552459'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1372805798243#c5977972083528552459' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-732298822'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, July 2, 2013 at 6:56:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3696785706321640990</id><published>2013-07-02T21:39:32.628-04:00</published><updated>2013-07-02T21:39:32.628-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes. Real-world code would probably not use StartN...</title><content type='html'>Yes. Real-world code would probably not use StartNew or Run at all in a WCF server. It would deal with tasks that represent I/O operations.&lt;br /&gt;&lt;br /&gt;I find it easier to deal with the exception translation at the WCF boundary, and have the &amp;quot;real logic&amp;quot; in other classes. In this blog post, the &amp;quot;StartNew&amp;quot; represents that &amp;quot;real logic&amp;quot;.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/3696785706321640990'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/3696785706321640990'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1372815572628#c3696785706321640990' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/5977972083528552459'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, July 2, 2013 at 9:39:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8521303211755350889</id><published>2013-07-04T05:28:23.613-04:00</published><updated>2013-07-04T05:28:23.613-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks!  A couple of stray &amp;quot;span&amp;quot; tags i...</title><content type='html'>Thanks!  A couple of stray &amp;quot;span&amp;quot; tags in the code.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/8521303211755350889'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/8521303211755350889'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html?showComment=1372930103613#c8521303211755350889' title=''/><author><name>Robert</name><uri>http://www.blogger.com/profile/05976305300895266292</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5019631101409390674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5019631101409390674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1592177152'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, July 4, 2013 at 5:28:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7756549589475852060</id><published>2013-07-05T15:11:32.827-04:00</published><updated>2013-07-05T15:11:32.827-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

Very interesting article, thanks!

Ho...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;Very interesting article, thanks!&lt;br /&gt;&lt;br /&gt;However I&amp;#39;m not really convinced by the &amp;quot;Complete method/Completion property&amp;quot; approach, because it lacks an important feature of the IDisposable pattern: &amp;quot;using&amp;quot; blocks. Disposable objects should always be disposed when they reach the end of their scope, even if an error occurred, and the using statement is the easiest way to achieve this. But the Completion property needs to be awaited, and await cannot be used in a finally clause, so there&amp;#39;s no easy way to ensure that disposal is complete before an exception bubbles up.&lt;br /&gt;&lt;br /&gt;I came up with a pattern that mimics the using statement, allowing for async disposal, you can find it &lt;a href="https://gist.github.com/thomaslevesque/5936421" rel="nofollow"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;(of course, 5 minutes later I found that &lt;a href="http://softwareblog.alcedo.com/post/2011/12/09/Using-blocks-and-asynchronous-operations.aspx" rel="nofollow"&gt;someone else had almost the same idea&lt;/a&gt; long before me, but not using async/await since they didn&amp;#39;t exist yet...)&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/389438791210640740/comments/default/7756549589475852060'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/389438791210640740/comments/default/7756549589475852060'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/03/async-oop-6-disposal.html?showComment=1373051492827#c7756549589475852060' title=''/><author><name>Thomas Levesque</name><uri>http://www.blogger.com/profile/17821784613704879657</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/03/async-oop-6-disposal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-389438791210640740' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/389438791210640740' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1775978352'/><gd:extendedProperty name='blogger.displayTime' value='Friday, July 5, 2013 at 3:11:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4669410974038464644</id><published>2013-07-06T10:26:55.536-04:00</published><updated>2013-07-06T10:26:55.536-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great article. Thanks. </title><content type='html'>Great article. Thanks. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4669410974038464644'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4669410974038464644'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1373120815536#c4669410974038464644' title=''/><author><name>ByteBlast</name><uri>http://www.blogger.com/profile/01103643419505369391</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1274704952'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, July 6, 2013 at 10:26:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1957136210498633568</id><published>2013-07-17T11:11:26.962-04:00</published><updated>2013-07-17T11:11:26.962-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;ThreadCompletionSource is thread-safe&amp;quot;
...</title><content type='html'>&amp;quot;ThreadCompletionSource is thread-safe&amp;quot;&lt;br /&gt;&lt;br /&gt;I think you meant:&lt;br /&gt;&lt;br /&gt;&amp;quot;TaskCompletionSource is thread-safe&amp;quot;&lt;br /&gt;&lt;br /&gt;right?&lt;br /&gt;&lt;br /&gt;Great post though!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1930900922329960620/comments/default/1957136210498633568'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1930900922329960620/comments/default/1957136210498633568'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/creating-tasks.html?showComment=1374073886962#c1957136210498633568' title=''/><author><name>Robert Lee</name><uri>http://www.blogger.com/profile/14886706451628525566</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/creating-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1930900922329960620' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1930900922329960620' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-468195186'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, July 17, 2013 at 11:11:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6466704637086692751</id><published>2013-07-17T11:25:17.695-04:00</published><updated>2013-07-17T11:25:17.695-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, that is what I meant. Fixed, and thank you!</title><content type='html'>Yes, that is what I meant. Fixed, and thank you!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1930900922329960620/comments/default/6466704637086692751'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1930900922329960620/comments/default/6466704637086692751'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/creating-tasks.html?showComment=1374074717695#c6466704637086692751' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1930900922329960620/comments/default/1957136210498633568'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/creating-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1930900922329960620' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1930900922329960620' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, July 17, 2013 at 11:25:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4564040575662666816</id><published>2013-07-18T06:14:49.782-04:00</published><updated>2013-07-18T06:14:49.782-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This seems to be the only page on the web where al...</title><content type='html'>This seems to be the only page on the web where all the PCL Profiles are actually enumerated! Nice work.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6740069892417218537/comments/default/4564040575662666816'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6740069892417218537/comments/default/4564040575662666816'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/05/framework-profiles-in-net.html?showComment=1374142489782#c4564040575662666816' title=''/><author><name>Rupert</name><uri>http://www.blogger.com/profile/07338870148803242763</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='31' height='19' src='http://www.rawnsley.info/public/MODERNT.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/05/framework-profiles-in-net.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6740069892417218537' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6740069892417218537' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-608693673'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, July 18, 2013 at 6:14:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-235921980210549969</id><published>2013-07-24T04:22:22.811-04:00</published><updated>2013-07-24T04:22:22.811-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excellent article. One of the best in internet whi...</title><content type='html'>Excellent article. One of the best in internet which explains the purpose of async and await keywords!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/235921980210549969'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/235921980210549969'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1374654142811#c235921980210549969' title=''/><author><name>Ruchira</name><uri>http://ruchirac.blogspot.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-708107877'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, July 24, 2013 at 4:22:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7927671632936936628</id><published>2013-07-25T05:25:15.126-04:00</published><updated>2013-07-25T05:25:15.126-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The ConfigureAwait(false) saved my bacon!  Tacked ...</title><content type='html'>The ConfigureAwait(false) saved my bacon!  Tacked it onto the end of GetAsync() and 3 or 4 hours of painful struggle magically disappeared.  Cheers!  Richard Hammond</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7927671632936936628'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7927671632936936628'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1374744315126#c7927671632936936628' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-498121315'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, July 25, 2013 at 5:25:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2534745581593829609</id><published>2013-07-30T03:59:58.178-04:00</published><updated>2013-07-30T03:59:58.178-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

This is the kind of explanation I had...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;This is the kind of explanation I had been looking for. But still, I can&amp;#39;t figure out how to get things geared up. Please take a look at my simple code (VB.NET)&lt;br /&gt;&lt;br /&gt;Public Class Form1&lt;br /&gt;&lt;br /&gt;    Private Async Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click&lt;br /&gt;        TextBox1.Text += vbCrLf + &amp;quot;No connection yet&amp;quot;&lt;br /&gt;        TextBox1.Text += vbCrLf + Await DoAsync()&lt;br /&gt;        TextBox1.Text += vbCrLf + &amp;quot;Done&amp;quot;&lt;br /&gt;    End Sub&lt;br /&gt;&lt;br /&gt;    Private Async Function DoAsync() As Task(Of String)&lt;br /&gt;        Return Await DoJobAsync()&lt;br /&gt;    End Function&lt;br /&gt;&lt;br /&gt;    Private Async Function DoJobAsync() As Task(Of String)&lt;br /&gt;        Threading.Thread.Sleep(2000)&lt;br /&gt;        Return &amp;quot;Connection made&amp;quot;&lt;br /&gt;    End Function&lt;br /&gt;&lt;br /&gt;End Class&lt;br /&gt;&lt;br /&gt;This works allright, but on the UI everything waits for 2 seconds. When I use a bigger amount of milliseconds, then everything waits that much longer. That is not the behaviour I would expect from asynchronism. But where do I miss the point?&lt;br /&gt;&lt;br /&gt;Hope to hear from you!&lt;br /&gt;Best regards,&lt;br /&gt;Peter</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/2534745581593829609'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/2534745581593829609'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1375171198178#c2534745581593829609' title=''/><author><name>Peter Klein</name><uri>http://www.blogger.com/profile/16736940424719033643</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2033239989'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, July 30, 2013 at 3:59:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2474572866172409210</id><published>2013-07-30T09:23:10.263-04:00</published><updated>2013-07-30T09:23:10.263-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Don&amp;#39;t ignore the compiler warnings. In this ca...</title><content type='html'>Don&amp;#39;t ignore the compiler warnings. In this case, the compiler notifies you that DoJobAsync does not contain any await statements and will therefore run synchronously.&lt;br /&gt;&lt;br /&gt;As I said in this blog post, when an async method starts, it runs synchronously until it hits its first await. Since there is no await in DoJobAsync, then the entire method runs synchronously.&lt;br /&gt;&lt;br /&gt;The problem is in Thread.Sleep, which blocks the current (UI) thread. You want to avoid long blocking like this in async code. To fix this, you can replace Thread.Sleep with Await Task.Delay, which will asynchronously wait for the specified amount of time.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/2474572866172409210'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/2474572866172409210'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1375190590263#c2474572866172409210' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/2534745581593829609'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, July 30, 2013 at 9:23:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-340982164068865816</id><published>2013-08-01T19:11:11.392-04:00</published><updated>2013-08-01T19:11:11.392-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I remember when I started socket programming, the ...</title><content type='html'>I remember when I started socket programming, the official Microsoft API documentation was only available in a Word document, which was weird. Beej had an excellent guide that got me through it even if it was geared towards Linux:&lt;br /&gt;http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/340982164068865816'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2837182939644513866/comments/default/340982164068865816'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/tcpip-resources.html?showComment=1375398671392#c340982164068865816' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/tcpip-resources.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2837182939644513866' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2837182939644513866' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1956563676'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 1, 2013 at 7:11:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-730860188811777672</id><published>2013-08-04T03:34:26.003-04:00</published><updated>2013-08-04T03:34:26.003-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks a lot! You really have a talent to explain ...</title><content type='html'>Thanks a lot! You really have a talent to explain difficult topics in an easy-to-understand manner.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/730860188811777672'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/730860188811777672'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1375601666003#c730860188811777672' title=''/><author><name>marin.ru</name><uri>http://www.blogger.com/profile/15218065101069685358</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_Pccx4XFrvxs/S1MPPMYL18I/AAAAAAAAAHg/RDeiQp9zLQc/S220/rum.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-465180670'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, August 4, 2013 at 3:34:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7337741771282112697</id><published>2013-08-12T06:17:48.844-04:00</published><updated>2013-08-12T06:17:48.844-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>hi cleary this is suresh 

Windowservice
---------...</title><content type='html'>hi cleary this is suresh &lt;br /&gt;&lt;br /&gt;Windowservice&lt;br /&gt;-----------------------&lt;br /&gt;&lt;br /&gt; private System.Timers.Timer timer;&lt;br /&gt;        protected override void OnStart(string[] args)&lt;br /&gt;        {&lt;br /&gt;            this.timer = new System.Timers.Timer(20000);  // 30000 milliseconds = 30 seconds&lt;br /&gt;            this.timer.AutoReset = true;&lt;br /&gt;            this.timer.Elapsed += new System.Timers.ElapsedEventHandler(this.timer_Elapsed);&lt;br /&gt;            this.timer.Start();&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        private void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)&lt;br /&gt;        {&lt;br /&gt;            EventLog log = new EventLog();&lt;br /&gt;            log.Source = &amp;quot;suresh&amp;quot;;&lt;br /&gt;            string pathvalue = Pathing.GetUNCPath(Clipboard.GetText());&lt;br /&gt;            if (pathvalue != &amp;quot;&amp;quot;)&lt;br /&gt;            {&lt;br /&gt;                log.WriteEntry(pathvalue);&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;   public static class Pathing&lt;br /&gt;    {&lt;br /&gt;        [DllImport(&amp;quot;mpr.dll&amp;quot;, CharSet = CharSet.Unicode, SetLastError = true)]&lt;br /&gt;        public static extern int WNetGetConnection(&lt;br /&gt;            [MarshalAs(UnmanagedType.LPTStr)] string localName,&lt;br /&gt;            [MarshalAs(UnmanagedType.LPTStr)] StringBuilder remoteName,&lt;br /&gt;            ref int length);&lt;br /&gt;        public static string GetUNCPath(string originalPath)&lt;br /&gt;        {&lt;br /&gt;            StringBuilder sb = new StringBuilder(512);&lt;br /&gt;            int size = sb.Capacity;&lt;br /&gt;            if (originalPath.Length &amp;gt; 2 &amp;amp;&amp;amp; originalPath[1] == &amp;#39;:&amp;#39;)&lt;br /&gt;            {&lt;br /&gt;                char c = originalPath[0];&lt;br /&gt;                if ((c &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;z&amp;#39;) || (c &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;Z&amp;#39;))&lt;br /&gt;                {&lt;br /&gt;                    int error = WNetGetConnection(originalPath.Substring(0, 2),&lt;br /&gt;                        sb, ref size);&lt;br /&gt;                    if (error == 0)&lt;br /&gt;                    {&lt;br /&gt;                        DirectoryInfo dir = new DirectoryInfo(originalPath);&lt;br /&gt;&lt;br /&gt;                        string path = Path.GetFullPath(originalPath)&lt;br /&gt;                            .Substring(Path.GetPathRoot(originalPath).Length);&lt;br /&gt;                        return Path.Combine(sb.ToString().TrimEnd(), path);&lt;br /&gt;                    }&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            return originalPath;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;Please tel me any wrang in code</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3578009884916216599/comments/default/7337741771282112697'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3578009884916216599/comments/default/7337741771282112697'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/windows-services-and-network.html?showComment=1376302668844#c7337741771282112697' title=''/><author><name>Suresh Babu</name><uri>http://www.blogger.com/profile/09633822600873953251</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/10/windows-services-and-network.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3578009884916216599' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3578009884916216599' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1881321517'/><gd:extendedProperty name='blogger.displayTime' value='Monday, August 12, 2013 at 6:17:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4794276853347305897</id><published>2013-08-13T02:06:10.651-04:00</published><updated>2013-08-13T02:06:10.651-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the great presentation / clear explanat...</title><content type='html'>Thanks for the great presentation / clear explanation of the topic.&lt;br /&gt;  - Daniel Engelman</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/4794276853347305897'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/4794276853347305897'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html?showComment=1376373970651#c4794276853347305897' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1614444551356512575' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-441385028'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, August 13, 2013 at 2:06:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3959028328992627479</id><published>2013-08-13T22:06:01.320-04:00</published><updated>2013-08-13T22:06:01.320-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>As I explain in this blog post, Win32 services are...</title><content type='html'>As I explain in this blog post, Win32 services are not supposed to use network connections. They can use UNC paths, but you have to do that kind of translation in an application running in the user&amp;#39;s desktop. If you have a tray or background application translate the network drive to a UNC path, then it can pass the UNC path to the Win32 service. But the service itself cannot do that translation.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3578009884916216599/comments/default/3959028328992627479'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3578009884916216599/comments/default/3959028328992627479'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/windows-services-and-network.html?showComment=1376445961320#c3959028328992627479' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3578009884916216599/comments/default/7337741771282112697'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/10/windows-services-and-network.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3578009884916216599' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3578009884916216599' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, August 13, 2013 at 10:06:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2373099873795756571</id><published>2013-08-22T01:20:24.594-04:00</published><updated>2013-08-22T01:20:24.594-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The link to the slides appears to be down - tks.</title><content type='html'>The link to the slides appears to be down - tks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/2373099873795756571'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/2373099873795756571'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html?showComment=1377148824594#c2373099873795756571' title=''/><author><name>Noseratio</name><uri>http://stackoverflow.com/users/1768303/noseratio</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1614444551356512575' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-89876765'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 22, 2013 at 1:20:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7935962374288867694</id><published>2013-08-22T03:46:01.220-04:00</published><updated>2013-08-22T03:46:01.220-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello, 

First of all, thank you very much for you...</title><content type='html'>Hello, &lt;br /&gt;&lt;br /&gt;First of all, thank you very much for your post. It saved me a very long investigation, I believe.&lt;br /&gt;&lt;br /&gt;I just have on small question. What does it mean, for the asynchronous call, to not collect the synchronization context? &lt;br /&gt;&lt;br /&gt;In my case, I&amp;#39;m in the opposite situation. I got an In-Memory WebAPI server, which I call from a long stack of non-async methods, which in turns is called by MVC (don&amp;#39;t ask me why a MVC server would send a request to an In-Memory WebAPI server, I feel we would drift away ;) ). The non-async method waits for the response of the call to the SendRequestAsync of the in-memory server, and in a MVC context, it&amp;#39;s the deadlock.&lt;br /&gt;&lt;br /&gt;Therefore, I either have to change all that stack to make it async (and I don&amp;#39;t even know if that&amp;#39;s possible), or to simply drop the synchronization context capture from the In-Memory WebAPI server, using Configure Await.&lt;br /&gt;&lt;br /&gt;I assume there are some data that would not be available anymore? What&amp;#39;s the con, what would I loose?&lt;br /&gt;&lt;br /&gt;Thanks a lot.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7935962374288867694'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7935962374288867694'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1377157561220#c7935962374288867694' title=''/><author><name>Edouard Paumier</name><uri>http://www.blogger.com/profile/04306692752169881908</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-fLJG-bUh05k/AAAAAAAAAAI/AAAAAAAAADU/AM2oTQbNt_s/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-150187206'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 22, 2013 at 3:46:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8336816523876942882</id><published>2013-08-22T10:59:53.833-04:00</published><updated>2013-08-22T10:59:53.833-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It is working for me. The link will take you to a ...</title><content type='html'>It is working for me. The link will take you to a download page with a big blank &amp;quot;preview&amp;quot; (the download site doesn&amp;#39;t understand PPX files) - there&amp;#39;s a small &amp;quot;download&amp;quot; link in the middle of the blank preview.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/8336816523876942882'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/8336816523876942882'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html?showComment=1377183593833#c8336816523876942882' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/2373099873795756571'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1614444551356512575' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 22, 2013 at 10:59:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9076341520461246262</id><published>2013-08-22T11:48:32.967-04:00</published><updated>2013-08-22T11:48:32.967-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Works now, might have been a gg.tt issue. Great st...</title><content type='html'>Works now, might have been a gg.tt issue. Great stuff, thanks for sharing!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/9076341520461246262'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/9076341520461246262'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html?showComment=1377186512967#c9076341520461246262' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/2373099873795756571'/><author><name>Noseratio</name><uri>http://stackoverflow.com/users/1768303/noseratio</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1614444551356512575' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-89876765'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 22, 2013 at 11:48:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5086420949944989627</id><published>2013-08-22T16:59:07.049-04:00</published><updated>2013-08-22T16:59:07.049-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I assume you mean WCF instead of MVC. It sounds li...</title><content type='html'>I assume you mean WCF instead of MVC. It sounds like the root host is still ASP.NET (i.e., your WCF is hosted within ASP.NET).&lt;br /&gt;&lt;br /&gt;You can look at your current context by doing a &amp;quot;Debug.WriteLine(SynchronizationContext.Current.GetType().Name)&amp;quot;.&lt;br /&gt;&lt;br /&gt;To solve the problem, it&amp;#39;s best to actually make everything async (WCF in 4.5 does have built-in support for asynchronous implementations, and if you make your server async it won&amp;#39;t affect your clients at all). If you can&amp;#39;t do that, then you can put in a workaround such as ConfigureAwait. Stephen Toub describes several options here: http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx&lt;br /&gt;&lt;br /&gt;The disadvantage to ConfigureAwait is that you lose your request context after the first await. So you can&amp;#39;t access anything on the HttpContext, or depend on things like culture being set appropriately.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/5086420949944989627'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/5086420949944989627'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1377205147049#c5086420949944989627' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7935962374288867694'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 22, 2013 at 4:59:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5408001992782455180</id><published>2013-08-27T18:10:16.454-04:00</published><updated>2013-08-27T18:10:16.454-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would appreciate a suggestion on how to implemen...</title><content type='html'>I would appreciate a suggestion on how to implement efficiently the following scenario.&lt;br /&gt;&lt;br /&gt;- One producer prepares request messages which are submitted to a &amp;quot;component&amp;quot; which consumes them and replies back with another message (a future)&lt;br /&gt;- each message can be processed by a consumer in maximum 30 seconds  &lt;br /&gt;- the &amp;quot;component&amp;quot; which consumes messages cannot process more than x request messages at a time&lt;br /&gt;- if the &amp;quot;component&amp;quot; is completely busy, a producer should wait for an amount of time to be accepted for issuing another request message. If the timeout expires, the request message is dropped (as cancelled) and another request message can be processed.&lt;br /&gt;- the producer should be able to await the result for each individual message if he wishes. Practically, for each request message a &amp;quot;future&amp;quot; response should be generated which can be awaited if the producer wants.&lt;br /&gt;&lt;br /&gt;It seems like a good fit for the subject of your post but I am not sure about which async/await constructs I need.&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/5408001992782455180'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/5408001992782455180'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html?showComment=1377641416454#c5408001992782455180' title=''/><author><name>Robert</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-5147055'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, August 27, 2013 at 6:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6226230572224061740</id><published>2013-08-29T12:08:00.627-04:00</published><updated>2013-08-29T12:08:00.627-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You may not need TPL Dataflow for this.

First, yo...</title><content type='html'>You may not need TPL Dataflow for this.&lt;br /&gt;&lt;br /&gt;First, you&amp;#39;ll need to add a TaskCompletionSource to your &amp;quot;message&amp;quot; type. This will act as an indicator that the message processing is complete.&lt;br /&gt;&lt;br /&gt;Next, you&amp;#39;ll need to handle the throttling. If you&amp;#39;re using TPL Dataflow, you can just set BoundedCapacity; otherwise, you can use SemaphoreSlim.&lt;br /&gt;&lt;br /&gt;To implement the timeouts, use CancellationTokens when you send the message. For TPL Dataflow, you would pass the token to SendAsync; otherwise, pass the token to SemaphoreSlim.WaitAsync.&lt;br /&gt;&lt;br /&gt;Blog comments are not great for sample code. If any of this is not clear, post a question on Stack Overflow and I (and others) will take a look.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/6226230572224061740'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/6226230572224061740'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html?showComment=1377792480627#c6226230572224061740' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/5408001992782455180'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 29, 2013 at 12:08:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4485844844878760035</id><published>2013-08-29T15:15:24.358-04:00</published><updated>2013-08-29T15:15:24.358-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I am currently developing on VS 2010/.Net 4, which...</title><content type='html'>I am currently developing on VS 2010/.Net 4, which is not async capable. &lt;br /&gt;&lt;br /&gt;Your explanation of &amp;quot;confusing default scheduler&amp;quot; explained some things for me that I ran into a while back. Thanks for sharing that.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8443136385993799052/comments/default/4485844844878760035'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8443136385993799052/comments/default/4485844844878760035'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html?showComment=1377803724358#c4485844844878760035' title=''/><author><name>Alvin</name><uri>http://www.blogger.com/profile/03892201689252059476</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8443136385993799052' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8443136385993799052' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1305096067'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, August 29, 2013 at 3:15:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6917950356732738037</id><published>2013-09-05T15:14:38.573-04:00</published><updated>2013-09-05T15:14:38.573-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nice explanation of the backlog parameter. I would...</title><content type='html'>Nice explanation of the backlog parameter. I would not have known about the int.MaxValue trick for server class systems.&lt;br /&gt;&lt;br /&gt;-Brian Gideon</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/6917950356732738037'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/6917950356732738037'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1378408478573#c6917950356732738037' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-820281866'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, September 5, 2013 at 3:14:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6124272663520127107</id><published>2013-09-09T17:08:41.563-04:00</published><updated>2013-09-09T17:08:41.563-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hello Stephen, I ran across your blog while attemp...</title><content type='html'>Hello Stephen, I ran across your blog while attempting to find a way to marshal a double array of chars. My problem is that the double array is not in a structure, it is a param in the call.  Would you happen to have any pointers for handling a double array in this  situation?  The C function call is &lt;br /&gt;   uint queryNumOfServers(USHORT *NumOfServers, char ServerNames[8][16]); &lt;br /&gt;and I&amp;#39;m working in C#.&lt;br /&gt;Thank you for your help.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1098449644560179392/comments/default/6124272663520127107'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1098449644560179392/comments/default/6124272663520127107'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html?showComment=1378760921563#c6124272663520127107' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/02/interop-multidimensional-arrays-of.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1098449644560179392' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1098449644560179392' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-225386676'/><gd:extendedProperty name='blogger.displayTime' value='Monday, September 9, 2013 at 5:08:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3241921087547510199</id><published>2013-09-12T13:10:44.563-04:00</published><updated>2013-09-12T13:10:44.563-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Any particular reason why you chose not to pass th...</title><content type='html'>Any particular reason why you chose not to pass the cancellation token also as a parameter to Task.Run()?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5145229067457449312/comments/default/3241921087547510199'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5145229067457449312/comments/default/3241921087547510199'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html?showComment=1379005844563#c3241921087547510199' title=''/><author><name>svick</name><uri>http://www.blogger.com/profile/17579249405158039163</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5145229067457449312' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5145229067457449312' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-830071467'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, September 12, 2013 at 1:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8030013528765086200</id><published>2013-09-13T04:57:03.005-04:00</published><updated>2013-09-13T04:57:03.005-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m not sure cancellation as an exception is a...</title><content type='html'>I&amp;#39;m not sure cancellation as an exception is a good thing. There are valid reasons why you may want to cancel a task, and therefore wouldn&amp;#39;t want an exception thrown. In fact the more I think about it the worse that sounds.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5145229067457449312/comments/default/8030013528765086200'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5145229067457449312/comments/default/8030013528765086200'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html?showComment=1379062623005#c8030013528765086200' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5145229067457449312' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5145229067457449312' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1904778153'/><gd:extendedProperty name='blogger.displayTime' value='Friday, September 13, 2013 at 4:57:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-408295050317894734</id><published>2013-09-13T08:52:25.238-04:00</published><updated>2013-09-13T08:52:25.238-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You are the best</title><content type='html'>You are the best</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/408295050317894734'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/408295050317894734'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1379076745238#c408295050317894734' title=''/><author><name>Leonel Frangoulis dos Anjos</name><uri>http://www.blogger.com/profile/09697675097842120835</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1617546688'/><gd:extendedProperty name='blogger.displayTime' value='Friday, September 13, 2013 at 8:52:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1859823824651440498</id><published>2013-09-13T11:47:02.062-04:00</published><updated>2013-09-13T11:47:02.062-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>nice! thanks</title><content type='html'>nice! thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3451978703748027956/comments/default/1859823824651440498'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3451978703748027956/comments/default/1859823824651440498'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/07/taskrun-vs-backgroundworker-round-2.html?showComment=1379087222062#c1859823824651440498' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/07/taskrun-vs-backgroundworker-round-2.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3451978703748027956' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3451978703748027956' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1687788836'/><gd:extendedProperty name='blogger.displayTime' value='Friday, September 13, 2013 at 11:47:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6911385829313884945</id><published>2013-09-19T07:36:30.583-04:00</published><updated>2013-09-24T04:59:34.116-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1768327649962323794/comments/default/6911385829313884945'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1768327649962323794/comments/default/6911385829313884945'/><author><name>Şafak Gür</name><uri>http://www.blogger.com/profile/16349086481614398347</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2011/01/simple-and-easy-code-contracts.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1768327649962323794' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1768327649962323794' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-1554694089'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, September 19, 2013 at 7:36:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-442472673461729823</id><published>2013-09-24T03:52:00.910-04:00</published><updated>2013-09-24T03:52:00.910-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, Stephen!
Nice presentation. What&amp;#39;s this th...</title><content type='html'>Hi, Stephen!&lt;br /&gt;Nice presentation. What&amp;#39;s this thing about Concurrency in C# Cookbook? I haven&amp;#39;t seen any references to it anywhere... Is going to happen?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/442472673461729823'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/442472673461729823'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html?showComment=1380009120910#c442472673461729823' title=''/><author><name>Ricardo</name><uri>http://www.blogger.com/profile/09666059001004988854</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1614444551356512575' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-812675284'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, September 24, 2013 at 3:52:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3389729946266726256</id><published>2013-09-24T07:32:40.872-04:00</published><updated>2013-09-24T07:32:40.872-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Found it: http://www.amazon.com/Concurrency-C-Cook...</title><content type='html'>Found it: http://www.amazon.com/Concurrency-C-Cookbook-Stephen-Cleary/dp/1449367569/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1380022293&amp;amp;sr=1-1</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/3389729946266726256'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1614444551356512575/comments/default/3389729946266726256'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html?showComment=1380022360872#c3389729946266726256' title=''/><author><name>Ricardo</name><uri>http://www.blogger.com/profile/09666059001004988854</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/slides-available-thatconference-2013.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1614444551356512575' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1614444551356512575' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-812675284'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, September 24, 2013 at 7:32:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2915209311498397047</id><published>2013-10-02T17:47:32.916-04:00</published><updated>2013-10-02T17:47:32.916-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Really StartNew is dangerous. Thank you stephen :)...</title><content type='html'>Really StartNew is dangerous. Thank you stephen :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8443136385993799052/comments/default/2915209311498397047'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8443136385993799052/comments/default/2915209311498397047'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html?showComment=1380750452916#c2915209311498397047' title=''/><author><name>Sriram Sakthivel</name><uri>http://www.blogger.com/profile/14791805082342292214</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/08/startnew-is-dangerous.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8443136385993799052' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8443136385993799052' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-338291935'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 2, 2013 at 5:47:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4931373419047145695</id><published>2013-10-02T20:59:06.112-04:00</published><updated>2013-10-02T20:59:06.112-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excellent post Stephen.
To clarify your point rega...</title><content type='html'>Excellent post Stephen.&lt;br /&gt;To clarify your point regarding mutable objects and Fork/Join operations... at this point we are simply talking about standard multi-threading concerns; eg: multiple threads writing to the same location; right?&lt;br /&gt;Or is there something Task/Context specific that I am missing?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/4931373419047145695'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/4931373419047145695'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1380761946112#c4931373419047145695' title=''/><author><name>Gav</name><uri>http://twitter.com/gavinosborn</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-947510069'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 2, 2013 at 8:59:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6211883266167907076</id><published>2013-10-02T23:52:39.559-04:00</published><updated>2013-10-02T23:52:39.559-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No; this actually happens even in single-threaded ...</title><content type='html'>No; this actually happens even in single-threaded situations. Async allows you to do a fork/join (e.g., Task.WhenAll) on a single thread - what I call &amp;quot;single-threaded concurrency.&amp;quot; In this case the mutable objects will not behave properly because they&amp;#39;re shared between the logical call stacks of the various concurrent methods.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/6211883266167907076'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/6211883266167907076'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1380772359559#c6211883266167907076' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/4931373419047145695'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 2, 2013 at 11:52:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5774407444297513760</id><published>2013-10-03T10:36:27.668-04:00</published><updated>2013-10-03T10:36:27.668-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>NIce comparison, interesting.</title><content type='html'>NIce comparison, interesting.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6941052529541429485/comments/default/5774407444297513760'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6941052529541429485/comments/default/5774407444297513760'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html?showComment=1380810987668#c5774407444297513760' title=''/><author><name>http://devtools.korzh.com/</name><uri>http://devtools.korzh.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6941052529541429485' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6941052529541429485' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-608477188'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 3, 2013 at 10:36:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6193455739090573315</id><published>2013-10-03T17:09:30.516-04:00</published><updated>2013-10-03T17:09:30.516-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That&amp;#39;s unfortunate. Is there any shorthand for...</title><content type='html'>That&amp;#39;s unfortunate. Is there any shorthand for Task.ContinueWith like we have Task.Run for Task.StartNew..?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2596417937654936025/comments/default/6193455739090573315'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2596417937654936025/comments/default/6193455739090573315'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/continuewith-is-dangerous-too.html?showComment=1380834570516#c6193455739090573315' title=''/><author><name>Sriram Sakthivel</name><uri>http://www.blogger.com/profile/14791805082342292214</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/continuewith-is-dangerous-too.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2596417937654936025' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2596417937654936025' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-338291935'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 3, 2013 at 5:09:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6474413705792214399</id><published>2013-10-03T17:17:54.749-04:00</published><updated>2013-10-03T17:17:54.749-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The best shorthand for &amp;quot;ContinueWith&amp;quot; is...</title><content type='html'>The best shorthand for &amp;quot;ContinueWith&amp;quot; is &amp;quot;await&amp;quot;.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2596417937654936025/comments/default/6474413705792214399'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2596417937654936025/comments/default/6474413705792214399'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/continuewith-is-dangerous-too.html?showComment=1380835074749#c6474413705792214399' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2596417937654936025/comments/default/6193455739090573315'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/continuewith-is-dangerous-too.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2596417937654936025' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2596417937654936025' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 3, 2013 at 5:17:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5640346415156418441</id><published>2013-10-07T16:20:04.412-04:00</published><updated>2013-10-07T16:24:10.938-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/5640346415156418441'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/5640346415156418441'/><author><name>Joe Enos</name><uri>http://www.blogger.com/profile/17203532207216246426</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-1057241951'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 7, 2013 at 4:20:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1806977223015275775</id><published>2013-10-07T16:28:22.161-04:00</published><updated>2013-10-07T16:28:22.161-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great article.

Just wanted to clarify something t...</title><content type='html'>Great article.&lt;br /&gt;&lt;br /&gt;Just wanted to clarify something to make sure I understand - I haven&amp;#39;t used ConfigureAwait before, so I want to make sure I don&amp;#39;t screw this up. Suppose I have MVC (regular or WebAPI) as my entry point, which calls code in my business layer, which in turn calls out to another API somewhere, and I want that all asynchronous. Assuming I want my controller to never lose its MVC context, I would be safe using ConfigureAwait(false) everywhere except the very first call from the controller to my business layer, right? For example:&lt;br /&gt;&lt;br /&gt;// In MVC&lt;br /&gt;public class MyController : Controller {&lt;br /&gt;  public async Task&amp;lt;ActionResult&amp;gt; Go() {&lt;br /&gt;    Foo something = await _businessLayer.GetSomething();&lt;br /&gt;    return View(something);&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// In my business library - a separate library which knows nothing about MVC or ASP.NET&lt;br /&gt;public class BusinessLayer {&lt;br /&gt;  public async Task&amp;lt;Foo&amp;gt; GetSomething() {&lt;br /&gt;    return await _myApiWrapper.GetSomething&amp;lt;Foo&amp;gt;(someUrl).ConfigureAwait(false);&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class ApiWrapper {&lt;br /&gt;  public async Task&amp;lt;T&amp;gt; GetSomething(string url) {&lt;br /&gt;    var httpClient = new HttpClient();&lt;br /&gt;    var httpResult = await httpClient.GetAsync(url).ConfigureAwait(false);&lt;br /&gt;    var content = await httpResult.Content.ReadAsAsync&amp;lt;T&amp;gt;().ConfigureAwait(false);&lt;br /&gt;    return content;&lt;br /&gt;  }&lt;br /&gt;}</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1806977223015275775'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1806977223015275775'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1381177702161#c1806977223015275775' title=''/><author><name>Joe Enos</name><uri>http://www.blogger.com/profile/17203532207216246426</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1057241951'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 7, 2013 at 4:28:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9186372662881727599</id><published>2013-10-08T12:20:32.058-04:00</published><updated>2013-10-08T12:20:32.058-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks a lot!</title><content type='html'>Thanks a lot!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/9186372662881727599'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5062015318328406015/comments/default/9186372662881727599'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html?showComment=1381249232058#c9186372662881727599' title=''/><author><name>zoran</name><uri>http://www.agile-code.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/09/using-ilmerge-with-net-40-andor-rx.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5062015318328406015' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5062015318328406015' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-261617775'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 8, 2013 at 12:20:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2980397141536101048</id><published>2013-10-09T09:16:56.914-04:00</published><updated>2013-10-09T09:16:56.914-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Lots of thanks for your articles. I stumbled upon ...</title><content type='html'>Lots of thanks for your articles. I stumbled upon EXACTLY the issue with my server-client working perfectly on my local network, but when used over the internet, i realized that multiple sends dont always come up as multiple receives, and I was not grasping the issue. After reading this framing tutorial, I will now sit down and rewrite the entire backend of my code. Not that much fun, but Im happy to have found this site for guidance!!! Thanks again /Andreas, Sweden</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2980397141536101048'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/2980397141536101048'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1381324616914#c2980397141536101048' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1628494285'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 9, 2013 at 9:16:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8732990431633316347</id><published>2013-10-09T16:47:43.514-04:00</published><updated>2013-10-09T16:47:43.514-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Awesome guide! Thanks!</title><content type='html'>Awesome guide! Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/8732990431633316347'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/8732990431633316347'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html?showComment=1381351663514#c8732990431633316347' title=''/><author><name>Jeremiah</name><uri>http://www.blogger.com/profile/12510261833208326676</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7638749944990556712' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7638749944990556712' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2134020031'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 9, 2013 at 4:47:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7760085323662285363</id><published>2013-10-10T06:57:24.286-04:00</published><updated>2013-10-10T06:57:24.286-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi,
At client side Instead of CallCalculator().Wai...</title><content type='html'>Hi,&lt;br /&gt;At client side Instead of CallCalculator().Wait(), how can we delagate result to another function( like old callback functions)...&lt;br /&gt;I try the following,&lt;br /&gt;async Task CallCalculator()&lt;br /&gt; {&lt;br /&gt;    try&lt;br /&gt;    {&lt;br /&gt;&lt;br /&gt;         var task = channel.DivideAsync(10, 0);&lt;br /&gt;&lt;br /&gt;         task.ContinueWith(OnWorkCompleted); //You should see result at OnWorkCompleted&lt;br /&gt;             &lt;br /&gt;    }&lt;br /&gt;   catch (FaultException ex)&lt;br /&gt;    {&lt;br /&gt;                Console.Error.WriteLine(&amp;quot;Error: &amp;quot; + ex.Detail.Message);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; void OnWorkCompleted(Task task)&lt;br /&gt; {&lt;br /&gt;            &lt;br /&gt;     var result = task.Result;&lt;br /&gt;&lt;br /&gt;    Console.WriteLine(&amp;quot;Result From Async: &amp;quot; + result);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;It works but if we try to divide by zero, I do not catch any exception at client side. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/7760085323662285363'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/7760085323662285363'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1381402644286#c7760085323662285363' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1388368084'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 10, 2013 at 6:57:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8126145987016052407</id><published>2013-10-10T09:26:43.591-04:00</published><updated>2013-10-10T09:26:43.591-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Answered on SO: http://stackoverflow.com/questions...</title><content type='html'>Answered on SO: http://stackoverflow.com/questions/19294372/wcf-async-lost-exception-at-client-side/19295798#19295798</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/8126145987016052407'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/8126145987016052407'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1381411603591#c8126145987016052407' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/7760085323662285363'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 10, 2013 at 9:26:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7987513368777130391</id><published>2013-10-10T13:44:43.853-04:00</published><updated>2013-10-10T13:44:43.853-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, that is both correct and the *proper* way to ...</title><content type='html'>Yes, that is both correct and the *proper* way to do it. This works because every await captures its *own* context. So the ApiWrapper.GetSomething and BusinessLayer.GetSomething will complete on a thread pool thread (discarding the context), but MyController.Go will complete on the original ASP.NET context.&lt;br /&gt;&lt;br /&gt;(There are various optimizations in place so that what actually happens is that when the last await completes in ApiWrapper.GetSomething, it will run on a thread pool thread which also finishes BusinessLayer.GetSomething and then enters the ASP.NET request context and finishes MyController.Go all on the same thread - but this is just an optimization detail).&lt;br /&gt;&lt;br /&gt;I have an MSDN article online (http://msdn.microsoft.com/en-us/magazine/jj991977.aspx) that goes into more detail around the best practices, but to summarize the guideline is to use ConfigureAwait(false) unless you know that you *do* need the context. Your example code is exactly correct.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7987513368777130391'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7987513368777130391'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1381427083853#c7987513368777130391' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1806977223015275775'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 10, 2013 at 1:44:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-187294301890057888</id><published>2013-10-10T22:44:10.658-04:00</published><updated>2013-10-10T22:44:10.658-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Awesome, thanks. I appreciate the clear explanatio...</title><content type='html'>Awesome, thanks. I appreciate the clear explanation. </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/187294301890057888'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/187294301890057888'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1381459450658#c187294301890057888' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1806977223015275775'/><author><name>Joe Enos</name><uri>http://www.blogger.com/profile/17203532207216246426</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1057241951'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 10, 2013 at 10:44:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7098199961560146809</id><published>2013-10-11T17:23:33.257-04:00</published><updated>2013-10-11T17:23:33.257-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Clear definition of the keywords. 
 Clearest I hav...</title><content type='html'>Clear definition of the keywords. &lt;br /&gt; Clearest I have found&lt;br /&gt;thus far drowning on the internet. &lt;br /&gt; Got this bookmarked&lt;br /&gt;for reference now.  Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7098199961560146809'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7098199961560146809'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1381526613257#c7098199961560146809' title=''/><author><name>pollaris</name><uri>http://wrton.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-65500004'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 11, 2013 at 5:23:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4185929239785208505</id><published>2013-10-13T23:48:56.767-04:00</published><updated>2013-10-14T04:02:39.924-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/4185929239785208505'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/4185929239785208505'/><author><name>DeanChang</name><uri>http://www.blogger.com/profile/11771619934852795403</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2934192059265291494' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-1483928048'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, October 13, 2013 at 11:48:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-379448434749442200</id><published>2013-10-14T04:04:02.561-04:00</published><updated>2013-10-14T04:04:02.561-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m a rookie of asynchronous thread programmin...</title><content type='html'>I&amp;#39;m a rookie of asynchronous thread programming. And I appreciate your blog that helps me a lot. Recently I got an issue , I assume that the background thread is running of long time work, HOW COULD I STOP THE THREAD IMMEDIATELY ? I tried to use backgroundworker &amp;amp; Task , when I triggered cancellation process,they still wait current work to be finished, after that they stop, couldn&amp;#39;t I just force them to stop ? Is any way to solve this problem? Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/379448434749442200'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/379448434749442200'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html?showComment=1381737842561#c379448434749442200' title=''/><author><name>DeanChang</name><uri>http://www.blogger.com/profile/11771619934852795403</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2934192059265291494' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1483928048'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 14, 2013 at 4:04:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6411837872681017977</id><published>2013-10-14T09:33:56.006-04:00</published><updated>2013-10-14T09:33:56.006-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Cancellation is cooperative. Your background worke...</title><content type='html'>Cancellation is cooperative. Your background worker must periodically check the cancellation token, e.g., by calling ThrowIfCancellationRequested.&lt;br /&gt;&lt;br /&gt;That&amp;#39;s the only way to do it safely. If you need it to stop faster, then check the token more frequently.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/6411837872681017977'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/6411837872681017977'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html?showComment=1381757636006#c6411837872681017977' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/379448434749442200'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2934192059265291494' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 14, 2013 at 9:33:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7902274003227615174</id><published>2013-10-14T22:06:37.891-04:00</published><updated>2013-10-14T22:06:37.891-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for replying. To check it more frequently i...</title><content type='html'>Thanks for replying. To check it more frequently is great way to do, but suppose that I call .dll or outside library( do a thing that cost very long time and I can&amp;#39;t expect  ) in DoWork of  backgroundworker, in this situation it&amp;#39;s useless to check token frequently, it still wait the job to be finish. I try to make my code as safe as possible, so even I got a solution from website( Thread.Abort ) , I still try to find a better way to deal with this problem. What could I do ? Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/7902274003227615174'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/7902274003227615174'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html?showComment=1381802797891#c7902274003227615174' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/379448434749442200'/><author><name>DeanChang</name><uri>http://www.blogger.com/profile/11771619934852795403</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2934192059265291494' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1483928048'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 14, 2013 at 10:06:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-546913646446744491</id><published>2013-10-15T08:20:33.763-04:00</published><updated>2013-10-15T08:20:33.763-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thread.Abort is extremely dangerous and should not...</title><content type='html'>Thread.Abort is extremely dangerous and should not be used. It would be safer to wrap the call in another AppDomain or process and unload/terminate that.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/546913646446744491'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/546913646446744491'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html?showComment=1381839633763#c546913646446744491' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/379448434749442200'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2934192059265291494' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 15, 2013 at 8:20:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8977159985562523751</id><published>2013-10-15T20:52:43.476-04:00</published><updated>2013-10-15T20:52:43.476-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It helps me a lot! Thanks, Stephen.Look forward to...</title><content type='html'>It helps me a lot! Thanks, Stephen.Look forward to your new post!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/8977159985562523751'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/8977159985562523751'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html?showComment=1381884763476#c8977159985562523751' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2934192059265291494/comments/default/379448434749442200'/><author><name>DeanChang</name><uri>http://www.blogger.com/profile/11771619934852795403</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2934192059265291494' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2934192059265291494' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1483928048'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, October 15, 2013 at 8:52:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7249444857587678107</id><published>2013-10-16T21:15:42.232-04:00</published><updated>2013-10-16T21:15:42.232-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hey Stephen, do you know if the copy-on-write beha...</title><content type='html'>Hey Stephen, do you know if the copy-on-write behaviour also caters for ASP.NET&amp;#39;s thread agility? &lt;br /&gt;(Discussed here: http://piers7.blogspot.com.au/2005/11/threadstatic-callcontext-and_02.html)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/7249444857587678107'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/7249444857587678107'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1381972542232#c7249444857587678107' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1587324486'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 16, 2013 at 9:15:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7426993634177578011</id><published>2013-10-17T00:06:43.584-04:00</published><updated>2013-10-17T00:06:43.584-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The logical call context will definitely work for ...</title><content type='html'>The logical call context will definitely work for any &amp;quot;tree&amp;quot; of async method calls.&lt;br /&gt;&lt;br /&gt;The blog post you mentioned is specifically about a thread jump between BeginRequest and Page_Load, which I know nothing about. I do know that ASP.NET 4.5 rewrote the part of the runtime (AspNetSynchronizationContext) responsible for scheduling work for a request, so the problem in that blog post should definitely be checked again to see if it still applies.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/7426993634177578011'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/7426993634177578011'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1381982803584#c7426993634177578011' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/7249444857587678107'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 17, 2013 at 12:06:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3147742804362186039</id><published>2013-10-18T06:17:15.318-04:00</published><updated>2013-10-18T06:17:15.318-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Can you give some examples of exactly what you mea...</title><content type='html'>Can you give some examples of exactly what you mean? I am interested to see the difference between right and wrong.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/3147742804362186039'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/3147742804362186039'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1382091435318#c3147742804362186039' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-79044008'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 18, 2013 at 6:17:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2483136822121189120</id><published>2013-10-18T09:26:55.701-04:00</published><updated>2013-10-18T09:26:55.701-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, what exactly is CPU bound work?  What is diff...</title><content type='html'>Yes, what exactly is CPU bound work?  What is different from async tasks and parallel tasks?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2483136822121189120'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2483136822121189120'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1382102815701#c2483136822121189120' title=''/><author><name>Nick</name><uri>http://www.blogger.com/profile/07187987395389794487</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1185791306'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 18, 2013 at 9:26:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5287697820120281968</id><published>2013-10-18T10:09:02.640-04:00</published><updated>2013-10-18T10:09:02.640-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, some examples would be very helpful! :-)</title><content type='html'>Yes, some examples would be very helpful! :-)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5287697820120281968'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5287697820120281968'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1382105342640#c5287697820120281968' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225707128'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 18, 2013 at 10:09:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2066796762945944495</id><published>2013-10-18T13:17:14.656-04:00</published><updated>2013-10-18T13:17:14.656-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>OK, I&amp;#39;m heading out of town (to a place with n...</title><content type='html'>OK, I&amp;#39;m heading out of town (to a place with no Internet... at all... not even via cell phones), but I&amp;#39;ll put up some examples on Monday!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2066796762945944495'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2066796762945944495'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1382116634656#c2066796762945944495' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 18, 2013 at 1:17:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-883941005300781857</id><published>2013-10-19T02:48:53.185-04:00</published><updated>2013-10-19T02:48:53.185-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Looking forward to it. Thanks!</title><content type='html'>Looking forward to it. Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/883941005300781857'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/883941005300781857'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1382165333185#c883941005300781857' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1447955064'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, October 19, 2013 at 2:48:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4384148370216479245</id><published>2013-10-19T09:54:38.953-04:00</published><updated>2013-10-19T09:54:38.953-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yeah, examples would be great! I will wait as well...</title><content type='html'>Yeah, examples would be great! I will wait as well :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/4384148370216479245'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/4384148370216479245'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1382190878953#c4384148370216479245' title=''/><author><name>http://devtools.korzh.com/</name><uri>http://devtools.korzh.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1820032997'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, October 19, 2013 at 9:54:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5911297419665581799</id><published>2013-10-23T17:58:37.290-04:00</published><updated>2013-10-23T17:58:37.290-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen - did you manage to put together any ex...</title><content type='html'>Hi Stephen - did you manage to put together any examples?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5911297419665581799'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5911297419665581799'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1382565517290#c5911297419665581799' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-57643738'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 23, 2013 at 5:58:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7907396664867156966</id><published>2013-10-23T23:29:14.124-04:00</published><updated>2013-10-23T23:29:14.124-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

Currently encountered same problem, w...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;Currently encountered same problem, windows service stop with no logs at all.&lt;br /&gt;&lt;br /&gt;Can you show/share a code of windows service on how to do it properly?&lt;br /&gt;&lt;br /&gt;by the way here my actual code =&amp;gt; http://codepaste.net/ecojmk&lt;br /&gt;&lt;br /&gt;Hope you could help me.&lt;br /&gt;&lt;br /&gt;Thanks in advanced&lt;br /&gt;&lt;br /&gt;br,&lt;br /&gt;&lt;br /&gt;biboy&lt;br /&gt;&lt;br /&gt; </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2298481796935864895/comments/default/7907396664867156966'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2298481796935864895/comments/default/7907396664867156966'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/managed-windows-services-basics.html?showComment=1382585354124#c7907396664867156966' title=''/><author><name>biboy atienza</name><uri>http://www.blogger.com/profile/04070232037379161801</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/10/managed-windows-services-basics.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2298481796935864895' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2298481796935864895' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-103605854'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, October 23, 2013 at 11:29:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5088661783041958569</id><published>2013-10-24T10:10:55.254-04:00</published><updated>2013-10-24T10:10:55.254-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It&amp;#39;s hard to say; it&amp;#39;s possible that your ...</title><content type='html'>It&amp;#39;s hard to say; it&amp;#39;s possible that your service may be taking too long in OnStart.&lt;br /&gt;&lt;br /&gt;I&amp;#39;d set AutoLog to true in your constructor and then check your Event Logs.&lt;br /&gt;&lt;br /&gt;If you can&amp;#39;t figure it out, then develop a minimized reproduction and post a question to Stack Overflow; blog comments here don&amp;#39;t have nice things like code formatting. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2298481796935864895/comments/default/5088661783041958569'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2298481796935864895/comments/default/5088661783041958569'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/10/managed-windows-services-basics.html?showComment=1382623855254#c5088661783041958569' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2298481796935864895/comments/default/7907396664867156966'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/10/managed-windows-services-basics.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2298481796935864895' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2298481796935864895' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 24, 2013 at 10:10:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-922046288667417248</id><published>2013-10-25T08:01:41.466-04:00</published><updated>2013-10-25T08:01:41.466-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very good article, exactly what I was looking for....</title><content type='html'>Very good article, exactly what I was looking for. Thanks for enlighting me !</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/922046288667417248'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3207474732790799370/comments/default/922046288667417248'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html?showComment=1382702501466#c922046288667417248' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/first-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3207474732790799370' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3207474732790799370' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1732777878'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 25, 2013 at 8:01:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2785413785418388135</id><published>2013-10-25T14:24:23.405-04:00</published><updated>2013-10-25T14:24:23.405-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>When i put this in my service the EndCreateTraffic...</title><content type='html'>When i put this in my service the EndCreateTrafficAlerts method is never called.  When I set a breakpoint on the callback(tcs.Task) line, I can see it get hit but nothing happens.&lt;br /&gt;In client;&lt;br /&gt;public static Task CreateTrafficAlertsAsync(this Release2Client client, IEnumerable trafficIds, TrafficMasterAlert alert, Release release )&lt;br /&gt;        {&lt;br /&gt;            return Task.Factory.FromAsync(client.Contract.BeginCreateTrafficAlerts, client.Contract.EndCreateTrafficAlerts, trafficIds, alert, release);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;In server:&lt;br /&gt;public IAsyncResult BeginCreateTrafficAlerts(IEnumerable trafficIds, TrafficMasterAlert masterAlert, AsyncCallback callback, object state)&lt;br /&gt;        {&lt;br /&gt;            try&lt;br /&gt;            {&lt;br /&gt;                var creator = new TrafficAlertsCreator();&lt;br /&gt;                var task = creator.BeginCreateTrafficAlerts(trafficIds, masterAlert);&lt;br /&gt;                var tcs = new TaskCompletionSource(this);&lt;br /&gt;                task.ContinueWith(t =&amp;gt;&lt;br /&gt;                        {&lt;br /&gt;                            if (t.IsFaulted)&lt;br /&gt;                            {&lt;br /&gt;                                if (t.Exception != null) tcs.TrySetException(t.Exception.InnerExceptions);&lt;br /&gt;                            }&lt;br /&gt;                            else if (t.IsCanceled)&lt;br /&gt;                                tcs.TrySetCanceled();&lt;br /&gt;                            else&lt;br /&gt;                                tcs.TrySetResult(t.Result);&lt;br /&gt;                            if (callback != null)&lt;br /&gt;                                callback(tcs.Task);&lt;br /&gt;                        });&lt;br /&gt;                return tcs.Task;&lt;br /&gt;            }&lt;br /&gt;            catch (Exception exc)&lt;br /&gt;            {&lt;br /&gt;                Log.Error(exc);&lt;br /&gt;                throw new FaultException(exc.Message);&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        public bool EndCreateTrafficAlerts(IAsyncResult ar)&lt;br /&gt;        {&lt;br /&gt;            try&lt;br /&gt;            {&lt;br /&gt;                MethodLogger.LogMethodCall(&amp;quot;Started to execute method&amp;quot;, MethodBase.GetCurrentMethod(), ar);&lt;br /&gt;                ar.AsyncWaitHandle.WaitOne();&lt;br /&gt;                var task = (Task) ar;&lt;br /&gt;                task.Wait();&lt;br /&gt;                var creator = (TrafficAlertsCreator) task.AsyncState;&lt;br /&gt;                return creator.EndCreateTrafficAlerts(ar);&lt;br /&gt;            }&lt;br /&gt;            catch (FaultException)&lt;br /&gt;            {&lt;br /&gt;                throw; //just rethrow&lt;br /&gt;            }&lt;br /&gt;            catch (Exception ex)&lt;br /&gt;            {&lt;br /&gt;                Log.Error(&amp;quot;An error occurred in the EndCreateTrafficAlerts method&amp;quot;, ex);&lt;br /&gt;                throw new FaultException(ex.Message);&lt;br /&gt;            }&lt;br /&gt;            finally&lt;br /&gt;            {&lt;br /&gt;                MethodLogger.LogMethodCall(&amp;quot;Completed executing method&amp;quot;, MethodBase.GetCurrentMethod(), ar);&lt;br /&gt;            }&lt;br /&gt;            &lt;br /&gt;        }</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/2785413785418388135'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/2785413785418388135'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1382725463405#c2785413785418388135' title=''/><author><name>Exploration</name><uri>http://www.blogger.com/profile/02883173275073527457</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-8754773'/><gd:extendedProperty name='blogger.displayTime' value='Friday, October 25, 2013 at 2:24:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5901932161637376986</id><published>2013-10-27T20:57:41.702-04:00</published><updated>2013-10-27T20:57:41.702-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Worked for me on Windows 8.1 x64 Enterprise Editio...</title><content type='html'>Worked for me on Windows 8.1 x64 Enterprise Edition with an nVidia 7200GS graphics board and my old 1680x1050 Soyo monitor.  Big help.  Thanks a lot Stephen.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/5901932161637376986'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7360117115326108242/comments/default/5901932161637376986'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html?showComment=1382921861702#c5901932161637376986' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2008/07/soyo-widescreen-monitor-inf-available.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7360117115326108242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7360117115326108242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-363076638'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, October 27, 2013 at 8:57:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7617532911727774992</id><published>2013-10-28T11:11:03.827-04:00</published><updated>2013-10-28T11:11:03.827-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I figured it out.  I was creating a TaskCompletion...</title><content type='html'>I figured it out.  I was creating a TaskCompletionSource with a state parameter equal to the this reference.  (i.e. new TaskCompletionSource(this)), instead of passing in the state object like this....new TaskCompletionSource(state).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/7617532911727774992'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/7617532911727774992'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html?showComment=1382973063827#c7617532911727774992' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2734688883195300124/comments/default/2785413785418388135'/><author><name>Exploration</name><uri>http://www.blogger.com/profile/02883173275073527457</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/async-wcf-today-and-tomorrow.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2734688883195300124' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2734688883195300124' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-8754773'/><gd:extendedProperty name='blogger.displayTime' value='Monday, October 28, 2013 at 11:11:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6844776877901828590</id><published>2013-10-31T03:17:36.192-04:00</published><updated>2013-10-31T03:17:36.192-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Steve! Just wanted to thank you for a fantastic...</title><content type='html'>Hi Steve! Just wanted to thank you for a fantastically lucid explanation of ASYNC/AWAIT. I found MSDN docs not so useful in this case.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6844776877901828590'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6844776877901828590'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1383203856192#c6844776877901828590' title=''/><author><name>Andrey Yemelyanov</name><uri>http://www.blogger.com/profile/13990243468584152589</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='24' height='32' src='http://4.bp.blogspot.com/-QoLvvTpfp48/TuOmqA8-LiI/AAAAAAAAADk/eizbvYqlHRM/s1600/275535_100001449379791_836294305_n.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1614829113'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 31, 2013 at 3:17:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7254034611243028103</id><published>2013-10-31T16:47:03.630-04:00</published><updated>2013-10-31T16:47:03.630-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>So, if I have a requirement for copying a file int...</title><content type='html'>So, if I have a requirement for copying a file into disk, which approach would you recommend so as to not burden the thread pool used by ASP.NET to process requests? This is a typical fire and forget where the calling application does not need whether file has been successfully copied or not as long as the operation completes.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7254034611243028103'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7254034611243028103'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1383252423630#c7254034611243028103' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225759927'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 31, 2013 at 4:47:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5092733676961140041</id><published>2013-10-31T16:56:59.622-04:00</published><updated>2013-10-31T16:56:59.622-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;the calling application does not need whethe...</title><content type='html'>&amp;quot;the calling application does not need whether file has been successfully copied or not as long as the operation completes.&amp;quot;&lt;br /&gt;&lt;br /&gt;The key there is the ending of that sentence. Even if the response is just &amp;quot;OK&amp;quot; or &amp;quot;Error&amp;quot;, that&amp;#39;s still a response.&lt;br /&gt;&lt;br /&gt;In your scenario, I recommend using an asynchronous file stream (constructed with &amp;quot;useAsync&amp;quot; set to &amp;quot;true&amp;quot;) and using &amp;quot;await&amp;quot;. This will free up the ASP.NET thread while the file is being written out, yet not actually complete the request (sending &amp;quot;OK&amp;quot; or &amp;quot;Error&amp;quot;) until the file has been written.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/5092733676961140041'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/5092733676961140041'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1383253019622#c5092733676961140041' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7254034611243028103'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 31, 2013 at 4:56:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-411543653405062937</id><published>2013-10-31T17:48:53.748-04:00</published><updated>2013-10-31T17:48:53.748-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks Stephen. One thing I do not understand is s...</title><content type='html'>Thanks Stephen. One thing I do not understand is since there is not much work to be done from the point I fire off the file copy request to receiving the result, wouldn&amp;#39;t it be like blocking the calling thread?&lt;br /&gt;&lt;br /&gt;Would you be able to provide me any article on using asynchronous file stream?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/411543653405062937'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/411543653405062937'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1383256133748#c411543653405062937' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7254034611243028103'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225759927'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 31, 2013 at 5:48:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-16785130647039641</id><published>2013-10-31T19:20:22.816-04:00</published><updated>2013-10-31T19:20:22.816-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you use a truly asynchronous file copy and awai...</title><content type='html'>If you use a truly asynchronous file copy and await it, then the thread is not blocked. It is returned to the thread pool. A short while later, when the file copy completes, a thread is briefly borrowed from the thread pool to complete the request and send the response.&lt;br /&gt;&lt;br /&gt;Regarding asynchronous file streams, a quick Google search turned up this:&lt;br /&gt;  http://blogs.msdn.com/b/csharpfaq/archive/2012/01/23/using-async-for-file-access-alan-berman.aspx&lt;br /&gt;which looks quite good.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/16785130647039641'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/16785130647039641'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1383261622816#c16785130647039641' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7254034611243028103'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, October 31, 2013 at 7:20:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-185122709222313337</id><published>2013-11-01T11:17:48.247-04:00</published><updated>2013-11-01T11:17:48.247-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>One last question. My application is targeted towa...</title><content type='html'>One last question. My application is targeted towards .NET 3.5, can I still use async file operations?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/185122709222313337'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/185122709222313337'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1383319068247#c185122709222313337' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7254034611243028103'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1409413889'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 1, 2013 at 11:17:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3682324339616585269</id><published>2013-11-01T12:19:14.289-04:00</published><updated>2013-11-01T12:19:14.289-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You can use asynchronous file I/O, in the sense of...</title><content type='html'>You can use asynchronous file I/O, in the sense of Begin/End, but you can&amp;#39;t use async/await on that platform. Async/await requires .NET 4.5 when you&amp;#39;re running on ASP.NET.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3682324339616585269'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3682324339616585269'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1383322754289#c3682324339616585269' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7254034611243028103'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 1, 2013 at 12:19:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2855524407974371568</id><published>2013-11-03T01:28:00.530-04:00</published><updated>2013-11-03T01:28:00.530-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for the invaluable info.  Though Im havi...</title><content type='html'>Thank you for the invaluable info.  Though Im having one minor problem.  I&amp;#39;m sending 10 small serialized objects from a server app to a client app (less than 100 bytes each). The Code works great when I step through it in debugger, but when I execute my program at &amp;#39;full speed&amp;#39; it&amp;#39;s not processing all of the objects. Any suggestions on how I can cure this?&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/2855524407974371568'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/2855524407974371568'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1383456480530#c2855524407974371568' title=''/><author><name>Nathan Peckenpaugh</name><uri>http://www.blogger.com/profile/01347589344280960297</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1102448759'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 3, 2013 at 1:28:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5052069778143130471</id><published>2013-11-03T22:49:00.081-05:00</published><updated>2013-11-03T22:49:00.081-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sounds like your message framing is not working co...</title><content type='html'>Sounds like your message framing is not working correctly. More than that I can&amp;#39;t say without looking at the code.&lt;br /&gt;&lt;br /&gt;Try to get a minimal repro, post in Stack Overflow, and ping me to take a look at it.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/5052069778143130471'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/5052069778143130471'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html?showComment=1383536940081#c5052069778143130471' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4787791528826332700/comments/default/2855524407974371568'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/tcpip-net-sockets-faq.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4787791528826332700' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4787791528826332700' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 3, 2013 at 10:49:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8968880521485948617</id><published>2013-11-05T15:55:16.756-05:00</published><updated>2013-11-05T15:55:16.756-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There is just one problem with your deferral imple...</title><content type='html'>There is just one problem with your deferral implementation: if a misbehaved handler gets a deferral and doesn&amp;#39;t dispose it (e.g. it wasn&amp;#39;t in a using block and an exception occurred), the event producer remains stuck forever, waiting for a deferral completion that will never occur.&lt;br /&gt;&lt;br /&gt;I used a different approach for my implementation. The deferral has an associated Task (created with a TaskCompletionSource), which is awaited by the event producer. When Dispose is called, the task is marked as complete. If the deferral is finalized before it was properly disposed, the task is marked as faulted, with a DeferralNotCompletedException. This way, the event producer will be notified of faulty handlers (well, of course it will have to wait for the next GC pass, but it&amp;#39;s better than nothing)&lt;br /&gt;&lt;br /&gt;Here&amp;#39;s my Deferral class if you&amp;#39;re interested: &lt;a href="https://gist.github.com/thomaslevesque/7325901" rel="nofollow"&gt;https://gist.github.com/thomaslevesque/7325901&lt;/a&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/8968880521485948617'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/8968880521485948617'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html?showComment=1383684916756#c8968880521485948617' title=''/><author><name>Thomas Levesque</name><uri>http://www.blogger.com/profile/17821784613704879657</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8214861811488829137' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1775978352'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 5, 2013 at 3:55:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4941810291605799349</id><published>2013-11-05T19:32:01.026-05:00</published><updated>2013-11-05T19:32:01.026-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thomas, thanks for your critique.

However, your i...</title><content type='html'>Thomas, thanks for your critique.&lt;br /&gt;&lt;br /&gt;However, your implementation has stability problems in the general case because it accesses a managed object from a finalizer. You can play some tricks with GCHandle to (try to) fix it, but you&amp;#39;ll still have problems at process exit.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/4941810291605799349'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/4941810291605799349'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html?showComment=1383697921026#c4941810291605799349' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8214861811488829137/comments/default/8968880521485948617'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/02/async-oop-5-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8214861811488829137' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8214861811488829137' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 5, 2013 at 7:32:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4898765307914572482</id><published>2013-11-06T12:38:12.380-05:00</published><updated>2013-11-06T12:38:12.380-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sorry for the delay, folks! Examples are going up ...</title><content type='html'>Sorry for the delay, folks! Examples are going up now...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/4898765307914572482'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/4898765307914572482'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1383759492380#c4898765307914572482' title=''/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 6, 2013 at 12:38:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1849926087596362706</id><published>2013-11-08T06:58:20.001-05:00</published><updated>2013-11-08T06:58:20.001-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for posting such wonderful, insightful p...</title><content type='html'>Thank you for posting such wonderful, insightful posts, Stephen.&lt;br /&gt;&lt;br /&gt;I especially love your pitfalls series, because each post describes some scenarios that are not (completely) addressed in the official documentation and it is not so easy for an inexperienced developer to grasp what happens under the hood of TAP in .NET. Especially since it is so easy to be asynchronous with async/await, but is also oh so easy to shoot oneself in the foot by lacking of understanding of what really happens behind the curtains. You&amp;#39;ve perfectly illustrated it with an ASP.NET Task.Run() misusing example and I&amp;#39;ve had an &amp;quot;Oh, wow, I&amp;#39;d never think about it!&amp;quot; reaction while reading it.&lt;br /&gt;&lt;br /&gt;Thanks again.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1849926087596362706'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1849926087596362706'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1383911900001#c1849926087596362706' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1304429620'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 8, 2013 at 6:58:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-623753158217081699</id><published>2013-11-08T07:29:10.919-05:00</published><updated>2013-11-08T07:29:10.919-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for the kind words. I&amp;#39;m glad this po...</title><content type='html'>Thank you for the kind words. I&amp;#39;m glad this post was helpful!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/623753158217081699'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/623753158217081699'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1383913750919#c623753158217081699' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1849926087596362706'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 8, 2013 at 7:29:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1416354830703186089</id><published>2013-11-08T10:42:47.501-05:00</published><updated>2013-11-08T10:42:47.501-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>What would be the &amp;quot;right&amp;quot; solution if yo...</title><content type='html'>What would be the &amp;quot;right&amp;quot; solution if you wanted something like a Parallel.ForEach in CalculateMandlebrot?&lt;br /&gt; </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1416354830703186089'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1416354830703186089'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1383925367501#c1416354830703186089' title=''/><author><name>Andy Pook</name><uri>http://www.blogger.com/profile/15601518097213626066</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='28' src='http://2.bp.blogspot.com/-LMxsWtdJXho/UD32SHgGfkI/AAAAAAAAAYQ/AmAn7GkL4ho/s220/headShot.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-327067849'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 8, 2013 at 10:42:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8173899852826956624</id><published>2013-11-08T17:13:59.937-05:00</published><updated>2013-11-08T17:13:59.937-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you are doing parallel code, just expose it syn...</title><content type='html'>If you are doing parallel code, just expose it synchronously - the same as the &amp;quot;right&amp;quot; solution I suggest above. In fact, my original example did use Parallel, but I simplified it so the threading discussion didn&amp;#39;t get bogged down.&lt;br /&gt;&lt;br /&gt;You may want to consider including a MaxDegreeOfParallelism option so clients like ASP.NET can restrict it if they want to.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/8173899852826956624'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/8173899852826956624'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1383948839937#c8173899852826956624' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1416354830703186089'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 8, 2013 at 5:13:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1948622812405770692</id><published>2013-11-08T20:35:45.279-05:00</published><updated>2013-11-08T20:35:45.279-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen, this is a great article. Very helpful. Fo...</title><content type='html'>Stephen, this is a great article. Very helpful. For whatever it&amp;#39;s worth, I find the terms &amp;quot;CPU bound&amp;quot; and &amp;quot;I/O bound&amp;quot; to be easier to understand versus &amp;quot;synchronous&amp;quot; and &amp;quot;asynchronous&amp;quot;. Keep the articles coming!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/1948622812405770692'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/1948622812405770692'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html?showComment=1383960945279#c1948622812405770692' title=''/><author><name>Alvin</name><uri>http://www.blogger.com/profile/03892201689252059476</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4763346915044720815' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4763346915044720815' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1305096067'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 8, 2013 at 8:35:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2606834469784755958</id><published>2013-11-09T12:06:57.379-05:00</published><updated>2013-11-09T12:06:57.379-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Good insight..thkx </title><content type='html'>Good insight..thkx </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/2606834469784755958'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/2606834469784755958'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html?showComment=1384016817379#c2606834469784755958' title=''/><author><name>Mahesh</name><uri>http://maheshkumar.wordpress.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4763346915044720815' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4763346915044720815' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-589895658'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, November 9, 2013 at 12:06:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4998078166784490556</id><published>2013-11-10T07:45:58.365-05:00</published><updated>2013-11-10T07:45:58.365-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Really nice, but does not work for Windows 8.1 (do...</title><content type='html'>Really nice, but does not work for Windows 8.1 (downloaded with WindowsSetupBox.exe). There is no install.wim. It&amp;#39;s now install.esd. Do you have any hints how to get this to run? </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/4998078166784490556'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/4998078166784490556'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html?showComment=1384087558365#c4998078166784490556' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7638749944990556712' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7638749944990556712' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1291561204'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 10, 2013 at 7:45:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6779725255545813947</id><published>2013-11-10T08:25:41.868-05:00</published><updated>2013-11-10T08:25:41.868-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Are you saying Convert-WindowsImage doesn&amp;#39;t wo...</title><content type='html'>Are you saying Convert-WindowsImage doesn&amp;#39;t work? Because I don&amp;#39;t even know what install.wim/install.esd are. This blog post is just a step-by-step pieced together from a lot of different guides for installing Win8 on a vhd.&lt;br /&gt;&lt;br /&gt;I no longer use this setup, since I solely run Windows 8.1 now.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/6779725255545813947'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/6779725255545813947'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html?showComment=1384089941868#c6779725255545813947' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/4998078166784490556'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7638749944990556712' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7638749944990556712' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 10, 2013 at 8:25:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5190593712279566523</id><published>2013-11-10T08:47:40.209-05:00</published><updated>2013-11-10T08:47:40.209-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That&amp;#39;s right Convert-WindowsImage does not wor...</title><content type='html'>That&amp;#39;s right Convert-WindowsImage does not work with esd files.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/5190593712279566523'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/5190593712279566523'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html?showComment=1384091260209#c5190593712279566523' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7638749944990556712/comments/default/4998078166784490556'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/windows-8-boot-to-differencing-vhd.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7638749944990556712' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7638749944990556712' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1291561204'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, November 10, 2013 at 8:47:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8751841889960892888</id><published>2013-11-11T04:19:24.411-05:00</published><updated>2013-11-11T04:19:24.411-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great article. Was there any particular reason why...</title><content type='html'>Great article. Was there any particular reason why you didn&amp;#39;t initialize the progess local variable in one go?&lt;br /&gt;&lt;br /&gt;IProgress progress = new Progress(value =&amp;gt;&lt;br /&gt;    {&lt;br /&gt;        label2.Text = value;&lt;br /&gt;    });</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6941052529541429485/comments/default/8751841889960892888'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6941052529541429485/comments/default/8751841889960892888'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html?showComment=1384161564411#c8751841889960892888' title=''/><author><name>Icosa Deca</name><uri>http://www.blogger.com/profile/08774539440721674414</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6941052529541429485' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6941052529541429485' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-597818172'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 11, 2013 at 4:19:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2045414035075480994</id><published>2013-11-11T07:29:03.126-05:00</published><updated>2013-11-11T07:29:03.126-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I was trying to stay close to the normal usage wit...</title><content type='html'>I was trying to stay close to the normal usage without actually breaking the background code off into a separate method.&lt;br /&gt;&lt;br /&gt;The more normal way of doing this is to have the Task.Run lambda as a separate method which would take an IProgress argument. The caller constructs a value of Progress. Progress exposes the &amp;quot;caller&amp;quot; side of the API, and IProgress exposes the &amp;quot;consumer&amp;quot; side of the API.&lt;br /&gt;&lt;br /&gt;So the conversion of &amp;quot;progressHandler&amp;quot; to IProgress simulates the conversion that happens during the method call.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6941052529541429485/comments/default/2045414035075480994'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6941052529541429485/comments/default/2045414035075480994'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html?showComment=1384172943126#c2045414035075480994' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6941052529541429485/comments/default/8751841889960892888'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-5.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6941052529541429485' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6941052529541429485' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 11, 2013 at 7:29:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2137181054779655342</id><published>2013-11-11T07:30:27.251-05:00</published><updated>2013-11-11T07:30:27.251-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you very mucho for this info!</title><content type='html'>Thank you very mucho for this info!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/2137181054779655342'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3160531574193759226/comments/default/2137181054779655342'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html?showComment=1384173027251#c2137181054779655342' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/07/interpreting-notifycollectionchangedeve.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3160531574193759226' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3160531574193759226' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-907505112'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 11, 2013 at 7:30:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5726400342329288335</id><published>2013-11-11T12:11:57.594-05:00</published><updated>2013-11-11T12:11:57.594-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi,

Thanks for a great article and blog in genera...</title><content type='html'>Hi,&lt;br /&gt;&lt;br /&gt;Thanks for a great article and blog in general!&lt;br /&gt;&lt;br /&gt;However, this is not that clean. as for me.&lt;br /&gt;// What if I have a reusable method that uses significant amounts of both I/O and CPU? Should I use Task.Run for the CPU-bound parts? The answer is still no.&lt;br /&gt;&lt;br /&gt;How would you recommend to improve next sample:&lt;br /&gt;&lt;br /&gt;async public Task RequestServerAsync()&lt;br /&gt;        {&lt;br /&gt;            var resultString = await new NetworkManager().GetAsync(Constants.SERVER_REQUEST); // Just a wrapper for await httpWebRequest.GetResponseAsync() and await postStreamReader.ReadToEndAsync()&lt;br /&gt;&lt;br /&gt;            var answer = await ParseCategoriesFromString(resultString); // await TaskEx.Run(() =&amp;gt; JsonConvert.DeserializeObject(resultString));&lt;br /&gt;            &lt;br /&gt;            return answer;&lt;br /&gt;        }</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5726400342329288335'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5726400342329288335'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1384189917594#c5726400342329288335' title=''/><author><name>Vitalii Vasylenko</name><uri>http://www.blogger.com/profile/01096061210204944757</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-TQxC7tTWLgY/AAAAAAAAAAI/AAAAAAAAAAA/rEZAEPrCt_o/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1568943012'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 11, 2013 at 12:11:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2006874985014452452</id><published>2013-11-11T13:29:09.631-05:00</published><updated>2013-11-11T13:29:09.631-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>SLaks has a good answer here: http://stackoverflow...</title><content type='html'>SLaks has a good answer here: http://stackoverflow.com/questions/19912343/async-json-net-deserialization&lt;br /&gt;&lt;br /&gt;Most of the time, you&amp;#39;re not going to be needing JSON deserialization on a background thread. Unless you&amp;#39;re processing a *lot* of JSON.&lt;br /&gt;&lt;br /&gt;If you apply the guidelines in this blog post to your reusable method, you&amp;#39;d get:&lt;br /&gt;&lt;br /&gt;/// &lt;br /&gt;/// Note: this method is partially CPU-bound.&lt;br /&gt;/// &lt;br /&gt;async public Task RequestServerAsync()&lt;br /&gt;{&lt;br /&gt;  var resultString = await new NetworkManager().GetAsync(Constants.SERVER_REQUEST);&lt;br /&gt;  var answer = ParseCategoriesFromString(resultString); // JsonConvert.DeserializeObject(resultString);&lt;br /&gt;  return answer;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Also see my blog post here:&lt;br /&gt;  http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2006874985014452452'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2006874985014452452'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1384194549631#c2006874985014452452' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5726400342329288335'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 11, 2013 at 1:29:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5779693100860630351</id><published>2013-11-11T22:01:12.798-05:00</published><updated>2013-11-11T22:01:12.798-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I believe you are missing the async keyword for pu...</title><content type='html'>I believe you are missing the async keyword for public Task PredictStockMarketAsync() in the second to last code box.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/5779693100860630351'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/5779693100860630351'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html?showComment=1384225272798#c5779693100860630351' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4763346915044720815' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4763346915044720815' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2134884757'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 11, 2013 at 10:01:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-278710430835532446</id><published>2013-11-11T22:37:45.591-05:00</published><updated>2013-11-11T22:37:45.591-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Slight tangent....the 29 hour recycle really only ...</title><content type='html'>Slight tangent....the 29 hour recycle really only applies if you are on one of those free hosting sites.  The default behavior best practice is to never recycle your app domain or explicitly schedule it.  I know the free hosts do it to prevent memory leaks etc. You mention not going into production with this workaround (I agree), but I wouldn&amp;#39;t go into production with the app domain recycling either ;).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/278710430835532446'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/278710430835532446'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1384227465591#c278710430835532446' title=''/><author><name>Bart Czernicki</name><uri>http://www.blogger.com/profile/12774476834998242239</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1694857491'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 11, 2013 at 10:37:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7377712516219881623</id><published>2013-11-12T08:28:32.126-05:00</published><updated>2013-11-12T08:28:32.126-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Fixed. Thanks for pointing that out!</title><content type='html'>Fixed. Thanks for pointing that out!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/7377712516219881623'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/7377712516219881623'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html?showComment=1384262912126#c7377712516219881623' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/5779693100860630351'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4763346915044720815' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4763346915044720815' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 8:28:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8529848918813242678</id><published>2013-11-12T09:13:53.076-05:00</published><updated>2013-11-12T09:13:53.076-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The 29-hour cycle is the *default* setting, so it ...</title><content type='html'>The 29-hour cycle is the *default* setting, so it applies on a brand-new install of IIS (unless you explicitly change it). You can turn it off; however, ASP.NET does have situations (such as unexpected client disconnects) where it will Thread.Abort request threads for synchronous requests, so your AppDomain may eventually de-stabalize. For this reason I believe it&amp;#39;s best to leave the default recycling on.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/8529848918813242678'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/8529848918813242678'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1384265633076#c8529848918813242678' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/278710430835532446'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 9:13:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2158700229622140176</id><published>2013-11-12T13:41:30.982-05:00</published><updated>2013-11-12T13:41:30.982-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi,

Thanks for a lightspeed answer, i didnt expec...</title><content type='html'>Hi,&lt;br /&gt;&lt;br /&gt;Thanks for a lightspeed answer, i didnt expect that :)&lt;br /&gt;&lt;br /&gt;Well.. i dont have too much of json - say, 20 items with 10 fields each (approximately). During waiting for the server answer (i&amp;#39;m still using native ProgressBar, which performance is quite low, but it is good for diagnostic), i see that bar is running smoothly. However, when data recieved, it slows ui down for about 0.5 second. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Hmm.. so, you mean, i should remove waiting for CPU-bound from implementation, and then call from UI&lt;br /&gt;&lt;br /&gt;    var answer = await Task.Run(() =&amp;gt; service.RequestServerAsync());&lt;br /&gt;    if (answer.Status == Ok)&lt;br /&gt;        ItemsList = answer.List;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2158700229622140176'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2158700229622140176'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1384281690982#c2158700229622140176' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5726400342329288335'/><author><name>Vitalii Vasylenko</name><uri>http://www.blogger.com/profile/01096061210204944757</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-TQxC7tTWLgY/AAAAAAAAAAI/AAAAAAAAAAA/rEZAEPrCt_o/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1568943012'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 1:41:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-524837683510061910</id><published>2013-11-12T14:07:30.400-05:00</published><updated>2013-11-12T14:07:30.400-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Wow. 42. It&amp;#39;s very funny)</title><content type='html'>Wow. 42. It&amp;#39;s very funny)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/524837683510061910'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/524837683510061910'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1384283250400#c524837683510061910' title=''/><author><name>devtools.korzh</name><uri>http://devtools.korzh.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1093234255'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 2:07:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2822247764868236173</id><published>2013-11-12T14:26:27.053-05:00</published><updated>2013-11-12T14:26:27.053-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would be surprised that 200 fields - even large ...</title><content type='html'>I would be surprised that 200 fields - even large fields - would take 0.5 seconds. That seems incredibly slow to me.&lt;br /&gt;&lt;br /&gt;If you are having performance problems, then you should first use a profiler to make sure the slowdown is where you think it is. If it is in fact the JSON serialization, then yes, I would call it from the UI using Task.Run as your code does.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2822247764868236173'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/2822247764868236173'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1384284387053#c2822247764868236173' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5726400342329288335'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 2:26:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3006648995869565957</id><published>2013-11-12T14:43:13.807-05:00</published><updated>2013-11-12T14:43:13.807-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Ok, thanks!</title><content type='html'>Ok, thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/3006648995869565957'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/3006648995869565957'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1384285393807#c3006648995869565957' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/5726400342329288335'/><author><name>Vitalii Vasylenko</name><uri>http://www.blogger.com/profile/01096061210204944757</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-TQxC7tTWLgY/AAAAAAAAAAI/AAAAAAAAAAA/rEZAEPrCt_o/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1568943012'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 2:43:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-420692975655375177</id><published>2013-11-12T16:21:02.468-05:00</published><updated>2013-11-12T16:21:02.468-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen - Great article. I have a specific questio...</title><content type='html'>Stephen - Great article. I have a specific question. I have a working code to generate thumbnail for DOCX documents and it involves intermediate step of converting the DOCX to PDF and then to a JPEG. This whole process takes anywhere from 10 to 15 seconds and I do not want to block the calling application because thumbnail generation can be done in background and user does not need to see it immediately. Thumbnail generation is done on a different server. I do not want the calling thread to wait until thumbnail is generated. What are my options here?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/420692975655375177'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/420692975655375177'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1384291262468#c420692975655375177' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225759927'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 4:21:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1039146213557779847</id><published>2013-11-12T16:24:16.219-05:00</published><updated>2013-11-12T16:24:16.219-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>End user sees a notification that says operation s...</title><content type='html'>End user sees a notification that says operation successful. I do not want to show this notification after thubmnail is generated which can be 10 to 15 seconds long. I want to be able to initiate the thumbnail generation process and then return the control and thus notification.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/1039146213557779847'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/1039146213557779847'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1384291456219#c1039146213557779847' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/420692975655375177'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225759927'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 4:24:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3111902365647657619</id><published>2013-11-12T16:31:25.925-05:00</published><updated>2013-11-12T16:31:25.925-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>and it is an ASP.NET application</title><content type='html'>and it is an ASP.NET application</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3111902365647657619'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3111902365647657619'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1384291885925#c3111902365647657619' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/420692975655375177'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1225759927'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 4:31:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3314233492135289214</id><published>2013-11-12T17:17:21.993-05:00</published><updated>2013-11-12T17:17:21.993-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I do briefly cover the correct architecture approa...</title><content type='html'>I do briefly cover the correct architecture approach in this blog post.&lt;br /&gt;&lt;br /&gt;You&amp;#39;ll need a reliable queue (e.g., an Azure Queue) and stick the thumbnail request in the queue. The ASP.NET request then returns to the app.&lt;br /&gt;&lt;br /&gt;Meanwhile, a background worker independent of the ASP.NET request (e.g., an Azure Worker Role) is processing the queue, generating the thumbnails, and saving them to reliable storage (e.g., an Azure Blob).&lt;br /&gt;&lt;br /&gt;After the thumbnail is generated, the background worker can notify the client via SignalR. Alternatively, the client could poll the ASP.NET server until the thumbnail is ready.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3314233492135289214'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3314233492135289214'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1384294641993#c3314233492135289214' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/420692975655375177'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 5:17:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3469787027729683754</id><published>2013-11-12T20:48:10.254-05:00</published><updated>2013-11-12T20:48:10.254-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for writing these insightful articles.</title><content type='html'>Thank you for writing these insightful articles.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/3469787027729683754'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/3469787027729683754'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html?showComment=1384307290254#c3469787027729683754' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4763346915044720815/comments/default/5779693100860630351'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-even-in.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4763346915044720815' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4763346915044720815' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1942029853'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, November 12, 2013 at 8:48:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6755095942502835907</id><published>2013-11-13T13:42:41.668-05:00</published><updated>2013-11-13T13:42:41.668-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m using .net 4.0 is there a ConfigureAwait e...</title><content type='html'>I&amp;#39;m using .net 4.0 is there a ConfigureAwait equivalent?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/6755095942502835907'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/6755095942502835907'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1384368161668#c6755095942502835907' title=''/><author><name>Adam Miller</name><uri>http://www.blogger.com/profile/14489064019295295604</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-CFO3jTJlFQ4/AAAAAAAAAAI/AAAAAAAAC-g/ZRCQU36cn8Y/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-420965666'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 13, 2013 at 1:42:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8257584233984204000</id><published>2013-11-13T14:53:53.297-05:00</published><updated>2013-11-13T14:53:53.297-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you have Microsoft.Bcl.Async installed, you sho...</title><content type='html'>If you have Microsoft.Bcl.Async installed, you should have ConfigureAwait available.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/8257584233984204000'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/8257584233984204000'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1384372433297#c8257584233984204000' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/6755095942502835907'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 13, 2013 at 2:53:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7102318263299498166</id><published>2013-11-14T21:46:52.391-05:00</published><updated>2013-11-14T21:46:52.391-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>In fact, you SHOULD call Dispose in your destructo...</title><content type='html'>In fact, you SHOULD call Dispose in your destructor, just in case the person who instantiated you fails to call your Dispose method properly.  But as Stephen said, you must take care not to throw any exceptions in your destructor, as they will not be catchable by your application, and therefore will kill your application.  Please see here:   http://msdn.microsoft.com/en-us/library/vstudio/b1yfkh5e(v=vs.100).aspx</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/7102318263299498166'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/7102318263299498166'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1384483612391#c7102318263299498166' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1762697218'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 14, 2013 at 9:46:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-677079551056379912</id><published>2013-11-15T08:21:14.530-05:00</published><updated>2013-11-15T08:21:14.530-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No, you should NOT call Dispose in your destructor...</title><content type='html'>No, you should NOT call Dispose in your destructor/finalizer.&lt;br /&gt;&lt;br /&gt;In the context of this blog post, the objects in question only have managed resources, not unmanaged resources. In this situation, the Microsoft pattern would have a finalizer that essentially does nothing (it would call Dispose in a way that Dispose had no work to do). It is completely wrong to dispose managed resources from a finalizer, and there are no unmanaged resources to dispose.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/677079551056379912'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/677079551056379912'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1384521674530#c677079551056379912' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 15, 2013 at 8:21:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3557771778241588700</id><published>2013-11-20T19:16:26.413-05:00</published><updated>2013-11-20T19:16:26.413-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I think Ahsan is possibly asking for a code exampl...</title><content type='html'>I think Ahsan is possibly asking for a code example for the DoProcessingOnThreadPoolAsync method showing how the Report method is called to report back progress (I appreciate you demonstrate this later on but it&amp;#39;s not related to the first code example).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/3557771778241588700'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/3557771778241588700'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1384992986413#c3557771778241588700' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/5107694777215636723'/><author><name>Kramer</name><uri>http://www.blogger.com/profile/05166660477990767135</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-986348271'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 20, 2013 at 7:16:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7267857691352014721</id><published>2013-11-20T20:29:45.860-05:00</published><updated>2013-11-20T20:29:45.860-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I see. I modified the original example to include ...</title><content type='html'>I see. I modified the original example to include an IProgress.Report example.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/7267857691352014721'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/7267857691352014721'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1384997385860#c7267857691352014721' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/5107694777215636723'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, November 20, 2013 at 8:29:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-347681512417442951</id><published>2013-11-21T06:52:53.749-05:00</published><updated>2013-11-21T06:52:53.749-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I used the class NotifyTaskCompletion from the Asy...</title><content type='html'>I used the class NotifyTaskCompletion from the AsyncEx library in my project and it works nicely.&lt;br /&gt;However I ran into the issue that I had to notify an extra PropertyChanged after the Task completed and the Result was set in MyProperty.&lt;br /&gt;I.e. another property of the viewmodel (not MyProperty).&lt;br /&gt;I could only get it to work to pass on the delegate of my raisePropertyChanged and my property-name to class NotifyTaskCompletion.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/347681512417442951'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/347681512417442951'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html?showComment=1385034773749#c347681512417442951' title=''/><author><name>Gerard Hermans</name><uri>http://www.blogger.com/profile/10454587573921552244</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9120756909831278299' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9120756909831278299' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1538784701'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 6:52:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1486507086574012745</id><published>2013-11-21T10:39:28.985-05:00</published><updated>2013-11-21T10:39:28.985-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I recommend you repost your Stack Overflow questio...</title><content type='html'>I recommend you repost your Stack Overflow question. I was actually in the process of writing an answer when it was deleted.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/1486507086574012745'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/1486507086574012745'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html?showComment=1385048368985#c1486507086574012745' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/347681512417442951'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9120756909831278299' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9120756909831278299' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 10:39:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-981459563466687776</id><published>2013-11-21T13:40:16.178-05:00</published><updated>2013-11-21T13:40:16.178-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>O sorry for that ..  that was another issue and is...</title><content type='html'>O sorry for that ..  that was another issue and is now solved regularly.&lt;br /&gt;I will post my solution on Stack Overflow.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/981459563466687776'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/981459563466687776'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html?showComment=1385059216178#c981459563466687776' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9120756909831278299/comments/default/347681512417442951'/><author><name>Gerard Hermans</name><uri>http://www.blogger.com/profile/10454587573921552244</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/01/async-oop-3-properties.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9120756909831278299' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9120756909831278299' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1538784701'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 1:40:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1841440504966890317</id><published>2013-11-21T15:19:34.078-05:00</published><updated>2013-11-21T15:19:34.078-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nito.AsyncEx.UnitTests.MSTest is not strongly name...</title><content type='html'>Nito.AsyncEx.UnitTests.MSTest is not strongly named. :(</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/1841440504966890317'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/1841440504966890317'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1385065174078#c1841440504966890317' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-866151491'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 3:19:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6881910428850103691</id><published>2013-11-21T15:35:15.728-05:00</published><updated>2013-11-21T15:35:15.728-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It also hasn&amp;#39;t been needed for more than a yea...</title><content type='html'>It also hasn&amp;#39;t been needed for more than a year (when VS2012 was released). This post is just kept up for historical reasons.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/6881910428850103691'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/6881910428850103691'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1385066115728#c6881910428850103691' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/1841440504966890317'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 3:35:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8436543463779179565</id><published>2013-11-21T18:11:00.260-05:00</published><updated>2013-11-21T18:11:00.260-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Well, it&amp;#39;s not needed for VS2012, but if your ...</title><content type='html'>Well, it&amp;#39;s not needed for VS2012, but if your build server is still TFS2010 there&amp;#39;s still an issue here. However, Nito.AsyncEx.UnitTests.MSTest doesn&amp;#39;t resolve issues with TFS2010--I ended up having to rewrite the tests to use your excellent TaskEx library to wrap calls to the async code under test.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/8436543463779179565'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/8436543463779179565'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1385075460260#c8436543463779179565' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/1841440504966890317'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-866151491'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 6:11:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7350085886754660874</id><published>2013-11-21T18:59:31.904-05:00</published><updated>2013-11-21T18:59:31.904-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nito.AsyncEx.UnitTests.MSTest depends on the Async...</title><content type='html'>Nito.AsyncEx.UnitTests.MSTest depends on the Async CTP for VS2010. At this point it&amp;#39;s quite hard to get the Async CTP working. I.e., if you&amp;#39;ve been keeping your build server patched with Windows Update, the Async CTP cannot be installed on it. :/&lt;br /&gt;&lt;br /&gt;Still, I&amp;#39;m glad the AsyncEx library helped! I had to do something similar (using AsyncContext) just recently because the version of NUnit that Xamarin iOS/Droid currently uses does not support async unit tests...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/7350085886754660874'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/7350085886754660874'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1385078371904#c7350085886754660874' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/1841440504966890317'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 6:59:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8715109480474776964</id><published>2013-11-21T19:48:48.327-05:00</published><updated>2013-11-21T19:48:48.327-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Awesome post! Thanks for explaining it so clearly!...</title><content type='html'>Awesome post! Thanks for explaining it so clearly!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/8715109480474776964'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/8715109480474776964'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1385081328327#c8715109480474776964' title=''/><author><name>Alvin</name><uri>http://www.blogger.com/profile/03892201689252059476</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1305096067'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 21, 2013 at 7:48:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7161382194532152360</id><published>2013-11-25T07:52:40.650-05:00</published><updated>2013-11-25T07:52:40.650-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Amazing explanation in such a difficult and compli...</title><content type='html'>Amazing explanation in such a difficult and complicated concept! Thank you!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/7161382194532152360'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/7161382194532152360'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1385383960650#c7161382194532152360' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1476817695'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 25, 2013 at 7:52:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2748916468779106248</id><published>2013-11-25T18:10:17.531-05:00</published><updated>2013-11-25T18:10:17.531-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>really good post. Thanks!</title><content type='html'>really good post. Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/2748916468779106248'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/2748916468779106248'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1385421017531#c2748916468779106248' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1451609250'/><gd:extendedProperty name='blogger.displayTime' value='Monday, November 25, 2013 at 6:10:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1647216540838138629</id><published>2013-11-28T14:03:24.950-05:00</published><updated>2013-11-28T14:03:24.950-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thx for the tips, but as curiosity, and I mean no ...</title><content type='html'>Thx for the tips, but as curiosity, and I mean no disrespect, how come someone intelligent, a programmer! :P, believes in a personal god!?!? I mean, if it were an Espinoza like god (which might have some meaning and some background maybe...) I&amp;#39;d understand it, but christian!? come on, your wife must be really beautiful to convince u on the matter :D (joking!)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1385665404950#c1647216540838138629' title=''/><author><name>anemet</name><uri>http://www.blogger.com/profile/02785654616804179150</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1322501140'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 28, 2013 at 2:03:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1415825901087724548</id><published>2013-11-28T18:58:14.347-05:00</published><updated>2013-11-28T18:58:14.347-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If I read your question correctly, your current un...</title><content type='html'>If I read your question correctly, your current understanding is that intelligent people do not believe in a personal god. The Bible takes a more pragmatic perspective: it says there are *not many* intelligent (or powerful, or rich) people who choose to believe, but that with God all things are possible (I Cor 1:26; Matt 19:24-26). Personally, I suspect it is because salvation requires a fair amount of humility; in essence, before one can be saved (by a Savior, not themselves), they must first see themselves as (hopelessly) lost.&lt;br /&gt;&lt;br /&gt;I believe in Jesus Christ, that He is the Son of God, that He lived a sinless life and then gave that life up when He was crucified, and that He rose from the grave, thus giving us the hope of Heaven some day. But it&amp;#39;s easy to talk about Jesus just as an impersonal &amp;quot;fire insurance&amp;quot;. In reality, He is much more. I have a personal relationship with Jesus Christ, based on my belief in Him as a personal God.&lt;br /&gt;&lt;br /&gt;My relationship with Jesus began in my teen years, and I can say with absolute certainty that without His direct influence in my life, I would not be alive today. BTW I met my wife in college, long after I dedicated my life to God. :)&lt;br /&gt;&lt;br /&gt;I encourage you to reconsider your belief that there is no god. Christianity is - at its core - entirely based on faith. There is no proof. If you want to look into it a bit yourself, I&amp;#39;d recommend going straight to the source: get a Bible (I recommend the KJV, both for its accuracy and language, but it can be harder to understand), and read the books of John and Romans. They tell the story of Jesus and how Christianity started. Before you read them, ask God to reveal Himself to you (*if* He&amp;#39;s there).&lt;br /&gt;&lt;br /&gt;Best regards,&lt;br /&gt;       -Steve</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1415825901087724548'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1415825901087724548'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1385683094347#c1415825901087724548' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, November 28, 2013 at 6:58:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3594945632800589659</id><published>2013-11-29T05:07:17.731-05:00</published><updated>2013-11-29T05:07:17.731-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hey Stephen :) Thx for taking the time to answer! ...</title><content type='html'>Hey Stephen :) Thx for taking the time to answer! But I can&amp;#39;t help not to reach with another remark: for a guy who understands a lot about async, multithreaded and concurrent programming, you seam to not understand (or maybe you do, but ignore!?) the current scientific view of the world...I mean, what about our astrophysical origins, what about muons gluons and quorks, dark matter and dark energy, string theory and membranes, the billions of galaxies with trillions of planets which, some of them, are very likely to host some kind of biological and/or intelligent life?! What I want to say, is that our religious beliefs are kind of anecdotal, when regarded through the grand scheme of things - a small part of them mentioned previously. So instead of questioning ourselves about our nature, origins, purpose and fundamental facts backed by some scientific understanding, you are saying that we should choose to believe in things that are a couple of thousand years old, written by people with little or no scientific understanding whatsoever (yes, I know that some people like Isaac Newton believed in a personal God :/, but Einstein for instance, was inclined to believe in some Espinoza like God! Both were wrong in my opinion, there is no evidence for anything like that)...Bottom line, I think you should reconsider!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3594945632800589659'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3594945632800589659'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1385719637731#c3594945632800589659' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><author><name>anemet</name><uri>http://www.blogger.com/profile/02785654616804179150</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1322501140'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 29, 2013 at 5:07:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1028152600535568729</id><published>2013-11-29T09:21:55.186-05:00</published><updated>2013-11-29T09:21:55.186-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Actually, I enjoy reading about modern scientific ...</title><content type='html'>Actually, I enjoy reading about modern scientific theories such as string theory and quantum mechanics. Though I cannot pretend to understand it all. :)&lt;br /&gt;&lt;br /&gt;But I&amp;#39;m also somewhat aware of how often scientific theories change. For example, it is well-known that the Big Bang Theory - as currently formulated - is wrong. There are a few competing replacement theories, but they all depend on some unprovable assumptions. Most of what you mention, from quarks to dark matter, are all hypothoses and have not been proven. Given that scientific progress is usually made by *overturning* the current theories, I read about modern theories such as string theory with interest but not firm belief.&lt;br /&gt;&lt;br /&gt;In particular, I&amp;#39;m not a fan of dark matter / dark energy. To me that seems more like twisting the data to fit the hypothesis instead of fixing the hypothesis to match the data.&lt;br /&gt;&lt;br /&gt;But back to the point - belief in a personal God. Even if, e.g., dark matter exists as we currently theorize it, I&amp;#39;m not sure why dark matter would preclude the existence of God?&lt;br /&gt;&lt;br /&gt;As far as the universe goes, I consider nature one of the strongest arguments in *favor* of an intelligent creator. Mankind did not create quarks or dark energy; we are only discovering them.&lt;br /&gt;&lt;br /&gt;P.S. As a Christian, I believe that God wrote the Bible, so the scientific knowledge of the human authors is immaterial. Also, I could be wrong, but I do not believe Einstein believed in a God, even as a Deist.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1028152600535568729'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1028152600535568729'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1385734915186#c1028152600535568729' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 29, 2013 at 9:21:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8604150451828517501</id><published>2013-11-29T10:07:42.663-05:00</published><updated>2013-11-29T10:07:42.663-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Oh come on, you seem a smart an reasonable person ...</title><content type='html'>Oh come on, you seem a smart an reasonable person :) I don&amp;#39;t understand the things I talked about either, but I tend to assume as true, opinions expressed by current or RIP (like richard feynman, Nobel prize in physics) scientists, like michio kaku &amp;amp; co, because they make more sense then the advocates of religious beliefs...Anyways, is good to keep an opened mind and of course respect above all...and of course, your blog seems very nice and useful :)  Cheers!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/8604150451828517501'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/8604150451828517501'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1385737662663#c8604150451828517501' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><author><name>anemet</name><uri>http://www.blogger.com/profile/02785654616804179150</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1322501140'/><gd:extendedProperty name='blogger.displayTime' value='Friday, November 29, 2013 at 10:07:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1568140130053499492</id><published>2013-12-02T12:43:20.297-05:00</published><updated>2013-12-02T12:43:20.297-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Is there any way to detect a deadlock? I just trie...</title><content type='html'>Is there any way to detect a deadlock? I just tried your WinForms example and see exactly what you&amp;#39;re talking about - looks like it will hang forever without ever returning. I doubt there&amp;#39;s anything we could do at compile-time, but at runtime, is there a global &amp;quot;deadlock detection&amp;quot; concept or anything that would help troubleshoot something like this? Like in SQL Server where it will eventually kill off one of the connections that&amp;#39;s involved in a deadlock.&lt;br /&gt;&lt;br /&gt;Of course if we build things properly, deadlocks won&amp;#39;t happen, but I can see this potentially being a common mistake.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1568140130053499492'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1568140130053499492'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1386006200297#c1568140130053499492' title=''/><author><name>Joe Enos</name><uri>http://www.blogger.com/profile/17203532207216246426</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1057241951'/><gd:extendedProperty name='blogger.displayTime' value='Monday, December 2, 2013 at 12:43:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-687875029058363966</id><published>2013-12-02T20:50:45.301-05:00</published><updated>2013-12-02T20:50:45.301-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The problem with deadlock detection is that you ha...</title><content type='html'>The problem with deadlock detection is that you have to hook the Wait or Result calls; this should be possible with the profiling API. Alternatively, Joe Duffy has a blog post on deadlock detection but you need to provide your own SynchronizationContext (in this case, it would need to be a wrapper for the WinFormsSynchronizationContext): http://joeduffyblog.com/2008/02/27/hooking-clr-blocking-calls-with-synchronizationcontext/&lt;br /&gt;&lt;br /&gt;Either way, it would be quite a lot of effort. I think it&amp;#39;s not worth it; in most cases, if a deadlock happens, it *always* happens. So we&amp;#39;re not dealing with a deadlock caused by a race condition; this is usually just a one-time learning experience, not a dormant bug kind of problem.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/687875029058363966'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/687875029058363966'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1386035445301#c687875029058363966' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1568140130053499492'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, December 2, 2013 at 8:50:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6261725580818277837</id><published>2013-12-03T07:46:41.022-05:00</published><updated>2013-12-03T07:46:41.022-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very enlightening! Thank you Stephen.</title><content type='html'>Very enlightening! Thank you Stephen.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/6261725580818277837'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/6261725580818277837'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1386074801022#c6261725580818277837' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1110400921'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, December 3, 2013 at 7:46:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-146652995341651720</id><published>2013-12-03T09:49:31.698-05:00</published><updated>2013-12-03T09:49:31.698-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Cool, makes sense. Thanks.</title><content type='html'>Cool, makes sense. Thanks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/146652995341651720'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/146652995341651720'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1386082171698#c146652995341651720' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1568140130053499492'/><author><name>Joe Enos</name><uri>http://www.blogger.com/profile/17203532207216246426</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1057241951'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, December 3, 2013 at 9:49:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8168360471875486903</id><published>2013-12-10T03:37:00.126-05:00</published><updated>2013-12-10T03:37:00.126-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is great. I have a suggestion though. It&amp;#39;...</title><content type='html'>This is great. I have a suggestion though. It&amp;#39;s allocating a new dataBuffer for every message it receives. If you are developing an application that is receiving tens of thousands of messages per second, couldn&amp;#39;t that impact performance? Couldn&amp;#39;t you change it to just allocate the dataBuffer once to be the max length, and then reuse the same buffer? It would mean that for the MessageArrived delegate, you&amp;#39;d have to pass in the length as well as the bytes. Thanks for the sweet code.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8168360471875486903'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8168360471875486903'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1386664620126#c8168360471875486903' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1663671389'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, December 10, 2013 at 3:37:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8063012463459026057</id><published>2013-12-10T08:02:18.703-05:00</published><updated>2013-12-10T08:02:18.703-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes; in some of my high-volume solutions I do use ...</title><content type='html'>Yes; in some of my high-volume solutions I do use a &amp;quot;buffer manager&amp;quot; to reuse buffers when possible. However, I did not put that in the sample code here because the purpose of this sample code is to illustrate proper packetizing, which is complex enough without the buffer management logic. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8063012463459026057'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8063012463459026057'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1386680538703#c8063012463459026057' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8168360471875486903'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, December 10, 2013 at 8:02:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8737851278374534851</id><published>2013-12-11T06:35:24.345-05:00</published><updated>2013-12-11T06:35:24.345-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I use MSDN async sample + your length prefix solut...</title><content type='html'>I use MSDN async sample + your length prefix solution to write an Async socket Client and Server class, 3000 GB data all success transferred under single client and single data send thread test. &lt;br /&gt;But when I use a for loop to create several threads to send data to server, I found that in Client side, the thread created for BeginConnectCallback were always have the same id.&lt;br /&gt;and all ManualResetEvent mechanism failed, all threads actived when ManualResetEvent.Set( ) called by first thread.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Here is my Client side Log sample: ( the problem is why it always Thread 7 do the EndConnect job? )&lt;br /&gt;&lt;br /&gt;15:33:05.100 Data send Thread 1, BeginConnect to Server 192.168.1.100 Port 6000&lt;br /&gt;15:33:05.100 Data send Thread 2, BeginConnect to Server 192.168.1.100 Port 6000&lt;br /&gt;15:33:05.100 Data send Thread 3, BeginConnect to Server 192.168.1.100 Port 6000&lt;br /&gt;15:33:05.102 ConnectionCallback Thread 7 Execute EndConnect and mreConnectDone.Set( );&lt;br /&gt;15:33:05.102 ConnectionCallback Thread 7 Execute EndConnect and mreConnectDone.Set( );&lt;br /&gt;15:33:05.121 Data send Thread 1, Connected via Port 2650, Socket Handle: 8234&lt;br /&gt;15:33:05.145 ConnectionCallback Thread 7 Execute EndConnect and mreConnectDone.Set( );&lt;br /&gt;15:33:05.170 Data send Thread 2, Connected via Port 2651, Socket Handle: 8235&lt;br /&gt;15:33:05.177 Data send Thread 3, Connected via Port 2652, Socket Handle: 8236&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I can mail you source code if you interested on this.&lt;br /&gt;my mail is      thlin.harcon@gmail.com&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;the MSDN sample URL: http://msdn.microsoft.com/en-us/library/bew39x2a(VS.80).aspx</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/8737851278374534851'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/8737851278374534851'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html?showComment=1386761724345#c8737851278374534851' title=''/><author><name>TH</name><uri>http://www.blogger.com/profile/01711760374259717819</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3085961155936792245' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3085961155936792245' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1215799325'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, December 11, 2013 at 6:35:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1375000002895675222</id><published>2013-12-11T08:02:23.942-05:00</published><updated>2013-12-11T08:02:23.942-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m not sure why there&amp;#39;s a problem with th...</title><content type='html'>I&amp;#39;m not sure why there&amp;#39;s a problem with the same thread always doing EndConnect; this is natural with the .NET IOCP used by asynchronous methods.&lt;br /&gt;&lt;br /&gt;If you have a specific problem with code, the best place to post it is Stack Overflow, where there are several people who can take a look at it.&lt;br /&gt;&lt;br /&gt;P.S. The MSDN socket samples are notoriously poor.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/1375000002895675222'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/1375000002895675222'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html?showComment=1386766943942#c1375000002895675222' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/8737851278374534851'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3085961155936792245' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3085961155936792245' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, December 11, 2013 at 8:02:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6063558178491757121</id><published>2013-12-12T14:23:04.638-05:00</published><updated>2013-12-12T14:23:04.638-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Excellent information, thanks Stephen! With cache ...</title><content type='html'>Excellent information, thanks Stephen! With cache being relatively expensive and billed based on size, it makes sense to pick the most compact serializer out of the gate. I&amp;#39;m sure that most cache operations are much faster than their database or service counterparts -- that is their whole purpose, after all -- but I can&amp;#39;t help wondering if there&amp;#39;s a significant size/speed trade-off between them all. You hinted at it a bit with BSON vs JSON; any insights or too soon to tell?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6063558178491757121'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6063558178491757121'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1386876184638#c6063558178491757121' title=''/><author><name>Daniel Laughland</name><uri>http://www.blogger.com/profile/06193108871211965086</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1488907868'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, December 12, 2013 at 2:23:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3263804166343778777</id><published>2013-12-12T16:51:53.326-05:00</published><updated>2013-12-12T16:51:53.326-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I actually did not test for speed at all (yet). In...</title><content type='html'>I actually did not test for speed at all (yet). In my case, I&amp;#39;m looking at using a cache in Event Sourcing, where missing the cache is much more significant.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/3263804166343778777'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/3263804166343778777'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1386885113326#c3263804166343778777' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6063558178491757121'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, December 12, 2013 at 4:51:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-729200738475753149</id><published>2013-12-13T06:06:53.907-05:00</published><updated>2013-12-13T06:06:53.907-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>thank you, my problem solved.</title><content type='html'>thank you, my problem solved.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/729200738475753149'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/729200738475753149'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html?showComment=1386932813907#c729200738475753149' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3085961155936792245/comments/default/8737851278374534851'/><author><name>TH</name><uri>http://www.blogger.com/profile/01711760374259717819</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-client-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3085961155936792245' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3085961155936792245' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1215799325'/><gd:extendedProperty name='blogger.displayTime' value='Friday, December 13, 2013 at 6:06:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6849763904834112006</id><published>2013-12-13T08:50:26.978-05:00</published><updated>2013-12-13T08:50:26.978-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the article Stephen.  Very curious to s...</title><content type='html'>Thanks for the article Stephen.  Very curious to see the speed test results.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6849763904834112006'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6849763904834112006'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1386942626978#c6849763904834112006' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6063558178491757121'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1853681752'/><gd:extendedProperty name='blogger.displayTime' value='Friday, December 13, 2013 at 8:50:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1419432057632315897</id><published>2014-01-06T12:14:19.687-05:00</published><updated>2014-01-06T12:14:19.687-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks, took me a while to find a clear and concis...</title><content type='html'>Thanks, took me a while to find a clear and concise explanation of this syntax.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1419432057632315897'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1419432057632315897'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1389028459687#c1419432057632315897' title=''/><author><name>Robert Gammon</name><uri>http://www.blogger.com/profile/17513433596088822474</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2013929688'/><gd:extendedProperty name='blogger.displayTime' value='Monday, January 6, 2014 at 12:14:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3987270641267485541</id><published>2014-01-09T01:26:36.105-05:00</published><updated>2014-01-09T01:26:36.105-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sadly I couldn&amp;#39;t go for it, but since I got he...</title><content type='html'>Sadly I couldn&amp;#39;t go for it, but since I got helps from you and your blog, I am sure that your speech would helps up a lot people. Good luck!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3617586834637343726/comments/default/3987270641267485541'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3617586834637343726/comments/default/3987270641267485541'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/01/announcement-speaking-at-codemash-2014.html?showComment=1389248796105#c3987270641267485541' title=''/><author><name>DeanChang</name><uri>http://www.blogger.com/profile/11771619934852795403</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/01/announcement-speaking-at-codemash-2014.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3617586834637343726' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3617586834637343726' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1483928048'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, January 9, 2014 at 1:26:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1826132394183377474</id><published>2014-01-09T20:33:10.292-05:00</published><updated>2014-01-09T20:33:10.292-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks! I think it went pretty well. I did record ...</title><content type='html'>Thanks! I think it went pretty well. I did record it with my (rather old) video camera. If the video turns out at all I&amp;#39;ll post it online.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3617586834637343726/comments/default/1826132394183377474'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3617586834637343726/comments/default/1826132394183377474'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/01/announcement-speaking-at-codemash-2014.html?showComment=1389317590292#c1826132394183377474' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3617586834637343726/comments/default/3987270641267485541'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/01/announcement-speaking-at-codemash-2014.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3617586834637343726' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3617586834637343726' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, January 9, 2014 at 8:33:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3995611772714888514</id><published>2014-01-10T02:26:30.936-05:00</published><updated>2014-01-10T02:26:30.936-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the article!
Any update on speed or eve...</title><content type='html'>Thanks for the article!&lt;br /&gt;Any update on speed or event sourcing?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/3995611772714888514'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/3995611772714888514'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1389338790936#c3995611772714888514' title=''/><author><name>abatishchev</name><uri>http://www.blogger.com/profile/16426680735883613944</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1881251724'/><gd:extendedProperty name='blogger.displayTime' value='Friday, January 10, 2014 at 2:26:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6981071177070518276</id><published>2014-01-14T15:59:53.044-05:00</published><updated>2014-01-14T15:59:53.044-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>When implementing a WCF custom channel that proces...</title><content type='html'>When implementing a WCF custom channel that process messages N:N, you end needing a totally asynchronous Producer/Consumer . For example, messages received can generate zero, one or more messages, same way on send channel.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/6981071177070518276'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/6981071177070518276'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html?showComment=1389733193044#c6981071177070518276' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5761697404967100526/comments/default/2393672124078580427'/><author><name>luizstangarlin</name><uri>http://luizstangarlin.wordpress.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/11/async-producerconsumer-queue-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5761697404967100526' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5761697404967100526' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2025500417'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, January 14, 2014 at 3:59:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4095974836605057698</id><published>2014-01-14T20:16:34.316-05:00</published><updated>2014-01-14T20:16:34.316-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>MS is known for there slow JavaScript serializer. ...</title><content type='html'>MS is known for there slow JavaScript serializer. So would love to see some speed tests.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/4095974836605057698'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/4095974836605057698'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1389748594316#c4095974836605057698' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/3995611772714888514'/><author><name>Syska</name><uri>http://www.blogger.com/profile/17337934172076619217</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-221404211'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, January 14, 2014 at 8:16:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4559940069514680006</id><published>2014-01-14T20:24:04.442-05:00</published><updated>2014-01-14T20:24:04.442-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The new Microsoft templates all use JSON.NET, as d...</title><content type='html'>The new Microsoft templates all use JSON.NET, as does my code.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/4559940069514680006'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/4559940069514680006'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1389749044442#c4559940069514680006' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/3995611772714888514'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, January 14, 2014 at 8:24:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2640640093717020393</id><published>2014-01-21T23:22:29.557-05:00</published><updated>2014-01-21T23:22:29.557-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>A must-read for any asynchronous code developer. I...</title><content type='html'>A must-read for any asynchronous code developer. I keep linking to it on SO. Thanks Stephen! </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/2640640093717020393'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/2640640093717020393'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1390364549557#c2640640093717020393' title=''/><author><name>Noseratio</name><uri>http://www.blogger.com/profile/15542702475870519357</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1932796271'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, January 21, 2014 at 11:22:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6658853961070005089</id><published>2014-01-25T23:42:39.427-05:00</published><updated>2014-01-25T23:42:39.427-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great article, though I am compelled to Well Actua...</title><content type='html'>Great article, though I am compelled to Well Actually you on one point:&lt;br /&gt;&lt;br /&gt;&amp;quot;DPCs also execute at a level so low that to speak of &amp;quot;threads&amp;quot; is not quite right; like ISRs, DPCs execute directly on the CPU, &amp;quot;beneath&amp;quot; the threading system.&amp;quot;&lt;br /&gt;&lt;br /&gt;This isn&amp;#39;t strictly true. While ISRs don&amp;#39;t particularly have a concept of thread (a kernel developer would call it &amp;quot;Arbitrary context&amp;quot;), DPCs specifically *do* execute in the context of a thread. Now, *which* thread, is the question! They are run before the next scheduled thread has a chance to do anything - they are part of the scheduler. Since kernel memory is mapped into every process, what they need is always available. &lt;br /&gt;&lt;br /&gt;That word up there, &amp;quot;context&amp;quot; is super important - a thread is, at its simplest, a context in which to run code. Async operations *jump contexts* as they are being processed, they&amp;#39;re not tied to a specific context (i.e. a thread).&lt;br /&gt;&lt;br /&gt;It&amp;#39;s better to think of an async operation as a &amp;#39;message&amp;#39; that gets passed around, and that message changes forms several times (i.e. from a system call =&amp;gt; IRP =&amp;gt; APC =&amp;gt; UI Dispatcher Queue item). Every time this message is processed, it ends up changing forms</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/6658853961070005089'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/6658853961070005089'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1390711359427#c6658853961070005089' title=''/><author><name>Paul</name><uri>http://blog.paulbetts.org/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-137602318'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, January 25, 2014 at 11:42:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5137502833248877650</id><published>2014-01-26T12:18:32.028-05:00</published><updated>2014-01-26T12:18:32.028-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for your comment; I love the &amp;quot;message&amp;...</title><content type='html'>Thanks for your comment; I love the &amp;quot;message&amp;quot; description!&lt;br /&gt;&lt;br /&gt;But I&amp;#39;m not sure I agree with you re DPCs (not that it really matters; the details of semantics aren&amp;#39;t that important in this case). My reasoning is:&lt;br /&gt;- A thread does not have a DPC queue, but CPUs do. A DPC can be scheduled to a specific CPU, but not a specific thread.&lt;br /&gt;- DPCs are executed (at IRQL DISPATCH_LEVEL) when the CPU IRQL is transitioning from a higher level to DISPATCH_LEVEL or lower (e.g., PASSIVE_LEVEL). So they execute before normal thread code can resume.&lt;br /&gt;- While a DPC does execute with a thread context in the narrowest sense (CONTEXT), it does not execute with a valid thread context in the broader sense (able to use the security context of the current thread). So, they may execute in a thread context, they must be written to run in an arbitrary thread context.&lt;br /&gt;- A DPC is still very constrained in the code it can run as compared to code running as a part of a thread. In particular, no page faults are allowed.&lt;br /&gt;- Interrupts are masked while a DPC is running.&lt;br /&gt;&lt;br /&gt;Also, these quotes from MS:&lt;br /&gt;- &amp;quot;The system schedules all threads to run at IRQLs below DISPATCH_LEVEL.&amp;quot; (&amp;quot;Scheduling, Thread Context, and IRQL&amp;quot;, http://msdn.microsoft.com/en-us/windows/hardware/gg487402.aspx)&lt;br /&gt;- &amp;quot;IRQLs at or above DISPATCH_LEVEL are processor specific... IRQLs below DISPATCH_LEVEL are thread specific.&amp;quot; (ibid)&lt;br /&gt;- &amp;quot;Code that is running at PASSIVE_LEVEL is considered to be working on behalf of the current thread.&amp;quot; (ibid)&lt;br /&gt;- &amp;quot;DPCs ... are always called ... in an arbitrary thread context.&amp;quot; (ibid)&lt;br /&gt;- &amp;quot;Before a processor returns to processing threads, it executes all of the DPCs in its queue.&amp;quot; (&amp;quot;CPU Analysis&amp;quot;, http://msdn.microsoft.com/en-us/library/windows/hardware/jj679884.aspx)&lt;br /&gt;&lt;br /&gt;I came across these quotes while trying to find out whether a DPC actually counts against the current thread&amp;#39;s quantum. I was unable to find a definitive answer. :(</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/5137502833248877650'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/5137502833248877650'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1390756712028#c5137502833248877650' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/6658853961070005089'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, January 26, 2014 at 12:18:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6788834283916485656</id><published>2014-01-29T10:28:32.930-05:00</published><updated>2014-01-29T10:28:32.930-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank You for the Post!!!</title><content type='html'>Thank You for the Post!!!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6788834283916485656'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/6788834283916485656'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1391009312930#c6788834283916485656' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1980748545'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, January 29, 2014 at 10:28:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-830932180364915247</id><published>2014-02-01T12:17:53.358-05:00</published><updated>2014-02-01T12:17:53.358-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I do not see the difference here in your final sol...</title><content type='html'>I do not see the difference here in your final solution according to asp.net - the same threadpool will do the job ...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/830932180364915247'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/830932180364915247'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1391275073358#c830932180364915247' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2103797959'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 1, 2014 at 12:17:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5365554373549437983</id><published>2014-02-01T16:11:20.993-05:00</published><updated>2014-02-01T16:11:20.993-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The final code example is only for UI applications...</title><content type='html'>The final code example is only for UI applications; ASP.NET apps should not use Task.Run for all the reasons I listed when talking about performance problems.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5365554373549437983'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5365554373549437983'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1391289080993#c5365554373549437983' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/830932180364915247'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 1, 2014 at 4:11:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8558304590875789626</id><published>2014-02-01T18:30:11.316-05:00</published><updated>2014-02-01T18:30:11.316-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for being awesome</title><content type='html'>Thanks for being awesome</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8558304590875789626'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7422738283602854737/comments/default/8558304590875789626'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html?showComment=1391297411316#c8558304590875789626' title=''/><author><name>netvillage</name><uri>http://www.blogger.com/profile/10693749844405191284</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/sample-code-length-prefix-message.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7422738283602854737' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7422738283602854737' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1080304103'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 1, 2014 at 6:30:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4486713998485899527</id><published>2014-02-06T06:40:12.005-05:00</published><updated>2014-02-06T06:40:12.005-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>OK I must be missing something here: who will call...</title><content type='html'>OK I must be missing something here: who will call Dispose if the client doesn&amp;#39;t?  The GC certainly isn&amp;#39;t...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4486713998485899527'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4486713998485899527'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1391686812005#c4486713998485899527' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-7584944'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 6, 2014 at 6:40:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9126246211803062005</id><published>2014-02-06T07:39:08.162-05:00</published><updated>2014-02-06T07:39:08.162-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It&amp;#39;s the client&amp;#39;s responsibility to call D...</title><content type='html'>It&amp;#39;s the client&amp;#39;s responsibility to call Dispose. If they don&amp;#39;t, then no one does. The GC will invoke finalizers, which will clean up resources so there&amp;#39;s no resource leaks.&lt;br /&gt;&lt;br /&gt;However, some types require a Dispose call for correctness (e.g., to flush a buffer to a stream); those Dispose methods *must* be called by the client. If you try to call Dispose from a finalizer, it runs too late, and you&amp;#39;ll end up with a race condition that could potentially crash your application.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/9126246211803062005'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/9126246211803062005'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html?showComment=1391690348162#c9126246211803062005' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8745579675321426983/comments/default/4266572115310726374'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/second-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8745579675321426983' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8745579675321426983' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 6, 2014 at 7:39:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3739261289553666422</id><published>2014-02-07T16:57:34.872-05:00</published><updated>2014-02-07T16:57:34.872-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Very nice! What about a new one with INotifyProper...</title><content type='html'>Very nice! What about a new one with INotifyPropertyChanged to notify when loaded(initialized) :-) !</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/3739261289553666422'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/3739261289553666422'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html?showComment=1391810254872#c3739261289553666422' title=''/><author><name>Eric Ouellet</name><uri>http://www.blogger.com/profile/14693445246397141501</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5019631101409390674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5019631101409390674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1671786014'/><gd:extendedProperty name='blogger.displayTime' value='Friday, February 7, 2014 at 4:57:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6756960232895028970</id><published>2014-02-07T20:10:46.617-05:00</published><updated>2014-02-07T20:10:46.617-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>AsyncLazy is intended for use when your code await...</title><content type='html'>AsyncLazy is intended for use when your code awaits the asynchronous initialization. If you&amp;#39;re doing data binding, use NotifyTaskCompletion instead:&lt;br /&gt;  https://nitoasyncex.codeplex.com/wikipage?title=NotifyTaskCompletion&lt;br /&gt;  http://blog.stephencleary.com/2013/01/async-oop-3-properties.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/6756960232895028970'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/6756960232895028970'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html?showComment=1391821846617#c6756960232895028970' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5019631101409390674/comments/default/3739261289553666422'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/08/asynchronous-lazy-initialization.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5019631101409390674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5019631101409390674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, February 7, 2014 at 8:10:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5336563072409253391</id><published>2014-02-11T14:22:50.627-05:00</published><updated>2014-02-11T14:22:50.627-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I have situation where one set of webservices host...</title><content type='html'>I have situation where one set of webservices hosted in IIS calls another set of webservices. Not necessarily an ideal situation. What do you think about use Task.Run on first set to call second set which do not use multi thread.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1392146570627#c5336563072409253391' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-640957636'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, February 11, 2014 at 2:22:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2307104220872369283</id><published>2014-02-11T15:06:53.261-05:00</published><updated>2014-02-11T15:06:53.261-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No, you should not use Task.Run in that situation....</title><content type='html'>No, you should not use Task.Run in that situation. Instead, get an asynchronous client for the &amp;quot;inner&amp;quot; set of services (i.e., if it&amp;#39;s a WCF proxy, recreate it in a modern version of Visual Studio). Then implement the &amp;quot;outer&amp;quot; set of services asynchronously using that client.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/2307104220872369283'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/2307104220872369283'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1392149213261#c2307104220872369283' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, February 11, 2014 at 3:06:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6203847347519979346</id><published>2014-02-11T15:40:39.850-05:00</published><updated>2014-02-11T15:40:39.850-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Currently we are using ChannelFactory to create th...</title><content type='html'>Currently we are using ChannelFactory to create the webservice clients (there are several). How do you suggest changing to async?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/6203847347519979346'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/6203847347519979346'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1392151239850#c6203847347519979346' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-640957636'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, February 11, 2014 at 3:40:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1698587810073916497</id><published>2014-02-11T16:16:01.435-05:00</published><updated>2014-02-11T16:16:01.435-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Unfortunately, I have no experience with ChannelFa...</title><content type='html'>Unfortunately, I have no experience with ChannelFactory, but from other comments on my blog I gather that it doesn&amp;#39;t directly support async. :(&lt;br /&gt;&lt;br /&gt;I suggest that you ask on the MSDN forums (http://social.msdn.microsoft.com/Forums/vstudio/en-US/home?forum=wcf) to see if someone can give you some more detailed advice, and if necessary open a Microsoft Connect issue to request async support in ChannelFactory.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1698587810073916497'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/1698587810073916497'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1392153361435#c1698587810073916497' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, February 11, 2014 at 4:16:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9075112538708844236</id><published>2014-02-11T19:16:02.589-05:00</published><updated>2014-02-11T19:16:02.589-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for your help. I found out you can with ...</title><content type='html'>Thank you for your help. I found out you can with a little extra code (cheated from VS generated code). Maybe there is an easier way. See below. No you have an async version.&lt;br /&gt;&lt;br /&gt;Given interface:&lt;br /&gt;[OperationContract]string HelloWorld(string name)&lt;br /&gt;&lt;br /&gt;Add Async Call to interface&lt;br /&gt;[OperationContract]Task HelloWorldAsync(string name)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/9075112538708844236'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/9075112538708844236'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1392164162589#c9075112538708844236' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-640957636'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, February 11, 2014 at 7:16:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3125790501334361253</id><published>2014-02-20T12:08:42.483-05:00</published><updated>2014-02-20T12:08:42.483-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m pretty sure he is not saying that cancelli...</title><content type='html'>I&amp;#39;m pretty sure he is not saying that cancelling the Task causes an exception. What it means is that using cancellation in a Task, compared to a BackgroundWorker, is all in the same place.. if that makes sense.. you have to write your Task with the cancellation logic, instead of checking for cancellation in the RunWorkerComplete handler.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5145229067457449312/comments/default/3125790501334361253'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5145229067457449312/comments/default/3125790501334361253'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html?showComment=1392916122483#c3125790501334361253' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5145229067457449312/comments/default/8030013528765086200'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-round-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5145229067457449312' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5145229067457449312' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1914494276'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 20, 2014 at 12:08:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1017604840615305402</id><published>2014-02-22T10:25:23.335-05:00</published><updated>2014-02-22T10:25:23.335-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, 

I was playing around with the AsyncContext, ...</title><content type='html'>Hi, &lt;br /&gt;&lt;br /&gt;I was playing around with the AsyncContext, and suddenly, got into a situation which I couldn&amp;#39;t explain. I&amp;#39;ve written a simple example below. All the tasks below seemed to execute as expected, until I put in the Console.ReadKey there. It seems the tasks complete, only when the AsyncContext ends. Am I missing something?&lt;br /&gt;&lt;br /&gt;   public class Program&lt;br /&gt;    {&lt;br /&gt;        private static ThreadLocal _localStr =&lt;br /&gt;            new ThreadLocal(() =&amp;gt; String.Format(&amp;quot;Hello from Thread: {0}!&amp;quot;, Thread.CurrentThread.ManagedThreadId));&lt;br /&gt;&lt;br /&gt;        private static void Main(string[] args)&lt;br /&gt;        {&lt;br /&gt;            Nito.AsyncEx.AsyncContext.Run(() =&amp;gt;&lt;br /&gt;            {&lt;br /&gt;&lt;br /&gt;                Console.WriteLine(_localStr);&lt;br /&gt;&lt;br /&gt;                Task.Factory.StartNew(() =&amp;gt; Console.WriteLine(_localStr), CancellationToken.None,&lt;br /&gt;                    TaskCreationOptions.None, TaskScheduler.FromCurrentSynchronizationContext());&lt;br /&gt;&lt;br /&gt;                Task.Factory.StartNew(() =&amp;gt; Console.WriteLine(_localStr), CancellationToken.None,&lt;br /&gt;                    TaskCreationOptions.None, TaskScheduler.FromCurrentSynchronizationContext());&lt;br /&gt;&lt;br /&gt;                Task.Delay(100).Wait();&lt;br /&gt;&lt;br /&gt;                Console.WriteLine(_localStr);&lt;br /&gt;&lt;br /&gt;                Console.ReadKey();&lt;br /&gt;            });&lt;br /&gt;        }&lt;br /&gt;    }</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/1017604840615305402'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/1017604840615305402'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1393082723335#c1017604840615305402' title=''/><author><name>Prasanna V. Loganathar</name><uri>http://www.blogger.com/profile/05767806156414811301</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-91Q0eokrkaQ/AAAAAAAAAAI/AAAAAAAAAx8/W_TywpeJZe8/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-82257262'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 22, 2014 at 10:25:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2164568376126005503</id><published>2014-02-22T12:07:56.900-05:00</published><updated>2014-02-22T12:07:56.900-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>AsyncContext only executes one task at a time. So ...</title><content type='html'>AsyncContext only executes one task at a time. So if you block a task (e.g., ReadKey), then the tasks queued by StartNew cannot execute until that task completes.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/2164568376126005503'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/2164568376126005503'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1393088876900#c2164568376126005503' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/1017604840615305402'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 22, 2014 at 12:07:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7256254090201142242</id><published>2014-02-22T12:54:11.440-05:00</published><updated>2014-02-22T12:54:11.440-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Ah, makes sense now. Thanks.</title><content type='html'>Ah, makes sense now. Thanks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/7256254090201142242'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/7256254090201142242'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1393091651440#c7256254090201142242' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/1017604840615305402'/><author><name>Prasanna V. Loganathar</name><uri>http://www.blogger.com/profile/05767806156414811301</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-91Q0eokrkaQ/AAAAAAAAAAI/AAAAAAAAAx8/W_TywpeJZe8/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-82257262'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, February 22, 2014 at 12:54:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-877299284577875166</id><published>2014-02-27T15:09:02.648-05:00</published><updated>2014-02-27T15:09:02.648-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>How informative...</title><content type='html'>How informative...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/877299284577875166'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/877299284577875166'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html?showComment=1393531742648#c877299284577875166' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2767646867034459027' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1904140853'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 27, 2014 at 3:09:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2163723935546818780</id><published>2014-02-27T16:38:57.725-05:00</published><updated>2014-02-27T16:38:57.725-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It&amp;#39;s true that it&amp;#39;s only one short guideli...</title><content type='html'>It&amp;#39;s true that it&amp;#39;s only one short guideline, but I estimate it will solve ~98% of all problems caused by lock-free development.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/2163723935546818780'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/2163723935546818780'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html?showComment=1393537137725#c2163723935546818780' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/877299284577875166'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2767646867034459027' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 27, 2014 at 4:38:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2914878604734140905</id><published>2014-02-27T17:42:38.792-05:00</published><updated>2014-02-27T17:42:38.792-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would supplement this with: If it&amp;#39;s so impor...</title><content type='html'>I would supplement this with: If it&amp;#39;s so important to be lock-free, use types which already handle lock-free synchronisation for you, like System.Collections.Concurrent.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/2914878604734140905'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/2914878604734140905'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html?showComment=1393540958792#c2914878604734140905' title=''/><author><name>Paul</name><uri>http://www.blogger.com/profile/01545755046589231372</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2767646867034459027' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1875286182'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 27, 2014 at 5:42:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4692285043018262355</id><published>2014-02-27T18:01:56.072-05:00</published><updated>2014-02-27T18:01:56.072-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

Awesome post. I still have one doubt:...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;Awesome post. I still have one doubt:&lt;br /&gt;&lt;br /&gt;&amp;quot;Since the library/BCL is using the standard P/Invoke overlapped I/O system, it has already registered the handle with the I/O Completion Port (IOCP), which is part of the thread pool. So an I/O thread pool thread is borrowed briefly to execute the APC, which notifies the task that it&amp;#39;s complete.&amp;quot;&lt;br /&gt;&lt;br /&gt;What do you mean by an I/O thread pool thread, you mean one of the threads that are registered in the I/O completion port? &lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/4692285043018262355'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/4692285043018262355'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1393542116072#c4692285043018262355' title=''/><author><name>Eric Lemes</name><uri>http://www.blogger.com/profile/04209337471330041525</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1569582517'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 27, 2014 at 6:01:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6040397785547584035</id><published>2014-02-27T19:43:22.784-05:00</published><updated>2014-02-27T19:43:22.784-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sure! There&amp;#39;s nothing wrong with using types t...</title><content type='html'>Sure! There&amp;#39;s nothing wrong with using types that are implemented in a lock-free manner.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/6040397785547584035'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/6040397785547584035'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html?showComment=1393548202784#c6040397785547584035' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/2914878604734140905'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2767646867034459027' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 27, 2014 at 7:43:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5954604705271896347</id><published>2014-02-27T19:46:02.479-05:00</published><updated>2014-02-27T19:46:02.479-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, it&amp;#39;s one of the I/O threads in the thread...</title><content type='html'>Yes, it&amp;#39;s one of the I/O threads in the thread pool. The ThreadPool keeps a number of threads registered in its IOCP; these are different than the worker threads that most people associate with the ThreadPool. The ThreadPool manages both worker thread and I/O threads.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/5954604705271896347'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/5954604705271896347'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1393548362479#c5954604705271896347' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/4692285043018262355'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, February 27, 2014 at 7:46:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8512228295656271831</id><published>2014-02-28T10:43:44.907-05:00</published><updated>2014-02-28T10:43:44.907-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Ha, you guys are a trip.  Pretty fun to read.  The...</title><content type='html'>Ha, you guys are a trip.  Pretty fun to read.  There&amp;#39;s a good probability we are just &amp;quot;living&amp;quot; our lives in an advanced computer simulation, either created by our future selves or a more advanced being (a.k.a. God).  Thus, learning to program is simply giving ourselves the ability to customize our existence.  Cheers.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/8512228295656271831'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/8512228295656271831'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1393602224907#c8512228295656271831' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-530960164'/><gd:extendedProperty name='blogger.displayTime' value='Friday, February 28, 2014 at 10:43:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-265549738516311453</id><published>2014-03-03T09:00:33.901-05:00</published><updated>2014-03-03T09:00:33.901-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Okay, so it still requires Visual Studio 2012 and ...</title><content type='html'>Okay, so it still requires Visual Studio 2012 and will not work in 2010.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/265549738516311453'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/265549738516311453'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1393855233901#c265549738516311453' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6387491180236197047'/><author><name>Yves</name><uri>http://www.blogger.com/profile/17506047972802687228</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1750263076'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 3, 2014 at 9:00:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1814605577503131746</id><published>2014-03-03T09:01:53.994-05:00</published><updated>2014-03-03T09:01:53.994-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Correct; if your tools are four years old or older...</title><content type='html'>Correct; if your tools are four years old or older, then they won&amp;#39;t work with the newest technology. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/1814605577503131746'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/1814605577503131746'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1393855313994#c1814605577503131746' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6387491180236197047'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 3, 2014 at 9:01:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4763727843150399010</id><published>2014-03-03T09:48:30.924-05:00</published><updated>2014-03-03T09:48:30.924-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Perfect wording :) Thanks, Stephen!</title><content type='html'>Perfect wording :) Thanks, Stephen!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/4763727843150399010'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/4763727843150399010'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html?showComment=1393858110924#c4763727843150399010' title=''/><author><name>Yury Schkatula</name><uri>http://www.blogger.com/profile/00615519415444576045</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='28' src='http://1.bp.blogspot.com/_RLly75caTwg/TMsNirxlCgI/AAAAAAAAAAM/-OPdbGQlJSA/S220/IMG_3474.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2767646867034459027' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1843440841'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 3, 2014 at 9:48:00 AM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2011195808913028684</id><published>2014-03-05T12:13:03.483-05:00</published><updated>2014-03-05T12:13:03.483-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>After reading this the clouds lifted.  Thanks a TO...</title><content type='html'>After reading this the clouds lifted.  Thanks a TON for this post.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/2011195808913028684'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/2011195808913028684'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1394039583483#c2011195808913028684' title=''/><author><name>Todd Nichols</name><uri>http://www.blogger.com/profile/07992525698042552121</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-XsTYR-1eLGU/AAAAAAAAAAI/AAAAAAAAASo/M5HIh9v2QRc/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-189635673'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 5, 2014 at 12:13:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7219380848783147503</id><published>2014-03-07T20:14:57.615-05:00</published><updated>2014-03-07T20:14:57.615-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Please look at the point where you say &amp;quot; // A...</title><content type='html'>Please look at the point where you say &amp;quot; // At this point, all three tasks are running in parallel.&amp;quot;... since it is still running in the same thread then it would take the same total time as if you wrote DoOperation0(); DoOperation1(); DoOperation2(); &lt;br /&gt;Is that correct?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7219380848783147503'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7219380848783147503'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1394241297615#c7219380848783147503' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1139494184'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 7, 2014 at 8:14:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3531516536101512210</id><published>2014-03-07T22:14:35.430-05:00</published><updated>2014-03-07T22:14:35.430-05:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>My use of &amp;quot;parallel&amp;quot; there is confusing....</title><content type='html'>My use of &amp;quot;parallel&amp;quot; there is confusing. If the operations are CPU-bound and there is a single-thread context, then yes, it would take the same total time.&lt;br /&gt;&lt;br /&gt;However, if the operations are naturally asynchronous, then they can all run concurrently on the same thread.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3531516536101512210'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3531516536101512210'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1394248475430#c3531516536101512210' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7219380848783147503'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 7, 2014 at 10:14:00 PM EST'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-403578705557654380</id><published>2014-03-09T15:53:23.119-04:00</published><updated>2014-03-09T15:53:23.119-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks, I understand this part now. So for loading...</title><content type='html'>Thanks, I understand this part now. So for loading from HDD operations (loading images and extracting thumbnails), does it make sense to use Task Factory or use just task/await?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/403578705557654380'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/403578705557654380'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1394394803119#c403578705557654380' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7219380848783147503'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-420251976'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 9, 2014 at 3:53:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5201782313902500159</id><published>2014-03-09T17:10:08.990-04:00</published><updated>2014-03-09T17:10:08.990-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you
I tried to implement your proposed solut...</title><content type='html'>Thank you&lt;br /&gt;I tried to implement your proposed solution would&lt;br /&gt;But I did not succeed .MyForm.Designer.cs MyForm.cs forms and contents combined , and there is no possibility to open and edit MyForm.Designer.cs&lt;br /&gt;It is a video or Picture conversion process to give me advice&lt;br /&gt;Sincerely, Yours</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5201782313902500159'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5201782313902500159'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1394399408990#c5201782313902500159' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1284364328'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 9, 2014 at 5:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3882082856946259510</id><published>2014-03-09T23:42:54.653-04:00</published><updated>2014-03-09T23:42:54.653-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>For loading data from disk, use async. If you&amp;#39;...</title><content type='html'>For loading data from disk, use async. If you&amp;#39;re doing image manipulation, ideally you would use parallel or background tasks. However, the built-in image manipulation (BitmapImage etc) is mostly tied to the UI thread so that&amp;#39;s not possible.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3882082856946259510'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3882082856946259510'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1394422974653#c3882082856946259510' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7219380848783147503'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 9, 2014 at 11:42:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2838941792994687788</id><published>2014-03-09T23:45:23.844-04:00</published><updated>2014-03-09T23:45:23.844-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sorry, I haven&amp;#39;t tried it with newer VS versio...</title><content type='html'>Sorry, I haven&amp;#39;t tried it with newer VS versions. I would create a similar form and see what the declarations are, and then try to get your reverse-compiled code to match. Pay close attention to the designer load error messages.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/2838941792994687788'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/2838941792994687788'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html?showComment=1394423123844#c2838941792994687788' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6474634844717706044/comments/default/5201782313902500159'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/11/reverse-compiling-windows-forms.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6474634844717706044' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6474634844717706044' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, March 9, 2014 at 11:45:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-986253638832615002</id><published>2014-03-10T10:14:51.162-04:00</published><updated>2014-03-10T10:14:51.162-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks Stephen! This was very helpful! </title><content type='html'>Thanks Stephen! This was very helpful! </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/986253638832615002'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/986253638832615002'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1394460891162#c986253638832615002' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7219380848783147503'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-542090054'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 10, 2014 at 10:14:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-581894842229380904</id><published>2014-03-11T14:49:51.067-04:00</published><updated>2014-03-11T14:49:51.067-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m reading this two years too late! Thanks fo...</title><content type='html'>I&amp;#39;m reading this two years too late! Thanks for the great articles, Stephen.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/581894842229380904'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/581894842229380904'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1394563791067#c581894842229380904' title=''/><author><name>Damian Powell</name><uri>http://www.blogger.com/profile/17133278233421943645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1948859318'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 11, 2014 at 2:49:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8536563793060695651</id><published>2014-03-14T01:53:13.652-04:00</published><updated>2014-03-14T01:53:13.652-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>re: Accept - The new socket is completely independ...</title><content type='html'>re: Accept - The new socket is completely independent from the listening socket&lt;br /&gt;&lt;br /&gt;Does the new socket inherit the listening socket&amp;#39;s properties?  Specifically, if the listening socket was set to be non-blocking, is the new socket also non-blocking?&lt;br /&gt;&lt;br /&gt;Thanks!&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/8536563793060695651'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/8536563793060695651'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1394776393652#c8536563793060695651' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1688867394'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 14, 2014 at 1:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8573304684487276157</id><published>2014-03-14T08:40:16.488-04:00</published><updated>2014-03-14T08:40:16.488-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, it does inherit those properties. From MSDN (...</title><content type='html'>Yes, it does inherit those properties. From MSDN (WSAAccept): &amp;quot;The newly created socket has the same properties as socket s including asynchronous events registered with WSAAsyncSelect or with WSAEventSelect.&amp;quot;&lt;br /&gt;&lt;br /&gt;Note that &amp;quot;non-blocking&amp;quot; has a special meaning for sockets. Sockets can be blocking, non-blocking, or asynchronous, and you want asynchronous, not non-blocking.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/8573304684487276157'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/8573304684487276157'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1394800816488#c8573304684487276157' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/8536563793060695651'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 14, 2014 at 8:40:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7366147790724129920</id><published>2014-03-14T12:47:48.875-04:00</published><updated>2014-03-14T12:47:48.875-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hey Stephen,
Thanks a lot for all the article you&amp;...</title><content type='html'>Hey Stephen,&lt;br /&gt;Thanks a lot for all the article you&amp;#39;ve published thus far. They are super useful.&lt;br /&gt;&lt;br /&gt;I have a question for you. In your code solution 2 above&lt;br /&gt;&lt;br /&gt;public class MyController : ApiController&lt;br /&gt;{&lt;br /&gt;  public async Task Get()&lt;br /&gt;  {&lt;br /&gt;    var json = await GetJsonAsync(...);&lt;br /&gt;    return json.ToString();&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Now if you make the Get() method async and you call GetJsonAsync() and if this method is a long running process, wouldn&amp;#39;t the request just return back to the client without actually waiting for the GetJsonAsync() call to complete. Could you please shed some light on this.&lt;br /&gt;&lt;br /&gt;Thanks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7366147790724129920'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7366147790724129920'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1394815668875#c7366147790724129920' title=''/><author><name>The Answer</name><uri>http://www.blogger.com/profile/04409498104469646011</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1491624322'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 14, 2014 at 12:47:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2581860594871200003</id><published>2014-03-14T22:30:02.006-04:00</published><updated>2014-03-14T22:30:02.006-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Instead should the article&amp;#39;s title be:  &amp;quot;...</title><content type='html'>Instead should the article&amp;#39;s title be:  &amp;quot;There is no (worker) thread.&amp;quot; ;) But GREAT Article. LOVE IT.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/2581860594871200003'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/2581860594871200003'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html?showComment=1394850602006#c2581860594871200003' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8264686406066940003/comments/default/4692285043018262355'/><author><name>Keyse</name><uri>http://www.blogger.com/profile/14078171403075259352</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/there-is-no-thread.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8264686406066940003' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8264686406066940003' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-159829965'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 14, 2014 at 10:30:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3721943215680109999</id><published>2014-03-17T11:00:49.361-04:00</published><updated>2014-03-17T11:00:49.361-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Like!</title><content type='html'>Like!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/3721943215680109999'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2767646867034459027/comments/default/3721943215680109999'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html?showComment=1395068449361#c3721943215680109999' title=''/><author><name>Joseph</name><uri>http://www.blogger.com/profile/04926055076730802189</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/02/guidelines-for-lock-free-programming.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2767646867034459027' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2767646867034459027' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2060100639'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 17, 2014 at 11:00:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8043922236213748168</id><published>2014-03-17T22:27:22.651-04:00</published><updated>2014-03-17T22:27:22.651-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

First of all, thanks for your posts o...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;First of all, thanks for your posts on the LogicalCallContext.  They were very helpful in explaining the concepts.  I had an idea very similar to yours above regarding logging flow throughout a tree of async operations.  A key point in my idea was to be able to apply the logging code via PostSharp.  &lt;br /&gt;&lt;br /&gt;I copied your code above and it worked perfectly, just like you described.  However, I then attempted to replace your using(){ } blocks with a PostSharp method aspect.  It did not work unfortunately.  The code for the aspect is below:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    [Serializable]&lt;br /&gt;    public class ClearyMethodAspectAttribute : OnMethodBoundaryAspect&lt;br /&gt;    {&lt;br /&gt;        public override void OnEntry(MethodExecutionArgs args)&lt;br /&gt;        {&lt;br /&gt;            var disposable = MyStack.Push(args.Method.Name);&lt;br /&gt;            args.MethodExecutionTag = disposable;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        public override void OnExit(MethodExecutionArgs args)&lt;br /&gt;        {&lt;br /&gt;            var disposable = args.MethodExecutionTag as IDisposable;&lt;br /&gt;            if(disposable != null) disposable.Dispose();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;This is the output:&lt;br /&gt;*** ConsoleOutput ***&lt;br /&gt;&lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;Main: &lt;br /&gt;&lt;br /&gt;It seems that it would be functionally equivalent to your code but there must be something I am missing since I can&amp;#39;t get it to work properly.  Do you have any thoughts on what the difference between the using(){} approach and the MethodAspect approach?&lt;br /&gt;&lt;br /&gt;Thanks,&lt;br /&gt;Paul</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/8043922236213748168'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/8043922236213748168'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1395109642651#c8043922236213748168' title=''/><author><name>Paul Rogero</name><uri>http://www.blogger.com/profile/18276298439153144212</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-249649378'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 17, 2014 at 10:27:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9142751097868892595</id><published>2014-03-17T22:30:10.740-04:00</published><updated>2014-03-17T22:30:10.740-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Looks like Blogger sanitized the comment code.  Sh...</title><content type='html'>Looks like Blogger sanitized the comment code.  Should be:&lt;br /&gt;&lt;br /&gt;Main: &amp;lt;SomeWork&amp;gt;&lt;br /&gt;Main: &amp;lt;MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;SomeWork&amp;gt;&lt;br /&gt;Main: &amp;lt;MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;/MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;/MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;/SomeWork&amp;gt;&lt;br /&gt;Main: &amp;lt;/MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;/MoreWork&amp;gt;&lt;br /&gt;Main: &amp;lt;/SomeWork&amp;gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/9142751097868892595'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/9142751097868892595'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1395109810740#c9142751097868892595' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/8043922236213748168'/><author><name>Paul Rogero</name><uri>http://www.blogger.com/profile/18276298439153144212</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-249649378'/><gd:extendedProperty name='blogger.displayTime' value='Monday, March 17, 2014 at 10:30:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3141374583642975609</id><published>2014-03-18T09:02:34.260-04:00</published><updated>2014-03-18T09:02:34.260-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Paul -

You may be interested in my AsyncDiagnosti...</title><content type='html'>Paul -&lt;br /&gt;&lt;br /&gt;You may be interested in my AsyncDiagnostics library (https://github.com/StephenCleary/AsyncDiagnostics), which combines the LogicalCallContext with PostSharp. By default it just attaches the causality stack to the Data property of any exception that is thrown, but it also allows using-style constructs to add your own data to the stack, and a Current property that allows you to read the current stack at any time.&lt;br /&gt;&lt;br /&gt;Note that you&amp;#39;ll need PostSharp 3.1 for OnEntry/OnExit to work correctly with async methods. I can&amp;#39;t tell from your output whether it&amp;#39;s actually getting mangled (the numbers and letters are the important parts). If you&amp;#39;re already using 3.1 and you&amp;#39;re sure the output is incorrect, it might be a problem with MethodExecutionTag (in which case you should notify PostSharp support).&lt;br /&gt;&lt;br /&gt;Steve</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/3141374583642975609'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/3141374583642975609'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1395147754260#c3141374583642975609' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/8043922236213748168'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 18, 2014 at 9:02:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-738023542454903663</id><published>2014-03-18T18:18:10.613-04:00</published><updated>2014-03-18T18:18:10.613-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Steve,

Thanks for the reply! 

I just checked ...</title><content type='html'>Hi Steve,&lt;br /&gt;&lt;br /&gt;Thanks for the reply! &lt;br /&gt;&lt;br /&gt;I just checked my PostSharp version and I&amp;#39;m on version 3.1.33.9 which seems to be the latest.  The output in my second reply is exactly how it looked on my unit tests.  The numbers and letters are literally not there.  So the MyStack.Push(string) method doesn&amp;#39;t seem to be working in the PostSharp version I created.  It worked perfectly in the version that uses using(){ } blocks however.&lt;br /&gt;&lt;br /&gt;I see you use PostSharp in your AsyncDiagnostics library so I&amp;#39;ll have to check it out to see what I&amp;#39;m doing wrong.&lt;br /&gt;&lt;br /&gt;Thanks for the original blog post and the reply!&lt;br /&gt;&lt;br /&gt;Paul</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/738023542454903663'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/738023542454903663'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1395181090613#c738023542454903663' title=''/><author><name>Paul Rogero</name><uri>http://www.blogger.com/profile/18276298439153144212</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-249649378'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, March 18, 2014 at 6:18:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5786817938932341647</id><published>2014-03-19T05:05:19.417-04:00</published><updated>2014-03-19T05:05:19.417-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen, thanks for the great post.

Will this ...</title><content type='html'>Hi Stephen, thanks for the great post.&lt;br /&gt;&lt;br /&gt;Will this solution work for Silverlight 5 async unit tests?&lt;br /&gt;&lt;br /&gt;Thanks,</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/5786817938932341647'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/5786817938932341647'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1395219919417#c5786817938932341647' title=''/><author><name>Joan Comas Fernandez</name><uri>http://www.blogger.com/profile/07385299803833054691</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-wCgtBOQ_y5o/AAAAAAAAAAI/AAAAAAAAAKU/I3YkyJ5GtAg/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1146719344'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 19, 2014 at 5:05:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7586528481408045093</id><published>2014-03-19T09:04:14.534-04:00</published><updated>2014-03-19T09:04:14.534-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I have not tried it, but I believe that MSTest in ...</title><content type='html'>I have not tried it, but I believe that MSTest in VS2012 and newer will support async Task unit tests for any target framework.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/7586528481408045093'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/7586528481408045093'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1395234254534#c7586528481408045093' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/5786817938932341647'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 19, 2014 at 9:04:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1535487096273373882</id><published>2014-03-19T09:06:31.130-04:00</published><updated>2014-03-19T09:06:31.130-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No, it will not return to the client. The ASP.NET ...</title><content type='html'>No, it will not return to the client. The ASP.NET MVC runtime sees that the action is returning a Task, and it will (asynchronously) wait for that task to complete before sending the response to the client.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1535487096273373882'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1535487096273373882'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1395234391130#c1535487096273373882' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/7366147790724129920'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 19, 2014 at 9:06:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6819513272330100089</id><published>2014-03-20T07:22:13.027-04:00</published><updated>2014-03-20T07:22:13.027-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Ok I&amp;#39;ll try, thanks a lot :)</title><content type='html'>Ok I&amp;#39;ll try, thanks a lot :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/6819513272330100089'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/6819513272330100089'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html?showComment=1395314533027#c6819513272330100089' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3764589414165236705/comments/default/5786817938932341647'/><author><name>Joan Comas Fernandez</name><uri>http://www.blogger.com/profile/07385299803833054691</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh5.googleusercontent.com/-wCgtBOQ_y5o/AAAAAAAAAAI/AAAAAAAAAKU/I3YkyJ5GtAg/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-2-right-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3764589414165236705' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3764589414165236705' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1146719344'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, March 20, 2014 at 7:22:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5388795840559470528</id><published>2014-03-21T04:33:10.398-04:00</published><updated>2014-03-21T04:33:10.398-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If the intention of this example is to be as fail ...</title><content type='html'>If the intention of this example is to be as fail safe as possible I would avoid calling a method with unknown performance and (b)locking characteristics like Trace.WriteLine and new Win32Exception from the finalizer. Whatever is intended, we should always  make sure that the finalizer thread just does the bare minimum of activity for stability and scalability reasons. &lt;br /&gt;I would also avoid the string concatenation which would cause a new memory allocation from the finalizer thread.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/5388795840559470528'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/431595782877712191/comments/default/5388795840559470528'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html?showComment=1395390790398#c5388795840559470528' title=''/><author><name>Bombadil</name><uri>http://www.blogger.com/profile/03271022167505684874</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/08/third-rule-of-implementing-idisposable.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-431595782877712191' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/431595782877712191' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1561056854'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 21, 2014 at 4:33:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-765085071186825732</id><published>2014-03-26T09:50:20.163-04:00</published><updated>2014-03-26T09:50:20.163-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Wouldn&amp;#39;t the solution be the following code?

...</title><content type='html'>Wouldn&amp;#39;t the solution be the following code?&lt;br /&gt;&lt;br /&gt;public event MyEventHandler MyEvent = delegate { };&lt;br /&gt;protected virtual OnMyEvent(MyEventArgs args)&lt;br /&gt;{&lt;br /&gt;    this.MyEvent(this, args);&lt;br /&gt;}</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/765085071186825732'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/765085071186825732'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/threadsafe-events.html?showComment=1395841820163#c765085071186825732' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/threadsafe-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9184802602754741911' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9184802602754741911' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1363567390'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 26, 2014 at 9:50:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7487249303870989989</id><published>2014-03-26T11:24:01.465-04:00</published><updated>2014-03-26T11:24:01.465-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No; there&amp;#39;s still a race condition between sub...</title><content type='html'>No; there&amp;#39;s still a race condition between subscribing/unsubscribing and raising the event.&lt;br /&gt;&lt;br /&gt;Specifically, it is possible with that code to have one thread unsubscribe an event handler from the event, and then have another thread invoke that event handler.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/7487249303870989989'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/7487249303870989989'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/threadsafe-events.html?showComment=1395847441465#c7487249303870989989' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/765085071186825732'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/threadsafe-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9184802602754741911' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9184802602754741911' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 26, 2014 at 11:24:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7935675321118266192</id><published>2014-03-26T11:44:39.559-04:00</published><updated>2014-03-26T11:44:39.559-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I see… that&amp;#39;s so complicated… anyway thanks fo...</title><content type='html'>I see… that&amp;#39;s so complicated… anyway thanks for the answer :) btw. I’m trying to read whole blog since it&amp;#39;s very interesting (especially the multithreading parts) :))</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/7935675321118266192'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/7935675321118266192'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/06/threadsafe-events.html?showComment=1395848679559#c7935675321118266192' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/9184802602754741911/comments/default/765085071186825732'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/06/threadsafe-events.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9184802602754741911' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9184802602754741911' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1363567390'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, March 26, 2014 at 11:44:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6282929410216119412</id><published>2014-03-28T06:04:34.532-04:00</published><updated>2014-03-28T06:04:34.532-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Can you add a search functionality to your blog? ^...</title><content type='html'>Can you add a search functionality to your blog? ^_^&lt;br /&gt;&lt;br /&gt;It&amp;#39;s kinda hard to open all topics from the timeline.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6282929410216119412'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6282929410216119412'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1396001074532#c6282929410216119412' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-511369009'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 28, 2014 at 6:04:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4973445264199033153</id><published>2014-03-28T10:19:23.596-04:00</published><updated>2014-03-28T10:19:23.596-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There you go. :)</title><content type='html'>There you go. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/4973445264199033153'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/4973445264199033153'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html?showComment=1396016363596#c4973445264199033153' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8479165366230044011/comments/default/6282929410216119412'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/reporting-progress-from-async-tasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8479165366230044011' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8479165366230044011' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, March 28, 2014 at 10:19:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5818116423456045664</id><published>2014-04-01T14:21:43.498-04:00</published><updated>2014-04-01T14:21:43.498-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen

This is excellent for a newbie like my...</title><content type='html'>Hi Stephen&lt;br /&gt;&lt;br /&gt;This is excellent for a newbie like myself.&lt;br /&gt;&lt;br /&gt;One question though - in your final example, how do you access the return value of the method you are awaiting? (Told you I was a newbie! ;0) )&lt;br /&gt;&lt;br /&gt;Many thanks.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5818116423456045664'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5818116423456045664'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1396376503498#c5818116423456045664' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-435404288'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 1, 2014 at 2:21:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3101945220032833601</id><published>2014-04-01T14:54:50.824-04:00</published><updated>2014-04-01T14:54:50.824-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Time for me to comment.
Thank you, Thank you, Than...</title><content type='html'>Time for me to comment.&lt;br /&gt;Thank you, Thank you, Thank you. I have been struggling to figure out how to properly use async/await. I found Steve Toub&amp;#39;s posts and they left me baffled. I just read 23 of your posts starting with 2012-02-02  - Async and Await. Now lets see if I can start this without embarrassing myself. &lt;br /&gt;.... I think I had better learn F# so I can think about this without turning my brain inside out.&lt;br /&gt;Thanks again, Miguelito</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/3101945220032833601'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/9136943739327263674/comments/default/3101945220032833601'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html?showComment=1396378490824#c3101945220032833601' title=''/><author><name>Mike Breeden</name><uri>http://www.a1swdeveloper.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-9136943739327263674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/9136943739327263674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1116589311'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 1, 2014 at 2:54:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7100875251821352038</id><published>2014-04-02T08:47:27.065-04:00</published><updated>2014-04-02T08:47:27.065-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The code doesn&amp;#39;t show it, but the &amp;quot;await&amp;...</title><content type='html'>The code doesn&amp;#39;t show it, but the &amp;quot;await&amp;quot; expression evaluates to that return value, so you can do this:&lt;br /&gt;  var result = await Task.Run(() =&amp;gt; myService.CalculateMandlebrot());&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/7100875251821352038'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/7100875251821352038'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1396442847065#c7100875251821352038' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/5336563072409253391'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 2, 2014 at 8:47:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6805701506151006743</id><published>2014-04-02T15:22:10.620-04:00</published><updated>2014-04-02T15:22:10.620-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would greatly appreciate your correcting the spe...</title><content type='html'>I would greatly appreciate your correcting the spelling of Mandlebrot to Mandelbrot, for the benefit of us weirdos who love fractals and hate to see the name of one misspelled.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/6805701506151006743'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/6805701506151006743'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1396466530620#c6805701506151006743' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-396026261'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 2, 2014 at 3:22:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4974750133915551183</id><published>2014-04-02T18:07:48.292-04:00</published><updated>2014-04-02T18:07:48.292-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@anemet: Mate - and I say this as a computer progr...</title><content type='html'>@anemet: Mate - and I say this as a computer programmer and an atheist myself - your posts suck. Your opinions are meaningless because you don&amp;#39;t understand the (pretty major) assumptions you&amp;#39;ve based them on - in fact, you don&amp;#39;t even seem to realise you&amp;#39;re making assumptions in the first place. If you do believe your (somewhat ironic) comment that it&amp;#39;s &amp;quot;good to keep an open mind&amp;quot;, then put down the Richard Dawkins books for five minutes and enrol on a Philosophy 101 course. None of us truly knows where the whole of existence came from - or even whether it did.&lt;br /&gt;&lt;br /&gt;For various reasons, I don&amp;#39;t believe we ever can know, and I like to think of that as the Universe&amp;#39;s way of making sure things will never get boring :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4974750133915551183'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4974750133915551183'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1396476468292#c4974750133915551183' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1647216540838138629'/><author><name>Jason</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1468830980'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 2, 2014 at 6:07:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8910411845978851845</id><published>2014-04-03T18:38:55.875-04:00</published><updated>2014-04-03T18:38:55.875-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen, Thanks for the article.

If I detect s...</title><content type='html'>Hi Stephen, Thanks for the article.&lt;br /&gt;&lt;br /&gt;If I detect something like this on my Cisco 3945 router, does that indicate an attack and how would one resolve it.&lt;br /&gt;&lt;br /&gt;Mar 24 04:34:50.428 UTC: %FW-4-HOST_TCP_ALERT_ON: Max tcp half-open connections (1000) exceeded for host x.x.x.x (Public IP)&lt;br /&gt;Mar 24 04:35:12.132 UTC: %FW-4-HOST_TCP_ALERT_ON: Max tcp half-open connections (1000) exceeded for host x.x.x.x (Public IP)&lt;br /&gt;Mar 24 04:35:15.356 UTC: %FW-4-ALERT_ON: getting aggressive, count (1017/3600) current 1-min rate: 2401&lt;br /&gt;Mar 24 04:41:33.802 UTC: %FW-4-ALERT_OFF: calming down, count (23/2900) current 1-min rate: 1536&lt;br /&gt;Mar 24 04:49:51.957 UTC: %FW-4-ALERT_ON: getting aggressive, count (27/3600) current 1-min rate: 2401&lt;br /&gt;Mar 24 04:50:17.394 UTC: %FW-4-ALERT_OFF: calming down, count (11/2900) current 1-min rate: 1410&lt;br /&gt;&lt;br /&gt;Thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8910411845978851845'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8910411845978851845'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1396564735875#c8910411845978851845' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-193752260'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 3, 2014 at 6:38:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5774938223227785154</id><published>2014-04-03T19:13:04.713-04:00</published><updated>2014-04-03T19:13:04.713-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That&amp;#39;s not really my area of expertise, but it...</title><content type='html'>That&amp;#39;s not really my area of expertise, but it does look like it could be an attack. I recommend shutting down all incoming access from the Internet completely, including ping responses.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5774938223227785154'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/5774938223227785154'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1396566784713#c5774938223227785154' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/8910411845978851845'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 3, 2014 at 7:13:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5684008813559616691</id><published>2014-04-04T09:25:47.052-04:00</published><updated>2014-04-04T09:25:47.052-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, very nice resource. Can you please explain wha...</title><content type='html'>Hi, very nice resource. Can you please explain what happened if the backlog queue is full ? Do you think that is it a good idea to increase backlog size in order to run load tests ? &lt;br /&gt;thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/5684008813559616691'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/5684008813559616691'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1396617947052#c5684008813559616691' title=''/><author><name>isma</name><uri>http://www.blogger.com/profile/09993433847955674221</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1498896313'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 4, 2014 at 9:25:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1007486929567150467</id><published>2014-04-04T09:33:01.188-04:00</published><updated>2014-04-04T09:33:01.188-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If the backlog queue is full, then connections are...</title><content type='html'>If the backlog queue is full, then connections are rejected (before they have a chance to be accepted).&lt;br /&gt;&lt;br /&gt;You should not increase the backlog size when running load tests; the backlog queue is specifically meant as a throttling mechanism, and in a load test it&amp;#39;s important to determine how the system will actually behave in production. IMO, of course. :)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/1007486929567150467'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/1007486929567150467'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1396618381188#c1007486929567150467' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/5684008813559616691'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 4, 2014 at 9:33:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2726948405886213604</id><published>2014-04-04T09:53:11.294-04:00</published><updated>2014-04-04T09:53:11.294-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>first of all thanks for your quick answer. and for...</title><content type='html'>first of all thanks for your quick answer. and for sur you&amp;#39;re right about the load test :-). In our case we create severals instance of clients. They are all distributed  on virtual machine. The backlog size is set to 10000 connections and ours clients received socket connection exception from a certain number attempt of new connections. I&amp;#39;m trying to find if the problem may come from the backlog size ... </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/2726948405886213604'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/2726948405886213604'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1396619591294#c2726948405886213604' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/5684008813559616691'/><author><name>isma</name><uri>http://www.blogger.com/profile/09993433847955674221</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1498896313'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 4, 2014 at 9:53:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1934563116412280758</id><published>2014-04-04T10:30:28.460-04:00</published><updated>2014-04-04T10:30:28.460-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Sorry, I  just have one more question. Is it possi...</title><content type='html'>Sorry, I  just have one more question. Is it possible to know how many connections are avalaible in queue ? </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/1934563116412280758'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/1934563116412280758'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1396621828460#c1934563116412280758' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/5684008813559616691'/><author><name>isma</name><uri>http://www.blogger.com/profile/09993433847955674221</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1498896313'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 4, 2014 at 10:30:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3800797356216828294</id><published>2014-04-04T12:15:47.384-04:00</published><updated>2014-04-04T12:15:47.384-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Not to my knowledge. Remember, the backlog queue i...</title><content type='html'>Not to my knowledge. Remember, the backlog queue is intended to just be a small buffer in case your server gets temporarily behind. You should always be accepting new connections, and the backlog should hardly ever be used.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3800797356216828294'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3800797356216828294'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1396628147384#c3800797356216828294' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/5684008813559616691'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 4, 2014 at 12:15:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6253135068669206345</id><published>2014-04-05T07:08:09.737-04:00</published><updated>2014-04-05T07:08:09.737-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, Very good article. Have few questions
1. will ...</title><content type='html'>Hi, Very good article. Have few questions&lt;br /&gt;1. will Azure Cache Service do serialize/deserialize by default?&lt;br /&gt;2. Is there any comparison with ProtoBuf.Net serializer?&lt;br /&gt;&lt;br /&gt;Thanks&lt;br /&gt;Suresh</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6253135068669206345'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6253135068669206345'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1396696089737#c6253135068669206345' title=''/><author><name>Suresh Kalimuthu</name><uri>http://www.blogger.com/profile/15362836794949083771</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2106390976'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 5, 2014 at 7:08:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4489381536664601111</id><published>2014-04-05T10:14:14.304-04:00</published><updated>2014-04-05T10:14:14.304-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The Azure cache always serializes because it is a ...</title><content type='html'>The Azure cache always serializes because it is a distributed cache.&lt;br /&gt;&lt;br /&gt;I don&amp;#39;t know of any comparisons with ProtoBuf.Net, sorry.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/4489381536664601111'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/4489381536664601111'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html?showComment=1396707254304#c4489381536664601111' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2320502171131854921/comments/default/6253135068669206345'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/12/azure-cache-serialization-with-json.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2320502171131854921' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2320502171131854921' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 5, 2014 at 10:14:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6457114216787146152</id><published>2014-04-07T02:24:00.898-04:00</published><updated>2014-04-07T02:24:00.898-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This was very helpful. thanks</title><content type='html'>This was very helpful. thanks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/6457114216787146152'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2761650674329324415/comments/default/6457114216787146152'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html?showComment=1396851840898#c6457114216787146152' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2761650674329324415' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2761650674329324415' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1298829742'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 7, 2014 at 2:24:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3091059040229564751</id><published>2014-04-07T14:10:39.409-04:00</published><updated>2014-04-07T14:10:39.409-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for this. I&amp;#39;ve written something simila...</title><content type='html'>Thanks for this. I&amp;#39;ve written something similar a while ago, for .NET 4 and IIS 6.0+: &lt;a href="http://www.dotnettips.info/file/userfile?name=DNTScheduler.7z" rel="nofollow"&gt;DNTScheduler.7z&lt;/a&gt;&lt;br /&gt;I used normal Threads, because I could set its thread priority to below normal. In this case, running a long and heavy background task, won&amp;#39;t disable the whole site.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3097834002628415077/comments/default/3091059040229564751'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3097834002628415077/comments/default/3091059040229564751'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-aspnetbackgroundtasks.html?showComment=1396894239409#c3091059040229564751' title=''/><author><name>وحيد نصيري</name><uri>http://www.blogger.com/profile/04454130327051686471</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='29' src='http://2.bp.blogspot.com/_OdzG9yYNnp8/TS9psM0Q3HI/AAAAAAAAAEs/FctAuuHV84U/s1600-R/Avatar.ashx%253FDownloadId%253D197697'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-aspnetbackgroundtasks.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3097834002628415077' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3097834002628415077' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1541364141'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 7, 2014 at 2:10:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8172452310574543287</id><published>2014-04-08T10:49:18.911-04:00</published><updated>2014-04-08T10:49:18.911-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you are interested in a reliable solution for p...</title><content type='html'>If you are interested in a reliable solution for performing fire-and-forget work in ASP.NET applications, you can take a look to http://hangfire.io It is based on persistent queues and give you guarantees that any enqueued task will be performed even in case of process termination.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/8172452310574543287'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/8172452310574543287'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1396968558911#c8172452310574543287' title=''/><author><name>odinserj</name><uri>http://www.blogger.com/profile/10191348663936414637</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1993132752'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 8, 2014 at 10:49:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2431132332816674279</id><published>2014-04-08T10:54:49.949-04:00</published><updated>2014-04-08T10:54:49.949-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That looks interesting. I&amp;#39;m curious to see how...</title><content type='html'>That looks interesting. I&amp;#39;m curious to see how they serialize arbitrary lambda expressions...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/2431132332816674279'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/2431132332816674279'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1396968889949#c2431132332816674279' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/8172452310574543287'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 8, 2014 at 10:54:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7615460955026698071</id><published>2014-04-08T11:01:32.613-04:00</published><updated>2014-04-08T11:01:32.613-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Its not a rocket science. It takes the method name...</title><content type='html'>Its not a rocket science. It takes the method name, declaring type fully qualified name (for static expression and specified type for instance one) and its parameter type names. Worker takes this information and finds the needed MethodInfo instance. Arguments are serialized into a string using the TypeConverter class.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7615460955026698071'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7615460955026698071'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1396969292613#c7615460955026698071' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/8172452310574543287'/><author><name>odinserj</name><uri>http://www.blogger.com/profile/10191348663936414637</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1993132752'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 8, 2014 at 11:01:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2865720402591662719</id><published>2014-04-11T08:21:49.097-04:00</published><updated>2014-04-11T08:21:49.097-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi again, 

I see the number of threads being incr...</title><content type='html'>Hi again, &lt;br /&gt;&lt;br /&gt;I see the number of threads being increased after an awaiter, even though its supposed to just queue up, and execute on the same thread.&lt;br /&gt;&lt;br /&gt;I posted a piece of code, on StackOverFlow, with a simpler synchronization context with no use of extra threads, to try to understand the same. But it seems to double the number of threads.&lt;br /&gt;&lt;br /&gt;http://stackoverflow.com/questions/23012279/no-of-thread-spikes-with-async-await-on-a-simple-custom-synchronization-contex&lt;br /&gt;&lt;br /&gt;It&amp;#39;d be great if you could take a look into it when time permits. Thanks. &lt;br /&gt;&lt;br /&gt;Regards, &lt;br /&gt;Prasanna V. Loganathar</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/2865720402591662719'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8486108197439859674/comments/default/2865720402591662719'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-console-programs.html?showComment=1397218909097#c2865720402591662719' title=''/><author><name>Prasanna V. Loganathar</name><uri>http://www.blogger.com/profile/05767806156414811301</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-91Q0eokrkaQ/AAAAAAAAAAI/AAAAAAAAAx8/W_TywpeJZe8/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-console-programs.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8486108197439859674' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8486108197439859674' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-82257262'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 11, 2014 at 8:21:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3029704363727491344</id><published>2014-04-12T02:20:10.594-04:00</published><updated>2014-04-12T02:20:10.594-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Re: Never to use Task.Run in asp.net - what would ...</title><content type='html'>Re: Never to use Task.Run in asp.net - what would you use for &amp;quot;fire-and-forget&amp;quot; scenarios? A long-running process is kicked off by the browser via a call to an asp.net page. Instead of waiting for the whole process to finish and then return to the client, the call is returned right after launching the job with a status of &amp;quot;started it&amp;quot;. The job is communicating its progress by writing to a log/database/whatever other means. The client, if interested, can check on that. This is quite common scenario in my current line of work...</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/3029704363727491344'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/3029704363727491344'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1397283610594#c3029704363727491344' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-906490625'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 12, 2014 at 2:20:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7575921681842345957</id><published>2014-04-12T11:22:11.222-04:00</published><updated>2014-04-12T11:22:11.222-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The problem with Task.Run on ASP.NET is that it is...</title><content type='html'>The problem with Task.Run on ASP.NET is that it is dangerous. ASP.NET is centered around the request lifecycle, and it simply wasn&amp;#39;t designed to do work outside of that lifecycle.&lt;br /&gt;I go into more depth here: http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html&lt;br /&gt;&lt;br /&gt;The proper solution is to have the long-running process be independent from ASP.NET. E.g., an Azure webjob / worker role or Win32 service. If you insist on living dangerously (i.e., using Task.Run on ASP.NET), at the very least register your background work so that the ASP.NET runtime is aware of it; I have a NuGet package that does this for you: https://github.com/StephenCleary/AspNetBackgroundTasks</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/7575921681842345957'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/7575921681842345957'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html?showComment=1397316131222#c7575921681842345957' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6324871210006331924/comments/default/3029704363727491344'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6324871210006331924' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6324871210006331924' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 12, 2014 at 11:22:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3029183518032005477</id><published>2014-04-12T18:24:23.643-04:00</published><updated>2014-04-12T18:24:23.643-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Is there a way to pass values like (ComboBox.Text)...</title><content type='html'>Is there a way to pass values like (ComboBox.Text) from the UI to an Async Method. I tried but i get cross thread error. BackgroundWorker has the e argument parameter can you advise me on hoe to achieve this without getting the error.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3029183518032005477'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3029183518032005477'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1397341463643#c3029183518032005477' title=''/><author><name>Emmanuel Abia</name><uri>http://www.blogger.com/profile/15843086437756521342</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-727846982'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 12, 2014 at 6:24:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1463293998326458136</id><published>2014-04-12T20:54:42.792-04:00</published><updated>2014-04-12T20:54:42.792-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You can choose whatever arguments you want for you...</title><content type='html'>You can choose whatever arguments you want for your async methods.&lt;br /&gt;&lt;br /&gt;Since you&amp;#39;re getting a cross-thread error, I assume you&amp;#39;re using something like Task.Run. You can just copy the value to a local variable and then pass it to the method, as such:&lt;br /&gt;    string value = comboBox.Text;&lt;br /&gt;    await Task.Run(() =&amp;gt; MyMethodAsync(value));&lt;br /&gt;&lt;br /&gt;If this isn&amp;#39;t clear, please post a question on Stack Overflow.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1463293998326458136'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1463293998326458136'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1397350482792#c1463293998326458136' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3029183518032005477'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 12, 2014 at 8:54:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3171593911360380653</id><published>2014-04-13T14:21:46.960-04:00</published><updated>2014-04-13T14:21:46.960-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>very nice article!!! Thnx a lot...
i have one ques...</title><content type='html'>very nice article!!! Thnx a lot...&lt;br /&gt;i have one question. When a new connection is accepted, it communicates on different port number?? because in java when we create server socket we specify a particular port number, like ServerSocket serverSoc = new ServerSocket(8989). So server socket is listening at port 8989. What happens when multiple clients are requesting? New connection is accepted as Socket clientSoc = serverSoc.accept(). So what about port number?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3171593911360380653'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3171593911360380653'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1397413306960#c3171593911360380653' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1023655242'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, April 13, 2014 at 2:21:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2591364676367603595</id><published>2014-04-14T10:26:47.580-04:00</published><updated>2014-04-14T10:26:47.580-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The new socket connection is actually bound to the...</title><content type='html'>The new socket connection is actually bound to the same (local) port as the listening socket. This works because the remote address/port is different. I&amp;#39;ve updated this post to be a bit less confusing.&lt;br /&gt;&lt;br /&gt;The &amp;quot;uniqueness&amp;quot; of a TCP/IP socket is based on four variables: local address, local port, remote address, remote port. Not just the local port.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/2591364676367603595'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/2591364676367603595'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1397485607580#c2591364676367603595' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3171593911360380653'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 14, 2014 at 10:26:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7350022152344544608</id><published>2014-04-14T14:55:14.207-04:00</published><updated>2014-04-14T14:55:14.207-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks a lot sir!!!:-) This article cleared my few...</title><content type='html'>Thanks a lot sir!!!:-) This article cleared my few doubts:-) </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/7350022152344544608'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/7350022152344544608'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html?showComment=1397501714207#c7350022152344544608' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/5216231873495497128/comments/default/3171593911360380653'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/using-socket-as-server-listening-socket.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-5216231873495497128' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/5216231873495497128' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-643244440'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 14, 2014 at 2:55:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8315474143773793637</id><published>2014-04-18T08:08:38.997-04:00</published><updated>2014-04-18T08:08:38.997-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Congratulations on the book.  I&amp;#39;ll be picking ...</title><content type='html'>Congratulations on the book.  I&amp;#39;ll be picking one up for sure.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/8315474143773793637'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/8315474143773793637'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-book.html?showComment=1397822918997#c8315474143773793637' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-book.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8221701195557924801' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8221701195557924801' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1145025663'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 18, 2014 at 8:08:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1221281538193057421</id><published>2014-04-20T20:18:49.678-04:00</published><updated>2014-04-20T20:18:49.678-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Not coding without tests is NOT extreme.  It&amp;#39;s...</title><content type='html'>Not coding without tests is NOT extreme.  It&amp;#39;s how you get shit done and how our trade will and is developing into and how we should be developing software.   Test Driven is effective, it&amp;#39;s not theory and if you adhere to principals and see what it can do, you never question doing tests, you ALWAYS do tests. http://blog.8thlight.com/eric-smith/2013/04/08/we-are-principled-6.html</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/1221281538193057421'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/1221281538193057421'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html?showComment=1398039529678#c1221281538193057421' title=''/><author><name>Dave Schinkel</name><uri>http://www.blogger.com/profile/00533879225878391595</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-gDqD0UldhTY/AAAAAAAAAAI/AAAAAAABM2Y/2Lf7TaJcd4k/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7640802004847274195' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7640802004847274195' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1735422672'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, April 20, 2014 at 8:18:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3009705277243164880</id><published>2014-04-20T21:52:14.037-04:00</published><updated>2014-04-20T21:52:14.037-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Agree to disagree. I read that blog post about a y...</title><content type='html'>Agree to disagree. I read that blog post about a year ago.&lt;br /&gt;&lt;br /&gt;There are certain types of code such as domain objects and business rules that are very amenable to tests and are ideal for test-driven development. I would go so far as to say that there are entire applications (probably a majority of applications) that can be developed using TDD.&lt;br /&gt;&lt;br /&gt;However, there are also other types of code such as low-level synchronization libraries that cannot be fully developed using test-driven development; at some point a deep understanding of race conditions and other multithreading concerns *must* guide the code development. TDD alone and unguided would result in subtle bugs.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/3009705277243164880'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/3009705277243164880'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html?showComment=1398045134037#c3009705277243164880' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7640802004847274195/comments/default/1221281538193057421'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-unit-tests-part-1-wrong-way.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7640802004847274195' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7640802004847274195' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, April 20, 2014 at 9:52:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1427436766803548098</id><published>2014-04-22T11:35:45.399-04:00</published><updated>2014-04-22T11:35:45.399-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen,
Quick question:
I have the following code...</title><content type='html'>Stephen,&lt;br /&gt;Quick question:&lt;br /&gt;I have the following code:&lt;br /&gt;public async Task Get()&lt;br /&gt;{&lt;br /&gt;   return await ExecuteRequestAsync(&amp;quot;GET&amp;quot;, command, null);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;private async Task ExecuteRequestAsync(string method, string command, string jsonData)&lt;br /&gt;        {&lt;br /&gt;            try&lt;br /&gt;            {&lt;br /&gt;                 await SomeCode()&lt;br /&gt;                 // continue after it&lt;br /&gt;            }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The questions is if I need to put async before &amp;quot;public async Task Get()&amp;quot; and await on the result, if the only line in this function is just return?&lt;br /&gt;Yaniv</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1427436766803548098'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1427436766803548098'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1398180945399#c1427436766803548098' title=''/><author><name>Yaniv Yancovich</name><uri>http://www.blogger.com/profile/15517691077072323439</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-664215231'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 22, 2014 at 11:35:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4177184645969058053</id><published>2014-04-22T11:46:16.377-04:00</published><updated>2014-04-22T11:46:16.377-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>No, you don&amp;#39;t need them. In that case, you can...</title><content type='html'>No, you don&amp;#39;t need them. In that case, you can remove the async/await on the outer &amp;quot;Get&amp;quot; method.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4177184645969058053'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/4177184645969058053'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1398181576377#c4177184645969058053' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1427436766803548098'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 22, 2014 at 11:46:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7161049008668029762</id><published>2014-04-22T18:01:16.551-04:00</published><updated>2014-04-22T18:01:16.551-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the good article :)

One question I hav...</title><content type='html'>Thanks for the good article :)&lt;br /&gt;&lt;br /&gt;One question I have is when should you use Task.FromResult vs. await?  I&amp;#39;ve seen it done both ways and not quite sure what the difference is and when to correctly use each one.&lt;br /&gt;&lt;br /&gt;Thanks for your time!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7161049008668029762'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7161049008668029762'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1398204076551#c7161049008668029762' title=''/><author><name>Dave Black</name><uri>http://www.blogger.com/profile/11787334586939943513</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh3.googleusercontent.com/-ORzxWwenYsI/AAAAAAAAAAI/AAAAAAAAE-0/Qsu4gevuwg8/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1724328934'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 22, 2014 at 6:01:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6377075570426016664</id><published>2014-04-22T18:30:14.268-04:00</published><updated>2014-04-22T18:30:14.268-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I have been using ThreadPool.QueueUserWorkItem on ...</title><content type='html'>I have been using ThreadPool.QueueUserWorkItem on asp.net for fire and forget style work.  My case is we want to send an email (SMTP or REST api call) after the response finishes.  The email sending can take up to several seconds.  If the email fails to send, we log it to a file and retry it again later in a clean up process.  For these reasons I think fire and forget is perfectly legit as the browser doesn&amp;#39;t need to wait for all that. &lt;br /&gt;&lt;br /&gt;Anyway... my question: is AspNetBackgroundTasks any better/safer than ThreadPool.QueueUserWorkItem?  Thanks!&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6377075570426016664'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6377075570426016664'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1398205814268#c6377075570426016664' title=''/><author><name>Chris Center Dynamics</name><uri>http://www.blogger.com/profile/00247490467555634258</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-794308813'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 22, 2014 at 6:30:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3932422021817360819</id><published>2014-04-22T20:25:15.334-04:00</published><updated>2014-04-22T20:25:15.334-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Respectfully disagree; it is possible that your re...</title><content type='html'>Respectfully disagree; it is possible that your response will be sent and then no email or log will ever be generated. Unlikely, but possible.&lt;br /&gt;&lt;br /&gt;AspNetBackgroundTasks is essentially a ThreadPool.QueueUserWorkItem that registers the task with the ASP.NET runtime, so it is safer; it reduces the chance of a lost email/log even further. But it&amp;#39;s still not guaranteed; the only guaranteed solution is reliable storage.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3932422021817360819'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/3932422021817360819'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1398212715334#c3932422021817360819' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6377075570426016664'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 22, 2014 at 8:25:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6916480803033013512</id><published>2014-04-22T20:30:59.415-04:00</published><updated>2014-04-22T20:30:59.415-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If you have some asynchronous operation that your ...</title><content type='html'>If you have some asynchronous operation that your method should (asynchronously) wait for (like calling an Async method), then use await.&lt;br /&gt;&lt;br /&gt;Task.FromResult creates an already-completed task, so it&amp;#39;s not actually asynchronous. It&amp;#39;s useful in a few scenarios, like if you look up the result in an in-memory cache, so there&amp;#39;s no asynchronous work to do. Or if you have an asynchronous (Task-returning) method in an interface or base class and need to override it with a synchronous implementation, like a test stub.&lt;br /&gt;&lt;br /&gt;In production code, await is used a lot more often than Task.FromResult.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6916480803033013512'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/6916480803033013512'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1398213059415#c6916480803033013512' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7161049008668029762'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 22, 2014 at 8:30:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1478815017959911398</id><published>2014-04-23T03:00:38.654-04:00</published><updated>2014-04-23T03:00:38.654-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the reply. I read in another article th...</title><content type='html'>Thanks for the reply. I read in another article that when not writing await, we may miss exception\error handling.&lt;br /&gt;http://compiledexperience.com/blog/posts/async-golden-rules&lt;br /&gt;&lt;br /&gt;Is that true in my case?&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1478815017959911398'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1478815017959911398'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1398236438654#c1478815017959911398' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1427436766803548098'/><author><name>Yaniv Yancovich</name><uri>http://www.blogger.com/profile/15517691077072323439</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-664215231'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 3:00:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3841902149475292768</id><published>2014-04-23T09:15:50.259-04:00</published><updated>2014-04-23T09:15:50.259-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I don&amp;#39;t see that in that article, but that is ...</title><content type='html'>I don&amp;#39;t see that in that article, but that is correct. If your example was doing something that could possibly throw:&lt;br /&gt;&lt;br /&gt;public async Task Get()&lt;br /&gt;{&lt;br /&gt;  var data = SomeMethodThatCanThrow();&lt;br /&gt;  return await ExecuteRequestAsync(data);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Then in that case you would probably want to keep the async/await. The reason is that if you keep them, then any exceptions from SomeMethodThatCanThrow will be placed on the returned task, which is what the caller expects for an asynchronous method. If you remove the async/await in this case, then any exceptions from SomeMethodThatCanThrow will be raised directly to the caller.&lt;br /&gt;&lt;br /&gt;The exceptions are not ignored; it&amp;#39;s just a question of where they go. A method with an asynchronous signature should place its exceptions on the returned Task, not raise them directly.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3841902149475292768'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3841902149475292768'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1398258950259#c3841902149475292768' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/1427436766803548098'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 9:15:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5412778358566070587</id><published>2014-04-23T15:23:32.462-04:00</published><updated>2014-04-23T15:23:32.462-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;m using a third party library to convert a P...</title><content type='html'>I&amp;#39;m using a third party library to convert a PDF to a Tiff. This library doesn&amp;#39;t provide async methods. I&amp;#39;ve written a method that calls this library to convert a PDF in my MCV API web (HTTP) service. I then called this method using Task.Run which I now realize isn&amp;#39;t correct. Is there any way to make this I/O bound method async?&lt;br /&gt;&lt;br /&gt;My code looks like:&lt;br /&gt;var success = await Task.Run(() =&amp;gt; ConvertToTiff(filename));</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/5412778358566070587'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/5412778358566070587'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html?showComment=1398281012462#c5412778358566070587' title=''/><author><name>Chris L</name><uri>http://www.blogger.com/profile/04045464984636938724</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2396756946080501609' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2396756946080501609' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-106871326'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 3:23:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5137439695621347033</id><published>2014-04-23T15:48:17.881-04:00</published><updated>2014-04-23T15:48:17.881-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I suppose we could move the persist of the email t...</title><content type='html'>I suppose we could move the persist of the email to the file system to the response thread, and then use AspNetBackgroundTasks to send the message (from the persisted file queue, not memory) after the response is done.  I would think that should get us *fairly* close to zero loss.   Considering the general success rate of email getting into an in--box, I think we are good as we need to be.  :)&lt;br /&gt;&lt;br /&gt;We went down the windows service road in the beginning to send emails, and it&amp;#39;s a pain.  I have long thought it would be nice if asp.net had a supported, in-the-box thread/queue/whatever for long running processes that don&amp;#39;t need a request/response. Thanks for the AspNetBackgroundTasks project!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/5137439695621347033'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/5137439695621347033'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1398282497881#c5137439695621347033' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6377075570426016664'/><author><name>Chris Center Dynamics</name><uri>http://www.blogger.com/profile/00247490467555634258</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-794308813'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 3:48:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7826979219995596887</id><published>2014-04-23T16:03:40.187-04:00</published><updated>2014-04-23T16:03:40.187-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Give a try to HangFire – a reliable way to kick of...</title><content type='html'>Give a try to HangFire – a reliable way to kick off long-running processes from the ASP.NET request processing pipeline. Asynchronous, transparent, reliable, efficient processing. No Windows service/ Task Scheduler required. Even ASP.NET is not required. (from package description)&lt;br /&gt;&lt;br /&gt;* http://hangfire.io – project page&lt;br /&gt;* http://docs.hangfire.io/en/latest/tutorials/send-email.html – Small tutorial related to sending mail in background.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7826979219995596887'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/7826979219995596887'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html?showComment=1398283420187#c7826979219995596887' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/4189020452189248597/comments/default/6377075570426016664'/><author><name>odinserj</name><uri>http://www.blogger.com/profile/10191348663936414637</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/returning-early-from-aspnet-requests.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4189020452189248597' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4189020452189248597' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1993132752'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 4:03:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-662770088777772216</id><published>2014-04-23T16:28:41.341-04:00</published><updated>2014-04-23T16:28:41.341-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Unfortunately, the only way to do this in a way th...</title><content type='html'>Unfortunately, the only way to do this in a way that is meaningful for ASP.NET is to actually change the third-party library so that it supports async methods. Task.Run is an acceptable workaround for UI apps in this situation, but it&amp;#39;s pointless for ASP.NET.&lt;br /&gt;&lt;br /&gt;You&amp;#39;ll need to contact the library maintainers and ask them for async support. In the meantime, just call it synchronously (&amp;quot;var success = ConvertToTiff(filename)&amp;quot;). ASP.NET will work fine if your threads do block - and it handles that situation very well - it just won&amp;#39;t scale as well as an actual asynchronous method.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/662770088777772216'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/662770088777772216'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html?showComment=1398284921341#c662770088777772216' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/5412778358566070587'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2396756946080501609' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2396756946080501609' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 4:28:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3934218677060682397</id><published>2014-04-23T16:52:26.267-04:00</published><updated>2014-04-23T16:52:26.267-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That&amp;#39;s what I figured. Thanks for the validati...</title><content type='html'>That&amp;#39;s what I figured. Thanks for the validation and the quick reply! The other alternative I suppose is to offload to a queue that another app/process handles. But that&amp;#39;s overkill for how much my service is being used.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/3934218677060682397'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/3934218677060682397'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html?showComment=1398286346267#c3934218677060682397' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/2396756946080501609/comments/default/5412778358566070587'/><author><name>Chris L</name><uri>http://www.blogger.com/profile/04045464984636938724</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2396756946080501609' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2396756946080501609' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-106871326'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 4:52:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4219845580019370518</id><published>2014-04-23T20:32:30.958-04:00</published><updated>2014-04-23T20:32:30.958-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Congratulations! Looking forward to reading it!</title><content type='html'>Congratulations! Looking forward to reading it!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/4219845580019370518'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/4219845580019370518'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-book.html?showComment=1398299550958#c4219845580019370518' title=''/><author><name>Markus Shultz</name><uri>http://www.blogger.com/profile/05596301073943475645</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-book.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8221701195557924801' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8221701195557924801' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1541381027'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, April 23, 2014 at 8:32:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4213683760781798391</id><published>2014-04-24T21:22:12.725-04:00</published><updated>2014-04-24T21:22:12.725-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Awesome! Keep it coming! I&amp;#39;m still working in ...</title><content type='html'>Awesome! Keep it coming! I&amp;#39;m still working in .Net 4.0 so this info will be of great interest.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6262298736420684770/comments/default/4213683760781798391'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6262298736420684770/comments/default/4213683760781798391'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/a-tour-of-task-part-0-overview.html?showComment=1398388932725#c4213683760781798391' title=''/><author><name>Alvin</name><uri>http://www.blogger.com/profile/03892201689252059476</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/a-tour-of-task-part-0-overview.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6262298736420684770' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6262298736420684770' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1305096067'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, April 24, 2014 at 9:22:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1946958365703504686</id><published>2014-04-25T12:04:31.864-04:00</published><updated>2014-04-25T12:04:31.864-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>If I used twitter I would have asked for Task.  I&amp;...</title><content type='html'>If I used twitter I would have asked for Task.  I&amp;#39;m looking forward to this series -- David</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6262298736420684770/comments/default/1946958365703504686'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6262298736420684770/comments/default/1946958365703504686'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/a-tour-of-task-part-0-overview.html?showComment=1398441871864#c1946958365703504686' title=''/><author><name>David</name><uri>http://www.blogger.com/profile/09358968282816697343</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='21' height='32' src='http://photos1.blogger.com/img/122/6879/640/davidbak-1.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/a-tour-of-task-part-0-overview.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6262298736420684770' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6262298736420684770' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1749953314'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 25, 2014 at 12:04:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6537548175931933229</id><published>2014-04-25T23:42:40.354-04:00</published><updated>2014-04-25T23:42:40.354-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Congratulations! By any change will it be made ava...</title><content type='html'>Congratulations! By any change will it be made available in eBook format?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/6537548175931933229'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/6537548175931933229'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-book.html?showComment=1398483760354#c6537548175931933229' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-book.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8221701195557924801' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8221701195557924801' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1069475401'/><gd:extendedProperty name='blogger.displayTime' value='Friday, April 25, 2014 at 11:42:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3561853548385290548</id><published>2014-04-26T05:35:47.895-04:00</published><updated>2014-04-26T05:35:47.895-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes; all of O&amp;#39;Reilly&amp;#39;s books are available...</title><content type='html'>Yes; all of O&amp;#39;Reilly&amp;#39;s books are available in eBook as well as Safari.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/3561853548385290548'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/3561853548385290548'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-book.html?showComment=1398504947895#c3561853548385290548' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/8221701195557924801/comments/default/6537548175931933229'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-book.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-8221701195557924801' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/8221701195557924801' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 26, 2014 at 5:35:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8819830824102140544</id><published>2014-04-26T14:47:11.844-04:00</published><updated>2014-04-26T15:14:14.277-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/8819830824102140544'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/8819830824102140544'/><author><name>anurag sahay</name><uri>http://www.blogger.com/profile/04914115527262751779</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-1241182067'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 26, 2014 at 2:47:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1883052270767362739</id><published>2014-04-26T15:33:55.437-04:00</published><updated>2014-04-26T15:33:55.437-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I would bring this piece of information way up in ...</title><content type='html'>I would bring this piece of information way up in the blog. ConfigureAwait(false) causes a lot of headaches because HttpContext.Current stops working.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1883052270767362739'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1883052270767362739'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1398540835437#c1883052270767362739' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1568140130053499492'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1742546881'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 26, 2014 at 3:33:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2599204209263111370</id><published>2014-04-26T17:13:12.913-04:00</published><updated>2014-04-26T17:13:12.913-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There&amp;#39;s no point in blocking on an asynchronou...</title><content type='html'>There&amp;#39;s no point in blocking on an asynchronous operation in ASP.NET. Take a step back and think about what you actually want to accomplish.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/2599204209263111370'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/2599204209263111370'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1398546792913#c2599204209263111370' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/1568140130053499492'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, April 26, 2014 at 5:13:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-625731956234627052</id><published>2014-04-28T17:50:01.952-04:00</published><updated>2014-04-28T17:50:01.952-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>you should have a look at Obtics - http://obtics.c...</title><content type='html'>you should have a look at Obtics - http://obtics.codeplex.com/</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/625731956234627052'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/625731956234627052'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html?showComment=1398721801952#c625731956234627052' title=''/><author><name>avivr</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1006372273324474106' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1006372273324474106' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2062932600'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 28, 2014 at 5:50:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-9102137477103250086</id><published>2014-04-28T19:21:54.609-04:00</published><updated>2014-04-28T19:21:54.609-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Looks interesting, but the last update was a beta ...</title><content type='html'>Looks interesting, but the last update was a beta version in 2009?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/9102137477103250086'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/9102137477103250086'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html?showComment=1398727314609#c9102137477103250086' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/625731956234627052'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1006372273324474106' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1006372273324474106' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, April 28, 2014 at 7:21:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5931754178838676012</id><published>2014-04-29T02:16:36.169-04:00</published><updated>2014-04-29T02:16:36.169-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>You&amp;#39;re right, it is a big disadvantage that it...</title><content type='html'>You&amp;#39;re right, it is a big disadvantage that it is no longer actively develop.&lt;br /&gt;The code and discussion forum was still under maintenance in 2012.&lt;br /&gt;We gave it a lot of testing in our company and use it in production for over a year now with no problems so far.&lt;br /&gt;The most interesting feature in our case is the Linq support, which enable very complex calculated properties.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/5931754178838676012'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/5931754178838676012'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html?showComment=1398752196169#c5931754178838676012' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/625731956234627052'/><author><name>avivr</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1006372273324474106' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1006372273324474106' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-767242196'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 29, 2014 at 2:16:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6614392042290461854</id><published>2014-04-29T07:55:55.057-04:00</published><updated>2014-04-29T07:55:55.057-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>They use a technique (expression tree evaluation) ...</title><content type='html'>They use a technique (expression tree evaluation) that I strongly considered when writing CalculatedProperties. My library will also work with LINQ as long as you&amp;#39;re using observable collections.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/6614392042290461854'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/6614392042290461854'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html?showComment=1398772555057#c6614392042290461854' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1006372273324474106/comments/default/625731956234627052'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/04/announcement-calculated-properties.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1006372273324474106' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1006372273324474106' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, April 29, 2014 at 7:55:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2115301621368849089</id><published>2014-05-02T09:17:54.291-04:00</published><updated>2014-05-02T09:17:54.291-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

I was hoping you could shed some ligh...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;I was hoping you could shed some light on my trouble detecting a half-open connection.&lt;br /&gt;&lt;br /&gt;I&amp;#39;m trying to heed all of the wisdom presented in this article as I&amp;#39;m tackling my first TCP server implementation. It&amp;#39;s probably a similar scenario to your &amp;quot;true story&amp;quot;, where there&amp;#39;s one server, just one client, and just one long-running connection. It&amp;#39;s exceedingly simple: every 20 minutes or so the client sends a small message, server receives it and sends back a simple response. So far, I&amp;#39;ve got my server using the Begin*/End* approach to receiving and sending. So, according to the advice I read in another one of your articles, there is always an asynchronous receive in effect: as soon as the read-processing is done, a BeginSend() is queued and we go back to BeginReceive. Elsewhere, I&amp;#39;ve got a 3 second timer that performs a non-blocking, synchronous, zero-length Send() test (as per MSDN). The head-scratching thing is, this test always succeeds--even when the network cable on the remote side is unplugged. I thought it was clear from this article that doing a send while there was a physical break in connection would quickly uncover the connection issue, and allow the server to close its socket, thereby preventing the half-open connection problem you described. What am I missing?&lt;br /&gt;&lt;br /&gt;Thanks for any help.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2115301621368849089'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2115301621368849089'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1399036674291#c2115301621368849089' title=''/><author><name>Bruce Stephenson</name><uri>http://www.blogger.com/profile/01321631245118583318</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-5usy9rUrZX8/AAAAAAAAAAI/AAAAAAAAAEw/q2Hcn46FHqI/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1339333905'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 9:17:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3601326062332733136</id><published>2014-05-02T09:54:59.286-04:00</published><updated>2014-05-02T09:54:59.286-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I&amp;#39;ll post comments on the SO question: http://...</title><content type='html'>I&amp;#39;ll post comments on the SO question: http://stackoverflow.com/questions/23429543/why-doesnt-a-zero-length-send-fail-on-a-bad-tcp-socket-connection&lt;br /&gt;&lt;br /&gt;However, I do not recommend zero-byte sends, MSDN docs notwithstanding. (As an aside, the MSDN examples for sockets are horrifyingly bad; at some point, I do plan to do a blog series just on fixing them). Zero-byte sends have to be special-cased through the network stack (which Microsoft does but other platforms do not), and any intermediate router is permitted to always drop those packets. So I consider this solution unreliable in the general case (i.e., the Internet).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3601326062332733136'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/3601326062332733136'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1399038899286#c3601326062332733136' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2115301621368849089'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 9:54:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7162428389670026441</id><published>2014-05-02T13:32:45.969-04:00</published><updated>2014-05-02T13:32:45.969-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen, 
That was me who posted on SO, so I&amp;#3...</title><content type='html'>Hi Stephen, &lt;br /&gt;That was me who posted on SO, so I&amp;#39;ll also pick it up over there. MSDN opinion noted. Thanks for your replies.&lt;br /&gt;Bruce</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7162428389670026441'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/7162428389670026441'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html?showComment=1399051965969#c7162428389670026441' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6580556256703872731/comments/default/2115301621368849089'/><author><name>Bruce Stephenson</name><uri>http://www.blogger.com/profile/01321631245118583318</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-5usy9rUrZX8/AAAAAAAAAAI/AAAAAAAAAEw/q2Hcn46FHqI/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/05/detection-of-half-open-dropped.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6580556256703872731' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6580556256703872731' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1339333905'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 1:32:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1833259607531810595</id><published>2014-05-02T19:23:28.056-04:00</published><updated>2014-05-02T19:23:28.056-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Stephen,

What about this stackoverflow thread ...</title><content type='html'>Hi Stephen,&lt;br /&gt;&lt;br /&gt;What about this stackoverflow thread (I see you commented on it): http://stackoverflow.com/questions/14700777/await-task-run-altering-trace-activityid-on-exit? The user seems to suggest that the activityid is not restored.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/1833259607531810595'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/1833259607531810595'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1399073008056#c1833259607531810595' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1438111755'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 7:23:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7397949171302515523</id><published>2014-05-02T20:02:30.496-04:00</published><updated>2014-05-02T20:02:30.496-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I believe Jon Wagner&amp;#39;s answer has the correct ...</title><content type='html'>I believe Jon Wagner&amp;#39;s answer has the correct analysis of that situation.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/7397949171302515523'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/7397949171302515523'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1399075350496#c7397949171302515523' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/1833259607531810595'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 8:02:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6879021718068960186</id><published>2014-05-02T20:16:40.805-04:00</published><updated>2014-05-02T20:16:40.805-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I see, thanks. So it&amp;#39;s something just specific...</title><content type='html'>I see, thanks. So it&amp;#39;s something just specific to ASP.NET or rather at what point the ExectionContext is captured.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/6879021718068960186'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/6879021718068960186'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1399076200805#c6879021718068960186' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/1833259607531810595'/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1438111755'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 8:16:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6185823999298820736</id><published>2014-05-02T21:55:04.582-04:00</published><updated>2014-05-02T21:55:04.582-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Will the Context also flow through to a Task.Run()...</title><content type='html'>Will the Context also flow through to a Task.Run() delegate inside the using(MyStack) block? Is it possible that the Dispose() is invoked before the work item is executed by the thread pool?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/6185823999298820736'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/6185823999298820736'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1399082104582#c6185823999298820736' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-739613795'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 9:55:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-850522982330968310</id><published>2014-05-02T22:21:13.456-04:00</published><updated>2014-05-02T22:21:13.456-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;Yes&amp;quot;, and &amp;quot;yes but it doesn&amp;#39;t ...</title><content type='html'>&amp;quot;Yes&amp;quot;, and &amp;quot;yes but it doesn&amp;#39;t matter&amp;quot;. When you call Task.Run, the context is *copied* to the thread pool thread. When Dispose is called on the original context, it doesn&amp;#39;t affect the context that was copied to the thread pool thread.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/850522982330968310'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/850522982330968310'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html?showComment=1399083673456#c850522982330968310' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1633479932453323878/comments/default/6185823999298820736'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1633479932453323878' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1633479932453323878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 2, 2014 at 10:21:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2800929055591081612</id><published>2014-05-03T09:20:39.895-04:00</published><updated>2014-05-03T09:20:39.895-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Stephen, thanks for another extremely helpful arti...</title><content type='html'>Stephen, thanks for another extremely helpful article. You&amp;#39;ve probably saved me much heartache for my upcoming field deployment. I&amp;#39;m intrigued by your True Story. I&amp;#39;ve been working in the automation industry for years, and I&amp;#39;m curious as to what that protocol was that you were referring to. Omron by any chance?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2800929055591081612'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2800929055591081612'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1399123239895#c2800929055591081612' title=''/><author><name>Bruce Stephenson</name><uri>http://www.blogger.com/profile/01321631245118583318</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-5usy9rUrZX8/AAAAAAAAAAI/AAAAAAAAAEw/q2Hcn46FHqI/s512-c/photo.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1339333905'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, May 3, 2014 at 9:20:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2100207414443561128</id><published>2014-05-03T13:20:47.999-04:00</published><updated>2014-05-03T13:20:47.999-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>That protocol was the client/server part of an app...</title><content type='html'>That protocol was the client/server part of an application for managing an AGV fleet. Only the client/server part had this problem; the server/AGV communications were fine.&lt;br /&gt;&lt;br /&gt;The company I worked for at the time was called Control Engineering Company, a part of Jervis B. Webb, which is now Daifuku Webb.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2100207414443561128'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2100207414443561128'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2009/04/message-framing.html?showComment=1399137647999#c2100207414443561128' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/3743268255103099119/comments/default/2800929055591081612'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2009/04/message-framing.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3743268255103099119' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3743268255103099119' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Saturday, May 3, 2014 at 1:20:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4451996794044248941</id><published>2014-05-04T23:49:10.845-04:00</published><updated>2014-05-04T23:49:10.845-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>A great read, as usual, thank you.</title><content type='html'>A great read, as usual, thank you.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2462095067454944211/comments/default/4451996794044248941'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/2462095067454944211/comments/default/4451996794044248941'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-msdn-article-on-async.html?showComment=1399261750845#c4451996794044248941' title=''/><author><name>Noseratio</name><uri>https://openid.stackexchange.com/user/bb76716e-e5c3-4167-8ac4-f54cd8ce1045</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/announcement-msdn-article-on-async.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-2462095067454944211' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/2462095067454944211' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-345199065'/><gd:extendedProperty name='blogger.displayTime' value='Sunday, May 4, 2014 at 11:49:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-4848632647498681742</id><published>2014-05-05T21:54:50.556-04:00</published><updated>2014-05-05T21:54:50.556-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for this information. Do you recommend sett...</title><content type='html'>Thanks for this information. Do you recommend setting .ConfigureAwait(false) for all async calls in case of multiple levels of async (e.g. GetStringAsync method calls dbContext.SaveChangesAsync(), so it should also do dbContext.SaveChangesAsync().ConfigureAwait(false)?).</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/4848632647498681742'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/4848632647498681742'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1399341290556#c4848632647498681742' title=''/><author><name>Doremon</name><uri>http://www.blogger.com/profile/14870211394909595410</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1548853115'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 5, 2014 at 9:54:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-329359777546096198</id><published>2014-05-06T08:16:22.559-04:00</published><updated>2014-05-06T08:16:22.559-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>The decision of whether to use ConfigureAwait(fals...</title><content type='html'>The decision of whether to use ConfigureAwait(false) is independent for each method. So, in your example, if GetStringAsync does not need the context after the call to SaveChangesAsync, then it should use ConfigureAwait(false). The same goes for the caller of GetStringAsync, etc.&lt;br /&gt;&lt;br /&gt;You&amp;#39;ll find that ConfigureAwait(false) ends up being in every async method that does not need the context. This can actually act like a kind of divider in your code; e.g., if a ConfigureAwait(false) method is in your UI layer, maybe it should move into a library; and if a non-ConfigureAwait(false) method is in a library or domain layer, then it should probably be moved out or refactored to use IProgress instead.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/329359777546096198'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/329359777546096198'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html?showComment=1399378582559#c329359777546096198' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1979708439934624727/comments/default/4848632647498681742'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1979708439934624727' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1979708439934624727' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 6, 2014 at 8:16:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6827504800577630923</id><published>2014-05-06T10:59:47.884-04:00</published><updated>2014-05-06T10:59:47.884-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the update. I bought one. :-)</title><content type='html'>Thanks for the update. I bought one. :-)</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/6827504800577630923'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/6827504800577630923'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html?showComment=1399388387884#c6827504800577630923' title=''/><author><name>Alvin</name><uri>http://www.blogger.com/profile/03892201689252059476</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6760138184967935242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6760138184967935242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1305096067'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 6, 2014 at 10:59:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8854774392686818428</id><published>2014-05-06T11:21:42.531-04:00</published><updated>2014-05-06T11:21:42.531-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks! I think that was my first sale!</title><content type='html'>Thanks! I think that was my first sale!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/8854774392686818428'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/8854774392686818428'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html?showComment=1399389702531#c8854774392686818428' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/6827504800577630923'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6760138184967935242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6760138184967935242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Tuesday, May 6, 2014 at 11:21:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-1581700671998275001</id><published>2014-05-07T10:29:28.417-04:00</published><updated>2014-05-07T10:29:28.417-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I don&amp;#39;t typically buy books, but I find your b...</title><content type='html'>I don&amp;#39;t typically buy books, but I find your blog valuable enough that I purchased one to support you. Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/1581700671998275001'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/1581700671998275001'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html?showComment=1399472968417#c1581700671998275001' title=''/><author><name>Josh</name><uri>http://www.blogger.com/profile/17002391409041849552</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6760138184967935242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6760138184967935242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1589239686'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 7, 2014 at 10:29:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3710610903233050081</id><published>2014-05-07T13:17:38.115-04:00</published><updated>2014-05-07T13:17:38.115-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks!</title><content type='html'>Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/3710610903233050081'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/3710610903233050081'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html?showComment=1399483058115#c3710610903233050081' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/6760138184967935242/comments/default/1581700671998275001'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/announcement-concurrency-in-c-early.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-6760138184967935242' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/6760138184967935242' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Wednesday, May 7, 2014 at 1:17:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-8285231665300599177</id><published>2014-05-09T16:18:09.582-04:00</published><updated>2014-05-09T16:18:09.582-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>So, to ask the stupid person question here, why wo...</title><content type='html'>So, to ask the stupid person question here, why would I choose one or the other?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7278365983033813064/comments/default/8285231665300599177'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7278365983033813064/comments/default/8285231665300599177'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html?showComment=1399666689582#c8285231665300599177' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7278365983033813064' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7278365983033813064' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-513848580'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 9, 2014 at 4:18:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-870101448116880014</id><published>2014-05-09T16:45:54.835-04:00</published><updated>2014-05-09T16:45:54.835-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Actually, that&amp;#39;s a very good question - one th...</title><content type='html'>Actually, that&amp;#39;s a very good question - one that I haven&amp;#39;t really addressed anywhere else. I would say use AsyncSemaphore (or AsyncLock) if you&amp;#39;re already using AsyncEx or if the asynchronous methods on SemaphoreSlim are not available on your platform (check out the MSDN links in this post to see which platforms they support).&lt;br /&gt;&lt;br /&gt;In situations where you have SemaphoreSlim available (and you&amp;#39;re not already using AsyncEx), then I would use SemaphoreSlim. SemaphoreSlim has slightly more awkward usage because you have to use a finally block instead of using, but it&amp;#39;s not hard to write a disposable type that cleans that up.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7278365983033813064/comments/default/870101448116880014'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7278365983033813064/comments/default/870101448116880014'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html?showComment=1399668354835#c870101448116880014' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7278365983033813064/comments/default/8285231665300599177'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2013/04/cancellationtoken-behavior-with-asyncex.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7278365983033813064' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7278365983033813064' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 9, 2014 at 4:45:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3617634884942149560</id><published>2014-05-12T16:21:49.243-04:00</published><updated>2014-05-12T16:21:49.243-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Had to read it a few times, but got there in the e...</title><content type='html'>Had to read it a few times, but got there in the end. Thanks. Helpful article.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3617634884942149560'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3617634884942149560'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1399926109243#c3617634884942149560' title=''/><author><name>Jamie</name><uri>http://www.blogger.com/profile/14915898789982949517</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-353383974'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 12, 2014 at 4:21:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7415176621589504715</id><published>2014-05-12T19:45:56.916-04:00</published><updated>2014-05-12T19:45:56.916-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, there&amp;#39;s actually a fair amount of informa...</title><content type='html'>Yes, there&amp;#39;s actually a fair amount of information that has to all fit together before you really get it. Glad it helped!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7415176621589504715'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/7415176621589504715'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/02/async-and-await.html?showComment=1399938356916#c7415176621589504715' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/7596207631806694806/comments/default/3617634884942149560'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/02/async-and-await.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-7596207631806694806' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/7596207631806694806' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Monday, May 12, 2014 at 7:45:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-7799338616659924225</id><published>2014-05-15T02:48:55.378-04:00</published><updated>2014-05-15T02:48:55.378-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for this piece of code!
Hint: In recent ...</title><content type='html'>Thank you for this piece of code!&lt;br /&gt;Hint: In recent versions of AsyncEx NotifyOne() was renamed to Notify()</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4941921752221936379/comments/default/7799338616659924225'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/4941921752221936379/comments/default/7799338616659924225'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-2-more.html?showComment=1400136535378#c7799338616659924225' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-2-more.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-4941921752221936379' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/4941921752221936379' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1806886726'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, May 15, 2014 at 2:48:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-2747993869253404168</id><published>2014-05-15T02:49:19.083-04:00</published><updated>2014-05-15T02:49:19.083-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for this piece of code!
Hint: In recent ...</title><content type='html'>Thank you for this piece of code!&lt;br /&gt;Hint: In recent versions of AsyncEx NotifyOne() was renamed to Notify()</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3334971307928185199/comments/default/2747993869253404168'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/3334971307928185199/comments/default/2747993869253404168'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-3-more.html?showComment=1400136559083#c2747993869253404168' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2012/12/async-producer-consumer-queue-3-more.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-3334971307928185199' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/3334971307928185199' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1806886726'/><gd:extendedProperty name='blogger.displayTime' value='Thursday, May 15, 2014 at 2:49:00 AM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-6920746444491705919</id><published>2014-05-16T13:35:44.163-04:00</published><updated>2014-05-16T13:35:44.163-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the article, Stephen. I agree, task con...</title><content type='html'>Thanks for the article, Stephen. I agree, task constructors are useful  (only?) for delayed task scheduling. &lt;br /&gt;I am using task constructor as a workaround for some problems with task scheduling in my BOOST ASIO .Net.&lt;br /&gt;&lt;br /&gt;https://bitbucket.org/renestein/rstein.async/src/06551e00773c6adbf807c4b4e6b685adde858cc4?at=master&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1859181995861572665/comments/default/6920746444491705919'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1859181995861572665/comments/default/6920746444491705919'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html?showComment=1400261744163#c6920746444491705919' title=''/><author><name>René Stein</name><uri>http://www.blogger.com/profile/17167694673352636541</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='30' src='http://1.bp.blogspot.com/-QdMn6J8ALNc/TvMCenSBvrI/AAAAAAAAAT4/XohXlRm9AFk/s220/sfinga.jpg'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1859181995861572665' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1859181995861572665' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1997786255'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 16, 2014 at 1:35:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-5291757058612497299</id><published>2014-05-16T14:04:34.603-04:00</published><updated>2014-05-16T14:04:34.603-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Actually, I prefer using Func for delayed scheduli...</title><content type='html'>Actually, I prefer using Func for delayed scheduling. Thanks for reminding me of that!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1859181995861572665/comments/default/5291757058612497299'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1859181995861572665/comments/default/5291757058612497299'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html?showComment=1400263474603#c5291757058612497299' title=''/><link rel='related' type='application/atom+xml' href='http://www.blogger.com/feeds/7297021906893122222/1859181995861572665/comments/default/6920746444491705919'/><author><name>Stephen Cleary</name><uri>http://www.blogger.com/profile/13192873941258824056</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/-R32ozBNgxoI/UX_U3ZzCZsI/AAAAAAAAIoQ/okLErCVH3EU/s220/_HPIM0736-001.JPG'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1859181995861572665' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1859181995861572665' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-738083169'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 16, 2014 at 2:04:00 PM EDT'/></entry><entry><id>tag:blogger.com,1999:blog-7297021906893122222.post-3041343784507848251</id><published>2014-05-16T20:32:26.332-04:00</published><updated>2014-05-16T20:32:26.332-04:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>​A great article, thanks. I once answered a questi...</title><content type='html'>​A great article, thanks. I once answered a question where I used a Task constructor to simulate a promise-style task: http://stackoverflow.com/q/22704575/1768303. It was admittedly contrived but still interesting.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1859181995861572665/comments/default/3041343784507848251'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/7297021906893122222/1859181995861572665/comments/default/3041343784507848251'/><link rel='alternate' type='text/html' href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html?showComment=1400286746332#c3041343784507848251' title=''/><author><name>Noseratio</name><uri>http://stackoverflow.com/users/1768303/noseratio</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.stephencleary.com/2014/05/a-tour-of-task-part-1-constructors.html' ref='tag:blogger.com,1999:blog-7297021906893122222.post-1859181995861572665' source='http://www.blogger.com/feeds/7297021906893122222/posts/default/1859181995861572665' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-498778023'/><gd:extendedProperty name='blogger.displayTime' value='Friday, May 16, 2014 at 8:32:00 PM EDT'/></entry></feed>